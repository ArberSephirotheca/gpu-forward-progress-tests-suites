#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))) - (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))))), uvec3(_GLF_IDENTITY(uvec3(~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(1u, 1u, 1u) * (uvec3(~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    {
    }
   else
    {
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), 0u, 1u, 0u), (true ? uvec4((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u))))), 1u, 0u) : _GLF_FUZZED(uvec4(189958u, 53046u, 116090u, 38875u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), 0u ^ ((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))), max(workgroup_base, workgroup_base)))))) >> 0u))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))), workgroup_base))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_base) : workgroup_base)), workgroup_base, workgroup_base)), max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))))))))))))) << 0u) + 0u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), 0u, 1u, 0u), (true ? uvec4((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u))))), 1u, 0u) : _GLF_FUZZED(uvec4(189958u, 53046u, 116090u, 38875u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), 0u ^ ((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))), max(workgroup_base, workgroup_base)))))) >> 0u))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))), workgroup_base))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_base) : workgroup_base)), workgroup_base, workgroup_base)), max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))))))))))))) << 0u) + 0u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u), uvec2(uvec3(uvec2(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), 0u, 1u, 0u), (true ? uvec4((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u))))), 1u, 0u) : _GLF_FUZZED(uvec4(189958u, 53046u, 116090u, 38875u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), 0u ^ ((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))), max(workgroup_base, workgroup_base)))))) >> 0u))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))), workgroup_base))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_base) : workgroup_base)), workgroup_base, workgroup_base)), max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))))))))))))) << 0u) + 0u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | 0u, min((subgroup_local_id) | 0u, _GLF_IDENTITY((subgroup_local_id), (true ? _GLF_IDENTITY((subgroup_local_id), uint(uvec2(_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))), 0u))) : _GLF_FUZZED(atomicAdd(workgroup_base, subgroup_size)))) | 0u))) + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u)))) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) * ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) >> uvec3(0u, 0u, 0u)), uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u)) - 0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) ^ 0u)), (~ (_GLF_IDENTITY(0u, (0u) ^ 0u))) * 1u)))), (uint(0u)) << 0u), uint(0u))), _GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u)))))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), float(_GLF_FUZZED(-4.9)), bool(false))), injectionSwitch.x)), 0u))), (false ? _GLF_FUZZED(uvec3(180864u, 112032u, 140584u)) : _GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | 0u, min((subgroup_local_id) | 0u, _GLF_IDENTITY((subgroup_local_id), (true ? _GLF_IDENTITY((subgroup_local_id), uint(uvec2(_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))), 0u))) : _GLF_FUZZED(atomicAdd(workgroup_base, subgroup_size)))) | 0u))) + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), min(_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u)))) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) * ((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) / 1u)))) >> _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), min(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) >> uvec3(0u, 0u, 0u)), uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u)) - 0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) ^ 0u)), (~ (_GLF_IDENTITY(0u, (0u) ^ 0u))) * 1u)))), (uint(0u)) << 0u), uint(0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), (true ? _GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_size)))))) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), float(_GLF_FUZZED(-4.9)), bool(false))), injectionSwitch.x)), 0u)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) + 0u))) ^ ((subgroup_size))) | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(2688.2292, 992.970)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)), 0u), min(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), _GLF_IDENTITY((~ (subgroup_size)), (true ? (~ (subgroup_size)) : _GLF_FUZZED(uvec2(176993u, 118574u).g))))))), max((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u ^ ((subgroup_local_id + 1) % subgroup_size))), min(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u | (((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), uint(uint(((subgroup_local_id + 1) % subgroup_size)))))), ((subgroup_local_id + 1) % subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), min(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(subgroup_id))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | 0u, uint(_GLF_IDENTITY(uvec2((0u) | 0u, 1u), clamp(uvec2((0u) | 0u, 1u), uvec2((0u) | 0u, 1u), uvec2((0u) | 0u, 1u))))))), uvec3(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-4.9)), mix(float(_GLF_FUZZED(-337.660)), float(float(_GLF_FUZZED(-4.9))), bool(true))), _GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))))), 1.0 * (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-4.9)), mix(float(_GLF_FUZZED(-337.660)), float(float(_GLF_FUZZED(-4.9))), bool(true))), _GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))))), 1.0 * (mix(float(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-4.9)), mix(float(_GLF_FUZZED(-337.660)), float(float(_GLF_FUZZED(-4.9))), bool(true))), _GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))))))))))))), injectionSwitch.x)), 0u)))), (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ~ (~ (subgroup_size))))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : subgroup_size)), subgroup_size)), subgroup_size))), max(_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? (subgroup_size) : _GLF_FUZZED(workgroup_base))), (subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))))) ^ 0u), 0u | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))), uint(uint((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))))))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))), uint(uint((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))), uint(uint((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))))))), uint(uvec3(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))), uint(uint((_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))))))), 0u, 0u)))))))) ^ 0u)))) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ~ (~ (subgroup_size))))), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), max((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)))) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))))))))) >> 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), ~ (~ (subgroup_size))))), ~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_size))) ^ 0u)) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) / 1u)) | (uint(0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) ^ 0u)) | (_GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) | (_GLF_IDENTITY(uint(0u), uint(0u)))))), ~ (~ (subgroup_size)))))))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(max((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), (max((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))) >> ((+ 169096u) & 0u))))), _GLF_IDENTITY(~ (~ (subgroup_size)), ~ (~ (~ (~ (subgroup_size)))))))))) + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), min(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))).x)))), 0u), min(uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u))) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 0u)))), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), float(_GLF_FUZZED(-4.9)), bool(false))), injectionSwitch.x)), 0u))))) - 0u)) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), _GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) - 0u))))))) + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), ~ (~ (subgroup_size))))) + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)), min(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_id * subgroup_size, uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), subgroup_size)), max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), 0u, (0u ^ 0u), 0u))))) + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), uint(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))))), 0.0, 0.0)), 0.0 + (0.0))), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5.3)), bool(false))), 0.0, 0.0))))) - 0.0), 0.0 + (0.0))) : _GLF_FUZZED(-8502.2598))), float(_GLF_FUZZED(-4.9)), bool(false))), injectionSwitch.x)), 0u)))))));
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = (-62378 & (0 >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true), true, true))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true))) && true)), false || (! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 1.0), (mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 1.0)) * mat3(1.0))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec4(bvec3(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))))))) && true))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)), false))))), true))))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true)))))), _GLF_IDENTITY(true, ! (! (true))))))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true)))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true))))))))))))))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(4798.4753))) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), exp(0.0), 0.0, cos(0.0), 0.0, log(1.0), sin(0.0)))).y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(43722) : int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(3664.6943) : _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(int(ivec2(~ (_injected_loop_counter), 1)), (int(ivec2(~ (_injected_loop_counter), 1))) * 1)))) < 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec3(! (! (_GLF_DEAD(false))), true, true), bvec3(bvec4(bvec3(! (! (_GLF_DEAD(false))), true, true), false)))))))
      continue;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 + 1), _GLF_IDENTITY(4, 0 | (4)), 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) - 0u, uint(uvec3((virtual_gid) - 0u, 0u, 0u)))), (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))) | 0u), (virtual_gid) - 0u)) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), uint(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), 1u, 0u, 1u)))))) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), 0u, 1u)))], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, _GLF_IDENTITY((false ? _GLF_FUZZED(56051) : 64), ((false ? _GLF_FUZZED(56051) : 64)) ^ 0)), _GLF_IDENTITY(64, (64) | 0))), 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-17458)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) | (0)))), clamp(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), ((0) | (0)) >> 0)))), _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) | (0)))), _GLF_IDENTITY(0, _GLF_IDENTITY(1 * (_GLF_IDENTITY(0, (0) | (0))), (1 * (_GLF_IDENTITY(0, (0) | (0)))) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) >> 0) ^ 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(_injected_loop_counter))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                  {
                   do
                    {
                     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
                          {
                           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec2(_GLF_IDENTITY(read_1 + 1, uint(uint(read_1 + 1))), 0u))) == read_2, _GLF_IDENTITY(bool(bool(read_1 + 1 == read_2)), bool(_GLF_IDENTITY(bvec2(bool(bool(read_1 + 1 == read_2)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(bool(bool(read_1 + 1 == read_2)), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bool(bool(read_1 + 1 == read_2)), true), false)), false, true))))))), ! (! (read_1 + 1 == read_2)))))) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(read_1 + 1 == read_2), ~ (~ (uint(read_1 + 1 == read_2)))), (99671u & 0u)), (uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + 1 == read_2) || false), ! (! (read_1 + 1 == read_2)))), _GLF_IDENTITY(~ (~ (uint(read_1 + 1 == read_2))), clamp(~ (~ (uint(read_1 + 1 == read_2))), _GLF_IDENTITY(~ (~ (uint(read_1 + 1 == read_2))), clamp(~ (~ (uint(read_1 + 1 == read_2))), ~ (~ (uint(read_1 + 1 == read_2))), ~ (~ (uint(read_1 + 1 == read_2))))), ~ (~ (uint(read_1 + 1 == read_2)))))), (99671u & 0u))) + uvec2(0u, 0u)))) + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)) + 1, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)) + 1, (_GLF_IDENTITY(read_1, (read_1) | (read_1)) + 1) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) == read_2), (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(next_virtual_gid) : uint(read_1 + 1 == _GLF_IDENTITY(read_2, (true ? _GLF_IDENTITY(read_2, (read_2) << 0u) : _GLF_FUZZED(next_virtual_gid))))))) | (uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u) + 1 == _GLF_IDENTITY(read_2, uint(uint(_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2)))))))) + 1, _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) | (_GLF_IDENTITY(uint(read_1 + 1 == read_2), uint(uvec2(uint(_GLF_IDENTITY(read_1, (read_1) * 1u) + 1 == read_2), 0u))))) + 1)), _GLF_IDENTITY(uint(read_1 + 1 == _GLF_IDENTITY(read_2, clamp(read_2, read_2, _GLF_IDENTITY(read_2, ~ (~ (read_2)))))) + 1, (uint(read_1 + 1 == read_2) + 1) - 0u))), 4, 64, 4);
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bool((_GLF_IDENTITY(false, true && (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), (injectionSwitch.x > injectionSwitch.y))), false, false, false)), (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), (injectionSwitch.x > injectionSwitch.y))), false, false, false))) && true))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))))) || _GLF_IDENTITY((false), ((false)) || false)), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))))))))))))))))))), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true)) || false) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), min(_GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))))), (! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) && true)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false || ((! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(24.76)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))))))))) || false))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), true, false))))));
               for(int _injected_loop_counter = (0 & -16305); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED((12699 * _injected_loop_counter)) : int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED((12699 * _injected_loop_counter)) : int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(4), int(4))) | 0)) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, (1 | 1)))))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0))); _injected_loop_counter --)
                    {
                     subgroupAll(false);
                    }
                  }
                }
              }
             else
              {
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(7, 0 + (7)), 7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(int(_injected_loop_counter)), (_GLF_IDENTITY(int(int(_injected_loop_counter)), (int(_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) ^ 0))) * 1)) + 0)) > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                                      {
                                      }
                                     else
                                      {
                                       return;
                                      }
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 & -9673), ((0 & -9673)) | ((0 & -9673)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ! (! ((true)))))))) || false), ! (! (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ! (! ((true)))))))) || false)))) && true, ! (! ((true) && true))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1), max(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), min(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))), 1), clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (1))))), _GLF_IDENTITY(1, (1) | (1)), 1)))), min(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1), max(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), min(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))), 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (1))))), (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (1)))))) << 0), _GLF_IDENTITY(1, (1) | (1)), 1)))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_injected_loop_counter)))) | (1)), _GLF_IDENTITY(1, (1) | (1)), 1), max(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), min(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))), 1), clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), clamp(_GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter))))) : ~ (1))))), _GLF_IDENTITY(1, (1) | (1)), 1)))))), min(read_1 + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1)), read_1 + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1)))) == read_2) + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0)))), int(ivec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, (0 | (1 & 1)), 0), (false ? _GLF_FUZZED(ivec3(-70399, -46352, -38364)) : _GLF_IDENTITY(ivec3(1, (0 | (1 & 1)), 0), ivec3(1, 1, 1) * (ivec3(1, _GLF_IDENTITY((0 | (1 & 1)), 0 | ((0 | (1 & 1)))), 0))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec4(ivec3(1, (0 | (1 & 1)), 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (1))), (ivec4(ivec3(1, (0 | (1 & 1)), 0), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) >> 0) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) >> 0) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))))) ^ 0))))) + ivec4(0, 0, 0, 0))), min(ivec3(_GLF_IDENTITY(ivec4(ivec3(1, (0 | (1 & 1)), 0), 1), (ivec4(ivec3(1, (0 | (1 & 1)), 0), 1)) + ivec4(0, 0, 0, 0))), ivec3(_GLF_IDENTITY(ivec4(ivec3(1, (0 | (1 & 1)), 0), 1), (ivec4(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), (0 | (1 & 1)), 0), 1)) + ivec4(0, 0, 0, 0))))), ivec3(0, 0, 0) + (ivec3(_GLF_IDENTITY(ivec4(ivec3(1, (0 | (1 & 1)), 0), 1), (ivec4(ivec3(1, _GLF_IDENTITY((0 | (1 & 1)), ((0 | (_GLF_IDENTITY(1, clamp(1, 1, 1)) & 1))) >> 0), 0), 1)) + ivec4(0, 0, 0, 0))))))), ~ (~ (int(_GLF_IDENTITY(ivec3(1, (0 | (1 & 1)), 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec4(ivec3(1, (0 | (1 & 1)), 0), 1), (ivec4(ivec3(1, (0 | (1 & 1)), 0), 1)) + ivec4(0, 0, 0, 0))), ivec3(0, 0, _GLF_IDENTITY(0, (0) - ((0 >> _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(7), int(7))))) + (ivec3(_GLF_IDENTITY(ivec4(ivec3(1, (0 | (1 & 1)), 0), 1), (ivec4(ivec3(1, (0 | (1 & 1)), 0), 1)) + ivec4(0, 0, 0, 0))))))))))), min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-10696) : 1)), (1) | 0)))), 1)))) ^ 0))), 4, 64, 4);
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false))))))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false)))))))) && true), bool(bool(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false)), false))))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false)))))), false, false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ! (! ((false)))), (true && _GLF_IDENTITY((false), ! (! ((false))))) && true)), true), false)))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false)))))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))), false)))), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))), true), false)))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false)))))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))), false)))), true, false)), false))))))))))), bool(bool(false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), ! (! ((bool(false)))))))))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))))), bool(bool((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) || false)) || false))))))), false || (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))))))) || false))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), false || ((_GLF_IDENTITY(false, bool(bool(false)))))), false || (! (_GLF_IDENTITY(false, bool(bool(false))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false))))), true))))))))))) || _GLF_IDENTITY(false, (false) || false)))))))));
                      }
                    }
                   else
                    {
                    }
                  }
                }
               subgroupAll(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec4(2.4, 616.733, -62.54, -34.26).w)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec2(bool(false), false)), (bool(bvec2(bool(false), false))) && true)))) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))), 0.0, 1.0, 0.0)) * mat2(1.0))))), _GLF_IDENTITY(float(mat2x4(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))), 0.0, 1.0, 0.0)) * mat2(1.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, sin(0.0))), float(float(float(mat2x4(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))), 0.0, 1.0, 0.0)) * mat2(1.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, sin(0.0)))))))), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + 0.0)), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + 0.0)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + 0.0)))), injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec4(2.4, 616.733, -62.54, -34.26).w)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec2(bool(false), false)), (bool(bvec2(bool(false), false))) && true)))) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))), 0.0, 1.0, 0.0)) * mat2(1.0))))), _GLF_IDENTITY(float(mat2x4(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))), 0.0, 1.0, 0.0)) * mat2(1.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, sin(0.0))), float(float(float(mat2x4(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))), 0.0, 1.0, 0.0)) * mat2(1.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, sin(0.0)))))))), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + 0.0)), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + 0.0)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + 0.0)))), injectionSwitch.y)))))))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat2x4((injectionSwitch), 0.0, sqrt(0.0), 1.0, 0.0, sqrt(0.0), 1.0), (mat2x4((injectionSwitch), 0.0, sqrt(0.0), 1.0, 0.0, sqrt(0.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(! ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true))))) || false), true), false, true)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - log(vec2(1.0, 1.0))) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)), (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)), (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)), (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true), false, true)))), true)))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, ~ (~ (0)))), 1 * (0)), int(_GLF_ONE(1.0, injectionSwitch.y))))) | _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0))))), 0 | (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
