#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.y = subgroup_id;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z + subgroup_local_id;
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.w = virtual_gid;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z + ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.w], 4, 64, 0);
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.w], 4, 64, 0);
 do
  {
   GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.x = read_2;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(subgroup_local_id + 1 < GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 atomicStore(buf[next_virtual_gid], uint(read_1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.x) + 1, 4, 64, 4);
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               subgroupAll(false);
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.x) + 1, 4, 64, 4);
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       subgroupAll(true);
      }
    }
  }
 else
  {
  }
}
