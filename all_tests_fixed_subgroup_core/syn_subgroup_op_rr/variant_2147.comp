#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 bool _f0;
 mat4 _f1;
 uvec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_14 {
 uint _f0;
 mat4 _f1;
 mat2 _f2;
 bvec2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 ivec2 _f1;
 bool _f2;
 uvec4 _f3;
 uvec4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 bvec4 _f2;
 _GLF_struct_15 _f3;
} ;

struct _GLF_struct_11 {
 bool _f0;
 float _f1;
 mat2x4 _f2;
 uint _f3;
 mat2 _f4;
} ;

struct _GLF_struct_10 {
 mat2x4 _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 mat2x3 _f2;
 vec2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_17 {
 _GLF_struct_12 _f0;
 uint subgroup_local_id;
 _GLF_struct_16 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 uvec4 _f1;
 mat4 _f2;
 vec2 _f3;
 vec4 _f4;
 mat2x3 _f5;
 uint _f6;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 _GLF_struct_7 _f1;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
 vec3 _f1;
 uvec2 _f2;
 mat4x3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 uvec3 _f1;
 uvec3 _f2;
 int _f3;
 ivec4 _f4;
 vec4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 uvec2 _f1;
 ivec3 _f2;
 _GLF_struct_5 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 uvec2 _f1;
 uvec3 _f2;
 bvec4 _f3;
 bool _f4;
 mat4x3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_0 {
 float _f0;
 mat4 _f1;
 ivec3 _f2;
 mat4x2 _f3;
 vec4 _f4;
 int _f5;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_3 _f0;
 bvec2 _f1;
 uint subgroup_id;
 _GLF_struct_6 _f2;
 _GLF_struct_8 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true) ? _GLF_FUZZED(degrees(1.8)) : injectionSwitch.x)) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(0, 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) / 1, ((int(1)) / 1) ^ 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (int(6)) / 1)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-55.35)))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))))))) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1)) & 1), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(1, clamp(1, 1, 1)) & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), min((0 << _GLF_IDENTITY(int(3), int(3))), (0 << _GLF_IDENTITY(int(3), int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))) / 1)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false))));
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_3(bvec4(true), _GLF_struct_0(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mat4(1.0), ivec3(1), mat4x2(1.0), vec4(1.0), 1), _GLF_struct_1(mat2x3(1.0), mat2x4(1.0), vec4(1.0), mat4x2(1.0)), _GLF_struct_2(bvec2(true), uvec2(1u), uvec3(1u), bvec4(true), true, mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), float(vec4(float(vec2(1.0, 1.0)), 1.0, 0.0, 1.0))))), vec4(1.0)), uvec4(1u)), bvec2(true), gl_SubgroupID, _GLF_struct_6(_GLF_struct_4(mat4x2(1.0), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), 1, ivec4(1), vec4(1.0), mat3x4(1.0)), uvec2(1u), ivec3(1), _GLF_struct_5(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(65.06) : 0.0)), 0.0)), vec3(1.0), uvec2(1u), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))), _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), transpose(transpose(_GLF_IDENTITY(transpose(mat2(1.0)), (true ? _GLF_IDENTITY(transpose(mat2(1.0)), (transpose(mat2(1.0))) * mat2(1.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(-5595.7663, -20.52, -37.15, 541.622), (false ? _GLF_FUZZED((mat2(8599.5351, 8.0, -3.2, 1752.1456) / mat2(8.9, -3800.4361, 493.990, 196.540))) : _GLF_IDENTITY(mat2(-5595.7663, -20.52, -37.15, 541.622), mat2(_GLF_IDENTITY(mat3(mat2(-5595.7663, -20.52, -37.15, 541.622)), mat3(mat3x4(mat3(mat2(-5595.7663, -20.52, -37.15, 541.622)))))))))))))))))), (mat2(mat2(1.0))) - mat2(0.0, 0.0, 0.0, 0.0))))), ivec3(_GLF_IDENTITY(1, min(1, 1)))), _GLF_struct_8(ivec2(1), _GLF_struct_7(mat4x2(1.0), uvec4(1u), mat4(1.0), vec2(1.0), vec4(1.0), mat2x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))))))))), bool(bvec3((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))))))))), true, false))), bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))))))))), bool(bvec3((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))))))))), true, false))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))))))))), bool(bvec3((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false, false, true)))))))))))))))), true, false))))), true, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))) ? 1u : _GLF_FUZZED(146227u))))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), (int(7)) >> 0), (_GLF_IDENTITY(int(7), (int(7)) >> 0)) - 0))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)), false, false, false)))))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4671.1843)), bool(false))))))) < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_12(_GLF_struct_10(mat2x4(1.0)), _GLF_struct_11(true, 1.0, mat2x4(1.0), 1u, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(false ? _GLF_FUZZED(mat2(2.4, 3.2, 426.986, 7.4)) : mat2(1.0), mat2(mat4(false ? _GLF_FUZZED(mat2(2.4, 3.2, 426.986, 7.4)) : mat2(1.0))))))), mat2x3(1.0), vec2(1.0), uvec2(1u)), gl_SubgroupInvocationID, _GLF_struct_16(_GLF_struct_13(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-3.1 - (3407.2950 - -333.291)))), bool(false)))), vec4(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(vec4(1.0), min(vec4(1.0), vec4(1.0))))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, clamp(_GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)), (1.0) - 0.0, (1.0) - 0.0))))), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0)))))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), 0.0)), clamp(_GLF_IDENTITY(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(vec4(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, clamp(_GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)), (1.0) - 0.0, (_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))) - 0.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-9.3, 4.7, 65.63, 7129.0052, 1423.2721, -1836.6694, -1637.9621, -36.86, -5.4, 2096.0599, 3192.5978, -5.3, -253.441, -0.8, -8.6, 909.678)) : mat4(0.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0)))), mix(float(_GLF_FUZZED(162.053)), float(float(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-9.3, 4.7, 65.63, 7129.0052, 1423.2721, -1836.6694, -1637.9621, -36.86, -5.4, 2096.0599, 3192.5978, -5.3, -253.441, -0.8, -8.6, 909.678)) : mat4(0.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(1.0), 1.0, 1.0, 0.0))))), bool(true))))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0)))))), 1.0, determinant(mat2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), 0.0)), vec4(mat4(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(vec4(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, clamp(_GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)), (1.0) - 0.0, (1.0) - 0.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) + _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(71.63)))), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))), dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-52.60)), bool(false))), 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 1.0, 1.0, 0.0, 1.0))), vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(vec4(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, clamp(_GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)), (1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, float(vec4((1.0) - 0.0, 0.0, 1.0, 0.0)))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0)))))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), 0.0)), vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(vec4(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, clamp(_GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0)), (1.0) - 0.0, (1.0) - 0.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0)), max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0)), (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0))) / 1.0)))), float(mat2(min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(17.71) : 0.0))), 1.0, 0.0, 1.0)))))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), float(_GLF_IDENTITY(vec2(sqrt(1.0), 1.0), vec2(mat2x4(vec2(sqrt(1.0), 1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), 0.0))))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(fma(-5862.5080, _GLF_IDENTITY(148.042, (148.042) + 0.0), _GLF_IDENTITY(271.903, float(_GLF_IDENTITY(vec3(271.903, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), max(vec3(271.903, 1.0, 1.0), vec3(271.903, 1.0, 1.0))))))) : 1.0)), 0.0), (mat3x2(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.3))), (_GLF_IDENTITY(1.0, (1.0) * 1.0)) * 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED((false ? 2401.6447 : -609.038)), float(mat4(_GLF_FUZZED((false ? 2401.6447 : -609.038)), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 1.0)))), bool(false)))))), 0.0, 1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (mat2(0.0, 0.0, 0.0, 0.0)) + _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (true ? mat2(0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(2.5, -1.1, -767.934, -2276.0379)))))), 1.0, 0.0, 0.0, sqrt(1.0), 0.0))), 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), clamp(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)))), 0.0)))), ivec2(1), true, uvec4(1u), uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((1u) + uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, 1.0))), 0.0, 0.0, 1.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, 1.0))), 0.0, 0.0, 1.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(log(1.0), 0.0, 1.0))), 0.0, 0.0, 1.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)))))))), _GLF_IDENTITY(0u | ((1u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), (0u | ((1u) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(7u), uint(7u)))))) ^ 0u))), ivec4(1)), _GLF_struct_14(1u, mat4(1.0), _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-88.73)), bool(false))), 1.0, 1.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0) : _GLF_FUZZED(mat2(1.4, -0.7, 8.4, -7241.7856))))), transpose(transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-7.2, -4.1, -71.57, 4.1)) : _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat3x2(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0))), mat3x2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))), 0.0, 0.0) + (mat3x2(mat2(1.0)))))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0) : _GLF_FUZZED(mat2(1.4, -0.7, 8.4, -7241.7856))), _GLF_IDENTITY((false ? _GLF_FUZZED(mat2(1382.4983, -16.34, -65.00, -16.38)) : (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0) : _GLF_FUZZED(mat2(1.4, -0.7, 8.4, -7241.7856)))), ((false ? _GLF_FUZZED(mat2(1382.4983, -16.34, -65.00, -16.38)) : (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0) : _GLF_FUZZED(mat2(1.4, -0.7, 8.4, -7241.7856))))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))))), bvec2(true), uvec4(1u)), bvec4(true), _GLF_struct_15(_GLF_IDENTITY(true, ! (! (true))), mat4(1.0), _GLF_IDENTITY(uvec3(1u), ~ (~ (uvec3(1u)))), mat2x4(1.0))), mat3(1.0));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_NumWorkGroups.x), 0u | ((gl_NumWorkGroups.x))), 0u ^ (~ (gl_NumWorkGroups.x)))));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-16032))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) : _GLF_FUZZED(_injected_loop_counter))) != int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))), true && ((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))), true && ((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))), false)), false, true)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   else
    {
    }
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false, true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false, true, false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false, true, false))) || false)), (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false, true, false)), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false, true, false))) || false))) && true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, 0.0))) > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false) && true)) && true)) || false, ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false) && true)) && true)) || false) && true))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), true && (bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.5)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, false || (true)))))), float(_GLF_FUZZED(-91.17)), bool(false))))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.5)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, false || (true)))))), float(_GLF_FUZZED(-91.17)), bool(false))))) < injectionSwitch.y)) || false)))))))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) && true)));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_9.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id, (workgroup_base + _GLF_struct_replacement_9.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id) + 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((false ? float(84929u) : 8.8))), bool(false))) > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(floor(vec2(5587.5122, -1.2))))), injectionSwitch)).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(floor(vec2(5587.5122, -1.2))))), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(0 ^ (1 ^ 0), min(_GLF_IDENTITY(0 ^ (1 ^ 0), ~ (~ (0 ^ (1 ^ 0)))), _GLF_IDENTITY(0 ^ (1 ^ 0), max(0 ^ (1 ^ 0), 0 ^ (1 ^ 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))), 0 | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))), max(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(int(0), (int(0)) / 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), (int(0)) / 1)), int(ivec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), (int(0)) / 1)), (true ? ~ (_GLF_IDENTITY(int(0), (int(0)) / 1)) : _GLF_FUZZED(_injected_loop_counter))), 0, 0)))))))), max(~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))), (~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))), (int(0)) / 1))))) * 1))))))))))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))), true))))))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false)), (_GLF_IDENTITY(bool(bvec3(true, false, false)), bool(bvec4(bool(bvec3(true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), false)), true, true, true)))) || false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true)))), bool(bvec4(bool(bvec3(true, _GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), (_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), ! (! (bool(! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))))))) && true)))), false)), true, true, true)))) || false)), bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(true, false, false)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(true, false, false)), true)), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(true, false, false)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(true, false, false)), true)), true)))))))))), bool(bvec4(bool(bvec3(true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true)))))))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true)))))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, true, true))))))))))) || false)) || false)), false)), true, true, true)))) || false)), true))), false))) ? _GLF_struct_replacement_9.subgroup_id : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), max(uint(uvec3(workgroup_id, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(uvec3(_GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), workgroup_id))), uint(uvec3(_GLF_FUZZED(workgroup_id), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) * subgroup_size + ((_GLF_struct_replacement_17.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (1 ^ (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (true))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))))), 1.0)), (vec2(mat4x3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))))), 1.0))) - vec2(0.0, 0.0))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))), bool(bvec3(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))), true, true))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(injectionSwitch, 0.0, 1.0))), (_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), mix(vec4(_GLF_FUZZED((6.5 / -70.93)), _GLF_FUZZED(7.0), (vec4(injectionSwitch, 0.0, 1.0))[_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (false ? _GLF_FUZZED(-66329) : 2))))))], (vec4(injectionSwitch, 0.0, 1.0))[3]), vec4((vec4(injectionSwitch, 0.0, 1.0))[0], (vec4(injectionSwitch, 0.0, 1.0))[1], _GLF_FUZZED(_GLF_IDENTITY((-7.2), determinant(mat2(1.0, 0.0, 1.0, 1.0)) * ((-7.2)))), _GLF_FUZZED(-8.0)), bvec4(true, _GLF_IDENTITY(true, true && (true)), false, false)))) * mat4(1.0))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0)), mix(vec4((_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0)))[0], (_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))) * mat4(1.0)))[1], _GLF_FUZZED(5172.3339), _GLF_FUZZED(float(-50945))), vec4(_GLF_FUZZED(-24.19), _GLF_FUZZED(-7.2), (_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0)))[2], (_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0)))[3]), bvec4(false, false, true, true)))), mix(vec2(_GLF_FUZZED(1211.6884), (vec2(_GLF_IDENTITY(vec4(injectionSwitch, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0))))[1]), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0))))[0], _GLF_FUZZED(92.06)), bvec2(true, false))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0))), (true ? vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * mat4(1.0))) : _GLF_FUZZED(injectionSwitch)))))).x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), max((1 ^ 1), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) + 0)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(false || (_injected_loop_counter != 1), bool(bvec4(false || (_injected_loop_counter != 1), false, true, true))))) || false)), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false, ((_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false) && true))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false))), bool(bvec2(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false))), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(~ (~ ((0 | 0))), min(_GLF_IDENTITY(~ (~ ((0 | 0))), clamp(~ (~ ((0 | 0))), ~ (~ ((0 | 0))), ~ (~ ((0 | 0))))), _GLF_IDENTITY(~ (~ ((0 | 0))), clamp(~ (~ ((0 | 0))), ~ (~ ((0 | 0))), ~ (~ ((0 | 0)))))))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (_GLF_IDENTITY(! (bool(bvec2(true, false))), bool(bvec2(! (bool(bvec2(true, false))), true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & _GLF_IDENTITY(1, (1) | 0)), max((1 & 1), (1 & 1)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), false)), true))))))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec4(bvec3(false, true, false), true))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false), bvec3(bvec4(bvec3(false, true, false), true))), false)), true)))))))))))))))))
            {
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), max(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, 0u)))), uint(uvec2(next_virtual_gid, 0u)))), (false ? _GLF_FUZZED(162314u) : uint(uvec2(next_virtual_gid, 0u)))))], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB(num_workgroup)) : _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))))), (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1)))))) + 0)), 4, 64, 4);
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-783.187) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-79.24)), float(injectionSwitch.y), bool(true))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-79.24)), float(injectionSwitch.y), bool(true))))), true, true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))), true)))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter ++)
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_IDENTITY(false, (false) || false), true)))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
    barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1) ^ 1, _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, _GLF_IDENTITY((_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1))) | ((1) / 1), ((_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1))) | ((1) / 1)) + 0))) ^ 1), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1))) | ((1) / 1))) ^ 1), int(int((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1))) | ((1) / 1))) ^ 1)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1))) | ((1) / 1))) ^ 1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1))) | ((1) / 1))) ^ 1)))))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), min(_GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (~ (~ (_GLF_struct_replacement_17.subgroup_local_id)))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id), max(_GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id), clamp((_GLF_struct_replacement_17.subgroup_local_id), _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id), ((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) >> 0u))) / 1u), (_GLF_struct_replacement_17.subgroup_local_id))), (_GLF_struct_replacement_17.subgroup_local_id)))), ~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))), ((~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))) | ((~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))))) + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id), ((_GLF_struct_replacement_17.subgroup_local_id)) << 0u) - 0u)) - 0u)))) | _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED((read_2 & workgroup_base))))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))), (false ? _GLF_FUZZED(136802u) : ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))), ~ (~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_struct_replacement_17.subgroup_local_id), ((_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_struct_replacement_17.subgroup_local_id)) + (1u ^ 1u)))), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u)) + 0u))))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))), (false ? _GLF_FUZZED(136802u) : ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))), ~ (~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_struct_replacement_17.subgroup_local_id), ((_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_struct_replacement_17.subgroup_local_id)) + (1u ^ 1u)))), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u)) + 0u))))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))), (false ? _GLF_FUZZED(136802u) : ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))), ~ (~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_struct_replacement_17.subgroup_local_id), ((_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_struct_replacement_17.subgroup_local_id)) + (1u ^ 1u)))), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) * 1u)) + 0u))))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))))))))))) + 1)), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1) | (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1) | (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1) | (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))) + 1)))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)), ((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u))) ^ (0u << _GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id), uint(_GLF_IDENTITY(uvec4((_GLF_struct_replacement_17.subgroup_local_id), 0u, 0u, 0u), clamp(uvec4((_GLF_struct_replacement_17.subgroup_local_id), 0u, 0u, 0u), uvec4((_GLF_struct_replacement_17.subgroup_local_id), 0u, 0u, 0u), uvec4((_GLF_struct_replacement_17.subgroup_local_id), 0u, 0u, 0u))))) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(virtual_gid) : 0u))))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))), clamp(_GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_struct_replacement_17.subgroup_local_id), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))))) + 1)), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u), 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), 1u, 1u)))))) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))), min(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, 0u | (_GLF_struct_replacement_17.subgroup_local_id))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id)))))))))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u, min((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u, ((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u) | ((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) << 0u)))))) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id), ((_GLF_struct_replacement_17.subgroup_local_id)) - 0u) - 0u)) - 0u)))) | 0u), 1u * _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), 1u, 1u)))))) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u)), 0u ^ ((_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u), 1u, 1u)))))) << 0u)) - 0u))), ((~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, (_GLF_struct_replacement_17.subgroup_local_id) - 0u)) - 0u)))) | 0u))))), min(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), uint(uvec2(~ (_GLF_struct_replacement_17.subgroup_local_id), 0u))), ~ (_GLF_struct_replacement_17.subgroup_local_id)))), _GLF_IDENTITY(~ (~ (_GLF_struct_replacement_17.subgroup_local_id)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_17.subgroup_local_id), clamp(~ (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, 0u | (_GLF_struct_replacement_17.subgroup_local_id))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id, max(_GLF_struct_replacement_17.subgroup_local_id, _GLF_struct_replacement_17.subgroup_local_id))))), ~ (_GLF_struct_replacement_17.subgroup_local_id))), 0u + (~ (_GLF_struct_replacement_17.subgroup_local_id))))))))))))) + 1))) / 1u)) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) | 0u)) < subgroup_size)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((934.027 + vec2(4.8, 652.610))))).y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false, true)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false, true)))), (bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false, true))))) && true)))))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-41.65)))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << (0u << _GLF_IDENTITY(uint(1u), uint(1u))))], uint(_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) + 1, 4, 64, 4);
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(242.132, clamp(_GLF_IDENTITY(242.132, mix(float(242.132), float(_GLF_FUZZED(-50.61)), bool(false))), 242.132, _GLF_IDENTITY(242.132, (242.132) / 1.0))))), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0))))) > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), ((1 | 1)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (true ? (1 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) : _GLF_FUZZED((bitCount(_injected_loop_counter) % _injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     subgroupAll(false);
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(-71517)))])).y))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, (read_2) * 1u)) + 1, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) | (4)));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         subgroupAll(true);
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
}
