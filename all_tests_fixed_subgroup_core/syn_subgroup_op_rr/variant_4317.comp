#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 + (int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) || false)) && true), (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), true && (bool((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), bool(bvec2(_GLF_DEAD(false), false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))) || false))))))
        barrier();
       break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, cos(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0)), max(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, cos(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0)), _GLF_IDENTITY((float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, cos(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0))), (true ? (float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, cos(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0))) : _GLF_FUZZED(-3.4))) / 1.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, cos(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0))))))) && (! (! (false)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9.9))))) && (false))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)), true))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(12.13), _GLF_FUZZED(-6784.5134)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) >> 0)), int(_GLF_IDENTITY(int((0 ^ 0)), 0 ^ (int((0 ^ _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, 0)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) * 1))))) >> _GLF_IDENTITY(int(4), int(4))), false || (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), (int(4)) * 1))))))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, false), false)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), bool(bvec4(bool(bool(! (false))), true, true, false)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), false, false))), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(true, true), false, false)), false), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(true, true), false, false)), false)))))), true, false))), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4544.7770)), bool(false)))) + 0.0) < injectionSwitch.y)), true)))), false)))))))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false)))), false, true)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (1u ^ 0u) * _GLF_IDENTITY((gl_NumWorkGroups.x), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-434.712) : injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-434.712) : injectionSwitch.y)), mix(float(_GLF_FUZZED(-777.801)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-434.712) : injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-434.712) : injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))), true))))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(bool(bool(bool(bvec3(false, false, true)))), ! (! (bool(bool(bool(bvec3(false, false, true)))))))))))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-26853) : 1)), _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (1) ^ 0)))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) >> 0), (_injected_loop_counter ++) >> (0 & -95439))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 & -95439))) / 1, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 & -95439))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 & -95439))), ~ (~ ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 & -95439))))))) ^ 0) / 1), 0 | (((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 & -95439))) / 1))) >> 0))) / 1))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-911.063)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), true))))) && (false)))))));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))))), true && (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))))), (bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9331.2219))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.6) : 0.0)))), injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4))), ((int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9331.2219))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.6) : 0.0)))), injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - (0 << _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, false, _GLF_IDENTITY(false, false || (false))))))
      continue;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) ^ uvec3(0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))), 0u)).x, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u))), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), max(~ _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min((gl_WorkGroupSize), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((~ (gl_WorkGroupSize)), max((~ (gl_WorkGroupSize)), (~ (gl_WorkGroupSize)))))), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), (~ (~ (gl_WorkGroupSize))) | (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY((gl_WorkGroupSize), uvec3(1u, 1u, 1u) * ((gl_WorkGroupSize)))))), max(~ (~ (gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize)))))))))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup))))).x : _GLF_FUZZED(subgroup_id)))) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)));
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(8430.0224)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1], float(vec4((injectionSwitch)[1], 0.0, 0.0, 1.0)))), bvec2(true, true))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(8430.0224)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1], float(vec4((injectionSwitch)[1], 0.0, 0.0, 1.0)))), bvec2(true, true))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(8430.0224)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1], float(vec4((injectionSwitch)[1], 0.0, 0.0, 1.0)))), bvec2(true, true))).x > injectionSwitch.y))), false, false, true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
      break;
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))))), false, false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(218.740)), bool(false)))))) - 0.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-8015.4387)), float(injectionSwitch.y), bool(true)))) - 0.0), (false ? _GLF_FUZZED(-332.547) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-8015.4387)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true)))), bool(bvec3(! (_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true)))), false, true)))))))) - 0.0)))), float(_GLF_FUZZED(float((true != false)))), bool(false)), min(mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-784.159), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-538.617)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(-8015.4387)), float(injectionSwitch.y), bool(true)))) - 0.0)), float(_GLF_FUZZED(float((true != false)))), bool(false)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8015.4387)), float(injectionSwitch.y), bool(true)))) - 0.0)), (float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8015.4387)), float(injectionSwitch.y), bool(true)))) - 0.0))) / 1.0), float(_GLF_FUZZED(float((true != false)))), bool(false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, tan(0.0), 1.0)))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 0u | ((1u << _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) / 1u)), uint(4u)))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))) ^ 0u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u)))))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), max((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) * 1u) * 1u, min((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(187740u))) * subgroup_size) * 1u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u, 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u, min((subgroup_id * subgroup_size) * 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) * 1u, ((subgroup_id * subgroup_size) * 1u) << 0u))))))), 0u, 0u))))))))) ^ 0u)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, abs(0.0)))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(351.933) : injectionSwitch.y))) + 0.0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))))], uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, ((1) << 0) >> 0))), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), true, true))), true, false, true))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(60.79) : injectionSwitch.x)), 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0))) > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, int(ivec3(0, 0, 0))))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false, true, false)), ! (! (bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false, true, false)))))))))
                  continue;
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             barrier();
            }
           else
            {
            }
          }
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false))) || false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), min(vec2(mat3x4(injectionSwitch, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)), min(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))))).y))));
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), (! ((_GLF_DEAD(false)))) && true)))))) || false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6195.0496)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(19.38, 87.53).y)), (float(_GLF_FUZZED(vec2(19.38, 87.53).y))) - sin(0.0)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), bool(true))) > injectionSwitch.y)), false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (true ? _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), clamp(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), min(_GLF_FUZZED(vec2(-8.8, -87.25)), _GLF_FUZZED(vec2(-8.8, -87.25))))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))))).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (true ? _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), clamp(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), min(_GLF_FUZZED(vec2(-8.8, -87.25)), _GLF_FUZZED(vec2(-8.8, -87.25))))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))))).y, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (true ? _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), clamp(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), min(_GLF_FUZZED(vec2(-8.8, -87.25)), _GLF_FUZZED(vec2(-8.8, -87.25))))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (true ? _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), clamp(exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1))))))), exp(vec2(0.0, 0.0)) * (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) : _GLF_FUZZED((+ floor(vec2(-2.6, 1.1)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(-8.8, -87.25)), min(_GLF_FUZZED(vec2(-8.8, -87.25)), _GLF_FUZZED(vec2(-8.8, -87.25))))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))))).y))), float(_GLF_FUZZED(-1.5)), bool(false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.4)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) || false), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 80363)); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), false)))))
            break;
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-23.76) : injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))
            return;
           barrier();
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(bool(bvec2((false) && _GLF_IDENTITY(true, (true) || false), false)), (bool(bvec2((false) && _GLF_IDENTITY(true, (true) || false), false))) && true))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, true && ((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))) && _GLF_IDENTITY(true, (true) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, true && _GLF_IDENTITY(((false) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (_GLF_IDENTITY(true, (true) || false)))), ! (! (((false) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (_GLF_IDENTITY(true, (true) || false))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), false))) || false))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-74790 & 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-62706))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))) & 1), true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) ^ 0)))))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))), false))))), false)))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-11119))), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-11119))), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-11119))), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1, clamp(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1, _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1, (false ? _GLF_FUZZED(ivec3(85478, 93159, -40441)[1]) : ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1))))), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) + 0)), int(0))) & 1), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1), true, false)))))))))))) && true))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) || (_GLF_WRAPPED_IF_TRUE(true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) || (_GLF_WRAPPED_IF_TRUE(true))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false))) || (_GLF_IDENTITY(false, (false) || false))) || (_GLF_WRAPPED_IF_TRUE(true)))) && true)) && true))
        {
         barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       barrier();
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, true && (true)))))), bool(_GLF_IDENTITY(bool(! (false)), bool(_GLF_IDENTITY(bool(bool(! (false))), ! (_GLF_IDENTITY(! (bool(bool(! (false)))), (! (bool(bool(! (false))))) || false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(bool(bvec2(false, false)), false, true, true))))))), false, true)))), bool(bool(! _GLF_IDENTITY((false), true && ((false))))))) && true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))], 4, _GLF_IDENTITY(64, (1 ^ 1) | (64)), _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, ~ (~ (0))))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))))))), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), ! (! ((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(776.817), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)) - 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(72.83)), bvec2(true, false))).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(776.817), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)) - 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(72.83)), bvec2(true, false))).y)) && true))))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), _GLF_IDENTITY((bool(bvec3(true, true, true))), ((bool(bvec3(true, true, true)))) || false) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(false), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_DEAD(false), false, false, true))), false, true, false)))))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), false || ((_GLF_WRAPPED_LOOP(false)))) && true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true) && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), (bool(bvec4(true, false, true, true))) || false))) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && ((_GLF_WRAPPED_LOOP(false))))))) && true)))))), ! (! ((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && ((_GLF_WRAPPED_LOOP(false))))))) && true))))))))))));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true))), bool(bvec2(true, true))))), bool(_GLF_IDENTITY(bool(bool(bvec4(false, false, true, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), false || (bool(bool(bvec4(false, false, true, _GLF_IDENTITY(true, bool(bvec2(true, true))))))))))))))));
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) && true), (! (true)) || false)))))))))))), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       return;
      }
     else
      {
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (! (false)))) || false)))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false)))))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false)), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false || ((! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), false))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(42.94)), bool(false)))) + 0.0)))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(42.94)), bool(false)))) + 0.0))))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(42.94)), bool(false)))) + 0.0))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))))), dot(vec4(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))))), sqrt(sqrt(1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, tan(0.0)), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, tan(0.0)), vec4(1.0, 1.0, 0.0, 1.0))), 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(42.94)), bool(false))), (false ? _GLF_FUZZED(10.10) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(42.94)), bool(false)))))) + 0.0)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, false, false)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) - length(vec2(0.0, 0.0))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(false);
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec3((false) || false, false, false)), (bool(bvec3((false) || false, false, false))) || false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec3(bool(bvec4(false, false, true, false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec3(bool(bvec4(false, false, true, false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec3(1.1, 537.936, 7890.9984), vec3(888.951, 6.3, -0.3)))))))), true, true, true)))) || false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) + 1, _GLF_IDENTITY(4, int(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(int(4)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(int(4)), (_GLF_IDENTITY(int(int(4)), int(ivec3(_GLF_IDENTITY(int(int(4)), 0 ^ (int(int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) * 1), 4)))))), 1, 1)))) - 0), int(ivec4(_GLF_IDENTITY(int(int(4)), (_GLF_IDENTITY(int(int(4)), int(ivec3(_GLF_IDENTITY(int(int(4)), 0 ^ (int(int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) * 1), 4)))))), 1, 1)))) - 0), 1, 1, 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(int(4)) : _GLF_FUZZED(_GLF_IDENTITY(-27738, (_GLF_IDENTITY(-27738, min(-27738, _GLF_IDENTITY(-27738, (-27738) ^ 0)))) | 0)))), 1, 1, 0), max(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(int(4)), (_GLF_IDENTITY(int(int(4)), int(ivec3(_GLF_IDENTITY(int(int(4)), _GLF_IDENTITY(0 ^ (int(int(4))), (0 << _GLF_IDENTITY(int(6), int(6))) ^ (0 ^ (int(int(4)))))), 1, 1)))) - 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(int(_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, (4) >> 0)))))) : _GLF_FUZZED(_GLF_IDENTITY(-27738, (_GLF_IDENTITY(-27738, min(-27738, _GLF_IDENTITY(-27738, (-27738) ^ 0)))) | 0)))), 1, 1, 0), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(int(4)), (_GLF_IDENTITY(int(int(4)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(int(4)), 0 ^ (int(int(4)))), 1, 1), (ivec3(_GLF_IDENTITY(int(int(4)), 0 ^ (int(int(4)))), 1, 1)) >> ivec3(0, 0, 0))))) - 0), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) ? int(int(4)) : _GLF_FUZZED(_GLF_IDENTITY(-27738, (_GLF_IDENTITY(-27738, min(-27738, _GLF_IDENTITY(-27738, (-27738) ^ 0)))) | 0)))), 1, 1, 0)))), clamp(int(ivec4(int(int(4)), 1, 1, 0)), int(_GLF_IDENTITY(ivec4(int(int(4)), 1, 1, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0)), (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0))) + 0)), (ivec4(int(int(4)), 1, 1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0)))) | ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - (0 >> _GLF_IDENTITY(int(0), int(0)))), 0, 0, 0))), _GLF_IDENTITY(int(ivec4(int(int(4)), 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))), 0)), 1 * (int(ivec4(_GLF_IDENTITY(int(int(4)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(int(4)), 1, 1), (ivec3(int(int(4)), 1, 1)) << ivec3(0, 0, 0))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(int(4)), 1, 1), (ivec3(int(int(4)), 1, 1)) << ivec3(0, 0, 0))), (true ? int(_GLF_IDENTITY(ivec3(int(int(4)), 1, 1), (ivec3(int(int(4)), 1, 1)) << ivec3(0, 0, 0))) : _GLF_FUZZED(348)))) | (int(_GLF_IDENTITY(ivec3(int(int(4)), 1, 1), (ivec3(int(int(4)), 1, 1)) << ivec3(0, 0, 0)))))), _GLF_IDENTITY(1, (0 & 14662) | (1)), 1, 0))))))))))), 64, 4);
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((! (injectionSwitch.x > injectionSwitch.y))) && true)))), false, false, true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                  break;
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (! ((_GLF_WRAPPED_IF_FALSE(false))))) && true)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) && true))))) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false, false)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0)), vec2(vec3(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0)), exp(0.0))))).y))) || false)))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true))))) ? _GLF_FUZZED(length(vec2(-60.91, -0.1))) : injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))) || false); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)), true && (_GLF_IDENTITY(false, false || (false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (int(false) - 62165))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(8.4, -4.8, -3902.2709).s)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (true ? float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) : _GLF_FUZZED(2.1))), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(true)))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
            barrier();
          }
         else
          {
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(374.448, -275.731)))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), true && (! (_injected_loop_counter < 1)))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & 1)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), (_GLF_IDENTITY((false), ((false)) || false)) || false)) || false)), (! (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), bool(_GLF_IDENTITY(bvec2(((false)), false), bvec2(bvec4(bvec2(((false)), false), false, false))))) || false))) && true))), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), (_GLF_IDENTITY((false), ((false)) || false)) || false)) || false)), (! (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), bool(_GLF_IDENTITY(bvec2(((false)), false), bvec2(bvec4(bvec2(((false)), false), false, false))))) || false))) && true))), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))))).x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
}
