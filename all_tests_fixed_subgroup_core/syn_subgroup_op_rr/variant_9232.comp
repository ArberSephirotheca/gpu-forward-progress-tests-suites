#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), (~ (gl_NumWorkGroups)) | (~ (gl_NumWorkGroups))))).x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, _GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(138418u, 167265u, 187623u)) : gl_NumWorkGroups)).x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))), _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), max(_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)).x, gl_NumWorkGroups.x), _GLF_IDENTITY(uint(uvec3(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, 1u)), (_GLF_IDENTITY(uint(uvec3(clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x)), gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, 1u)), max(uint(uvec3(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, 1u)), _GLF_IDENTITY(uint(uvec3(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, 1u)), (uint(uvec3(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, 1u))) | (uint(uvec3(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (false ? _GLF_FUZZED(mix(subgroup_local_id, subgroup_size, true)) : 1u)))))))))))) - 0u)), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)).x), clamp(max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << (0u | 0u)))), gl_NumWorkGroups.x), max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x, _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)))))), gl_NumWorkGroups)).x)), _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x), _GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x), min(max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x), max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x)))))), 1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat3x4(injectionSwitch[1], exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), log(1.0), 0.0, 0.0))))).x))).x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(uvec3(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), 1u, 1u))), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 0u, 1u), (uvec3(0u, 0u, 1u)) << uvec3(0u, 0u, 0u))))) | 0u))).x), clamp(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(180908u))), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x), max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups))) + uvec3(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0 * (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), (0u | 0u)), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), (0u | 0u)), min(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), (0u | 0u)), uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), (0u | 0u)))), uvec4(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), (false ? _GLF_FUZZED(min(uvec3(28811u, 155856u, 100586u), subgroup_local_id)) : _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) + (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u))))))), (0u | 0u)))))), gl_NumWorkGroups)), gl_NumWorkGroups)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u))))), min(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec3(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))))))) + ((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, gl_NumWorkGroups), uvec3(uvec3(max(gl_NumWorkGroups, gl_NumWorkGroups))))), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + ((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))), (uvec3(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)))) << uvec3(0u, 0u, 0u)))))).x)), gl_NumWorkGroups.x), _GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x), min(max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x), max(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x)))))))))))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) | uvec3(0u, 0u, 0u)) ^ (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, (1u & 1u), 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), (1u & 1u), 0u))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, (1u & 1u), 0u))), _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, (1u & 1u), 0u))))) : _GLF_FUZZED(atomicMin(workgroup_id, (workgroup_id >> 197990u))))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size))), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) + 0u, ((_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), min(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size))))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) + 0u) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_WRAPPED_LOOP(false))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-54422))), _injected_loop_counter, _injected_loop_counter)))) != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], (false ? _GLF_FUZZED(next_virtual_gid) : buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ~ (~ (_GLF_IDENTITY((virtual_gid), clamp((virtual_gid), (virtual_gid), (virtual_gid)))))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)), ~ (~ ((_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ((virtual_gid)) | ((virtual_gid))) | 0u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (virtual_gid)), (virtual_gid) | 0u))))) : _GLF_FUZZED(workgroup_id))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u)))))))))) ^ 0u)) / 1u)), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u)))))))))) ^ 0u)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u)))))))))) ^ 0u)) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), ~ (~ (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), (uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) >> 0u)))))))))) ^ 0u)) / 1u))) + 0u)))))))])), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), _GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true)))), true, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true)))), true, true, false))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec4(((false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))) && true))))) && true)))), true, true, false))), false)))))))), false)))))
  {
  }
 else
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (_GLF_IDENTITY(int(int(1)), 0 ^ (int(int(1))))) >> 0)) < subgroup_size)
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true, true, false))))) ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_IDENTITY(_GLF_FUZZED(-2.2), max(_GLF_FUZZED(-2.2), _GLF_IDENTITY(_GLF_FUZZED(-2.2), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_FUZZED(-4946.5813)), bool(false)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0)) / 1) ^ 0)), (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0)) / 1) ^ 0)), (~ (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) ^ 0, ((_injected_loop_counter --) ^ 0) >> 0)))) / 1)), 0 ^ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0)) / 1) ^ 0)), (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))) / 1))))) >> 0)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), false || ((true))) || false)))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, 1)))) << (91001 & 0)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))));
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               subgroupAll(false);
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(vec4(-8.3, _GLF_IDENTITY(-6.2, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-3191.1888), 1.0 * (_GLF_FUZZED(-3191.1888)))), float(-6.2), bool(true))), 69.35, -25.35), (true ? _GLF_IDENTITY(vec4(-8.3, _GLF_IDENTITY(-6.2, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-3191.1888), 1.0 * (_GLF_FUZZED(-3191.1888)))), float(-6.2), bool(true))), 69.35, -25.35), vec4(mat3(vec4(-8.3, _GLF_IDENTITY(-6.2, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-3191.1888), 1.0 * (_GLF_FUZZED(-3191.1888)))), float(-6.2), bool(true))), 69.35, -25.35), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) : _GLF_FUZZED(vec4(-629.863, -222.189, -81.67, 9.0)))).z), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.7)), vec2(_GLF_FUZZED((0.6)), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], _GLF_FUZZED(-50.93)), bvec2(true, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat4x2(_GLF_IDENTITY(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat4x2(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))).y, mix(float(_GLF_FUZZED(-72.59)), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-8.3, _GLF_IDENTITY(-6.2, mix(float(_GLF_FUZZED(-3191.1888)), float(-6.2), bool(true))), 69.35, -25.35).z), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-50.93)), bvec2(true, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(45.94)))) - 0.0)))))))
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x)), 0 + (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x))) << 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 ^ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> (0 << _GLF_IDENTITY(int(4), int(4)))), (int(6)) / 1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, _GLF_IDENTITY(6, min(6, 6)), 6))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), (1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(73828) : 6)))))) | (int(6))), 0, 1)))))) / 1)), _GLF_IDENTITY(max(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min((int(6)), (int(6)))) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1))), 0 ^ (_GLF_IDENTITY(max(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min((int(6)), (int(6)))) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1))), (max(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min((int(6)), (int(6)))) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1)))) | (max(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min((int(6)), (int(6)))) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1)))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), (1 | 0) * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, 1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, 1)))))))) / 1)), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(_injected_loop_counter))), (int(6)) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), (1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, 1)))))) / 1)), max(~ (_GLF_IDENTITY(int(6), (int(6)) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1))))))))))), ! (! (_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (1))) ^ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((int(6)), 0 + (_GLF_IDENTITY((int(6)), min((int(6)), (int(6)))))), ~ (~ ((int(6))))))) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), (1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), (int(6)) | (int(6))), 0, 1)))))) / 1)), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(6), (int(6)) / 1))), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) / 1))))), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1))))))))), (_injected_loop_counter < (1 ^ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 + (_GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY((int(6)), 0 + (_GLF_IDENTITY((int(6)), ~ (~ ((int(6))))))) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), _GLF_IDENTITY((1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << 0), ~ (~ (6)))), _GLF_IDENTITY((int(_GLF_IDENTITY(6, ~ (~ (6))))), ((int(_GLF_IDENTITY(6, ~ (~ (6)))))) - 0) / 1), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, (1 ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), 0), (ivec3(1, (1 ^ 0), 0)) | ivec3(0, 0, 0))), ~ (~ (int(_GLF_IDENTITY(ivec3(1, (1 ^ 0), 0), (ivec3(1, (1 ^ 0), 0)) | ivec3(0, 0, 0))))))) | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), (int(_GLF_IDENTITY(6, ~ (~ (6))))) / 1), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (6) - 0))) | (int(6))), 0, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)))))), _GLF_IDENTITY(int(int((1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), (int(_GLF_IDENTITY(6, ~ (~ (6))))) / _GLF_IDENTITY(1, (1) - 0)), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)))))))), (int(int((1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), (int(_GLF_IDENTITY(6, ~ (~ (6))))) / 1), (int(6)) | (int(6))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))))))))) >> 0)), (1 | 0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), int(ivec3(_GLF_IDENTITY(6, ~ (~ (6))), 0, 0)))), (int(_GLF_IDENTITY(6, ~ (~ (6))))) / 1), (int(6)) | (int(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, int(int(6)))))))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), 0, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)))))))))) / 1)), max(~ (_GLF_IDENTITY(int(6), (int(6)) / 1)), ~ (_GLF_IDENTITY(int(6), (int(6)) / 1)))))))))) || false))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-2179.3660)), float(injectionSwitch.y), bool(true)), mix(float(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-2179.3660, (-2179.3660) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), float(injectionSwitch.y), bool(true))), float(_GLF_FUZZED(94.27)), bool(false)))))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), false)))))))));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u), max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u))), min(next_virtual_gid, next_virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))) | 0u), _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) | (_GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) >> 0u))), min(_GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), min(min(next_virtual_gid, next_virtual_gid), min(next_virtual_gid, next_virtual_gid))), min(next_virtual_gid, next_virtual_gid))))))))))))], uint(_GLF_IDENTITY(read_1, 0u + (read_1)) == read_2) + 1, 4, 64, 4);
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-24771)))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) > 0))); _injected_loop_counter --)
          {
           do
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))))))))) ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-4.4)))), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), min(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(4.9))), 1.0)))), injectionSwitch.y)) * (injectionSwitch)))).y))))
                                      {
                                      }
                                     else
                                      {
                                       subgroupAll(true);
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || (false)))))))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))), ! (! (! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))))))))), true && (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))), ! (! (! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))))))))))))))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true))))), ! (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))))))))))), true)))) || false)));
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))))));
    }
  }
}
