#version 460
struct _GLF_struct_1 {
 bvec3 _f0;
 mat2x4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 uint _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 bvec3 _f3;
 uvec4 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_3 {
 uint read_1;
 uvec4 _f0;
 float _f1;
 ivec3 _f2;
 _GLF_struct_2 _f3;
 mat4x2 _f4;
 mat4x2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 0), uvec4(1u), 1.0, ivec3(1), _GLF_struct_2(_GLF_struct_0(uvec3(1u), 1u), uvec3(1u), mat3x4(1.0), bvec3(true), uvec4(1u), _GLF_struct_1(bvec3(true), mat2x4(1.0), mat4(1.0))), mat4x2(1.0), mat4x2(1.0));
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_3.read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_3.read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
  }
}
