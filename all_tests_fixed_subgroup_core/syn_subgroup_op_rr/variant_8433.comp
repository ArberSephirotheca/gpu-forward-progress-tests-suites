#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))) && true) && true))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(1125.9072))) < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, ! (! (((injectionSwitch.x < injectionSwitch.y)) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, ! (! (((injectionSwitch.x < injectionSwitch.y)) && true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, ! (! (((injectionSwitch.x < injectionSwitch.y)) && true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, ! (! (((injectionSwitch.x < injectionSwitch.y)) && true))), true), false)))))))))))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec3(_GLF_IDENTITY(int(0), int(0)), 1, (1 ^ 0)))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (workgroup_size)), (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) | (workgroup_size)) * workgroup_id)));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - 0u), min(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), uint(uvec2(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), 1u))), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))) << 0u), subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) + 0u))), subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(uvec4(110191u, 187074u, 176205u, 93909u).r) : subgroup_size)), min(subgroup_size, subgroup_size)))), max(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) * 1u) + 1), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) | 0u)), 0u ^ ((subgroup_local_id + 1)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), 0 | (min(1, 1))))), 0u ^ ((subgroup_local_id + 1)))), clamp(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(0u ^ ((subgroup_local_id + 1)), 0u + (_GLF_IDENTITY(0u ^ ((subgroup_local_id + 1)), uint(uvec3(_GLF_IDENTITY(0u ^ ((subgroup_local_id + 1)), (0u ^ ((subgroup_local_id + 1))) | (_GLF_IDENTITY(0u ^ ((subgroup_local_id + 1)), (0u ^ ((subgroup_local_id + 1))) | 0u))), 0u, 0u))))))), uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1))), 0u ^ _GLF_IDENTITY(((subgroup_local_id + 1)), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1)))))), uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), 0u ^ ((subgroup_local_id + 1)))))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | _GLF_IDENTITY(0, 0 | (0))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y))), false, true)), true && (bool(bvec3(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y))), false, true)))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-4.0, 4640.2584))), mix(vec2(((true ? injectionSwitch : _GLF_FUZZED(vec2(-4.0, 4640.2584))))[0], ((true ? injectionSwitch : _GLF_FUZZED(vec2(-4.0, 4640.2584))))[1]), vec2(_GLF_FUZZED(1403.8372), _GLF_FUZZED(-6.2)), bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))) : _GLF_FUZZED(vec2(-9.5, -273.259)))).x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0))))), min(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0))))), _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, 0)))), (0 << _GLF_IDENTITY(int(0), int(0))) | 0)), (0 & 70112) | ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, 0)))), (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) | 0)))) ^ 0)), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))))), clamp(_GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))))), _GLF_IDENTITY(_GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))))), max(_GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))))), _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))))))), _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))))))))))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0)))))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))))), int(ivec3(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((0), min((0), (0)))), min(_GLF_IDENTITY((~ (0)), ((~ (0))) >> 0), (~ (0)))))))))), 1, 1)))), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))), clamp(int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))), (int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0))))))))) | (int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))))))))), int(ivec3(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), 0 | (~ (0)))) + 0)), (~ (0)))))))))), 1, 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))))), int(ivec3(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))))), 1, 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))))))))), int(ivec3(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((~ (0)), (_GLF_IDENTITY(~ (0), (~ (0)) ^ 0)))))))))), 1, 1))))))), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), min((_GLF_IDENTITY(~ (0), int(ivec4(~ (0), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))), (~ (0))))))))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, 0)))), (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(0), int(0))) | 0)) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, 0 | (6))))))) >> _GLF_IDENTITY(int(6), int(6)), 0 ^ ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)))))), int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, 0 | (6))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 0 | (6)), 6))), int(6)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) / (1 | 1)))
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), _GLF_IDENTITY(next_virtual_gid, uint(_GLF_IDENTITY(uint(next_virtual_gid), clamp(uint(next_virtual_gid), uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))) | (next_virtual_gid))), _GLF_IDENTITY(uint(next_virtual_gid), (uint(next_virtual_gid)) | (uint(next_virtual_gid)))))))))], _GLF_IDENTITY(uint(1), 0u ^ (uint(1))), 4, _GLF_IDENTITY(64, (64) << 0), 4);
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-8567) : 0)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))) && _GLF_IDENTITY(true, (true) && true))) && true))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), injectionSwitch, injectionSwitch)).y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((false ? -68.56 : -7.4), mix(float(_GLF_IDENTITY((false ? -68.56 : -7.4), mix(float(_GLF_FUZZED(29.80)), float((false ? -68.56 : -7.4)), bool(true)))), float(_GLF_FUZZED(((0.3 - -40.58) - 41.86))), bool(false))))), bvec2(true, false))).x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), true))))
              {
               return;
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false))))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(max((1 ^ 1) << _GLF_IDENTITY(int(6), int(6)), (1 ^ 1) << _GLF_IDENTITY(int(6), int(6))), max(max((1 ^ 1) << _GLF_IDENTITY(int(6), int(6)), (1 ^ 1) << _GLF_IDENTITY(int(6), int(6))), max((1 ^ 1) << _GLF_IDENTITY(int(6), int(6)), (1 ^ 1) << _GLF_IDENTITY(int(6), int(6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             do
              {
               if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_IDENTITY((1) + 0, int(ivec4((1) + 0, 1, _GLF_IDENTITY(0, int(ivec2(0, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)))) / 1)), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, _GLF_IDENTITY((_GLF_IDENTITY((1) + 0, int(ivec4((1) + 0, 1, _GLF_IDENTITY(0, int(ivec2(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_injected_loop_counter) : 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)))) / 1, ((_GLF_IDENTITY(_GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), ((1)) | 0))) + 0, int(ivec4((1) + 0, 1, _GLF_IDENTITY(0, int(ivec2(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1)))) / 1) + (0 & 45967))))) + 0) < subgroup_size)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              break;
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-4707.6211)), bool(false))))), mix(float(injectionSwitch.y), float(_GLF_FUZZED((2.1 - -5584.2928))), bool(false))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-4707.6211)), bool(false))))), mix(float(injectionSwitch.y), float(_GLF_FUZZED((2.1 - -5584.2928))), bool(false)))))))))
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                       do
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) || ((! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0))))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))))))))
                                            {
                                             return;
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))));
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(atanh(-4.1))))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 0.0, _GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), 0.0 + (sqrt(1.0)))) - 0.0), sqrt(1.0)))), float(_GLF_FUZZED(55.39)), bool(false))), 0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 0.0, sqrt(1.0), 0.0, 0.0))), (mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 0.0, sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0)))) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), false))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED((-9.4 + -8.8))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))), bool(true))) < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(mat4x3(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0))))) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))), 0.0, sqrt(1.0), 0.0, 0.0))), (mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 0.0, log(1.0), 0.0), (vec4(0.0, 0.0, log(1.0), 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)))) * vec2(1.0, 1.0)))), min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), false)))))))))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & (-32388 >> -16988), clamp(_GLF_IDENTITY(0 & (-32388 >> -16988), (1 ^ 1) + (0 & (-32388 >> -16988))), 0 & (-32388 >> -16988), 0 & (-32388 >> -16988))))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bool(true))))))))
                            {
                             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 == read_2) + 1, min(uint(read_1 == read_2) + 1, uint(read_1 == read_2) + 1)), clamp(_GLF_IDENTITY(uint(read_1 == read_2) + 1, uint(_GLF_IDENTITY(uvec3(uint(read_1 == read_2) + 1, 0u, 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(113179u, 187293u, 121887u)) : uvec3(uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u) == read_2) + 1, 0u, 1u)), (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(113179u, 187293u, 121887u)) : uvec3(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), (_GLF_IDENTITY(read_1, (read_1) ^ 0u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), (_GLF_IDENTITY(read_1, (read_1) ^ 0u)) / 1u) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(read_1, (read_1) ^ 0u))) == read_2) + 1, 0u, 1u)), ((false ? _GLF_FUZZED(uvec3(113179u, 187293u, 121887u)) : uvec3(uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u) == read_2) + 1, 0u, 1u))) / uvec3(1u, 1u, 1u))) >> uvec3(0u, 0u, 0u))))), uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | 0u)) | (read_1)) == read_2) + 1, uint(read_1 == _GLF_IDENTITY(read_2, min(read_2, _GLF_IDENTITY(read_2, max(read_2, read_2))))) + _GLF_IDENTITY(1, min(1, 1)))), 4, 64, 4);
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
                        return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false))))))), bool(bvec4(bool(false), false, true, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)))))) || false))))))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))), bool(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))), bool(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), _GLF_IDENTITY(false, (false) || false), true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))))))) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), ! (! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))))), (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))))) || false)), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))), bool(bvec3(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))), true, false))))) || false))))))))) && true)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))), false))))), false || (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false))))))))))) && true)), false, false, true))))))) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (false) || false), true && (_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bool(bool(bvec2((false), false)))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((false))), ! (! _GLF_IDENTITY((bool(bool((false)))), false || ((bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))), true && (bool(_GLF_IDENTITY(bool(bool((false))), ! (_GLF_IDENTITY(! (bool(bool((false)))), bool(bvec3(! (bool(bool((false)))), true, false))))))))))))))))), ! (! (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), false || (! (bool(false)))))), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ((_GLF_IDENTITY(true, (true) && true))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, false)), ! (! (bool(bvec3(bool(false), false, false)))))), (bool(false)) || false), false, true, false))) || false))), false)))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), false, true, false)))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (false) || false), true && _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), _GLF_IDENTITY(bool(bool((false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, false, false)), bool(bvec2(bool(bvec4((false), true, false, false)), true)))))))), ! (! (bool(bool((false))))))), (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, false, false)), bool(bvec2(bool(bvec4((false), true, false, false)), true)))))))), ! (! (bool(bool((false)))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) && (bool(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false)))))))))))))))), true && ((_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), _GLF_IDENTITY(bool(bool((false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((false))), _GLF_IDENTITY(! (! (bool(bool((false))))), (! (! (bool(bool((false)))))) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), true && (bool((false))))), ! (! (bool(bool((false))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) && (bool(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false)))))))))))))))))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))), (! (! (bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), false || (! (bool(false)))))), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, true))))), ((_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) && _GLF_IDENTITY(true, false || (true))))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) || false), false, true, false))) || false))), false))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))) && true), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))) && true), false, false), true))))))))))))) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         return;
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_IDENTITY(false, ! (! (false)))))
                      {
                      }
                     else
                      {
                       subgroupAll(false);
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), false)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-79.95), _GLF_FUZZED(-52.96)), bvec2(false, false))))).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-79.95), _GLF_FUZZED(-52.96)), bvec2(false, false))))).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-79.95), _GLF_FUZZED(-52.96)), bvec2(false, false))))).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))), false)))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(false || (injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3(false || (injectionSwitch.x > injectionSwitch.y), false, false)))))), true, true, true)))))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                    break;
                  }
                 else
                  {
                   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sin(0.0)))), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-814.030), _GLF_FUZZED(55.17)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(vec2(6.7, -9974.5379)))).y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(-7.2, -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))))).y), (false ? _GLF_FUZZED(-709.163) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(-7.2, -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))))).y), mix(float((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(-7.2, -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))))).y)), float(_GLF_FUZZED((-8898.8021 * -75.08))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) + sin(0.0)))), true && (! ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-7.2, (-7.2) - length(vec3(0.0, 0.0, 0.0))), -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))))).y), (false ? _GLF_FUZZED(-709.163) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(-7.2, -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), mat2(mat4x3(mat2(1.0))))))).y), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(-7.2, -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))))).y), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.8) : (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0)))), (false ? _GLF_FUZZED(vec2(-7.2, -768.647)) : (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))))).y)))), float(_GLF_FUZZED((-8898.8021 * -75.08))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) + sin(0.0)))), true && (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     subgroupAll(true);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true && (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6835.5839, 2.6)) : injectionSwitch)).y))), false || (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))), bool(bvec4(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))), true, false, true)))))))));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
