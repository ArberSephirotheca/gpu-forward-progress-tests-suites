#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_181 {
 mat2 _f0;
 mat2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_180 {
 bvec4 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
 mat3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_179 {
 vec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_178 {
 uvec2 _f0;
} ;

struct _GLF_struct_182 {
 _GLF_struct_178 _f0;
 _GLF_struct_179 _f1;
 _GLF_struct_180 _f2;
 _GLF_struct_181 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_177 {
 mat2x4 _f0;
} ;

struct _GLF_struct_183 {
 int _f0;
 mat2x3 _f1;
 _GLF_struct_177 _f2;
 ivec3 _f3;
 int _injected_loop_counter;
 mat3x2 _f4;
 _GLF_struct_182 _f5;
} ;

struct _GLF_struct_175 {
 uvec2 _f0;
} ;

struct _GLF_struct_173 {
 mat2 _f0;
 uint _f1;
 mat2 _f2;
 mat2x3 _f3;
 ivec3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_172 {
 bvec3 _f0;
 mat4x2 _f1;
 mat4x2 _f2;
 ivec4 _f3;
 mat2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_171 {
 uint _f0;
 uint _f1;
 uvec2 _f2;
 mat2 _f3;
 uvec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_170 {
 vec3 _f0;
 float _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_174 {
 bvec2 _f0;
 mat2 _f1;
 _GLF_struct_170 _f2;
 mat2x3 _f3;
 _GLF_struct_171 _f4;
 _GLF_struct_172 _f5;
 _GLF_struct_173 _f6;
} ;

struct _GLF_struct_168 {
 mat3x4 _f0;
 bool _f1;
} ;

struct _GLF_struct_167 {
 float _f0;
} ;

struct _GLF_struct_169 {
 _GLF_struct_167 _f0;
 mat3x4 _f1;
 bvec3 _f2;
 _GLF_struct_168 _f3;
} ;

struct _GLF_struct_176 {
 ivec2 _f0;
 uvec3 _f1;
 int _injected_loop_counter;
 mat2x3 _f2;
 _GLF_struct_169 _f3;
 bool _f4;
 _GLF_struct_174 _f5;
 _GLF_struct_175 _f6;
} ;

struct _GLF_struct_165 {
 bool _f0;
 uvec3 _f1;
 mat2x3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_166 {
 bvec3 _f0;
 mat2x4 _f1;
 bvec4 _f2;
 int _injected_loop_counter;
 ivec2 _f3;
 _GLF_struct_165 _f4;
} ;

struct _GLF_struct_162 {
 uint _f0;
 mat4x3 _f1;
 int _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_163 {
 _GLF_struct_162 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_160 {
 mat2x3 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 float _f3;
 mat4 _f4;
} ;

struct _GLF_struct_159 {
 ivec2 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 bvec3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_161 {
 _GLF_struct_159 _f0;
 uint _f1;
 _GLF_struct_160 _f2;
} ;

struct _GLF_struct_157 {
 mat3x4 _f0;
 uvec4 _f1;
 mat4 _f2;
 bvec2 _f3;
 bvec2 _f4;
 bvec4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_156 {
 ivec3 _f0;
} ;

struct _GLF_struct_155 {
 mat4x2 _f0;
 bvec2 _f1;
 mat3x4 _f2;
 vec2 _f3;
 vec2 _f4;
 uvec2 _f5;
 int _f6;
} ;

struct _GLF_struct_154 {
 mat4x3 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 mat4x3 _f3;
 float _f4;
} ;

struct _GLF_struct_158 {
 _GLF_struct_154 _f0;
 _GLF_struct_155 _f1;
 vec3 _f2;
 _GLF_struct_156 _f3;
 vec2 _f4;
 _GLF_struct_157 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_152 {
 float _f0;
 ivec2 _f1;
 ivec3 _f2;
 vec4 _f3;
 mat4x2 _f4;
 float _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_151 {
 bvec3 _f0;
 float _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_150 {
 vec3 _f0;
 mat4 _f1;
 vec2 _f2;
 mat2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_149 {
 mat4 _f0;
 mat4 _f1;
 ivec4 _f2;
 bvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_153 {
 _GLF_struct_149 _f0;
 _GLF_struct_150 _f1;
 _GLF_struct_151 _f2;
 uint _f3;
 _GLF_struct_152 _f4;
 int _f5;
} ;

struct _GLF_struct_147 {
 uvec3 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 mat4 _f3;
 vec3 _f4;
 mat4x2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_146 {
 int _f0;
 bvec4 _f1;
 uint _f2;
 mat3x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_148 {
 _GLF_struct_146 _f0;
 _GLF_struct_147 _f1;
} ;

struct _GLF_struct_164 {
 int _injected_loop_counter;
 _GLF_struct_148 _f0;
 _GLF_struct_153 _f1;
 _GLF_struct_158 _f2;
 _GLF_struct_161 _f3;
 _GLF_struct_163 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_143 {
 mat4x3 _f0;
} ;

struct _GLF_struct_142 {
 mat2x3 _f0;
 uvec4 _f1;
 mat4x3 _f2;
 ivec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_141 {
 int _f0;
 bvec3 _f1;
 ivec4 _f2;
 vec4 _f3;
 mat4x2 _f4;
 float _f5;
 mat3 _f6;
} ;

struct _GLF_struct_140 {
 vec3 _f0;
 mat3x4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_139 {
 bool _f0;
 ivec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_144 {
 _GLF_struct_139 _f0;
 mat4x2 _f1;
 _GLF_struct_140 _f2;
 mat2 _f3;
 _GLF_struct_141 _f4;
 _GLF_struct_142 _f5;
 _GLF_struct_143 _f6;
} ;

struct _GLF_struct_138 {
 int _f0;
} ;

struct _GLF_struct_136 {
 uint _f0;
 mat2x4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_137 {
 _GLF_struct_136 _f0;
} ;

struct _GLF_struct_145 {
 _GLF_struct_137 _f0;
 int _injected_loop_counter;
 _GLF_struct_138 _f1;
 ivec4 _f2;
 _GLF_struct_144 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_133 {
 uvec4 _f0;
} ;

struct _GLF_struct_132 {
 mat3x2 _f0;
 int _f1;
} ;

struct _GLF_struct_131 {
 int _f0;
 uvec4 _f1;
 bvec3 _f2;
 vec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_134 {
 _GLF_struct_131 _f0;
 _GLF_struct_132 _f1;
 vec4 _f2;
 vec4 _f3;
 _GLF_struct_133 _f4;
 bvec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_129 {
 mat3x4 _f0;
} ;

struct _GLF_struct_128 {
 bvec4 _f0;
 mat2x4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_130 {
 _GLF_struct_128 _f0;
 mat3x2 _f1;
 _GLF_struct_129 _f2;
 float _f3;
 vec4 _f4;
} ;

struct _GLF_struct_126 {
 ivec3 _f0;
 mat4 _f1;
 float _f2;
} ;

struct _GLF_struct_127 {
 mat3x4 _f0;
 mat3 _f1;
 _GLF_struct_126 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_124 {
 uvec2 _f0;
 mat2x4 _f1;
 float _f2;
 vec2 _f3;
 bvec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_123 {
 mat2x4 _f0;
 bvec2 _f1;
 uint _f2;
 uint _f3;
 mat4 _f4;
} ;

struct _GLF_struct_125 {
 _GLF_struct_123 _f0;
 int _f1;
 _GLF_struct_124 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_135 {
 int _injected_loop_counter;
 mat3 _f0;
 _GLF_struct_125 _f1;
 _GLF_struct_127 _f2;
 _GLF_struct_130 _f3;
 _GLF_struct_134 _f4;
} ;

struct _GLF_struct_120 {
 uvec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_121 {
 _GLF_struct_120 _f0;
 float _f1;
 bvec3 _f2;
 uvec3 GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_size;
 float _f3;
} ;

struct _GLF_struct_118 {
 uvec4 _f0;
} ;

struct _GLF_struct_119 {
 _GLF_struct_118 _f0;
} ;

struct _GLF_struct_116 {
 vec2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_115 {
 mat2x4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_117 {
 uvec4 _f0;
 _GLF_struct_115 _f1;
 mat2 _f2;
 _GLF_struct_116 _f3;
 uint _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_122 {
 _GLF_struct_117 _f0;
 vec4 _f1;
 _GLF_struct_119 _f2;
 _GLF_struct_121 _f3;
} ;

struct _GLF_struct_112 {
 mat3x2 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 mat3x2 _f3;
 uvec4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_111 {
 mat2x4 _f0;
 float _f1;
 vec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_110 {
 mat2x4 _f0;
 uvec4 _f1;
 uvec2 _f2;
 mat2 _f3;
 bool _f4;
} ;

struct _GLF_struct_113 {
 _GLF_struct_110 _f0;
 int _f1;
 _GLF_struct_111 _f2;
 bvec3 _f3;
 _GLF_struct_112 _f4;
} ;

struct _GLF_struct_108 {
 mat4x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_107 {
 float _f0;
 vec2 _f1;
 mat3x4 _f2;
 bool _f3;
} ;

struct _GLF_struct_106 {
 ivec4 _f0;
 bvec4 _f1;
 float _f2;
 ivec3 _f3;
 ivec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_105 {
 bvec3 _f0;
 mat3x4 _f1;
 mat3 _f2;
 uvec3 _f3;
 bool _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_109 {
 mat3x2 _f0;
 _GLF_struct_105 _f1;
 _GLF_struct_106 _f2;
 _GLF_struct_107 _f3;
 _GLF_struct_108 _f4;
} ;

struct _GLF_struct_114 {
 _GLF_struct_109 _f0;
 int _injected_loop_counter;
 _GLF_struct_113 _f1;
} ;

struct _GLF_struct_102 {
 uvec4 _f0;
 float _f1;
 ivec2 _f2;
 uvec4 _f3;
 ivec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_103 {
 _GLF_struct_102 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_100 {
 bvec4 _f0;
 mat3x2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_99 {
 bvec4 _f0;
 mat3x2 _f1;
 bvec2 _f2;
 vec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_98 {
 mat4 _f0;
} ;

struct _GLF_struct_101 {
 mat4x2 _f0;
 _GLF_struct_98 _f1;
 _GLF_struct_99 _f2;
 mat2x4 _f3;
 _GLF_struct_100 _f4;
} ;

struct _GLF_struct_96 {
 uvec3 _f0;
 vec3 _f1;
 float _f2;
 int _f3;
 mat4 _f4;
 bool _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_97 {
 _GLF_struct_96 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_94 {
 mat2x3 _f0;
 mat4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_93 {
 uvec2 _f0;
 vec3 _f1;
 vec4 _f2;
 ivec3 _f3;
 float _f4;
 mat4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_95 {
 _GLF_struct_93 _f0;
 int _injected_loop_counter;
 bvec3 _f1;
 _GLF_struct_94 _f2;
 bool _f3;
} ;

struct _GLF_struct_91 {
 mat3x2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_90 {
 mat2 _f0;
 vec4 _f1;
 mat2x3 _f2;
 mat4x2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_89 {
 bvec3 _f0;
} ;

struct _GLF_struct_88 {
 int _f0;
 ivec4 _f1;
 ivec2 _f2;
 mat4x3 _f3;
 bvec4 _f4;
 bvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_92 {
 _GLF_struct_88 _f0;
 _GLF_struct_89 _f1;
 uvec3 _f2;
 _GLF_struct_90 _f3;
 _GLF_struct_91 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_104 {
 _GLF_struct_92 _f0;
 mat3x2 _f1;
 vec4 _f2;
 _GLF_struct_95 _f3;
 _GLF_struct_97 _f4;
 _GLF_struct_101 _f5;
 _GLF_struct_103 _f6;
} ;

struct _GLF_struct_86 {
 bvec2 _f0;
 float _f1;
 uvec4 _f2;
 mat4x2 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_84 {
 ivec4 _f0;
} ;

struct _GLF_struct_85 {
 bvec4 _f0;
 vec4 _f1;
 ivec2 _f2;
 _GLF_struct_84 _f3;
} ;

struct _GLF_struct_87 {
 uvec2 _f0;
 mat4x3 _f1;
 _GLF_struct_85 _f2;
 vec2 _f3;
 _GLF_struct_86 _f4;
} ;

struct _GLF_struct_81 {
 mat3x4 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_82 {
 uvec4 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id;
 _GLF_struct_81 _f0;
 ivec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_83 {
 uvec4 _f0;
 _GLF_struct_82 _f1;
} ;

struct _GLF_struct_78 {
 ivec2 _f0;
 uvec2 _f1;
 uvec4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_77 {
 mat4x2 _f0;
} ;

struct _GLF_struct_76 {
 mat3 _f0;
 mat4x2 _f1;
 mat2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_79 {
 mat3x4 _f0;
 vec2 _f1;
 _GLF_struct_76 _f2;
 mat3x2 _f3;
 _GLF_struct_77 _f4;
 bvec4 _f5;
 _GLF_struct_78 _f6;
} ;

struct _GLF_struct_74 {
 ivec3 _f0;
 float _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_73 {
 mat4x3 _f0;
 uvec2 _f1;
 uvec2 _f2;
 uvec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_72 {
 mat2x3 _f0;
} ;

struct _GLF_struct_71 {
 mat4x3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_70 {
 mat3x4 _f0;
 bvec2 _f1;
 uvec4 _f2;
 bool _f3;
} ;

struct _GLF_struct_75 {
 _GLF_struct_70 _f0;
 mat4x3 _f1;
 _GLF_struct_71 _f2;
 _GLF_struct_72 _f3;
 float _f4;
 _GLF_struct_73 _f5;
 int _injected_loop_counter;
 _GLF_struct_74 _f6;
} ;

struct _GLF_struct_68 {
 bvec3 _f0;
 ivec4 _f1;
 bool _f2;
 ivec2 _f3;
 mat2 _f4;
 uvec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_67 {
 uvec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_66 {
 mat2x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_69 {
 _GLF_struct_66 _f0;
 mat4x3 _f1;
 _GLF_struct_67 _f2;
 _GLF_struct_68 _f3;
} ;

struct _GLF_struct_80 {
 _GLF_struct_69 _f0;
 uvec3 _f1;
 uint _f2;
 vec3 _f3;
 mat4x3 _f4;
 _GLF_struct_75 _f5;
 _GLF_struct_79 _f6;
} ;

struct _GLF_struct_63 {
 uvec2 _f0;
 mat2 _f1;
 ivec3 _f2;
 mat3x2 _f3;
 uint _f4;
} ;

struct _GLF_struct_62 {
 bvec2 _f0;
 float _f1;
 bvec3 _f2;
 bvec2 _f3;
 ivec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_64 {
 _GLF_struct_62 _f0;
 _GLF_struct_63 _f1;
 ivec4 _f2;
 mat2x3 _f3;
 vec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_60 {
 int _f0;
 bvec2 _f1;
 bvec2 _f2;
 ivec4 _f3;
 bvec4 _f4;
 uvec2 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_59 {
 mat3 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 bvec4 _f3;
 vec2 _f4;
 mat2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_61 {
 uint _f0;
 bvec4 _f1;
 _GLF_struct_59 _f2;
 _GLF_struct_60 _f3;
 uint read_2;
} ;

struct _GLF_struct_58 {
 mat3x2 _f0;
 mat4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_57 {
 mat4x2 _f0;
 vec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_55 {
 bvec4 _f0;
 mat2x3 _f1;
 mat4 _f2;
 uint _f3;
 mat2 _f4;
} ;

struct _GLF_struct_54 {
 mat3 _f0;
 ivec3 _f1;
 uint _f2;
 uvec2 _f3;
 ivec3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_56 {
 mat4 _f0;
 _GLF_struct_54 _f1;
 _GLF_struct_55 _f2;
 ivec4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_52 {
 bvec4 _f0;
 mat4x3 _f1;
 uvec4 _f2;
 mat2x3 _f3;
 int _f4;
 int _f5;
 vec3 _f6;
} ;

struct _GLF_struct_53 {
 ivec2 _f0;
 _GLF_struct_52 _f1;
 bvec2 _f2;
 bool _f3;
} ;

struct _GLF_struct_65 {
 _GLF_struct_53 _f0;
 _GLF_struct_56 _f1;
 _GLF_struct_57 _f2;
 _GLF_struct_58 _f3;
 _GLF_struct_61 _f4;
 _GLF_struct_64 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_49 {
 vec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_48 {
 bvec3 _f0;
 vec4 _f1;
 vec3 _f2;
 mat2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_50 {
 _GLF_struct_48 _f0;
 _GLF_struct_49 _f1;
 mat2x4 _f2;
 mat2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_46 {
 uvec2 _f0;
 vec3 _f1;
 ivec4 _f2;
 mat2x3 _f3;
 uvec3 _f4;
 bvec2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_45 {
 bvec4 _f0;
 uint _f1;
 uvec4 _f2;
 uvec2 _f3;
 vec4 _f4;
 ivec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_44 {
 mat2 _f0;
 uint _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_43 {
 vec3 _f0;
 ivec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_42 {
 mat4 _f0;
 mat4 _f1;
 float _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_47 {
 _GLF_struct_42 _f0;
 _GLF_struct_43 _f1;
 ivec4 _f2;
 _GLF_struct_44 _f3;
 _GLF_struct_45 _f4;
 _GLF_struct_46 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_51 {
 mat4x3 _f0;
 uvec2 _f1;
 mat4 _f2;
 int _injected_loop_counter;
 _GLF_struct_47 _f3;
 _GLF_struct_50 _f4;
} ;

struct _GLF_struct_39 {
 ivec2 _f0;
} ;

struct _GLF_struct_40 {
 uvec2 _f0;
 int _injected_loop_counter;
 mat3 _f1;
 _GLF_struct_39 _f2;
 bvec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_38 {
 uvec2 _f0;
} ;

struct _GLF_struct_41 {
 mat2x4 _f0;
 mat3x4 _f1;
 _GLF_struct_38 _f2;
 _GLF_struct_40 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_35 {
 vec2 _f0;
 mat4x3 _f1;
 uint _f2;
 ivec4 _f3;
 int _f4;
 bvec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_34 {
 bvec2 _f0;
 bvec4 _f1;
 uvec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_36 {
 mat3 _f0;
 mat3x2 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_35 _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_33 {
 uvec2 _f0;
 int _f1;
} ;

struct _GLF_struct_31 {
 vec3 _f0;
 mat3 _f1;
 float _f2;
 bvec4 _f3;
 bvec2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_30 {
 mat2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_32 {
 uint _f0;
 _GLF_struct_30 _f1;
 mat4 _f2;
 _GLF_struct_31 _f3;
} ;

struct _GLF_struct_28 {
 mat4x3 _f0;
} ;

struct _GLF_struct_29 {
 _GLF_struct_28 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_26 {
 mat4 _f0;
 uvec2 _f1;
 uvec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_25 {
 float _f0;
 vec3 _f1;
 int _f2;
} ;

struct _GLF_struct_27 {
 bvec4 _f0;
 _GLF_struct_25 _f1;
 _GLF_struct_26 _f2;
 vec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_37 {
 _GLF_struct_27 _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_32 _f2;
 _GLF_struct_33 _f3;
 mat3x2 _f4;
 uvec2 _f5;
 uvec2 GLF_merged2_0_1_13_1_1_6num_workgroupread_1;
 _GLF_struct_36 _f6;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 mat2x3 _f1;
 ivec3 _f2;
 uvec4 _f3;
 uvec3 _f4;
 vec2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_21 {
 bvec3 _f0;
 mat2 _f1;
 mat2x4 _f2;
 bvec3 _f3;
 bvec4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 _GLF_struct_22 _f3;
 uint _f4;
 vec2 _f5;
} ;

struct _GLF_struct_20 {
 bool _f0;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 float _f1;
 vec4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_24 {
 mat4 _f0;
 uint workgroup_id;
 float _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_23 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_18 {
 ivec3 _f0;
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base;
} ;

struct _GLF_struct_15 {
 float _f0;
 mat3 _f1;
 uint _f2;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_13 {
 float _f0;
 mat4x2 _f1;
 vec2 _f2;
 mat2x4 _f3;
 int _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_12 {
 int _f0;
 mat3x4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 mat4x2 _f1;
 bvec3 _f2;
 bvec3 _f3;
 bvec2 _f4;
 mat2x4 _f5;
 int _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
 mat2x4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_14 _f0;
 _GLF_struct_16 _f1;
 mat4x2 _f2;
 uvec2 GLF_merged2_0_1_6_1_1_12read_1workgroup_id;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 mat4x2 _f1;
 mat2 _f2;
 float _f3;
} ;

struct _GLF_struct_6 {
 float _f0;
 uvec3 _f1;
 uvec4 _f2;
 vec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 bvec2 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 mat3 _f1;
 mat2x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 bool _f1;
 mat4x2 _f2;
 uvec3 _f3;
 mat3 _f4;
 ivec4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 mat4x2 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
} ;

struct _GLF_struct_9 {
 uint next_virtual_gid;
 mat2x4 _f0;
 mat4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_8 _f3;
 vec4 _f4;
 mat4x3 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec4 GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2;
 _GLF_struct_83 _GLF_struct_replacement_83;
 _GLF_struct_122 _GLF_struct_replacement_122;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz = _GLF_struct_replacement_122._f3.GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_size;
  }
 _GLF_struct_37 _GLF_struct_replacement_37;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_struct_17 _GLF_struct_replacement_17;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (_GLF_IDENTITY(int(0), int(int(int(0))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(_GLF_struct_135 _GLF_struct_replacement_135 = _GLF_struct_135(1, mat3(1.0), _GLF_struct_125(_GLF_struct_123(mat2x4(1.0), bvec2(true), 1u, 1u, mat4(1.0)), 1, _GLF_struct_124(uvec2(1u), mat2x4(1.0), 1.0, vec2(1.0), bvec4(true), uvec4(1u)), mat2x3(1.0)), _GLF_struct_127(mat3x4(1.0), mat3(1.0), _GLF_struct_126(ivec3(1), mat4(1.0), 1.0), mat4x3(1.0)), _GLF_struct_130(_GLF_struct_128(bvec4(true), mat2x4(1.0), mat2(1.0)), mat3x2(1.0), _GLF_struct_129(mat3x4(1.0)), 1.0, vec4(1.0)), _GLF_struct_134(_GLF_struct_131(1, uvec4(1u), bvec3(true), vec2(1.0), ivec3(1)), _GLF_struct_132(mat3x2(1.0), 1), vec4(1.0), vec4(1.0), _GLF_struct_133(uvec4(1u)), bvec3(true), mat4(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_135._injected_loop_counter != 0); _GLF_struct_replacement_135._injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = (64783 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 62853)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(_GLF_struct_145 _GLF_struct_replacement_145 = _GLF_struct_145(_GLF_struct_137(_GLF_struct_136(1u, mat2x4(1.0), vec4(1.0))), 1, _GLF_struct_138(1), ivec4(1), _GLF_struct_144(_GLF_struct_139(true, ivec4(1), bvec2(true)), mat4x2(1.0), _GLF_struct_140(vec3(1.0), mat3x4(1.0), uvec2(1u)), mat2(1.0), _GLF_struct_141(1, bvec3(true), ivec4(1), vec4(1.0), mat4x2(1.0), 1.0, mat3(1.0)), _GLF_struct_142(mat2x3(1.0), uvec4(1u), mat4x3(1.0), ivec2(1), mat4(1.0)), _GLF_struct_143(mat4x3(1.0))), ivec2(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_145._injected_loop_counter > 0); _GLF_struct_replacement_145._injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 _GLF_struct_18 _GLF_struct_replacement_18;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x = _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       for(_GLF_struct_87 _GLF_struct_replacement_87 = _GLF_struct_87(uvec2(1u), mat4x3(1.0), _GLF_struct_85(bvec4(true), vec4(1.0), ivec2(1), _GLF_struct_84(ivec4(1))), vec2(1.0), _GLF_struct_86(bvec2(true), 1.0, uvec4(1u), mat4x2(1.0), 1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_87._f4._injected_loop_counter != ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) << _GLF_IDENTITY(int(2), int(2)))); _GLF_struct_replacement_87._f4._injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz.z = subgroup_size;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y = GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz.z;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y = _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz.y = subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x = GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz.y;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_replacement_37.GLF_merged2_0_1_13_1_1_6num_workgroupread_1.x = num_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(_GLF_struct_104 _GLF_struct_replacement_104 = _GLF_struct_104(_GLF_struct_92(_GLF_struct_88(1, ivec4(1), ivec2(1), mat4x3(1.0), bvec4(true), bvec4(true), mat3x2(1.0)), _GLF_struct_89(bvec3(true)), uvec3(1u), _GLF_struct_90(mat2(1.0), vec4(1.0), mat2x3(1.0), mat4x2(1.0), bvec3(true)), _GLF_struct_91(mat3x2(1.0), uvec2(1u)), bvec2(true)), mat3x2(1.0), vec4(1.0), _GLF_struct_95(_GLF_struct_93(uvec2(1u), vec3(1.0), vec4(1.0), ivec3(1), 1.0, mat4(1.0), mat4x3(1.0)), (0 & -68935), bvec3(true), _GLF_struct_94(mat2x3(1.0), mat4(1.0), vec2(1.0)), true), _GLF_struct_97(_GLF_struct_96(uvec3(1u), vec3(1.0), 1.0, 1, mat4(1.0), true, uvec3(1u)), mat2x4(1.0), mat2x3(1.0)), _GLF_struct_101(mat4x2(1.0), _GLF_struct_98(mat4(1.0)), _GLF_struct_99(bvec4(true), mat3x2(1.0), bvec2(true), vec3(1.0), uvec2(1u)), mat2x4(1.0), _GLF_struct_100(bvec4(true), mat3x2(1.0), uvec4(1u))), _GLF_struct_103(_GLF_struct_102(uvec4(1u), 1.0, ivec2(1), uvec4(1u), ivec4(1), vec3(1.0)), mat3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_104._f3._injected_loop_counter < 1); _GLF_struct_replacement_104._f3._injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.x = _GLF_struct_replacement_37.GLF_merged2_0_1_13_1_1_6num_workgroupread_1.x;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(mat4(1.0), gl_WorkGroupID.x, 1.0, _GLF_struct_19(vec2(1.0), 1.0, vec4(1.0), vec2(1.0)), _GLF_struct_20(true), _GLF_struct_23(_GLF_struct_21(bvec3(true), mat2(1.0), mat2x4(1.0), bvec3(true), bvec4(true), mat2x4(1.0)), mat3x2(1.0), mat3x2(1.0), _GLF_struct_22(bvec4(true), mat2x3(1.0), ivec3(1), uvec4(1u), uvec3(1u), vec2(1.0), mat3x2(1.0)), 1u, vec2(1.0)), bvec2(true));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_struct_replacement_17.GLF_merged2_0_1_6_1_1_12read_1workgroup_id.y = _GLF_struct_replacement_24.workgroup_id;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_17.GLF_merged2_0_1_6_1_1_12read_1workgroup_id.y;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.w = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-19339))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y + _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   barrier();
  }
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.z = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y + ((_GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y), mat2x4(1.0), mat4(1.0), _GLF_struct_5(_GLF_struct_0(ivec2(1), mat4x2(1.0), uvec2(1u), mat2x4(1.0), vec2(1.0)), _GLF_struct_1(ivec2(1), true, mat4x2(1.0), uvec3(1u), mat3(1.0), ivec4(1), mat3x4(1.0)), _GLF_struct_2(vec2(1.0), mat3x4(1.0)), _GLF_struct_3(mat4x2(1.0), mat3(1.0), mat2x4(1.0), bvec2(true)), _GLF_struct_4(uvec3(1u), bvec2(true), mat4x3(1.0), mat2x3(1.0), mat4(1.0))), _GLF_struct_8(_GLF_struct_6(1.0, uvec3(1u), uvec4(1u), vec2(1.0), mat2x3(1.0)), _GLF_struct_7(vec2(1.0), mat4x2(1.0), mat2(1.0), 1.0), mat3(1.0)), vec4(1.0), mat4x3(1.0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   atomicStore(buf[_GLF_struct_replacement_9.next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.z], 4, 64, 0);
 do
  {
   _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z = read_1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_replacement_37.GLF_merged2_0_1_13_1_1_6num_workgroupread_1.y = _GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z;
 _GLF_struct_replacement_17.GLF_merged2_0_1_6_1_1_12read_1workgroup_id.x = _GLF_struct_replacement_37.GLF_merged2_0_1_13_1_1_6num_workgroupread_1.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_struct_65 _GLF_struct_replacement_65 = _GLF_struct_65(_GLF_struct_53(ivec2(1), _GLF_struct_52(bvec4(true), mat4x3(1.0), uvec4(1u), mat2x3(1.0), 1, 1, vec3(1.0)), bvec2(true), true), _GLF_struct_56(mat4(1.0), _GLF_struct_54(mat3(1.0), ivec3(1), 1u, uvec2(1u), ivec3(1), uvec3(1u)), _GLF_struct_55(bvec4(true), mat2x3(1.0), mat4(1.0), 1u, mat2(1.0)), ivec4(1), ivec3(1)), _GLF_struct_57(mat4x2(1.0), vec2(1.0), uvec2(1u)), _GLF_struct_58(mat3x2(1.0), mat4(1.0), vec3(1.0)), _GLF_struct_61(1u, bvec4(true), _GLF_struct_59(mat3(1.0), mat4x3(1.0), mat2x4(1.0), bvec4(true), vec2(1.0), mat2(1.0), ivec4(1)), _GLF_struct_60(1, bvec2(true), bvec2(true), ivec4(1), bvec4(true), uvec2(1u), uvec2(1u)), atomicLoad(buf[_GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.z], 4, 64, 0)), _GLF_struct_64(_GLF_struct_62(bvec2(true), 1.0, bvec3(true), bvec2(true), ivec3(1), vec3(1.0)), _GLF_struct_63(uvec2(1u), mat2(1.0), ivec3(1), mat3x2(1.0), 1u), ivec4(1), mat2x3(1.0), vec3(1.0), vec2(1.0)), ivec2(1));
 GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.w = _GLF_struct_replacement_65._f4.read_2;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz.x = GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.w;
  }
 for(_GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(mat2x4(1.0), mat3x4(1.0), _GLF_struct_38(uvec2(1u)), _GLF_struct_40(uvec2(1u), (1 ^ 1), mat3(1.0), _GLF_struct_39(ivec2(1)), bvec2(true), 1u), mat4x2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_41._f3._injected_loop_counter < 1); _GLF_struct_replacement_41._f3._injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.y = GLF_merged2_0_3_67_3_1_6GLF_merged3_0_1_6_1_1_17_2_1_13read_2subgroup_local_idsubgroup_sizeread_2.xyz.x;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 & -71592); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_struct_replacement_83._f1.GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1 < GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), int(ivec4(int(1), 0, 0, 1)))) >> 0)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
   for(_GLF_struct_80 _GLF_struct_replacement_80 = _GLF_struct_80(_GLF_struct_69(_GLF_struct_66(mat2x3(1.0), ivec3(1)), mat4x3(1.0), _GLF_struct_67(uvec2(1u), mat3x2(1.0)), _GLF_struct_68(bvec3(true), ivec4(1), true, ivec2(1), mat2(1.0), uvec3(1u), mat4x3(1.0))), uvec3(1u), 1u, vec3(1.0), mat4x3(1.0), _GLF_struct_75(_GLF_struct_70(mat3x4(1.0), bvec2(true), uvec4(1u), true), mat4x3(1.0), _GLF_struct_71(mat4x3(1.0), bvec3(true)), _GLF_struct_72(mat2x3(1.0)), 1.0, _GLF_struct_73(mat4x3(1.0), uvec2(1u), uvec2(1u), uvec3(1u), vec3(1.0)), 0, _GLF_struct_74(ivec3(1), 1.0, mat2x4(1.0))), _GLF_struct_79(mat3x4(1.0), vec2(1.0), _GLF_struct_76(mat3(1.0), mat4x2(1.0), mat2(1.0), mat3x4(1.0)), mat3x2(1.0), _GLF_struct_77(mat4x2(1.0)), bvec4(true), _GLF_struct_78(ivec2(1), uvec2(1u), uvec4(1u), mat2x3(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_80._f5._injected_loop_counter < (1 & 1)); _GLF_struct_replacement_80._f5._injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, clamp(1, 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | (1 & 1))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(buf[_GLF_struct_replacement_9.next_virtual_gid], uint(_GLF_struct_replacement_17.GLF_merged2_0_1_6_1_1_12read_1workgroup_id.x == _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.y) + 1, 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   subgroupAll(false);
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(_GLF_struct_164 _GLF_struct_replacement_164 = _GLF_struct_164(1, _GLF_struct_148(_GLF_struct_146(1, bvec4(true), 1u, mat3x4(1.0), vec2(1.0)), _GLF_struct_147(uvec3(1u), uvec2(1u), mat3x4(1.0), mat4(1.0), vec3(1.0), mat4x2(1.0), uvec4(1u))), _GLF_struct_153(_GLF_struct_149(mat4(1.0), mat4(1.0), ivec4(1), bvec2(true), mat4x2(1.0)), _GLF_struct_150(vec3(1.0), mat4(1.0), vec2(1.0), mat2(1.0), ivec2(1)), _GLF_struct_151(bvec3(true), 1.0, ivec2(1)), 1u, _GLF_struct_152(1.0, ivec2(1), ivec3(1), vec4(1.0), mat4x2(1.0), 1.0, mat3x4(1.0)), 1), _GLF_struct_158(_GLF_struct_154(mat4x3(1.0), ivec2(1), mat4x2(1.0), mat4x3(1.0), 1.0), _GLF_struct_155(mat4x2(1.0), bvec2(true), mat3x4(1.0), vec2(1.0), vec2(1.0), uvec2(1u), 1), vec3(1.0), _GLF_struct_156(ivec3(1)), vec2(1.0), _GLF_struct_157(mat3x4(1.0), uvec4(1u), mat4(1.0), bvec2(true), bvec2(true), bvec4(true), ivec3(1)), vec2(1.0)), _GLF_struct_161(_GLF_struct_159(ivec2(1), mat4x2(1.0), mat3x4(1.0), bvec4(true), bvec3(true), bvec2(true)), 1u, _GLF_struct_160(mat2x3(1.0), mat2x3(1.0), uvec3(1u), 1.0, mat4(1.0))), _GLF_struct_163(_GLF_struct_162(1u, mat4x3(1.0), 1, uvec3(1u)), mat4x2(1.0)), mat3x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_164._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_164._injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> 0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(_GLF_struct_166 _GLF_struct_replacement_166 = _GLF_struct_166(bvec3(true), mat2x4(1.0), bvec4(true), 1, ivec2(1), _GLF_struct_165(true, uvec3(1u), mat2x3(1.0), mat4x2(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_166._injected_loop_counter > 0); _GLF_struct_replacement_166._injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 ^ 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           for(_GLF_struct_114 _GLF_struct_replacement_114 = _GLF_struct_114(_GLF_struct_109(mat3x2(1.0), _GLF_struct_105(bvec3(true), mat3x4(1.0), mat3(1.0), uvec3(1u), true, bvec4(true)), _GLF_struct_106(ivec4(1), bvec4(true), 1.0, ivec3(1), ivec4(1), bvec2(true)), _GLF_struct_107(1.0, vec2(1.0), mat3x4(1.0), true), _GLF_struct_108(mat4x2(1.0), uvec3(1u))), 0, _GLF_struct_113(_GLF_struct_110(mat2x4(1.0), uvec4(1u), uvec2(1u), mat2(1.0), true), 1, _GLF_struct_111(mat2x4(1.0), 1.0, vec4(1.0), mat4(1.0)), bvec3(true), _GLF_struct_112(mat3x2(1.0), mat4x2(1.0), ivec3(1), mat3x2(1.0), uvec4(1u), vec2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_114._injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))))); _GLF_struct_replacement_114._injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 & (-70322 & 62472)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(buf[_GLF_struct_replacement_9.next_virtual_gid], uint(_GLF_struct_replacement_17.GLF_merged2_0_1_6_1_1_12read_1workgroup_id.x == _GLF_struct_replacement_18.GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.y) + 1, 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(_GLF_struct_176 _GLF_struct_replacement_176 = _GLF_struct_176(ivec2(1), uvec3(1u), 1, mat2x3(1.0), _GLF_struct_169(_GLF_struct_167(1.0), mat3x4(1.0), bvec3(true), _GLF_struct_168(mat3x4(1.0), true)), true, _GLF_struct_174(bvec2(true), mat2(1.0), _GLF_struct_170(vec3(1.0), 1.0, mat2x4(1.0)), mat2x3(1.0), _GLF_struct_171(1u, 1u, uvec2(1u), mat2(1.0), uvec4(1u), mat2x3(1.0)), _GLF_struct_172(bvec3(true), mat4x2(1.0), mat4x2(1.0), ivec4(1), mat2(1.0), mat2x4(1.0)), _GLF_struct_173(mat2(1.0), 1u, mat2(1.0), mat2x3(1.0), ivec3(1), mat4x2(1.0))), _GLF_struct_175(uvec2(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_176._injected_loop_counter != 0); _GLF_struct_replacement_176._injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       do
        {
         for(_GLF_struct_183 _GLF_struct_replacement_183 = _GLF_struct_183(1, mat2x3(1.0), _GLF_struct_177(mat2x4(1.0)), ivec3(1), 0, mat3x2(1.0), _GLF_struct_182(_GLF_struct_178(uvec2(1u)), _GLF_struct_179(vec3(1.0), mat4x2(1.0)), _GLF_struct_180(bvec4(true), mat2x4(1.0), mat2x4(1.0), mat3(1.0), uvec3(1u)), _GLF_struct_181(mat2(1.0), mat2(1.0), mat2x4(1.0)), uvec4(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_183._injected_loop_counter != 1); _GLF_struct_replacement_183._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         do
          {
           for(_GLF_struct_51 _GLF_struct_replacement_51 = _GLF_struct_51(mat4x3(1.0), uvec2(1u), mat4(1.0), 0, _GLF_struct_47(_GLF_struct_42(mat4(1.0), mat4(1.0), 1.0, mat2x4(1.0)), _GLF_struct_43(vec3(1.0), ivec3(1), ivec4(1)), ivec4(1), _GLF_struct_44(mat2(1.0), 1u, mat2x3(1.0)), _GLF_struct_45(bvec4(true), 1u, uvec4(1u), uvec2(1u), vec4(1.0), ivec3(1), bvec3(true)), _GLF_struct_46(uvec2(1u), vec3(1.0), ivec4(1), mat2x3(1.0), uvec3(1u), bvec2(true), vec4(1.0)), mat2x3(1.0)), _GLF_struct_50(_GLF_struct_48(bvec3(true), vec4(1.0), vec3(1.0), mat2(1.0), mat4(1.0)), _GLF_struct_49(vec2(1.0), mat4x2(1.0)), mat2x4(1.0), mat2(1.0), mat4x2(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_51._injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) | 1)); _GLF_struct_replacement_51._injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         subgroupAll(true);
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | (-82147 & 0)) ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 | (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
