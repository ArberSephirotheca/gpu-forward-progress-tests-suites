#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) && true)), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))) && _GLF_IDENTITY(true, (true) || false))) || false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), 0 | (~ (_injected_loop_counter ++)))), (~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), 0 | (~ (_injected_loop_counter ++))))) | 0)))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY((int(2)), min((int(2)), (int(2))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, false)))) && true)), ! (! (bool(bool(false))))))), bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, false)))) && true)), ! (! (bool(bool(false))))))), false)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-776.660, 3699.9222), vec2(58.79, 9940.2557), injectionSwitch))))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) || false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) || false))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) || false))), ! (! ((! (_GLF_IDENTITY(true, (true) || false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false)))) || false)))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, true)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.5)), bvec2(true, false))).x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.6)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, 1.0)), 0.0 + (float(vec2(0.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))), false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, true), false), false)), false))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, true), false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, true), false), false)), false))), true))), false))))), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))))), bool(bvec2(! (bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), false)), true)))))), false)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), mix(float(_GLF_FUZZED(7.6)), float(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(true)))) - 0.0)), 1.0 * (float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), mix(float(_GLF_FUZZED(7.6)), float(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(true)))) - 0.0)))))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         return;
         for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[_GLF_IDENTITY(1, int(ivec3(1, (-14094 & 0), int(_GLF_ONE(1.0, injectionSwitch.y)))))])))), injectionSwitch)).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)) && true, bool(bvec3((_GLF_DEAD(false)) && true, true, true))), false, true))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size * workgroup_id));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) / 1u) >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))), (true ? subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))) >> 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))), ((_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))))) | 0u)) | (~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))))))) : _GLF_FUZZED(workgroup_base))), uint(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) / 1u) >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))), (true ? subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))) >> 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))), ((_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u))))) | 0u)) | (~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 1u)))))))) : _GLF_FUZZED(workgroup_base))), 1u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) * 1u), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), uint(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u)))))), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) * 1u), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), uint(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u)))))))) ^ 0u), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), min(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))) ^ 0u), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec4(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), 1u, 0u, 1u)))) * 1u), (true ? 0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u)))) : _GLF_FUZZED(subgroup_id)))), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u), (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u), (uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u)) + uvec2(0u, 0u))) - uvec2(0u, 0u))))))) ^ 0u)) | (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) * 1u), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), uint(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) * 1u), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), uint(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) * 1u), (true ? 0u >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), uint(uvec2((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (true ? _GLF_IDENTITY(0u, min(0u, 0u)) >> _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))), 0u)))))))) ^ 0u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) || false)) && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))) ^ (0 | (1)))))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(5), int(5)), ((1 & 1) << _GLF_IDENTITY(int(5), int(5))) | ((1 & 1) << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(23285) : int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), false, false)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter)) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 1.0))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(39.60) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) * mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-15.06) : 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))).x)) > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-47.52, min(-47.52, _GLF_IDENTITY(-47.52, float(vec3(-47.52, 0.0, 1.0))))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(vec2(-9.2, -14.20), injectionSwitch, 195.702)) : injectionSwitch)).y)))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], uint(uvec3(buf[virtual_gid], (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | (0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) - 0u))))), uint(5u))), 0u))), 4, 64, 0);
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ((virtual_gid)) | ((virtual_gid))) | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))))))))], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))), true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bool((false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool((false) || false)))))), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true)))), false), true, _GLF_IDENTITY(true, _GLF_IDENTITY((true), (_GLF_IDENTITY((true), false || ((true)))) && true) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) && true)), (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true)))), false), true, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), false || ((true)))) && true) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(false || ((true)), (false || ((true))) || false))) && true) && _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (true)))), (injectionSwitch.x < injectionSwitch.y))) || false)))), true))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false)))))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (_GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec2(true, true)), false), bvec2(bvec2(bvec2(bool(bvec2(true, true)), false))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bvec2(bool(bvec2(true, true)), false), bvec2(bvec2(bvec2(bool(bvec2(true, true)), false))))))), ! (! (bool(bool(bool(_GLF_IDENTITY(bvec2(bool(bvec2(true, true)), false), bvec2(bvec2(bvec2(bool(bvec2(true, true)), false)))))))))))))))) && true) && (bool((_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), (true && (_GLF_IDENTITY(false, ! (! (false))))) && true)) || false))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(true, true && (true)) && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(true, (true) || false)))), true, _GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(false, bool(bool(false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0))))), float(_GLF_FUZZED(88.07)), bool(false))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, true)))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))) && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false), bvec2(bvec4(bvec2(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false), true, false)))), (bool(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false), bvec2(bvec4(bvec2(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false), true, false))))) && true))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false))), false, false, true))), false, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false))), false, false, true))), false, false))))))))) || false)))))) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x), (false ? _GLF_FUZZED((+ -522.770)) : clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.7) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (vec2(injectionSwitch.x, 0.0)) - vec2(0.0, 0.0))), float(vec2(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5.1, 2.2)))).x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), true, true, true)))), _GLF_IDENTITY(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))))) || false))))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false)) || false)) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0))), clamp(_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0))), (_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))) / 1.0), _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), true, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), _GLF_IDENTITY(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), _GLF_IDENTITY(bool(bvec2(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), true)), false || (bool(bvec2(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), true))))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && _GLF_IDENTITY((bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), ! (! ((bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), bool(bool((! (! (false))))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))))))) && true)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), _GLF_IDENTITY(false, ! (! (false)))), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0))), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), _GLF_IDENTITY(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), _GLF_IDENTITY(bool(bvec2(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), true)), false || (bool(bvec2(true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), true))))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && _GLF_IDENTITY((bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), ! (! ((bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), bool(bool((! (! (false))))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))))))) && true)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), _GLF_IDENTITY(false, ! (! (false)))), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0))), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), true, false)))), false, true))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))), ((true && (_GLF_IDENTITY(false, ! (! (false)))))) || false))), true && (bool(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))), ((true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))) || false), true && (_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)) && true)), true && (! (_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)) && true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec4((_GLF_IDENTITY(false, false || (false))), true, true, true))))))) || false, bool(bvec4((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true)))), true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(true, ! (! (true))) && (! (! (! (false)))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && _GLF_IDENTITY((bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))) || false)), ! (! ((bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))) || false)))))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bool((_GLF_IDENTITY(false, ! (! (false)))))))) && true)) || false)))))) || false) || false))))), false), true, _GLF_IDENTITY(true, (true) || false))), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))))) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, false)))) || false))))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (! (false)))), (bool(! (! (! (false))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(! (! (! (false)))), (bool(! (! (! (false))))) || false)), false))))))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))))), ! (! (bool(bool((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))))))))) && true) && (bool((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))) && true)), ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), true, false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bool(true && (_GLF_IDENTITY(false, ! (! (false)))))), (bool(bool(true && (_GLF_IDENTITY(false, ! (! (false))))))) && true))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false || ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false, true, true))))))))) || false) || false))))), false), _GLF_IDENTITY(true, false || (true)), true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-149.541, 4053.2506)) : injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, tan(0.0)))))).x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0))), _GLF_IDENTITY(dot(vec2(sin(0.0), 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(sin(0.0), 1.0), vec2(0.0, 1.0)), max(dot(vec2(sin(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(sin(0.0), 1.0), vec2(0.0, 1.0))))), 1.0, 1.0))), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, bool(bvec4((true && (_GLF_IDENTITY(false, ! (! (false))))) || false, true, true, true)))), true && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true, bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false))))), ((bool(_GLF_IDENTITY(bool((true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_IDENTITY(true, false || (true)))), true && (bool(bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))))) && true) && (bool((true && (_GLF_IDENTITY(false, ! (! (false))))) || false)))))) || false) || false))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), false), true, true)), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), float(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) * 1.0), 0.0)), 0.0)))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))), true, false)))))))), false))))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-67.52)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), (! (_GLF_IDENTITY(! (false), false || (! (false))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | 0) | 0), ((0 | 0)) ^ 0) : _GLF_FUZZED(72008)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true)))))), (false) && true)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (false) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-9.3, -15.69)))) : _GLF_FUZZED(vec2(353.345, -71.48)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), true)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch)).y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false)))) || false))
      return;
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2), min(uint(read_1 == read_2), uint(read_1 == read_2))) + 1, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))))))
      return;
     subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), clamp(~ (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), uint(uvec4(~ (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), 1u, 1u, 0u))), ~ (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2)))))))) + 1, 4, 64, 4);
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true)))))))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
          barrier();
        }
       subgroupAll(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || false))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false))))))));
    }
  }
}
