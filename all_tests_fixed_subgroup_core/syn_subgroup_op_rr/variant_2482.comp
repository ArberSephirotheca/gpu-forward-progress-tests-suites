#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
        return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (_GLF_IDENTITY(true, (true) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(_GLF_IDENTITY(2, clamp(2, 2, 2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), true))) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter))) >> 0)) - 0) != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(false, (false) && true), true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-713.407))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & _GLF_IDENTITY(1, int(int(1)))), (1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(gl_WorkGroupID[1], max(gl_WorkGroupID[1], gl_WorkGroupID[1]))) | (gl_WorkGroupID[1])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(gl_WorkGroupID[1], max(gl_WorkGroupID[1], gl_WorkGroupID[1]))) | (gl_WorkGroupID[1])), max(_GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(gl_WorkGroupID[1], max(gl_WorkGroupID[1], gl_WorkGroupID[1]))) | (gl_WorkGroupID[1])), _GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(gl_WorkGroupID[1], max(gl_WorkGroupID[1], gl_WorkGroupID[1]))) | (gl_WorkGroupID[1]))))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), gl_WorkGroupID[2])).x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), false || (bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) - vec2(0.0, 0.0)))) + vec2(0.0, 0.0)), injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (92068 & (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 | (_GLF_IDENTITY(int(8), 0 | (int(8))))), _GLF_IDENTITY(int(8), (int(8)) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(16.44), min(_GLF_FUZZED(16.44), _GLF_FUZZED(16.44))) : injectionSwitch.y)), 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(555.363, -183.327, 2.1, -3.3, 97.11, -7329.4817, 5.3, -45.89, 18.35)) : mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (float(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0)), 1.0))))))), true)), _GLF_IDENTITY(true, ! (! (true))), true))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 15096)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))) || false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)) + (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false)))))
            barrier();
           barrier();
          }
        }
      }
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))) && true)))));
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), false, false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), max((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), clamp((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (true) || false)) && true) || false)) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(118498u, 1u * (_GLF_IDENTITY(118498u, max(118498u, 118498u))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), max((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false)), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec2((true) || false, _GLF_IDENTITY(false, true && (false))))))) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), clamp((_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, bool(bvec4((_GLF_IDENTITY(true, (true) || false)) && true, _GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && ((true) || false)))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), false)))))))), (true) || false)) && true) || false)) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(118498u, 1u * (_GLF_IDENTITY(118498u, max(118498u, 118498u))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), max((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), clamp((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (true) || false)) && true) || false)) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(118498u, 1u * (_GLF_IDENTITY(118498u, max(118498u, 118498u))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), max((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false)), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3(_GLF_IDENTITY((true) || false, bool(bool((true) || false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec2((true) || false, _GLF_IDENTITY(false, true && (false))))))) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), clamp((_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) && true, bool(bvec4((_GLF_IDENTITY(true, (true) || false)) && true, _GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && ((true) || false)))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), false)))))))), (true) || false)) && true) || false)) ? subgroup_id * subgroup_size : _GLF_FUZZED(118498u)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) ? subgroup_id * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(118498u, 1u * (_GLF_IDENTITY(118498u, max(118498u, 118498u))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(atomicOr(subgroup_id, subgroup_size)) : workgroup_base + subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), uint(uint(uint(subgroup_local_id)))))))) + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), ((! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ((_GLF_IDENTITY(! (false), ! (! (! (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))) && true))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 & 7554); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))) & 1)); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false)), bool(bvec2(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false, true, false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))) && true))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false || (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), bool(bvec2(bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), true))), ! (_GLF_IDENTITY(! (bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), ! (_GLF_IDENTITY(! (! (bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), (! (! (bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))) && true))))))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   return;
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], _GLF_IDENTITY(0u, min(0u, 0u)) ^ (_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicExchange(subgroup_size, num_workgroup)) : _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)))))))), 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(0u, (0u) / 1u)), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicExchange(subgroup_size, num_workgroup)) : _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)))))))), 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(0u, (0u) / 1u)), (true ? uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicExchange(subgroup_size, num_workgroup)) : _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) ^ 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))))), 1u, 0u, 1u)))))))), 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(0u, (0u) / 1u)) : _GLF_FUZZED(uvec4(53994u, 132427u, 16537u, 139801u))))) ^ uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(uvec4(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), (uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u), uvec4(0u)), (_GLF_IDENTITY(uvec4(0u), uvec4(0u))) ^ uvec4(0u, 0u, 0u, 0u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), (uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u), uvec4(0u)), (_GLF_IDENTITY(uvec4(0u), uvec4(0u))) ^ uvec4(0u, 0u, 0u, 0u))))), min(uint(_GLF_IDENTITY(uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), (uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u), uvec4(0u)), (_GLF_IDENTITY(uvec4(0u), uvec4(0u))) ^ uvec4(0u, 0u, 0u, 0u))))), uint(_GLF_IDENTITY(uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), (uvec4(8u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u), uvec4(0u)), (_GLF_IDENTITY(uvec4(0u), uvec4(0u))) ^ uvec4(0u, 0u, 0u, 0u)))))))) / 1u))), _GLF_IDENTITY(uint(8u), (uint(8u)) * 1u))))], 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, (8u) - 0u), 8u))), (uint(8u)) * _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(virtual_gid)))))))], 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec4(171015u, 139390u, 128210u, 168576u)) : uvec4(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), (virtual_gid) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (uint(8u)) ^ 0u), _GLF_IDENTITY(uint(8u), (uint(8u)) * _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(virtual_gid)))))))], 0u, 0u, 0u)))) >> uvec4(0u, 0u, 0u, 0u))) << uvec4(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) / 1u)) << 0u), 0u)))))), _GLF_IDENTITY(4, (4) - 0), 64, _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), (0) / 1)), 0 | (min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), (0) / 1))))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-49453) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    continue;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(4, max(4, 4)), 0, 1, 0)), ~ (~ (int(ivec4(_GLF_IDENTITY(4, max(4, 4)), 0, 1, 0)))))), 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2), (uint(read_1 == read_2)) - 0u) + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1)), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), ! (! ((_GLF_IDENTITY(! (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)))), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))), clamp((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)))), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)))), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3)))), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))), max((0 << _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), ~ (~ ((0 << _GLF_IDENTITY(int(3), int(3)))))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), ~ (~ (~ (_injected_loop_counter)))))) < 1)) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), ~ (~ (~ (_injected_loop_counter)))))) < 1)) && true))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), ~ (~ (~ (_injected_loop_counter)))))) < 1)) && true)))))) && true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, cos(0.0), 1.0, 1.0, log(1.0), 1.0, tan(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, cos(0.0), 1.0, 1.0, log(1.0), 1.0, tan(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6176.3195) : injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, true, false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))))))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), false, false, true)), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), false, false, true))) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), (bool(bvec3(true, false, false))) && true))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true)), true))))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << (27597 & 0))), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = (0 & -75505); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     subgroupAll(true);
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), ((! _GLF_IDENTITY((false), ! (! ((false)))))) || false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), _GLF_IDENTITY((false) || false, false || ((false) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), (false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6119.1436))) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))), _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)) && true, bool(bvec4((! (injectionSwitch.x > injectionSwitch.y)) && true, false, true, true)))))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (_GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))), true && (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, true)))) && true))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
