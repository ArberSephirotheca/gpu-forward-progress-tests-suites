#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0)), clamp(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0)), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0)), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0))))) < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(false, true), false, true)), false)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(3.3)), bool(false))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, log(1.0), sin(0.0), round(_GLF_IDENTITY(length(normalize(1.0)), mix(float(length(normalize(1.0))), float(_GLF_FUZZED(70.45)), bool(false)))), 0.0, cos(0.0), 1.0, sqrt(1.0)))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), true)))))
          {
           barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID.x), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(~ (gl_WorkGroupID.x), max(~ (gl_WorkGroupID.x), ~ (gl_WorkGroupID.x)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (0 | 0) ^ (int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3)))) - 0), int(3))), (false ? _GLF_FUZZED(-93155) : int(3))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))) ? _GLF_FUZZED(-93155) : int(3)))) + 0, max((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))) ? _GLF_FUZZED(-93155) : int(3)))) + 0, (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))) ? _GLF_FUZZED(-93155) : int(3)))) + 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))), _GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), 0 ^ _GLF_IDENTITY((int(3)), 0 ^ ((int(3))))))), int(3))), int(3)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) && true) || false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) << 0))
                  {
                   barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ ((subgroup_local_id + 1) % subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size) / 1u), ~ (~ ((subgroup_local_id + 1) % subgroup_size))))) + 0u)), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED((subgroup_local_id & workgroup_id)))) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))) / 1u)) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))), ((0u << _GLF_IDENTITY(uint(0u), uint(0u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))), ((0u << _GLF_IDENTITY(uint(0u), uint(0u)))) / 1u))))))))))))))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))))), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))))))), (~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))))))))) | (~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))))))))))))) / 1u)), (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(~ (~ ((subgroup_local_id + 1))), uint(uvec2(~ (~ ((subgroup_local_id + 1))), 1u)))) % subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (~ ((subgroup_local_id + 1) % subgroup_size)), (~ (~ ((subgroup_local_id + 1) % subgroup_size))) << 0u)), uint(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(~ (~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), ~ (_GLF_IDENTITY(~ ((((subgroup_local_id + 1) % subgroup_size))), (~ ((((subgroup_local_id + 1) % subgroup_size)))) | (~ ((((subgroup_local_id + 1) % subgroup_size)))))))))), (~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size))) << 0u))))))) + 0u)), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(workgroup_base))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u))))) ^ 0u) << _GLF_IDENTITY(uint(0u), uint(0u)))))), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u))))) ^ 0u) << _GLF_IDENTITY(uint(0u), uint(0u)))))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u, (0u) | (0u))) | 0u)) ^ 0u)) << 0u)))) ^ 0u) << _GLF_IDENTITY(uint(0u), uint(0u)))))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u))))) ^ 0u) << _GLF_IDENTITY(uint(0u), uint(0u))))))) | 0u)))))))), min(~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)) % subgroup_size, (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))))))), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((subgroup_local_id + 1)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))), 0u | ((0u << _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec3((0u << _GLF_IDENTITY(uint(0u), uint(0u))), 1u, 1u)))))))))))))) / 1u)) : _GLF_FUZZED(subgroup_size))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) + (1)), 1)), (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(1, 1))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(-1094.3126, -5119.8012)) : mat2(1.0) * (injectionSwitch))))), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) * mat2(1.0))).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6)))))) >> 0) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = (((((1 ^ 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))), true, true, false))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(_GLF_IDENTITY(bvec2(true && (false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true && (false), true))), bvec2(bvec3(bvec2(bvec2(bvec2(true && (false), true))), false)))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(0.0, 0.0) + (injectionSwitch)).y))))))))) && true)))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) < injectionSwitch.y)))), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-509.063)), float(injectionSwitch.y), bool(true)))) / 1.0)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1)))) < subgroup_size, bool(bvec4(subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-0.5)))), 1, _GLF_IDENTITY(1, max(1, 1)))) < subgroup_size, false, true, true))), true && (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(int(ivec3((_GLF_IDENTITY(1, max(1, 1))), 0, (0 | (0 << _GLF_IDENTITY(int(1), int(1)))))), (int(ivec3((_GLF_IDENTITY(1, max(1, 1))), 0, (0 | (0 << _GLF_IDENTITY(int(1), int(1))))))) << 0)), (~ (_GLF_IDENTITY(1, max(1, 1)))) - 0))))) < subgroup_size, bool(bvec4(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-84536) : 1)), max(1, 1)))) < subgroup_size, false, true, true))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, max(injectionSwitch.y, injectionSwitch.y)))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, ~ (~ (0))) & 87089)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) >> 0)), max((_GLF_IDENTITY(4, (4) >> 0)), (_GLF_IDENTITY(4, (4) >> 0)))) | (4))), int(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(52673) : 4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) >> 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(4, (4) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(4, (4) >> 0)), 0 | ((_GLF_IDENTITY(4, (4) >> 0))))) | ((_GLF_IDENTITY(4, (4) >> 0)))), (_GLF_IDENTITY(4, (4) >> 0)))) | (4))), int(_GLF_IDENTITY(4, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) ? _GLF_FUZZED(52673) : 4))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), (_GLF_IDENTITY(4, (4) >> 0)) | (_GLF_IDENTITY(4, (4) >> 0)))), max((_GLF_IDENTITY(4, (4) >> 0)), (_GLF_IDENTITY(4, (4) >> 0)))) | (_GLF_IDENTITY(4, (4) ^ 0)))), int(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)) ? _GLF_FUZZED(52673) : 4))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
                            {
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0), ((mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0)) + vec2(0.0, 0.0)))).x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                              }
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       barrier();
                                      }
                                     barrier();
                                    }
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (! (_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
                      }
                    }
                   barrier();
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((-63.17 + injectionSwitch)) : injectionSwitch)).y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(max(next_virtual_gid, next_virtual_gid), (_GLF_IDENTITY(max(next_virtual_gid, next_virtual_gid), _GLF_IDENTITY((max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u))), (_GLF_IDENTITY((max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u))), ((max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u)))) / 1u)) << 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) + 0u), (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(max(next_virtual_gid, next_virtual_gid), (_GLF_IDENTITY(max(next_virtual_gid, next_virtual_gid), (max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) + 0u))))], uint(read_1 == read_2) + 1, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int(4))), 64, _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4) >> 0, ((4) >> 0) | ((4) >> 0)), 0 ^ (_GLF_IDENTITY((4) >> 0, _GLF_IDENTITY(((4) >> 0) | ((4) >> _GLF_IDENTITY(0, clamp(0, 0, 0))), ((_GLF_IDENTITY((4), clamp((4), (4), (4))) >> 0) | ((4) >> 0)) / 1))))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   subgroupAll(false);
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) || (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))) && true))))))))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_FUZZED(-44.70)), bool(false))) > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-62.22)), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_FUZZED(-62.22)))))), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false), false)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-62.22)), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_FUZZED(-62.22)))))), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-62.22)), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_FUZZED(-62.22)))))), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false), false)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-62.22)), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_FUZZED(-62.22)))))), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-62.22)), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_IDENTITY(_GLF_FUZZED(-62.22), min(_GLF_FUZZED(-62.22), _GLF_FUZZED(-62.22)))))), bool(false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false), false)))))), true))))))))))))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))));
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, ~ (~ (read_2)))) + 1, 4, 64, 4);
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-5650) : _GLF_IDENTITY(5, _GLF_IDENTITY(0, max(0, 0)) ^ (5))))), (int(5)) >> 0)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-5650) : _GLF_IDENTITY(5, _GLF_IDENTITY(0, max(0, 0)) ^ (5))))), (int(5)) >> 0))) - 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) | 0)) - 0)), (~ (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(52969) : _injected_loop_counter)))))) - 0))) | 0)) - 0))) / 1)))) > 0), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))))), _injected_loop_counter)))), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), 1 * (max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(max((~ (_injected_loop_counter)), _GLF_IDENTITY((~ (_injected_loop_counter)), int(ivec4((~ (_injected_loop_counter)), _GLF_IDENTITY(1, (1) << 0), (1 ^ 0), (0 >> _GLF_IDENTITY(int(5), int(5))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : max(_GLF_IDENTITY((~ (_injected_loop_counter)), 0 ^ (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 | ((~ (_injected_loop_counter)))))), _GLF_IDENTITY((~ (_injected_loop_counter)), int(ivec4((~ (_injected_loop_counter)), _GLF_IDENTITY(1, (1) << 0), (1 ^ 0), (0 >> _GLF_IDENTITY(int(5), int(5)))))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter)))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0 | (_injected_loop_counter)))))), (_GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter)))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0 | (_injected_loop_counter))))))) | (_GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter)))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0 | (_injected_loop_counter))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), (_injected_loop_counter) / (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1 * (_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? ~ (_injected_loop_counter) : _GLF_FUZZED(atomicMin(_injected_loop_counter, 13839))))), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), (true ? 1 * (_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? ~ (_injected_loop_counter) : _GLF_FUZZED(atomicMin(_injected_loop_counter, 13839))))), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))) : _GLF_FUZZED(9737))), (1 * _GLF_IDENTITY((_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-73434) : _GLF_IDENTITY((_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + _GLF_IDENTITY((_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))) << 0))), 0 | ((_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))), 1, 1, 0)))))) / 1)))), _GLF_IDENTITY(clamp(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | (_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) >> (0 | 0))))), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | 0), _GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), (_GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), max(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))), (false ? _GLF_FUZZED(-80561) : 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))))))))))), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))) | (1 * (_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), ~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), int(ivec3((_injected_loop_counter), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY((~ (_injected_loop_counter)), min(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | ((~ (_injected_loop_counter)))), (~ (_injected_loop_counter)))), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))), min(clamp(~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) >> (0 >> _GLF_IDENTITY(int(3), int(3))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), min(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ _GLF_IDENTITY((_injected_loop_counter), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_injected_loop_counter) : _GLF_FUZZED((~ _injected_loop_counter)))))) | 0), _GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), (_GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), max(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))), (false ? _GLF_FUZZED(-80561) : 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0 | (_injected_loop_counter), (0 | (_injected_loop_counter)) << 0))))))))))), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) - 0)))), 0, 1)), min(int(ivec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) - 0)))), 0, 1)), int(ivec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) - 0)))), 0, 1)))))))))))))) | (1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) - 0)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter)), int(ivec3((~ (_injected_loop_counter)), 1, 0))), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp(_GLF_IDENTITY((~ (_injected_loop_counter)), min(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | ((~ (_injected_loop_counter)))), (~ (_injected_loop_counter)))), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))), clamp(~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | 0), _GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), (_GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), max(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))), (false ? _GLF_FUZZED(-80561) : 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))) | (1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | 0), _GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), (_GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))), max(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))), (false ? _GLF_FUZZED(-80561) : 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))) | (1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))))) ^ 0), ~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp(_GLF_IDENTITY((~ (_injected_loop_counter)), min(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | ((~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))))), (~ (_injected_loop_counter)))), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / 1) / (1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-678.735)), bool(false))), injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-678.735)), bool(false))), injectionSwitch.y, injectionSwitch.y), (false ? _GLF_FUZZED(round(-0.5)) : _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-678.735)), bool(false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-0.3)), bool(false))), _GLF_FUZZED(-7.4)), vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch)).y), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-678.735)), bool(false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-0.3)), bool(false))), _GLF_FUZZED(-7.4)), vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch)).y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-678.735)), bool(false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-0.3)), bool(false))), _GLF_FUZZED(-7.4)), vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch)).y)), float(_GLF_FUZZED(-6237.9206)), bool(false)))) / abs(1.0))))))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(-678.735)), bool(false))), injectionSwitch.y, injectionSwitch.y), (clamp(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(vec3(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), 0.0, 0.0))), float(_GLF_FUZZED(-678.735)), bool(false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, injectionSwitch.y)) - 0.0))))) * 1)) << 0))), max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), int(_GLF_IDENTITY(ivec2((_injected_loop_counter), 0), ivec2(0, 0) | (ivec2((_injected_loop_counter), 0)))))), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), min(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), ~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))), ~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), (~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), 0 + (_GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter), int(_GLF_IDENTITY(ivec2((_injected_loop_counter), 0), ivec2(0, 0) | (ivec2((_injected_loop_counter), 0)))))), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), min(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), ~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))), ~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ _GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) >> 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))), (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) >> 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))))))), (1 * (_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) >> 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))) / 1)), ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec3(~ (_injected_loop_counter), 1, 0)))) << 0) : _GLF_FUZZED(43817)))), 1 * _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & _GLF_IDENTITY(0, (0) * (1 & 1))) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) >> 0))) / 1)))), min((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)), ((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))))) ^ 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) >> 0))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))) | ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec3(~ (_injected_loop_counter), 1, 0)))) << 0) : _GLF_FUZZED(43817)))), 1 * _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & _GLF_IDENTITY(0, (0) * (1 & 1))) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) >> 0))) / 1)))), min((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)), ((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))))) ^ 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) >> 0))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))) | ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec3(~ (_injected_loop_counter), 1, 0)))) << 0) : _GLF_FUZZED(43817)))), 1 * _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & _GLF_IDENTITY(0, (0) * (1 & 1))) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) >> 0))) / 1)))), min((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)), ((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))))) ^ 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) >> 0))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))) | ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec3(~ (_injected_loop_counter), 1, 0)))) << 0) : _GLF_FUZZED(43817)))), 1 * _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & _GLF_IDENTITY(0, (0) * (1 & 1))) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) >> 0))) / 1)))), min((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)), ((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))))) ^ 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) >> 0))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))) | ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (true ? _GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec3(~ (_injected_loop_counter), 1, 0)))) << 0) : _GLF_FUZZED(43817)))), 1 * _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & _GLF_IDENTITY(0, (0) * (1 & 1))) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) >> 0))) / 1)))), min((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1)), ((_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(~ (_injected_loop_counter), (16837 & 0) | (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter)))) / 1))))) ^ 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) >> 0))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))) | ((_GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(0, (0) << 0) + (_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))))))))), ~ _GLF_IDENTITY((~ (_injected_loop_counter)), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) << (1 ^ 1)), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), (~ (_injected_loop_counter)) << 0)), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), (~ (_injected_loop_counter)) << 0)), 1, 0, 0)))) : _GLF_FUZZED(23783)), (true ? _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter))))), (~ (_injected_loop_counter)) << 0))) : _GLF_FUZZED(23783)), max(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter))))), (~ (_injected_loop_counter)) << 0))) : _GLF_FUZZED(23783)), int(ivec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter))))), (~ (_injected_loop_counter)) << 0))) : _GLF_FUZZED(23783)), 0, 1, 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter))))), (~ (_injected_loop_counter)) << 0))) : _GLF_FUZZED(23783)))) : _GLF_FUZZED(5625))))), 0 + _GLF_IDENTITY((_GLF_IDENTITY((~ (_injected_loop_counter)), clamp(_GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) / _GLF_IDENTITY(1, (1) | 0)), (~ (_injected_loop_counter)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_injected_loop_counter), clamp(int(_injected_loop_counter), int(_injected_loop_counter), int(_injected_loop_counter)))), 0 ^ (int(_GLF_IDENTITY(int(_injected_loop_counter), clamp(int(_injected_loop_counter), int(_injected_loop_counter), int(_injected_loop_counter))))))), _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | _GLF_IDENTITY((_injected_loop_counter), ~ (~ (_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | (_GLF_IDENTITY((_injected_loop_counter), ~ (~ ((_injected_loop_counter)))))))))))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1))), (~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1))) : _GLF_FUZZED(atomicAdd(_injected_loop_counter, 61144))))))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1)))), (true ? ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 | (_injected_loop_counter))))))) - (1 ^ 1)))) : _GLF_FUZZED(atomicMin(_injected_loop_counter, _injected_loop_counter)))))))))), ((_GLF_IDENTITY((~ (_injected_loop_counter)), clamp((~ (_injected_loop_counter)), (~ (_injected_loop_counter)), (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))) - (_GLF_IDENTITY(_GLF_IDENTITY(79602, (79602) >> 0), min(79602, 79602)) & 0))))))))))) * 1)) | 0) > 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 do
                  {
                   subgroupAll(true);
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, false, true)))))))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
  }
}
