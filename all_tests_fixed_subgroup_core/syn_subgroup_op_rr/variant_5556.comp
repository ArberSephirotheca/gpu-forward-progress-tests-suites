#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 ivec3 _f0;
 bvec2 _f1;
 mat2x4 _f2;
 vec4 _f3;
 float _f4;
 int _f5;
 float _f6;
} ;

struct _GLF_struct_14 {
 uint _f0;
 mat4x3 _f1;
 bvec4 _f2;
 vec3 _f3;
 bool _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_13 {
 uint _f0;
 float _f1;
 mat4x2 _f2;
 mat2x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 mat3x2 _f1;
 float _f2;
 _GLF_struct_14 _f3;
 uvec4 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_17 {
 int _injected_loop_counter;
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
 bvec4 _f1;
 vec4 _f2;
 ivec3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 _GLF_struct_9 _f1;
 mat2x4 _f2;
 _GLF_struct_10 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_7 {
 uint read_2;
 bvec2 _f0;
 ivec4 _f1;
 ivec2 _f2;
 mat2x3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 vec2 _f1;
 uvec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_5 {
 bool _f0;
 mat3x2 _f1;
 float _f2;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 _GLF_struct_5 _f1;
 mat2x4 _f2;
 mat2x3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_12 {
 uint _f0;
 _GLF_struct_6 _f1;
 mat2 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 uvec4 _f1;
 uint next_virtual_gid;
 bvec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 bvec4 _f1;
 ivec3 _f2;
 uint workgroup_size;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 bvec4 _f1;
 mat3x2 _f2;
 bvec3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 mat2 _f1;
 mat2x3 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 ivec4 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(false)))))), false, _GLF_IDENTITY(true, false || (true)))), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), true))) || _GLF_IDENTITY(false, (false) || false))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0))), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true))) && true), false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(tan(vec2(372.521, 321.458))))).y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(_GLF_IDENTITY(3, (3) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))) | (_injected_loop_counter)) != 1)), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))) || false); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.0), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), _GLF_FUZZED(2764.6624)), bvec2(true, false))), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(2764.6624), min(_GLF_FUZZED(2764.6624), _GLF_FUZZED(2764.6624)))), bvec2(true, false))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.0), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, int(ivec3(0, 1, (1 ^ 1))))], _GLF_FUZZED(2764.6624)), bvec2(true, false))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(0.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2764.6624)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), injectionSwitch)))), vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))], injectionSwitch[1])).x > injectionSwitch.y))))) && true))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                continue;
               break;
              }
             break;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z = subgroup_size;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), ! (! (bool(! (_GLF_DEAD(false)))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          continue;
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          break;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u)).x;
 do
  {
   do
    {
     do
      {
       _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.x = num_workgroup, (true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.x = num_workgroup, ~ (~ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.x = num_workgroup))) : _GLF_FUZZED(subgroup_local_id)));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4(1.0), ivec4(1), _GLF_struct_2(mat3x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))))), 1.0))), mat2(1.0), mat2x3(1.0), _GLF_struct_0(mat2x4(1.0), bvec4(true), mat3x2(1.0), bvec3(true), uvec3(1u)), _GLF_struct_1(mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.0)), float(1.0), bool(true)))), bvec4(true), ivec3(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) * 1), 1)), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(1u * (gl_WorkGroupSize.x), (1u * (gl_WorkGroupSize.x)) + 0u)), gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)))))) | 0u))))));
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)).x;
 uint workgroup_base = _GLF_struct_replacement_3._f2._f4.workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(clamp(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) / 1u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), max(clamp(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(num_workgroup))) + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, ~ (~ (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))) ^ _GLF_IDENTITY(0u, (0u) | (0u))), workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), clamp(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) << 0u), (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))))) + subgroup_local_id, max(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(clamp(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) / 1u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, ~ (~ (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), (166729u & 0u) + (workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) << 0u)))), max(clamp(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(num_workgroup))) + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, ~ (~ (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))) ^ 0u), workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), clamp(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))))) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(clamp(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) / 1u), _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), max(clamp(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(num_workgroup))) + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, ~ (~ (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))) ^ 0u), workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, max(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, max(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))), (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), clamp(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (166729u & 0u) + (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)))))) + subgroup_local_id));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(vec4(1.0), _GLF_IDENTITY(uvec4(1u), _GLF_IDENTITY((uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u), max((uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u), (uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z), (~ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)) >> 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1u) + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z), (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-276.718)))), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, _GLF_IDENTITY((workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size) | (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)).z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1u)) / 1u)) * 1u) + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1u), (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1u))) + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) | (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)), (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) * 1u) + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z), (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))))), (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))))), min((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))))), (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))))))) % GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u))) + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (_GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z, (workgroup_base + subgroup_id * GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z) - uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) * 1u) + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size) | (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))).z, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size) | (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))).z) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, clamp(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size) | (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))).z)))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), bvec4(true), mat4x2(1.0));
 for(_GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(-11642) : ~ (1)))))) | (1)), min(1, 1)), _GLF_struct_16(_GLF_struct_13(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), 0u, 0u), ~ (~ (uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) * 1u) | (1u))), 0u, 0u))))), min(uint(_GLF_IDENTITY(uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), 0u, 0u), ~ (~ (uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), 0u, 0u))))), uint(_GLF_IDENTITY(uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), 0u, 0u)), (~ (uvec3((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))), 0u, 0u))) | uvec3(0u, 0u, 0u))))))))), 1u)), 1.0, mat4x2(1.0), mat2x4(1.0), ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-40119) : 1)))), mat3x2(1.0), 1.0, _GLF_struct_14(1u, mat4x3(1.0), bvec4(true), vec3(1.0), true, uvec3(1u)), uvec4(_GLF_IDENTITY(1u, 0u + (1u))), _GLF_struct_15(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)) | _GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) | (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), max(_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))) | (ivec3(1))), ivec3(1))), (_GLF_IDENTITY(ivec3(1), max(ivec3(1), ivec3(1)))) | (ivec3(1)))))), ivec3(0, 0, 0) ^ ((_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(6), ivec3(6))) ^ (ivec3(0, 0, 0))) | (_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), max(ivec3(1), ivec3(1)))) | (ivec3(1)), ((_GLF_IDENTITY(ivec3(1), max(ivec3(1), ivec3(1)))) | (ivec3(1))) | ivec3(0, 0, 0)))))))), (ivec3(ivec2(96120, 73478), -58568) & ivec3(0, 0, 0)) | ((ivec3(1)) | (ivec3(1))))), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1552.4731) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-27.97) : injectionSwitch.y)))))))), false, false)))), mat2x4(1.0), vec4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (1.0) / determinant(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(determinant(mat3(-8.1, _GLF_IDENTITY(9967.5700, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), min(float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0))))), -1.5, 7030.0846, _GLF_IDENTITY(-2955.8219, mix(float(_GLF_FUZZED(-4.9)), float(-2955.8219), bool(true))), -4031.0164, -471.599, -53.95, -4.7))) : 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(-880.972), (_GLF_IDENTITY(_GLF_FUZZED(-880.972), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(-880.972) : _GLF_FUZZED(-7.1)))) + log(1.0)))), min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(determinant(mat3(-8.1, _GLF_IDENTITY(9967.5700, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), min(float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0))))), -1.5, 7030.0846, _GLF_IDENTITY(-2955.8219, mix(float(_GLF_FUZZED(-4.9)), float(-2955.8219), bool(true))), -4031.0164, -471.599, -53.95, -4.7))) : 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(-880.972), (_GLF_IDENTITY(_GLF_FUZZED(-880.972), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(-880.972) : _GLF_FUZZED(-7.1)))) + log(1.0)))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(determinant(mat3(-8.1, _GLF_IDENTITY(9967.5700, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), min(float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(9967.5700, clamp(9967.5700, 9967.5700, 9967.5700)), 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0))))), -1.5, 7030.0846, _GLF_IDENTITY(-2955.8219, mix(float(_GLF_FUZZED(-4.9)), float(-2955.8219), bool(true))), -4031.0164, -471.599, -53.95, -4.7))) : 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(-880.972), (_GLF_IDENTITY(_GLF_FUZZED(-880.972), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(-880.972) : _GLF_FUZZED(-7.1)))) + log(1.0)))))), 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(147.692) : 1.0))))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_17._injected_loop_counter > 0); _GLF_struct_replacement_17._injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))
      return;
     if(_GLF_DEAD(false))
      continue;
     continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), true && (false)))), _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, true && (false)))), true)), ! (! (bool(bvec2((! (_GLF_IDENTITY(false, true && (false)))), true)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(25.72), _GLF_FUZZED(9221.4506)), bvec2(false, false)))))).x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), 0.0, log(1.0), 0.0, 0.0)), mix(vec2(_GLF_FUZZED(442.785), _GLF_IDENTITY((vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 0.0)))[1], ((vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 0.0)))[1]) - 0.0)), vec2((vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 0.0)))[0], _GLF_FUZZED(-5.5)), bvec2(true, false)))).y, (false ? _GLF_FUZZED(26.28) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), 0.0, log(1.0), 0.0, 0.0)), mix(vec2(_GLF_FUZZED(442.785), _GLF_IDENTITY((vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 0.0)))[1], ((vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 0.0)))[1]) - 0.0)), vec2((vec2(mat3(injectionSwitch, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 0.0)))[0], _GLF_FUZZED(-5.5)), bvec2(true, false)))).y))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(int(1))), 1)))), (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(int(1))), 1))))) ^ (0 << _GLF_IDENTITY(int(6), int(6)))) | 1, (1 | 1) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(int(1))), 1)))) | 1, (1 | 1) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(int(1))), 1)))) | 1, (1 | 1) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(int(1))), 1)))) | 1, (1 | 1) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9.8), _GLF_FUZZED(float(51594u))), bvec2(false, false))).x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), 0)))) | (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? (0 | (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)))) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   for(int _injected_loop_counter = (0 & 43268); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.6, -5384.2839)) : injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             return;
                            }
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false))))
                    return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u)))) ^ 0u), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u)))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u)))) ^ 0u), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u)))) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u)))) ^ 0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u ^ (_GLF_struct_replacement_4.next_virtual_gid))) >> 0u)))) ^ 0u))))], uint(1), 4, 64, 4);
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), log(1.0), 1.0), (mat3x2(injectionSwitch, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))))), log(1.0), 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), log(1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.2) : 1.0))), (mat3x2(injectionSwitch, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), log(1.0), 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-30.39, 84.66)) : vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), log(1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.2) : 1.0))), (mat3x2(injectionSwitch, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), log(1.0), 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) / vec2(1.0, 1.0))).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-350.310)), float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(3.6)))), bool(true)))))))
      return;
    }
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(1u, _GLF_struct_6(vec4(1.0), _GLF_struct_5(true, mat3x2(1.0), 1.0), mat2x4(1.0), mat2x3(1.0), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(499.602)))) / exp(0.0)))), mat2(1.0), _GLF_struct_8(_GLF_struct_7(atomicLoad(buf[virtual_gid], 4, 64, 0), bvec2(true), ivec4(1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (0 & 18115) | (1)), 1))), _GLF_IDENTITY((ivec2(1)) << ivec2(0, 0), ((ivec2(1)) << ivec2(0, 0)) + ivec2(0, 0))), mat2x3(1.0), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) + vec2(0.0, 0.0)), uvec3(1u), mat2x4(_GLF_IDENTITY(1.0, float(mat3x2(1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, length(0.0), 1.0))))), _GLF_struct_11(mat3x2(1.0), _GLF_struct_9(bvec4(true)), mat2x4(1.0), _GLF_struct_10(_GLF_IDENTITY(ivec3(1), (false ? _GLF_FUZZED(ivec3(5527, 80576, -83053)) : _GLF_IDENTITY(ivec3(1), (ivec3(1)) - ivec3(0, 0, 0)))), bvec4(true), vec4(1.0), ivec3(1), ivec4(1)), vec2(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1))), _GLF_IDENTITY(1, ~ (~ (1)))))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
   GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.y = _GLF_struct_replacement_12._f3._f0.read_2;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id)))))) + 1, _GLF_IDENTITY((subgroup_local_id + 1) << (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))))), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec3((subgroup_local_id + 1) << (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(0u), uint(uvec3(uint(0u), 0u, 0u))))), uint(0u))), 0u, 1u)))) < GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.z)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), false, true))))) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ _GLF_IDENTITY((int(1)), ((int(1))) | 0))))); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.5, -895.005)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.5, -895.005)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.5)), bool(false)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, min(_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 0u | (_GLF_struct_replacement_4.next_virtual_gid)), _GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), max(_GLF_FUZZED(read_1), _GLF_FUZZED(read_1))) : _GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, 1u * (_GLF_struct_replacement_4.next_virtual_gid))) | (_GLF_struct_replacement_4.next_virtual_gid)))))), min(_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, min(_GLF_struct_replacement_4.next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, (true ? _GLF_struct_replacement_4.next_virtual_gid : _GLF_FUZZED(subgroup_size))), (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), max(_GLF_FUZZED(read_1), _GLF_FUZZED(read_1))) : _GLF_struct_replacement_4.next_virtual_gid)))), _GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, min(_GLF_struct_replacement_4.next_virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_4.next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), max(_GLF_FUZZED(read_1), _GLF_FUZZED(read_1))) : _GLF_struct_replacement_4.next_virtual_gid))))))], uint(read_1 == GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.y) + 1, 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0)), (vec2(mat4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0))) / vec2(1.0, 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))).x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(mat4x3(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false))))), 0.0, 0.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), 0.0, 1.0, abs(1.0), 0.0, abs(0.0)))))) + determinant(_GLF_IDENTITY(mat4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))), mix(float(_GLF_FUZZED(3.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(mat4x3(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(_GLF_IDENTITY(false, ! (! (false))))), float(float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false))))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, abs(0.0)))))) + determinant(_GLF_IDENTITY(mat4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, tan(0.0), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))), min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(mat4x3(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false))))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, abs(0.0)))))) + determinant(_GLF_IDENTITY(mat4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.8)), float(0.0), bool(true)))) / 1.0)), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, tan(0.0), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(mat4x3(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), _GLF_IDENTITY(dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))) + (mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-6607.4198), clamp(_GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198)))), bool(false))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), _GLF_IDENTITY(dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))) + (mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-6607.4198), clamp(_GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198)))), bool(false))))) : _GLF_FUZZED(-503.465))))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, abs(0.0)))))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(mat4x3(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), _GLF_IDENTITY(dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))) + (mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-6607.4198), clamp(_GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198)))), bool(false))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), _GLF_IDENTITY(dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))) + (mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-6607.4198), clamp(_GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198)))), bool(false))))) : _GLF_FUZZED(-503.465))))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, abs(0.0)))))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(mat4x3(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), _GLF_IDENTITY(dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))) + (mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-6607.4198), clamp(_GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198)))), bool(false))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6607.4198)), bool(false)), _GLF_IDENTITY(dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))) + (mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-6607.4198), clamp(_GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198), _GLF_FUZZED(-6607.4198)))), bool(false))))) : _GLF_FUZZED(-503.465))))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, abs(0.0)))))))) + determinant(_GLF_IDENTITY(mat4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, tan(0.0), 1.0, 0.0, tan(0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))))))))), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 1), clamp((0 ^ 1), (0 ^ 1), (0 ^ 1)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))))), (! (false)) || false)))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       subgroupAll(false);
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(55.29)), bool(false))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(55.29)), bool(false))) > injectionSwitch.y, false, false)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 | 0) ^ (int(6))), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) ^ 0))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       atomicStore(buf[_GLF_struct_replacement_4.next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u + (read_1)), _GLF_IDENTITY((true ? read_1 : _GLF_FUZZED(num_workgroup)), uint(uvec4((true ? read_1 : _GLF_FUZZED(num_workgroup)), 0u, 1u, 1u)))) == _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size), ~ (~ (~ (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size)))))).y, 0u + (GLF_merged3_0_1_13_1_1_6_2_1_13num_workgroupread_2subgroup_size.y))) + 1, 4, 64, 4);
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
}
