#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat4x3 _f0;
 mat4x3 _f1;
 int _f2;
 ivec4 _f3;
 ivec2 _f4;
 ivec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 uvec2 _f1;
 ivec2 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
 uint workgroup_size;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 _GLF_struct_2 _f1;
 ivec3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.y = subgroup_id;
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
uint subgroup_size = 16;
 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(ivec2(1), _GLF_struct_2(mat2(1.0), uvec2(1u), ivec2(1), _GLF_struct_0(vec3(1.0), vec3(1.0)), _GLF_struct_1(mat4x3(1.0), mat4x3(1.0), 1, ivec4(1), ivec2(1), ivec3(1), mat4(1.0)), gl_WorkGroupSize.x), ivec3(1));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w = _GLF_struct_replacement_3._f1.workgroup_size;
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.y * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.z + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.y * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.z + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.z);
 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.x = next_virtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.x], uint(1), 4, 64, 4);
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.z)
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.x], uint(read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_14next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.x], uint(read_1 == read_2) + 1, 4, 64, 4);
   do
    {
     subgroupAll(true);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
