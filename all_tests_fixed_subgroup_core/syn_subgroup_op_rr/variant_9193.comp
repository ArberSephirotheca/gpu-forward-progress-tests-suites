#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> 0)) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-2671)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             break;
            }
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), true, true))) && true)), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, true && (false))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 & -12183); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         return;
        }
      }
     return;
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 0, 0 | (1 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(false))))) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, tan(0.0) + (injectionSwitch.x))), float(_GLF_FUZZED(-91.26)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), false || ((injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), false))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), false)))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ((0 << _GLF_IDENTITY(int(8), int(8)))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) / round(length(normalize(1.0))))) * _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch), mix(vec2(_GLF_FUZZED(608.839), _GLF_FUZZED(2116.6360)), vec2((false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch))[0], (false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(unpackUnorm2x16(158971u), clamp(unpackUnorm2x16(158971u), unpackUnorm2x16(158971u), unpackUnorm2x16(158971u)))) : (injectionSwitch), false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch), false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch)))) / vec2(1.0, 1.0), vec2(vec3((_GLF_IDENTITY(false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch), clamp(_GLF_IDENTITY(false, bool(bvec2(false, false))) ? _GLF_FUZZED(_GLF_IDENTITY(unpackUnorm2x16(158971u), clamp(unpackUnorm2x16(158971u), unpackUnorm2x16(158971u), unpackUnorm2x16(158971u)))) : (injectionSwitch), false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), false ? _GLF_FUZZED(unpackUnorm2x16(158971u)) : (injectionSwitch)))) / vec2(1.0, 1.0), 0.0))))))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false)))), ! (! (_GLF_IDENTITY(false, false || (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), false || ((false))), true && (false || (false)))), ! (! (_GLF_IDENTITY(false, false || (false))))))))) && true)));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, uint(uint(gl_WorkGroupID.x)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(-22500)))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (int(1)))))))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (int(1)))))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (int(1))))))))) << 0), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (int(1)))))))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(int(1), (_GLF_IDENTITY(1 ^ 0, 0 | (_GLF_IDENTITY(1 ^ 0, (true ? _GLF_IDENTITY(1 ^ 0, (1 ^ 0) * 1) : _GLF_FUZZED(_injected_loop_counter)))))), 0), ~ (_GLF_IDENTITY(~ (ivec3(int(1), (1 ^ 0), 0)), (~ (ivec3(int(1), (1 ^ 0), 0))) ^ ivec3(0, 0, 0)))))))), ((~ (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(int(1), (1 ^ 0), 0), ~ (_GLF_IDENTITY(~ (ivec3(int(1), (1 ^ 0), 0)), (~ (ivec3(int(1), (1 ^ 0), 0))) ^ ivec3(0, 0, 0))))))))) - 0)))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (~ (1)))))) >> _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-63682)))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) >> 0), int(1))) >> 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(0, (0) - 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1))))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) / 1))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))) >> 0)), (true ? ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(1, 1))))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)) : _GLF_FUZZED(20417))), 1 * (~ (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ 0), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) - (0 >> _GLF_IDENTITY(int(7), int(7)))))) >> 0)))), ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))), ~ (~ (int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))))))), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0))))), max(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)), (true ? ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, 0 | (1)) : _GLF_FUZZED(19962))), max(1, 1))))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))))), ~ (_GLF_IDENTITY(~ (int(ivec2(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), 0 ^ (~ (int(ivec2(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))))))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)) : _GLF_FUZZED(20417))), 1 * (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) | 0))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)))), ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))), ~ (~ (int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))))))), ~ (~ (int(1)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (true ? _GLF_IDENTITY(int(1), int(1)) : _GLF_FUZZED(int(0.0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))), ~ (~ (int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))))))), ~ (~ (int(1)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (true ? _GLF_IDENTITY(int(1), int(1)) : _GLF_FUZZED(int(0.0))))))) >> 0))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) | 0)) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, ~ (~ (0))), 0)))))), (true ? ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(1, 1))))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)) : _GLF_FUZZED(20417))), 1 * (~ (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0) : _GLF_FUZZED(45182)))))), ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7))))), (int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7)))))) | (int(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7)))))))))), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))) | _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))) - 0), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) ^ 0))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), clamp(~ (int(1)), _GLF_IDENTITY(~ (int(1)), max(~ (int(1)), ~ (int(1)))), ~ (int(1)))))))) >> _GLF_IDENTITY(int(1), int(1))) >> 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))) || false)), ! (! (! (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))) || false)))))))); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((false ? 9.5 : -8.5))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))) : _GLF_FUZZED(-87.04))) > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0))).y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), true && (bool(bool(_GLF_IDENTITY(false, (false) || false))))), true)))), true, true, false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, true && (false))))))
    {
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), 0, 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), ! (! (_GLF_IDENTITY(false, false || (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))))))))));
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)) | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), 0u | ((workgroup_id)))) ^ 0u), uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)) | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), 0u | ((workgroup_id)))) ^ 0u), (true ? (_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)) | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), 0u | ((workgroup_id)))) ^ 0u) : _GLF_FUZZED(60092u))), 0u, 0u, 1u)))), (workgroup_size * workgroup_id) - 0u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), ~ (~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))))) | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), 0u | ((workgroup_id)))) ^ 0u)), (workgroup_size * workgroup_id) - 0u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), (uvec2(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)), uint(uint((_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))))) | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(subgroup_size)))))) | ((workgroup_id)))) ^ 0u)), (workgroup_size * workgroup_id) - 0u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) | (5u))))))) | uvec2(0u, 0u))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(false)) && true, false || (_GLF_IDENTITY((_GLF_DEAD(false)) && true, bool(bvec3((_GLF_DEAD(false)) && true, true, true)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((vec2(4.0, -9967.6613) - injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-57.22)), bvec2(true, false))).x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))) ? _GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(uvec4(44288u, 83570u, 19099u, 135016u).x))), 1u, 1u)), (uvec3(workgroup_base, 1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, 0u, 0u), (true ? uvec3(1u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u) : _GLF_FUZZED(uvec3(123090u, 52598u, 163759u)))))))))), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), ~ (~ (uvec3(uvec3(uvec3(workgroup_base, 1u, 1u)))))) : _GLF_FUZZED(uvec3(10279u, _GLF_IDENTITY(21346u, ~ (~ (21346u))), 72736u)))))))), (uvec3(workgroup_base, 1u, 1u)))), ((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), 1u, 1u))) >> uvec3(0u, 0u, 0u)) * uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, ~ (~ (1u)))))) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uint(uvec4(_GLF_IDENTITY(1u, (1u) - 0u), 1u, 0u, 1u))))), 1u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(uaddCarry(45652u, 140221u, num_workgroup)) : 1u))), uvec3(0u, 0u, 0u) ^ (uvec3(workgroup_base, 1u, 1u))), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))))), (uvec3(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (_GLF_IDENTITY(true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)), min(true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(10279u, 21346u, 72736u), (true ? _GLF_IDENTITY(uvec3(10279u, 21346u, 72736u), uvec3(_GLF_IDENTITY(uvec4(uvec3(10279u, 21346u, 72736u), 1u), (uvec4(uvec3(10279u, 21346u, 72736u), 1u)) + uvec4(0u, 0u, 0u, 0u)))) : _GLF_FUZZED(uvec3(90629u, 41346u, 99429u))))), true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))))), (uvec3(workgroup_base, 1u, 1u)))), ((_GLF_IDENTITY(uvec3(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))) << uvec3(0u, 0u, 0u)))) >> uvec3(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))), 0u, 0u)) * uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) - 0u))), 1u, 1u))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) - 0u)), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)), 1u, 1u))), (true ? _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(8u), min(_GLF_IDENTITY(uvec3(8u), ~ (~ (_GLF_IDENTITY(uvec3(8u), (uvec3(8u)) - uvec3(0u, 0u, 0u))))), uvec3(8u))), uvec3(8u)))) | (_GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)), 1u))), clamp(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), min(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))))), uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))))))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(workgroup_base, 1u, 1u)))), ((uvec3(workgroup_base, 1u, 1u))) >> uvec3(0u, 0u, 0u)) * uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), 1u, 1u))), ((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))), min((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))), max((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (uvec3(workgroup_base, 1u, 1u)) << uvec3(0u, 0u, 0u))))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), _GLF_IDENTITY((uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))), (_GLF_IDENTITY((uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))), (_GLF_IDENTITY((uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))), ((uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u))))) | ((uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u))))))) + uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)) | (_GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), clamp(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), min(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))))), uvec3(_GLF_IDENTITY(uvec3(uvec3(workgroup_base, 1u, 1u)), max(uvec3(uvec3(workgroup_base, 1u, 1u)), uvec3(uvec3(workgroup_base, 1u, 1u))))))))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), _GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(12712u, 140654u, 153794u)) : _GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), ~ (~ ((uvec3(workgroup_base, 1u, 1u))))))))), ((uvec3(_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), 1u, 1u))) >> uvec3(0u, 0u, 0u)) * uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u)))) << 0u))), 1u, 1u)))) + uvec3(0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u)))), max(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (false ? _GLF_FUZZED(uvec3(46934u, 118035u, 31365u)) : _GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), min(uvec3(workgroup_base, 1u, 1u), uvec3(workgroup_base, 1u, 1u)))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u)))))), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3(workgroup_base, 1u, 1u)), (~ (uvec3(workgroup_base, 1u, 1u))) * uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u)))), max(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), (uvec3(workgroup_base, 1u, 1u)) | uvec3(0u, 0u, 0u)))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u)))), _GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u))), (min(_GLF_IDENTITY((uvec3(workgroup_base, 1u, 1u)), clamp((uvec3(workgroup_base, 1u, 1u)), (uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 1u), _GLF_IDENTITY(uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))), (true ? uvec3(uvec3(uvec3(workgroup_base, 1u, 1u))) : _GLF_FUZZED(uvec3(10279u, 21346u, 72736u)))))))), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), 1u, 1u)))) | uvec3(0u, 0u, 0u))))))))), ((uvec3(workgroup_base, 1u, 1u))) >> uvec3(0u, 0u, 0u)) * uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (1u) - 0u))), 1u, 1u)))))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), _GLF_IDENTITY((_GLF_FUZZED(subgroup_id)) - 0u, ~ (~ ((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_id))))) - 0u)))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))) ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (false ? _GLF_FUZZED(vec2(41.08, 6.3)) : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, determinant(mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)))), mat2(1.0) * (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-871.162)), bool(false))), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))))) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))) >> 0)) % subgroup_size) - 0u, (((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))))))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))), (0u | (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))))) + 0u)))) + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u) | (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, 1u)))) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), min(_GLF_IDENTITY((~ (1)), clamp((~ (1)), (~ (1)), (~ (1)))), _GLF_IDENTITY((~ (1)), min((~ (1)), (~ (1)))))))))) >> 0)) % subgroup_size) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))), 0u | (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))))))) + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u) | (((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)) + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, 1u)))) - 0u)))) << 0u));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    continue;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), bool(bvec4(_injected_loop_counter < 1, true, false, true)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), (_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size))))) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), (_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size))))) && true), false), false, false))))), true)), false || (bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))) + (1), (_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))) + (1), (_GLF_IDENTITY(0, int(int(0))) + (1)) << 0)) | 0))) >> 0) : _GLF_FUZZED(findLSB(subgroup_size)))), (_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 ^ (0))))) : _GLF_FUZZED(findLSB(subgroup_size))))) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_IDENTITY(_GLF_FUZZED(findLSB(subgroup_size)), (_GLF_FUZZED(findLSB(subgroup_size))) | 0))), (_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(int(0))) + (1))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(findLSB(subgroup_size), min(findLSB(subgroup_size), findLSB(subgroup_size))))))) && true), false), false, false))))), true))))), bool(bvec4(_injected_loop_counter < 1, true, false, true)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, 0 ^ (4)), 4)));
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u + (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) << 0u)) | (virtual_gid))))], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (4)), 64, _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ _GLF_IDENTITY((~ (0)), 0 ^ ((~ (0))))) - 0)));
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, (read_2) ^ 0u)) + 1, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) << 0), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) - 0))), _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), _GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), ((int(0))) | ((int(0))))) | 0) - 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), 0 | ((_injected_loop_counter))) ^ (68245 & 0)))))), clamp(_GLF_IDENTITY(int(0), (int(0)) - 0), int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), ((int(0))) | (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) | (1 ^ 1)))) * 1))))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) || false)); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(1205))))
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec3(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true)))) && true)), (_GLF_IDENTITY(false, true && (false))) || false)), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bool((_GLF_IDENTITY(false, true && (false)))))) || false))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_injected_loop_counter ++)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 ^ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / int(_GLF_ONE(1.0, injectionSwitch.y))))))))) / 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(min(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)), int(ivec2(min(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)), 0))))) >> 0), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), min(float(mat4(0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), float(mat4(0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0)), injectionSwitch.x))) ^ 0)))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
          break;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) || false, true && ((_GLF_IDENTITY(false, true && (false))) || false))))), (bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))) && true)), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (true)), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), ! (_GLF_IDENTITY(! (! ((! (true)))), bool(bvec4(! (! ((! (true)))), false, true, true))))))), true && (_GLF_IDENTITY(! (! (true)), false || (! (! (true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true), false), false, _GLF_IDENTITY(false, (false) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), ! (! (bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), false), false, false)), _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) && true))))))))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))))))) + vec2(0.0, 0.0)).y))))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))))))) + vec2(0.0, 0.0)).y))))))), true, true)), (bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))))))) + vec2(0.0, 0.0)).y))))))), true, true))) && true)))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      return;
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) | 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(true);
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true)))))));
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2.7)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.6) : injectionSwitch.y))))))
                break;
               return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(0.5))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-874.295))) > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
  }
}
