#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_66 {
 vec2 _f0;
 mat3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_65 {
 mat4x3 _f0;
 ivec4 _f1;
 int _f2;
 mat2 _f3;
} ;

struct _GLF_struct_64 {
 bool _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_67 {
 mat2x3 _f0;
 _GLF_struct_64 _f1;
 _GLF_struct_65 _f2;
 mat4 _f3;
 float _f4;
 _GLF_struct_66 _f5;
} ;

struct _GLF_struct_62 {
 mat2x4 _f0;
 mat4x2 _f1;
 uint _f2;
 int _f3;
 vec3 _f4;
 uint _f5;
} ;

struct _GLF_struct_61 {
 bvec4 _f0;
 vec2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_63 {
 vec2 _f0;
 _GLF_struct_61 _f1;
 _GLF_struct_62 _f2;
} ;

struct _GLF_struct_59 {
 int _f0;
 bool _f1;
 ivec3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_58 {
 uvec2 _f0;
 mat2x3 _f1;
 mat4 _f2;
 vec4 _f3;
 int _f4;
} ;

struct _GLF_struct_60 {
 _GLF_struct_58 _f0;
 mat2 _f1;
 float _f2;
 ivec2 _f3;
 _GLF_struct_59 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_56 {
 mat2 _f0;
 vec3 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_57 {
 _GLF_struct_56 _f0;
 int _f1;
} ;

struct _GLF_struct_68 {
 _GLF_struct_57 _f0;
 _GLF_struct_60 _f1;
 uint read_2;
 bvec3 _f2;
 _GLF_struct_63 _f3;
 _GLF_struct_67 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_53 {
 bool _f0;
 ivec2 _f1;
 ivec4 _f2;
 mat2x4 _f3;
 ivec2 _f4;
 float _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_54 {
 _GLF_struct_53 _f0;
 mat2x3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_51 {
 mat3x2 _f0;
 mat4x3 _f1;
 mat2 _f2;
 uvec4 _f3;
 ivec2 _f4;
 bool _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_50 {
 float _f0;
 uvec3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_49 {
 bvec4 _f0;
 mat3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_52 {
 _GLF_struct_49 _f0;
 ivec3 _f1;
 mat2 _f2;
 _GLF_struct_50 _f3;
 _GLF_struct_51 _f4;
} ;

struct _GLF_struct_47 {
 bvec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_48 {
 vec2 _f0;
 uint _f1;
 _GLF_struct_47 _f2;
} ;

struct _GLF_struct_45 {
 ivec4 _f0;
} ;

struct _GLF_struct_46 {
 _GLF_struct_45 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_43 {
 float _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_44 {
 _GLF_struct_43 _f0;
 float _f1;
 uint num_workgroup;
} ;

struct _GLF_struct_55 {
 _GLF_struct_44 _f0;
 _GLF_struct_46 _f1;
 _GLF_struct_48 _f2;
 _GLF_struct_52 _f3;
 vec3 _f4;
 _GLF_struct_54 _f5;
} ;

struct _GLF_struct_40 {
 mat4 _f0;
 bvec4 _f1;
 mat4x2 _f2;
 mat2 _f3;
 vec2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_39 {
 bool _f0;
 bool _f1;
 bool _f2;
} ;

struct _GLF_struct_41 {
 _GLF_struct_39 _f0;
 _GLF_struct_40 _f1;
} ;

struct _GLF_struct_37 {
 mat4x2 _f0;
 mat4 _f1;
 uvec3 _f2;
 vec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_38 {
 _GLF_struct_37 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_35 {
 uint _f0;
 ivec3 _f1;
 uvec2 _f2;
 bvec2 _f3;
 ivec2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_34 {
 int _f0;
 ivec4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_33 {
 float _f0;
 mat2 _f1;
 float _f2;
 uvec2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_36 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
 mat3x4 _f2;
 _GLF_struct_35 _f3;
} ;

struct _GLF_struct_32 {
 ivec2 _f0;
} ;

struct _GLF_struct_42 {
 _GLF_struct_32 _f0;
 _GLF_struct_36 _f1;
 uint read_1;
 _GLF_struct_38 _f2;
 _GLF_struct_41 _f3;
} ;

struct _GLF_struct_29 {
 bvec3 _f0;
 uint _f1;
} ;

struct _GLF_struct_30 {
 bool _f0;
 mat2 _f1;
 _GLF_struct_29 _f2;
 mat3x4 _f3;
 bool _f4;
} ;

struct _GLF_struct_27 {
 uvec2 _f0;
 bvec3 _f1;
 bvec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_26 {
 vec2 _f0;
 bool _f1;
 ivec3 _f2;
 mat3x2 _f3;
 vec4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_25 {
 bvec4 _f0;
 mat3 _f1;
 bvec4 _f2;
 uvec2 _f3;
 mat3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
 ivec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_28 {
 ivec3 _f0;
 _GLF_struct_24 _f1;
 _GLF_struct_25 _f2;
 uint workgroup_base;
 _GLF_struct_26 _f3;
 _GLF_struct_27 _f4;
} ;

struct _GLF_struct_31 {
 int _f0;
 _GLF_struct_28 _f1;
 int _f2;
 _GLF_struct_30 _f3;
} ;

struct _GLF_struct_21 {
 float _f0;
 bvec2 _f1;
 mat2 _f2;
 mat4x2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_20 {
 uvec2 _f0;
 ivec3 _f1;
 bvec2 _f2;
 mat4x2 _f3;
 mat3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_19 {
 mat4x3 _f0;
} ;

struct _GLF_struct_18 {
 ivec2 _f0;
 mat2x4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_17 {
 uint _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_16 {
 mat2x4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_22 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_19 _f3;
 _GLF_struct_20 _f4;
 mat3x4 _f5;
 _GLF_struct_21 _f6;
} ;

struct _GLF_struct_14 {
 vec2 _f0;
 ivec2 _f1;
 mat2x4 _f2;
 mat4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 float _f1;
 mat4x2 _f2;
 ivec3 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_11 {
 uint _f0;
 uvec2 _f1;
 bvec2 _f2;
 int _f3;
 mat3x2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_9 {
 int _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_8 {
 mat3 _f0;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 bvec3 _f3;
 mat3x4 _f4;
 mat4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_23 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_15 _f3;
 _GLF_struct_22 _f4;
 uint virtual_gid;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 uvec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_2 {
 int _f0;
 uint _f1;
 mat3x2 _f2;
 float _f3;
 float _f4;
 vec2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_1 {
 int _f0;
 uint subgroup_id;
 mat4 _f1;
 mat2x4 _f2;
 vec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_0 {
 bool _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec3 _f2;
 ivec2 _f3;
 _GLF_struct_2 _f4;
 mat4 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   return;
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(_GLF_struct_0(true), _GLF_struct_1(1, gl_SubgroupID, mat4(1.0), mat2x4(1.0), vec3(1.0), bvec2(true)), _GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1)))), ivec2(1), _GLF_struct_2(1, 1u, mat3x2(1.0), 1.0, 1.0, vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.1)))), uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), mat4(1.0), _GLF_struct_3(ivec3(1), mat2x3(1.0), bvec4(true), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))))), (uvec2(1u)) | (uvec2(1u))), ivec3(1))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0) > injectionSwitch.y))))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), bool(bool(true && ((injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), ! (! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), false || (false)), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))), false, true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))), false, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))), false, true))))), true, true))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))) || false)), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, (true) && true), false))), false, false, false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))), true))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(tan(-105.829)))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(_GLF_struct_44(_GLF_struct_43(1.0, uvec2(1u)), 1.0, gl_NumWorkGroups.x), _GLF_struct_46(_GLF_struct_45(ivec4(1)), uvec2(1u)), _GLF_struct_48(vec2(1.0), 1u, _GLF_struct_47(bvec2(true), ivec3(1))), _GLF_struct_52(_GLF_struct_49(bvec4(true), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) * mat3(1.0)), mat2x4(1.0)), ivec3(1), mat2(1.0), _GLF_struct_50(1.0, uvec3(1u), mat3x4(1.0)), _GLF_struct_51(mat3x2(1.0), mat4x3(1.0), mat2(1.0), uvec4(1u), ivec2(1), true, ivec4(1))), vec3(1.0), _GLF_struct_54(_GLF_struct_53(true, _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)) << ivec2(0, 0), max((ivec2(1)) << ivec2(0, 0), _GLF_IDENTITY((ivec2(1)) << ivec2(0, 0), (_GLF_IDENTITY((ivec2(1)) << ivec2(0, 0), max((ivec2(1)) << ivec2(0, 0), (ivec2(1)) << ivec2(0, 0)))) / ivec2(1, 1))))), ivec4(1), mat2x4(1.0), ivec2(1), 1.0, uvec2(1u)), mat2x3(1.0), mat2(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false))), false, false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u + (gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (bool(bvec4(false, true, true, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(1, _GLF_struct_28(ivec3(1), _GLF_struct_24(vec2(1.0), ivec4(1), vec3(1.0)), _GLF_struct_25(bvec4(true), mat3(1.0), bvec4(true), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(0u), uint(0u))) ^ (_GLF_IDENTITY(1u, max(1u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(0u), uint(0u))) ^ (_GLF_IDENTITY(1u, max(1u, 1u)))), 0u ^ (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(0u), uint(0u))) ^ (_GLF_IDENTITY(1u, max(1u, 1u))))))) ^ 0u)), mat3(1.0), mat2x3(1.0)), workgroup_size * workgroup_id, _GLF_struct_26(vec2(1.0), true, ivec3(1), mat3x2(1.0), vec4(1.0), mat3x2(1.0)), _GLF_struct_27(uvec2(1u), bvec3(true), bvec2(true), vec4(1.0))), 1, _GLF_struct_30(true, mat2(1.0), _GLF_struct_29(bvec3(true), 1u), mat3x4(1.0), true));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_struct_7(mat4x2(1.0), _GLF_struct_6(mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), mat4x2(1.0), uvec4(1u), bvec3(true), mat3x4(1.0), _GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(-2671.2245, -1.4, 68.92, 18.42, -0.6, -5.8, 6473.1419, -7.1, 710.122, -59.38, _GLF_IDENTITY(-0.0, mix(float(-0.0), float(_GLF_FUZZED(14.37)), bool(false))), -80.49, -416.483, -3.1, _GLF_IDENTITY(-6.0, clamp(-6.0, -6.0, -6.0)), 36.82)) : mat4(1.0))) * (mat4(1.0))), mat2(1.0))), _GLF_struct_8(mat3(1.0)), _GLF_struct_12(_GLF_struct_9(1, bvec2(true)), _GLF_struct_10(mat4x2(1.0), vec2(1.0)), _GLF_struct_11(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) - (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u)))), bvec2(true), 1, mat3x2(1.0), ivec2(1))), _GLF_struct_15(_GLF_struct_13(ivec4(1)), 1.0, mat4x2(1.0), ivec3(1), _GLF_struct_14(vec2(1.0), ivec2(1), mat2x4(1.0), mat4(1.0), mat3(1.0))), _GLF_struct_22(_GLF_struct_16(mat2x4(1.0), mat3x2(1.0)), _GLF_struct_17(1u, ivec2(1)), _GLF_struct_18(ivec2(1), mat2x4(1.0), mat3(1.0)), _GLF_struct_19(mat4x3(1.0)), _GLF_struct_20(uvec2(1u), ivec3(1), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false))), mat4x2(1.0), mat3(1.0), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), abs(1.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), (true ? dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)) : _GLF_FUZZED(-40.82))))), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))).y)), vec4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(0.7) : 0.0)), 0.0, 0.0)), 0.0))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), (_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))) + 0.0), abs(1.0))), dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), vec4(0.0, 0.0, 0.0, abs(1.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), cos(0.0), 0.0, log(1.0), abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x))), mix(float(_GLF_FUZZED(-29.53)), float(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(1.0, 1.0)), abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(0.0, 0.0, 0.0, abs(1.0))), clamp(dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(0.0, 0.0, 0.0, abs(1.0))), dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(0.0, 0.0, 0.0, abs(1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(0.0, 0.0, 0.0, abs(1.0))), mix(float(_GLF_FUZZED(4262.8462)), float(dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(0.0, 0.0, 0.0, abs(1.0)))), bool(true))))), dot(vec4(0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(0.0, 0.0, 0.0, abs(1.0)))), 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, log(1.0), abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))))), mat3x4(1.0), _GLF_struct_21(1.0, bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)), mat2(1.0), mat4x2(1.0), vec3(1.0))), _GLF_struct_replacement_31._f1.workgroup_base + _GLF_struct_replacement_5._f0._f1.subgroup_id * subgroup_size + subgroup_local_id);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_31._f1.workgroup_base + _GLF_struct_replacement_5._f0._f1.subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, 1 * (64))) * _GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY((false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1)), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1)), clamp((false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1)), (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1)), (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1)))))))), 64, 64), int(int(_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(64, 1, (0 | 0)))), (64) / 1))), 64, 64), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64), (clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64)) | (clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64))), max(clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64), _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64), (clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64)) | (clamp(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-49413) : _GLF_IDENTITY(64, (64) / 1))), 64, 64)))))) + 0))))), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5714.9126, 77.01)))).x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 _GLF_struct_42 _GLF_struct_replacement_42 = _GLF_struct_42(_GLF_struct_32(ivec2(1)), _GLF_struct_36(_GLF_struct_33(1.0, mat2(1.0), 1.0, _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))) ^ uvec2(0u, 0u)), vec2(1.0)), _GLF_struct_34(1, ivec4(1), vec4(1.0)), mat3x4(1.0), _GLF_struct_35(1u, ivec3(1), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(uvec4(uvec2(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (uint(1u)) + (1u ^ 1u)), _GLF_IDENTITY(uint(1u), (uint(1u)) | (uint(1u))))))), (true ? uvec2(uvec4(uvec2(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (uint(1u)) + (1u ^ 1u)), _GLF_IDENTITY(uint(1u), (uint(1u)) | (uint(1u))))))) : _GLF_FUZZED(uvec2(95772u, 113057u))))), bvec2(true), ivec2(1), vec3(_GLF_IDENTITY(1.0, 0.0 + (1.0))))), atomicLoad(buf[_GLF_struct_replacement_23.virtual_gid], 4, 64, 0), _GLF_struct_38(_GLF_struct_37(mat4x2(1.0), mat4(1.0), uvec3(1u), vec2(1.0), mat2x4(1.0)), ivec4(1)), _GLF_struct_41(_GLF_struct_39(true, true, true), _GLF_struct_40(mat4(1.0), bvec4(true), mat4x2(1.0), mat2(1.0), vec2(1.0), ivec3(1))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-559.026)), _GLF_IDENTITY(float(injectionSwitch.y), float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(float(injectionSwitch.y), 1.0))))), bool(true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-559.026)), _GLF_IDENTITY(float(injectionSwitch.y), float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(float(injectionSwitch.y), 1.0))))), bool(true))))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-559.026)), _GLF_IDENTITY(float(injectionSwitch.y), float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(float(injectionSwitch.y), 1.0))))), bool(true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-559.026)), _GLF_IDENTITY(float(injectionSwitch.y), float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(float(injectionSwitch.y), 1.0))))), bool(true))))), true))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-559.026)), _GLF_IDENTITY(float(injectionSwitch.y), float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(5.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0))))), bool(true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-559.026)), _GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(float(injectionSwitch.y), 1.0)))), (float(_GLF_IDENTITY(vec2(float(injectionSwitch.y), 1.0), min(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))), 1.0), mat2(1.0) * (vec2(float(injectionSwitch.y), 1.0))), vec2(float(injectionSwitch.y), 1.0))))) + sqrt(0.0))), bool(true))))), true)))))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 _GLF_struct_68 _GLF_struct_replacement_68 = _GLF_struct_68(_GLF_struct_57(_GLF_struct_56(mat2(1.0), vec3(1.0), uvec2(1u)), 1), _GLF_struct_60(_GLF_struct_58(uvec2(1u), mat2x3(1.0), mat4(1.0), vec4(1.0), 1), mat2(1.0), 1.0, ivec2(1), _GLF_struct_59(1, true, ivec3(1), mat4x3(1.0)), bvec3(true)), atomicLoad(buf[_GLF_struct_replacement_23.virtual_gid], 4, 64, 0), bvec3(true), _GLF_struct_63(vec2(1.0), _GLF_struct_61(bvec4(true), vec2(1.0), vec4(1.0)), _GLF_struct_62(mat2x4(1.0), mat4x2(1.0), 1u, 1, vec3(1.0), 1u)), _GLF_struct_67(mat2x3(1.0), _GLF_struct_64(true, mat4x2(1.0)), _GLF_struct_65(mat4x3(1.0), ivec4(1), 1, mat2(1.0)), mat4(1.0), 1.0, _GLF_struct_66(vec2(1.0), mat3(1.0), mat4x2(1.0))), uvec4(_GLF_IDENTITY(1u, 0u ^ (1u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < subgroup_size, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < subgroup_size, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < subgroup_size, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < subgroup_size, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), true && (! (_GLF_IDENTITY(! (false), false || (! (false)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_42.read_1 == _GLF_IDENTITY(_GLF_struct_replacement_68.read_2, (_GLF_IDENTITY(_GLF_struct_replacement_68.read_2, (_GLF_struct_replacement_68.read_2) - 0u)) | (_GLF_IDENTITY(_GLF_struct_replacement_68.read_2, (_GLF_IDENTITY(_GLF_struct_replacement_68.read_2, ~ (~ (_GLF_struct_replacement_68.read_2)))) / 1u)))) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))) && true))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      barrier();
     return;
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_struct_replacement_42.read_1 == _GLF_IDENTITY(_GLF_struct_replacement_68.read_2, ~ (~ (_GLF_struct_replacement_68.read_2)))) + 1, ~ (~ (uint(_GLF_struct_replacement_42.read_1 == _GLF_struct_replacement_68.read_2) + 1))), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
}
