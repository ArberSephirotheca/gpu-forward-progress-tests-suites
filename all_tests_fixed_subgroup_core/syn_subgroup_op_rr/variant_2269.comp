#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)) ^ 0), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(0.0) + (_GLF_ZERO(0.0, injectionSwitch.x))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x))), 0 | (int(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x))))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))))))) ^ 0)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (int(int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)), int(int(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)) * 1)))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | (max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + length(vec4(0.0, 0.0, 0.0, 0.0))), injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0) : _GLF_IDENTITY(_GLF_FUZZED(findMSB(83713u)), 0 | (_GLF_IDENTITY(_GLF_FUZZED(findMSB(83713u)), (false ? _GLF_FUZZED(54474) : _GLF_FUZZED(findMSB(83713u)))))))), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)))), ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)), (int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1))) | 0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)), max(int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1)))))), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)) / 1))))))) >> 0)) + 0) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - log(sqrt(1.0)))))))) | (max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), int(int(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + log(1.0)))), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0, (true ? (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0 : _GLF_FUZZED(53965)))), int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(733.430))))), float(mat3(0.0, 1.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0))), injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x))))))) ^ 0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(1, (1) << (0 & -51393)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(1, (1) << (0 & -51393))))) && true); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-55061) : int(0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0))), (false ? _GLF_FUZZED(52742) : int(0)))) << 0)), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(abs(19856)))))), 0))), (false ? _GLF_FUZZED(52742) : int(0)))) << 0))) / 1)), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), ~ (~ (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-55061) : int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0))), (false ? _GLF_FUZZED(52742) : int(0)))) << 0)))), true && (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), ~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY((false ? _GLF_FUZZED(-55061) : _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0)))), (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))) / 1)))), clamp((false ? _GLF_FUZZED(-55061) : _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0)))), (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))) / 1)))), (false ? _GLF_FUZZED(-55061) : _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0)))), (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))) / 1)))), (false ? _GLF_FUZZED(-55061) : _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0)))), (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))) / 1)))))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0))), (false ? _GLF_FUZZED(52742) : int(0)))) << 0), (_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0))), (false ? _GLF_FUZZED(52742) : int(0)))) << 0)) << 0))))))))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), vec2(_GLF_FUZZED(336.625), _GLF_FUZZED(-7.4)), bvec2(false, false))), 1.0))), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_id), ~ (~ _GLF_IDENTITY((~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), ((~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_id))) * 1u)))), (~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_id), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), ~ (~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))))), ((~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), ~ (~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_id))) * 1u))))) - 0u));
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(421.099), _GLF_FUZZED(-390.982)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))]), bvec2(true, true))).y))))
          barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, false)))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, false)))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, false)))) || false), true))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && _GLF_IDENTITY((bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY((bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3((bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5279.7199, -3876.7546)) : injectionSwitch)).x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false)), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false))))))))))))) || false) || (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false, bool(bvec4(((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false, false, true, false))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false)), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))), (false ? _GLF_FUZZED(injectionSwitch[0]) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))), (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) : _GLF_FUZZED(-1461.3500))))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3247.3575))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat4(mat2(1.0)))) * (injectionSwitch)).y)) || false))))))))))))) || false) || (injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) && true))))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))));
uint subgroup_size = 16;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true)))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x, 0u ^ (gl_WorkGroupSize.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id) ^ 0u);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))) * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w;
 GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(uvec2(69528u, 79076u)[1]), ~ (~ (_GLF_FUZZED(uvec2(69528u, 79076u)[1])))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id) / (uvec4(1u, 1u, 1u, 1u) | uvec4(1u, 1u, 1u, 1u))), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)).x, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id) / (uvec4(1u, 1u, 1u, 1u) | uvec4(1u, 1u, 1u, 1u))), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)).x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id) / _GLF_IDENTITY((_GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) | (uvec4(1u, 1u, 1u, 1u))) | uvec4(1u, 1u, 1u, 1u)), ((_GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) | (uvec4(1u, 1u, 1u, 1u))) | uvec4(1u, 1u, 1u, 1u))) | uvec4(0u, 0u, 0u, 0u))), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)).x)), (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x) - _GLF_IDENTITY((0u | 0u), (_GLF_IDENTITY((0u | 0u), ~ (~ ((0u | 0u))))) - 0u)), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)), (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), (clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u)) | 0u), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u, (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), (clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, min(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)))) - 0u))) | 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u)), ~ (~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u)))))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u)), ~ (~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u)), ~ (~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u))))))))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)))), 0u ^ (~ ((_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)))))))) | 0u))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, uint(_GLF_IDENTITY(uint(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), 0u | (_GLF_IDENTITY(uint(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), (uint(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)) / 1u))))))))), clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))))), ((false ? _GLF_FUZZED(_GLF_IDENTITY(uvec2(69528u, 79076u)[1], uint(uvec2(uvec2(69528u, 79076u)[1], (1u & 1u))))) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id) - uvec4(0u, 0u, 0u, 0u)))).x, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) | 0u), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id) | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)), (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id) | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id))) - uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id))).x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), min(0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))))), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, (true ? GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), uint(uvec3(_GLF_FUZZED(workgroup_size), 0u, 1u))))), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))), ~ (~ (clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)))))), _GLF_IDENTITY(clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)), (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))) / 1u)), (clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)))) | (clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x), ~ (~ (0u + (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x))))))))))))) >> 0u)) * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, clamp(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id))) - uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7305.7790)), bool(false))), injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))).y + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED((workgroup_id >> (_GLF_IDENTITY(workgroup_size + subgroup_size, clamp(workgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(workgroup_size + subgroup_size, max(_GLF_IDENTITY(workgroup_size + subgroup_size, 0u + (workgroup_size + subgroup_size)), workgroup_size + subgroup_size)), workgroup_size + subgroup_size))))) : subgroup_local_id));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((int(false) & 0) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (1 ^ 1))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint next_virtual_gid = GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, min(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y))))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))), subgroup_local_id)) + 1) % GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y), 0u ^ (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))), subgroup_local_id)) + 1) % GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y), (((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))), subgroup_local_id)) + 1) % GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)) | (((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))), subgroup_local_id)) + 1) % GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 + (int(7))), (true ? _GLF_IDENTITY(int(7), _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 + (0)))) + (int(7))) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true), true))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec3(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true))))))))))));
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))))))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false))))))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(faceforward(6.2, -377.856, -2506.6407)))) > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
        }
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, 1 * (64)), (_GLF_IDENTITY(64, _GLF_IDENTITY(1 * (64), max(1 * (64), 1 * (64))))) | _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 1)), int(ivec2(int(ivec3(0, 1, 1)), 1)))))))), 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.0) : injectionSwitch.y)), injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / int(_GLF_ONE(1.0, injectionSwitch.y))))
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec3(bvec3((false), false, true)))))))))))))))), true, false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false)))))))), true, false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), false)))), true, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat2x4(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))) > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1))), true && (_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1))))), ! (! (_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1))))))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))) && true), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))))); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 0u), (uvec4(subgroup_local_id + 1, 0u, 1u, _GLF_IDENTITY(0u, min(0u, 0u)))) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + 0.0), injectionSwitch.x)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 0u), (uvec4(subgroup_local_id + 1, 0u, 1u, 0u)) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + 0.0), injectionSwitch.x)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))), 0u, 1u, 0u), (uvec4(subgroup_local_id + 1, 0u, 1u, 0u)) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, 0u, 1u, 0u), _GLF_IDENTITY((uvec4(subgroup_local_id + 1, 0u, 1u, 0u)), ((uvec4(subgroup_local_id + 1, 0u, 1u, 0u))) | ((uvec4(subgroup_local_id + 1, 0u, 1u, 0u)))) >> _GLF_IDENTITY(uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(max(vec2(61.15, -24.08), vec2(0.7, -5.4))))).x)), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), clamp(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))), uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 0u), (uvec4(subgroup_local_id + 1, 0u, 1u, 0u)) >> uvec4(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec3(length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mix(vec3((vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))[0], (vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))[1], (vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))[2]), vec3(_GLF_FUZZED(87.23), _GLF_FUZZED(4.0), _GLF_FUZZED((-2.1))), bvec3(false, false, false))))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, abs(0.0))), 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0, 1.0)), (float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec3(length(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, abs(0.0))), 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0, 1.0))) / 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) < _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, _GLF_IDENTITY(max(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(max(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id), (_GLF_IDENTITY(max(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id), uvec4(1u, 1u, 1u, 1u) * (max(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)))) * uvec4(1u, 1u, 1u, 1u))))), GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id)))).y)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))).x > injectionSwitch.y), bool(bool(! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, (true) && true) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) || false))), false || _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(true, (true) || false)))), ! (! ((bool(bool(_GLF_IDENTITY(true, (true) || false))))))))))))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (1.0) * determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), abs(0.0), 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], ((vec2(0.0, 0.0))[0]) - 0.0), (vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED(-4.2), _GLF_FUZZED(-2.2)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.7), _GLF_IDENTITY(_GLF_FUZZED(6004.9889), min(_GLF_FUZZED(6004.9889), _GLF_IDENTITY(_GLF_FUZZED(6004.9889), (_GLF_FUZZED(6004.9889)) / 1.0)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), injectionSwitch, injectionSwitch)), mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, tan(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, tan(0.0), 0.0, 1.0, 1.0, log(1.0), 1.0)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))) : _GLF_FUZZED(vec2(4.2, -4813.6763)))))), injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), mix(float(_GLF_FUZZED(5.3)), float(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), min(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), bool(true))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))).x) - sin(0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), (float(float(1.0))) - 0.0)), (1.0) / 1.0))), 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), min(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))), vec2(0.0, 0.0)))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))).x)) > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) ^ 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-663.524)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-663.524)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))) && true)))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0))), injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))))), injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))))), injectionSwitch.y)), int(ivec2(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0))), bool(true))))), injectionSwitch.y)), (0 | 1))))) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, ~ (~ (0))), ((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(2), int(2))))), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (_GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(2), int(2))))))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter)))), (1 | 1))), _GLF_IDENTITY(max(int(ivec4(_injected_loop_counter, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1))), int(ivec4(_injected_loop_counter, 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((1 << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), int(6))), (1 | 1)))), (true ? _GLF_IDENTITY(max(int(ivec4(_injected_loop_counter, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1, clamp(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1, clamp(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1, (true ? _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1 : _GLF_FUZZED(23859))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1, ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1)))))))), int(ivec4(_injected_loop_counter, 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) ^ 0)), ~ (~ ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, 1))))) << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), int(6))), (1 | 1)))), (_GLF_IDENTITY(max(int(ivec4(_injected_loop_counter, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), min(int(_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), min(int(_GLF_IDENTITY(1, 0 | (1))), int(_GLF_IDENTITY(1, 0 | (1))))))))), max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1))), int(ivec4(_injected_loop_counter, 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((1 << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), int(6))), (1 | 1)))), 0 ^ (max(int(ivec4(_injected_loop_counter, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) | 1))), int(ivec4(_injected_loop_counter, 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((1 << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), int(6))), (1 | 1))))))) - 0) : _GLF_FUZZED(23940))))) != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       subgroupAll(false);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) + _GLF_IDENTITY(0, 1 * (0)))) | ((1 ^ 0))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))), int(_GLF_IDENTITY(4, clamp(4, 4, 4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 ^ 0), min(_GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), (0 ^ 0), (0 ^ 0))), (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (_GLF_IDENTITY(0 ^ 0, (true ? 0 ^ 0 : _GLF_FUZZED(96659)))))))) & (- _GLF_IDENTITY(-66979, (true ? _GLF_IDENTITY(-66979, (_GLF_IDENTITY(-66979, (-66979) << 0)) / 1) : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 | 1))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, max(4, 4))))), 4, 4)), 64, 4);
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(4.0) : injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(4.0) : injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (false))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
