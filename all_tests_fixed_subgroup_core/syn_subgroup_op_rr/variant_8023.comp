#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), min(_GLF_IDENTITY(0.0 + (injectionSwitch.y), max(0.0 + (injectionSwitch.y), 0.0 + (injectionSwitch.y))), 0.0 + (injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) && true))))))))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))), ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-85.62), _GLF_FUZZED(-5.9)), bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y))) + 0.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
          break;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)))).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false))), false, true)))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)), true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)), true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)))))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3734.9609), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7317.7695)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false, false))))))), false, true)))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((true ? 35.39 : -5.6)), _GLF_FUZZED(4794.1677)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)) > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(-1748.2696, -0.1)))).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false))), false, true)))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)), clamp(true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-1748.2696, -0.1), (vec2(-1748.2696, -0.1)) * vec2(1.0, 1.0))), true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-1748.2696, -0.1)), min(_GLF_IDENTITY(_GLF_FUZZED(vec2(-1748.2696, -0.1)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-1748.2696, -0.1)))), _GLF_FUZZED(vec2(-1748.2696, -0.1)))), true ? injectionSwitch : _GLF_FUZZED(vec2(-1748.2696, -0.1)))))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3734.9609), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7317.7695)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, false))))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.00), _GLF_FUZZED(-9823.0383)), bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))).x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false, false))))) && true)))))), false, true))))))))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, 1.0)))))) + 0.0)))) && true)))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)));
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), false || (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), false || (bool(bvec4(false, false, true, true))))) || false))), false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec2(bool(bvec4(false, false, true, true)), false)))), bool(bvec3((_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec2(bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), true)), false)))), false, _GLF_IDENTITY(false, true && (false)))))))))))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_IDENTITY(_GLF_FUZZED(9683.8501), (_GLF_IDENTITY(_GLF_FUZZED(9683.8501), 0.0 + (_GLF_FUZZED(9683.8501)))) - 0.0), (injectionSwitch)[1]), bvec2(false, true)), max(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), max((injectionSwitch), (injectionSwitch)))))[1]), bvec2(false, true)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), min(_GLF_IDENTITY(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), vec2(vec3((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), cos(0.0))))), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), vec2(vec3((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), cos(0.0))))), clamp(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), vec2(vec3((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), cos(0.0))))), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), vec2(vec3((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), cos(0.0))))), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), vec2(vec3((mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) - vec2(0.0, 0.0), cos(0.0))))))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), tan(0.0), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))))))), 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), vec2(1.0, 1.0) * (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_IDENTITY(_GLF_FUZZED(9683.8501), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_FUZZED(9683.8501), max(_GLF_IDENTITY(_GLF_FUZZED(9683.8501), clamp(_GLF_FUZZED(9683.8501), _GLF_FUZZED(9683.8501), _GLF_FUZZED(9683.8501))), _GLF_FUZZED(9683.8501))) : _GLF_FUZZED(6.6))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))[1]), bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-8.2)), bool(false))), 1.0, 0.0, exp(0.0), 0.0))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, exp(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.4)), float(0.0), bool(true)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, exp(0.0), 0.0))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, exp(0.0), 0.0))), 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), min(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))))), _GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, exp(0.0), 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) * 1)], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(sinh(-628.301)))), exp(0.0), 0.0))))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2(_GLF_IDENTITY(_GLF_FUZZED(9683.8501), min(_GLF_FUZZED(9683.8501), _GLF_FUZZED(9683.8501))), (injectionSwitch)[1]), bvec2(false, true)), (mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58))) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))) / vec2(1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-25.58, max(-25.58, -25.58)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(9683.8501), min(_GLF_FUZZED(9683.8501), _GLF_FUZZED(9683.8501))), (injectionSwitch)[1]), bvec2(false, true)), (mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), min(vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)), vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58)))), (vec2((injectionSwitch)[0], _GLF_FUZZED(-25.58))) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) || false))), true))) / vec2(1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0)))) - vec2(0.0, 0.0)).x)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-9.3, 1.1)) : (injectionSwitch))) : _GLF_FUZZED((mat2(8560.4330, -8072.6062, -3283.7197, 36.85) * injectionSwitch))))[0], _GLF_FUZZED(-25.58)), vec2(_GLF_FUZZED(9683.8501), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0))).x)) > injectionSwitch.y) || false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id))) << 0u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u))), workgroup_id, workgroup_id)), max(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))) * 1u) * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((0u | 0u), _GLF_IDENTITY(((0u | 0u)), clamp(_GLF_IDENTITY(((0u | 0u)), ((0u >> _GLF_IDENTITY(uint(8u), uint(8u))) ^ (0u ^ 0u)) + (_GLF_IDENTITY(((0u | 0u)), 0u + (((0u | 0u)))))), ((0u | 0u)), _GLF_IDENTITY(((0u | 0u)), max(((0u | 0u)), ((0u | 0u)))))) << 0u) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u)) ^ 0u) * workgroup_id)))), max(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u)), 0u))), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << _GLF_IDENTITY(0u, 1u * (0u))), (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ((workgroup_id)) / 1u) << 0u)) / 1u))), workgroup_id, workgroup_id)), max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u)) / 1u), _GLF_IDENTITY((0u | 0u), ((_GLF_IDENTITY(0u | 0u, (0u | 0u) / 1u))) << 0u) | (workgroup_size * workgroup_id)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (0u | 0u))) >> _GLF_IDENTITY(0u, (0u) | (0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) << 0u, min((workgroup_id) << 0u, (workgroup_id) << 0u))), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), 0u | (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u))), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u))), workgroup_id, workgroup_id)), max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((0u | 0u), ((0u | 0u)) << 0u) | (workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), ~ (~ (~ (workgroup_id)))))))))), clamp(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) / 1u))), workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) / 1u))), workgroup_id, workgroup_id)), min(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) / 1u))), workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) / 1u))), workgroup_id, workgroup_id)))), 1u))), max(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) + 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) | (_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))))))))))), _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(0u | 0u, (0u | 0u) - 0u)), ((0u | 0u)) << 0u) | (workgroup_size * workgroup_id)))), _GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, max((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u))) << 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, max((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u))) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, max((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u, (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / 1u))) << 0u)))))), workgroup_id, workgroup_id)), max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((0u | 0u), ((0u | 0u)) << 0u) | (workgroup_size * workgroup_id)))), _GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (true ? _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)) : _GLF_FUZZED(workgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) << 0u, max(_GLF_IDENTITY((workgroup_id) << 0u, ((workgroup_id) << 0u) - (0u ^ 0u)), _GLF_IDENTITY((workgroup_id) << 0u, (true ? (workgroup_id) << 0u : _GLF_FUZZED(workgroup_size)))))), min(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | ((workgroup_id))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)), 0u ^ ((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, 1u * (1u)))), clamp((_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, 1u * (1u)))), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, 1u * (1u)))), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) / _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, 1u * (1u))))))))), workgroup_id, workgroup_id)), max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u) | 0u, (_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, (0u | 0u) >> 0u)) / 1u)) | (0u | 0u))), ((0u | 0u)) << 0u) | (workgroup_size * workgroup_id))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), true, true, true)), false, false))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))) || false)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        return;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec4((! (_GLF_DEAD(false))), false, false, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-949.597) : injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)), true, false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-481.534, -3.8))))).x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x < injectionSwitch.y), true))))), ! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x < injectionSwitch.y), true))))))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) - 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.7) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(tanh(4.7)))))), min(0.0, 0.0)))), injectionSwitch.x)))) + 0u)) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (_GLF_IDENTITY(7u, (7u) << 0u))))))))))) >> 0u)) / 1u) * subgroup_size, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (0u | 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | 0u)), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), uint(uvec3(uint(uvec3(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(3u, (3u) - 0u)))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) | 0u)) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(float((ivec3(-17268, 22335, 51658) == ivec3(-62694, 77563, _GLF_IDENTITY(-35283, (-35283) ^ 0)))))), bool(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uint((subgroup_id)), (uint((subgroup_id))) - 0u))) - 0u)), ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) - 0u, ((subgroup_id) - 0u) * 1u), (subgroup_id) - 0u, (subgroup_id) - 0u))))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | 0u))), min((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (0u | 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | 0u)), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), uint(uvec3(uint(uvec3(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(3u, (3u) - 0u)))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) | 0u)) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(float((ivec3(-17268, 22335, 51658) == ivec3(-62694, 77563, _GLF_IDENTITY(-35283, (-35283) ^ 0)))))), bool(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uint((subgroup_id)), (uint((subgroup_id))) - 0u))) - 0u)), ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) - 0u, ((subgroup_id) - 0u) * 1u), (subgroup_id) - 0u, (subgroup_id) - 0u))))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), (((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (0u | 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | 0u)), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), uint(uvec3(uint(uvec3(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(3u, (3u) - 0u)))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) | 0u)) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(float((ivec3(-17268, 22335, 51658) == ivec3(-62694, 77563, _GLF_IDENTITY(-35283, (-35283) ^ 0)))))), bool(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uint((subgroup_id)), (uint((subgroup_id))) - 0u))) - 0u)), ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) - 0u, ((subgroup_id) - 0u) * 1u), (subgroup_id) - 0u, (subgroup_id) - 0u))))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | 0u))))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (true ? uint(7u) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(7u, 1u * (7u)))))))) / 1u) * subgroup_size), ((workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))), (((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)))) | 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(abs(1.0), 0.0), vec2(0.0, 1.0)), dot(vec2(abs(1.0), 0.0), vec2(0.0, 1.0)))), injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), uint(uvec3(uint(uvec3(((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), min((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)))), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) | 0u)) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(float((ivec3(-17268, 22335, 51658) == ivec3(-62694, 77563, -35283))))), bool(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uint((subgroup_id)), (uint((subgroup_id))) - 0u))) - 0u)), ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, clamp(_GLF_IDENTITY((subgroup_id) - 0u, ((subgroup_id) - 0u) * 1u), (subgroup_id) - 0u, (subgroup_id) - 0u))))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(159.064) : min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | 0u))) | (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(_GLF_IDENTITY(_GLF_IDENTITY(7u, max(_GLF_IDENTITY(7u, (7u) | (7u)), 7u)), _GLF_IDENTITY(1u, ~ (~ (1u))) * (7u)))))))) / 1u) * subgroup_size)) << 0u) >> 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), subgroup_id)) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (true ? ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) / 1)))) % subgroup_size) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) << (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) % subgroup_size, 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))) % _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(983.484), _GLF_FUZZED(-13.65)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(_GLF_IDENTITY(91.34, min(91.34, _GLF_IDENTITY(_GLF_IDENTITY(91.34, max(91.34, 91.34)), _GLF_IDENTITY(clamp(91.34, 91.34, 91.34), clamp(_GLF_IDENTITY(clamp(91.34, 91.34, 91.34), clamp(clamp(91.34, 91.34, 91.34), clamp(91.34, 91.34, 91.34), clamp(91.34, 91.34, 91.34))), _GLF_IDENTITY(clamp(91.34, 91.34, 91.34), clamp(clamp(91.34, 91.34, 91.34), clamp(91.34, 91.34, 91.34), clamp(91.34, 91.34, 91.34))), clamp(91.34, 91.34, 91.34))))))) : (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(false)))))), true))), true)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(_GLF_IDENTITY(bvec2((true) || false, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((true) || false, true), bvec2(bvec4(bvec2((true) || false, true), true, true))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2((true) || false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY((true) || false, ((true) || false) || false), true), true, true))), true)), true)))))))) && true), false))), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec2(true, _GLF_IDENTITY(false, (false) && true)))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true))), true)))))), true, true)))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY((vec2(0.0, 0.0)), ((vec2(0.0, 0.0))) * vec2(1.0, 1.0)) - sin(vec2(0.0, 0.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (false ? _GLF_FUZZED(8149.2626) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)).y))))), mix(float(_GLF_FUZZED((- 6.6))), float(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY((vec2(0.0, 0.0)), ((vec2(0.0, 0.0))) * vec2(1.0, 1.0)) - sin(vec2(0.0, 0.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (false ? _GLF_FUZZED(8149.2626) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)).y)))))), bool(true))))))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 ^ 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (0 ^ 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), (_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1)))) | 0u), 4, 64, 4);
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(false, true, false))))) && true)) || false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(654.916), _GLF_FUZZED(-7.3)), bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))).x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))))))))), bool(bvec4((! (_GLF_WRAPPED_IF_FALSE(false))), false, false, false)))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && _GLF_IDENTITY(true, bool(bool(true))))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), bool(bvec3(bool(bvec4(_GLF_DEAD(false), false, true, false)), false, true)))))
            break;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), false, true))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), false, true)))) && true))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * _GLF_IDENTITY((_injected_loop_counter ++), 0 ^ ((_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++))) << 0)))))) << 0))
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) / 1u)) >> 0u)], 0u ^ (buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 1u)))) | (_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))))), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 1u)))) | (_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))))))) / 1u)) / 1u)) >> 0u)])), min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), false || (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))), bool(bvec2((bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))), false)))))))) ? _GLF_FUZZED(158678u) : (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) / 1u)) >> 0u)], _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)))), 0u ^ (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) / 1u)) >> 0u)], (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))), virtual_gid)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) / 1u)) >> 0u)], _GLF_IDENTITY(~ _GLF_IDENTITY((~ (buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(next_virtual_gid))), min(virtual_gid, virtual_gid))) / 1u)) >> 0u)])), ((~ (buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(next_virtual_gid))), min(virtual_gid, virtual_gid))) / 1u)) >> 0u)]))) | 0u), (~ (~ (buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) / 1u)) >> 0u)]))) >> 0u)) : _GLF_FUZZED(virtual_gid))))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true))) || false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))) < injectionSwitch.y)))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(false), false)), bvec2(bvec3(bvec2(bvec2(_GLF_DEAD(false), false)), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(false), false)), bvec2(bvec3(bvec2(bvec2(_GLF_DEAD(false), false)), true)))), true)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(false), false)), bvec2(bvec3(bvec2(bvec2(_GLF_DEAD(false), false)), true)))), true)), false)))))))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(5110.5972, -7.6))))) + vec2(0.0, 0.0))))).x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(87.05), _GLF_IDENTITY(_GLF_FUZZED(-586.126), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), max(vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)))))), bvec2(false, false))).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(87.05), _GLF_IDENTITY(_GLF_FUZZED(-586.126), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), max(vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)))))), bvec2(false, false))).y), true && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(87.05), _GLF_IDENTITY(_GLF_FUZZED(-586.126), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), max(vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(_GLF_FUZZED(-586.126), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)))))), bvec2(false, false))).y)))))))))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))], uint(read_1 == _GLF_IDENTITY(read_2, (read_2) | (_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_2, (read_2) ^ 0u)), (false ? _GLF_FUZZED(virtual_gid) : ~ (_GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2) ^ 0u, min((read_2) ^ 0u, _GLF_IDENTITY((read_2) ^ 0u, (true ? (read_2) ^ 0u : _GLF_FUZZED(packSnorm2x16(vec2(69.35, -4.9)))))))))))))))) + _GLF_IDENTITY(1, (1) + 0), 4, 64, 4);
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), true && (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.3) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.3) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.3) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       do
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) + 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)), 0 | (int(ivec4(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) + 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)))))) - 0), _GLF_IDENTITY(min(6, 6), (min(6, 6)) + 0))), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, min(6, 6)))) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 | _GLF_IDENTITY(0, (0) | (0))) | 1, (true ? (1 | 0) | 1 : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
          {
           subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) + 0.0))))) && (false))))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))), true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))), true)))))))), false || (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! _GLF_IDENTITY((true), false || ((true)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true)))))), ! (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), (! (true)) || false)))))))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) || false)))), false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), ! (! ((! (! (true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((! (! (true))), ! (! ((! (! (true)))))), ! (! ((! (! (true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true))))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bvec4((! (! (true))), true, true, true))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (! ((! (! (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (bool(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), ! (_GLF_IDENTITY(! ((! (! (true)))), ! (! (! ((! (! (true)))))))))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((! (! (true))), _GLF_IDENTITY(! (! ((! (! (true))))), false || (! (! ((! (! (true))))))))), true && (! (! _GLF_IDENTITY((! (! (true))), ! (_GLF_IDENTITY(! ((! (! (true)))), bool(bool(! ((! (! (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))), true))))))))))) || false), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), true, true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false, true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false, true)))))))))))
        {
         atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(read_2, (read_2) / 1u)) + 1, 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec3(true, false, true))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))) || false)) || false)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && _GLF_IDENTITY(true, false || (true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), true && (((false))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((false), true, false, true)))) || (true))))))))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
}
