#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_133 {
 mat3 _f0;
 vec3 _f1;
 ivec2 _f2;
 ivec4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_132 {
 uvec4 _f0;
 ivec3 _f1;
 bvec3 _f2;
 uvec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_131 {
 ivec4 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_134 {
 _GLF_struct_131 _f0;
 _GLF_struct_132 _f1;
 int _f2;
 mat4 _f3;
 vec3 _f4;
 _GLF_struct_133 _f5;
} ;

struct _GLF_struct_135 {
 ivec4 _f0;
 int _injected_loop_counter;
 _GLF_struct_134 _f1;
} ;

struct _GLF_struct_128 {
 bool _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_127 {
 bvec3 _f0;
 uvec3 _f1;
 mat3x2 _f2;
 int _f3;
} ;

struct _GLF_struct_126 {
 bvec2 _f0;
 ivec2 _f1;
 vec3 _f2;
 mat3 _f3;
 mat3x4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_125 {
 int _f0;
} ;

struct _GLF_struct_129 {
 _GLF_struct_125 _f0;
 mat2x3 _f1;
 _GLF_struct_126 _f2;
 bvec2 _f3;
 _GLF_struct_127 _f4;
 _GLF_struct_128 _f5;
} ;

struct _GLF_struct_123 {
 uvec3 _f0;
 uvec2 _f1;
 int _injected_loop_counter;
 uvec4 _f2;
} ;

struct _GLF_struct_124 {
 _GLF_struct_123 _f0;
} ;

struct _GLF_struct_121 {
 ivec3 _f0;
} ;

struct _GLF_struct_120 {
 uvec4 _f0;
 bvec4 _f1;
 bvec2 _f2;
 mat3x2 _f3;
 mat4 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_119 {
 float _f0;
} ;

struct _GLF_struct_122 {
 ivec4 _f0;
 _GLF_struct_119 _f1;
 _GLF_struct_120 _f2;
 mat4 _f3;
 _GLF_struct_121 _f4;
} ;

struct _GLF_struct_130 {
 _GLF_struct_122 _f0;
 _GLF_struct_124 _f1;
 _GLF_struct_129 _f2;
} ;

struct _GLF_struct_116 {
 mat4 _f0;
 mat3x4 _f1;
 mat3x2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_115 {
 mat4 _f0;
 float _f1;
 float _f2;
 mat3x2 _f3;
 bvec3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_117 {
 _GLF_struct_115 _f0;
 _GLF_struct_116 _f1;
} ;

struct _GLF_struct_113 {
 mat2 _f0;
 mat3 _f1;
 bvec3 _f2;
 mat3x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_114 {
 int _f0;
 vec2 _f1;
 _GLF_struct_113 _f2;
} ;

struct _GLF_struct_118 {
 _GLF_struct_114 _f0;
 int _injected_loop_counter;
 _GLF_struct_117 _f1;
} ;

struct _GLF_struct_110 {
 mat2x3 _f0;
 uvec4 _f1;
 int _f2;
 mat4x2 _f3;
 mat3x4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_111 {
 _GLF_struct_110 _f0;
} ;

struct _GLF_struct_108 {
 bool _f0;
 bvec4 _f1;
 ivec2 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 uvec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_109 {
 mat2 _f0;
 _GLF_struct_108 _f1;
} ;

struct _GLF_struct_112 {
 vec4 _f0;
 ivec3 _f1;
 int _f2;
 int _injected_loop_counter;
 mat4 _f3;
 _GLF_struct_109 _f4;
 _GLF_struct_111 _f5;
} ;

struct _GLF_struct_105 {
 uint _f0;
 mat2x3 _f1;
 bool _f2;
 bvec3 _f3;
 ivec4 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_104 {
 vec3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_103 {
 uvec3 _f0;
 bvec3 _f1;
 bvec4 _f2;
 mat4x2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_102 {
 vec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_106 {
 mat3x4 _f0;
 _GLF_struct_102 _f1;
 bvec2 _f2;
 int _injected_loop_counter;
 _GLF_struct_103 _f3;
 _GLF_struct_104 _f4;
 _GLF_struct_105 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_107 {
 ivec4 _f0;
 mat2x3 _f1;
 _GLF_struct_106 _f2;
 vec2 _f3;
 vec3 _f4;
 uint _f5;
} ;

struct _GLF_struct_99 {
 mat3 _f0;
 mat4x2 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 uvec3 _f4;
 mat3x2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_98 {
 ivec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_97 {
 uint _f0;
 uint _f1;
 ivec4 _f2;
 mat2 _f3;
 mat4 _f4;
 float _f5;
} ;

struct _GLF_struct_100 {
 _GLF_struct_97 _f0;
 _GLF_struct_98 _f1;
 _GLF_struct_99 _f2;
 int _f3;
} ;

struct _GLF_struct_95 {
 mat2x4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_94 {
 uint _f0;
 float _f1;
 uvec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_96 {
 ivec3 _f0;
 _GLF_struct_94 _f1;
 int _injected_loop_counter;
 _GLF_struct_95 _f2;
} ;

struct _GLF_struct_101 {
 _GLF_struct_96 _f0;
 mat4x2 _f1;
 _GLF_struct_100 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_91 {
 bvec3 _f0;
 uint _f1;
 int _f2;
 vec3 _f3;
 vec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_90 {
 uvec2 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 uvec2 _f3;
 vec3 _f4;
 float _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_92 {
 _GLF_struct_90 _f0;
 bvec4 _f1;
 _GLF_struct_91 _f2;
 uvec3 _f3;
 uvec3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_88 {
 mat3x4 _f0;
 mat3 _f1;
 float _f2;
 bvec3 _f3;
 bvec2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_87 {
 mat2 _f0;
 vec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_86 {
 uvec4 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 mat4x2 _f3;
 ivec3 _f4;
 uint _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_85 {
 ivec2 _f0;
 uint _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_89 {
 _GLF_struct_85 _f0;
 _GLF_struct_86 _f1;
 _GLF_struct_87 _f2;
 mat4x3 _f3;
 _GLF_struct_88 _f4;
} ;

struct _GLF_struct_83 {
 mat4 _f0;
 float _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_84 {
 mat4x3 _f0;
 vec4 _f1;
 _GLF_struct_83 _f2;
} ;

struct _GLF_struct_81 {
 uvec3 _f0;
 bvec2 _f1;
 uvec4 _f2;
 mat4x3 _f3;
 ivec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_82 {
 _GLF_struct_81 _f0;
 uvec4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_93 {
 _GLF_struct_82 _f0;
 _GLF_struct_84 _f1;
 uvec2 _f2;
 _GLF_struct_89 _f3;
 _GLF_struct_92 _f4;
 int _injected_loop_counter;
 mat3 _f5;
} ;

struct _GLF_struct_78 {
 mat4 _f0;
 uint _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_79 {
 _GLF_struct_78 _f0;
} ;

struct _GLF_struct_76 {
 ivec3 _f0;
 mat4x3 _f1;
 mat4x2 _f2;
 mat3x4 _f3;
 int _f4;
 mat4 _f5;
} ;

struct _GLF_struct_75 {
 int _f0;
 int _f1;
 float _f2;
 mat2 _f3;
 uint _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_74 {
 vec4 _f0;
 bool _f1;
 mat4x3 _f2;
 mat3x4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_73 {
 vec2 _f0;
 mat4x2 _f1;
 uint _f2;
 mat4x3 _f3;
 vec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_77 {
 _GLF_struct_73 _f0;
 uvec4 _f1;
 _GLF_struct_74 _f2;
 _GLF_struct_75 _f3;
 mat4 _f4;
 bool _f5;
 _GLF_struct_76 _f6;
} ;

struct _GLF_struct_80 {
 bvec2 _f0;
 _GLF_struct_77 _f1;
 uint workgroup_size;
 vec2 _f2;
 uint _f3;
 _GLF_struct_79 _f4;
} ;

struct _GLF_struct_71 {
 mat2x4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_72 {
 int _injected_loop_counter;
 uvec3 _f0;
 _GLF_struct_71 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_68 {
 mat3 _f0;
} ;

struct _GLF_struct_67 {
 mat3x2 _f0;
} ;

struct _GLF_struct_66 {
 vec3 _f0;
} ;

struct _GLF_struct_65 {
 uvec2 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 int _f3;
} ;

struct _GLF_struct_69 {
 mat3x2 _f0;
 _GLF_struct_65 _f1;
 _GLF_struct_66 _f2;
 _GLF_struct_67 _f3;
 _GLF_struct_68 _f4;
} ;

struct _GLF_struct_63 {
 mat3 _f0;
 float _f1;
 mat2x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_64 {
 uvec4 _f0;
 _GLF_struct_63 _f1;
} ;

struct _GLF_struct_61 {
 uint _f0;
 bvec3 _f1;
 vec4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_60 {
 mat4x3 _f0;
 uvec3 _f1;
 mat3x2 _f2;
 uvec4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_62 {
 _GLF_struct_60 _f0;
 _GLF_struct_61 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_70 {
 _GLF_struct_62 _f0;
 _GLF_struct_64 _f1;
 uint workgroup_base;
 _GLF_struct_69 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_57 {
 vec2 _f0;
 uvec4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_56 {
 vec4 _f0;
 float _f1;
 uvec2 _f2;
 mat3x4 _f3;
 vec2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_55 {
 float _f0;
 vec3 _f1;
 mat4x3 _f2;
 mat3x4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_58 {
 _GLF_struct_55 _f0;
 _GLF_struct_56 _f1;
 mat4 _f2;
 _GLF_struct_57 _f3;
 uvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_53 {
 uvec4 _f0;
} ;

struct _GLF_struct_54 {
 _GLF_struct_53 _f0;
 mat3 _f1;
 uvec3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_52 {
 mat3x4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_50 {
 mat3x4 _f0;
 mat2 _f1;
 mat3x2 _f2;
 mat2x3 _f3;
 float _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_49 {
 mat3x2 _f0;
 mat3 _f1;
 vec2 _f2;
 float _f3;
 mat4 _f4;
 float _f5;
} ;

struct _GLF_struct_48 {
 int _f0;
 vec2 _f1;
} ;

struct _GLF_struct_47 {
 mat4x2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_51 {
 vec4 _f0;
 _GLF_struct_47 _f1;
 vec2 _f2;
 _GLF_struct_48 _f3;
 _GLF_struct_49 _f4;
 _GLF_struct_50 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_59 {
 _GLF_struct_51 _f0;
 ivec3 _f1;
 _GLF_struct_52 _f2;
 uint next_virtual_gid;
 _GLF_struct_54 _f3;
 _GLF_struct_58 _f4;
} ;

struct _GLF_struct_44 {
 bool _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_43 {
 bvec3 _f0;
 bvec3 _f1;
 mat3x4 _f2;
 mat4x2 _f3;
 int _f4;
} ;

struct _GLF_struct_42 {
 mat3x4 _f0;
 bvec2 _f1;
 uvec4 _f2;
 mat4x2 _f3;
 mat2 _f4;
 mat4 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_45 {
 int _f0;
 _GLF_struct_42 _f1;
 int _f2;
 _GLF_struct_43 _f3;
 _GLF_struct_44 _f4;
 ivec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_40 {
 int _f0;
 uint _f1;
 bool _f2;
 uvec3 _f3;
 vec4 _f4;
 ivec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_39 {
 uint _f0;
 bvec4 _f1;
 uvec4 _f2;
 ivec2 _f3;
 mat4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_41 {
 _GLF_struct_39 _f0;
 _GLF_struct_40 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_37 {
 mat2x4 _f0;
 vec4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_36 {
 ivec3 _f0;
 float _f1;
} ;

struct _GLF_struct_35 {
 mat4x2 _f0;
 ivec4 _f1;
 mat3 _f2;
 uvec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_34 {
 bvec3 _f0;
 uvec3 _f1;
 ivec4 _f2;
 mat3 _f3;
 ivec4 _f4;
 ivec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_38 {
 _GLF_struct_34 _f0;
 mat2x4 _f1;
 _GLF_struct_35 _f2;
 _GLF_struct_36 _f3;
 mat3x2 _f4;
 _GLF_struct_37 _f5;
} ;

struct _GLF_struct_32 {
 ivec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_31 {
 float _f0;
 bvec3 _f1;
 float _f2;
 ivec4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_33 {
 _GLF_struct_31 _f0;
 ivec3 _f1;
 _GLF_struct_32 _f2;
} ;

struct _GLF_struct_29 {
 bvec3 _f0;
 vec2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_28 {
 ivec2 _f0;
 uvec4 _f1;
 bvec3 _f2;
 mat4x3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_27 {
 mat2x3 _f0;
 mat2x3 _f1;
 vec2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_26 {
 vec3 _f0;
 mat4 _f1;
 bvec4 _f2;
 bvec2 _f3;
 ivec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_30 {
 bvec3 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_28 _f3;
 bvec3 _f4;
 bool _f5;
 uint virtual_gid;
 _GLF_struct_29 _f6;
} ;

struct _GLF_struct_46 {
 _GLF_struct_30 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_38 _f2;
 bvec3 _f3;
 _GLF_struct_41 _f4;
 _GLF_struct_45 _f5;
} ;

struct _GLF_struct_23 {
 ivec2 _f0;
 int _f1;
 uint _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_22 {
 uvec4 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 mat2x3 _f3;
 uint _f4;
 vec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_21 {
 bool _f0;
 bvec3 _f1;
 mat2x3 _f2;
 bvec2 _f3;
 vec4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_24 {
 bvec2 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
 int _f4;
 mat3 _f5;
 bool _f6;
} ;

struct _GLF_struct_19 {
 ivec2 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 ivec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_18 {
 bvec2 _f0;
 int _injected_loop_counter;
 float _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 uvec2 _f1;
 _GLF_struct_19 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_25 {
 _GLF_struct_20 _f0;
 mat3x4 _f1;
 _GLF_struct_24 _f2;
 float _f3;
} ;

struct _GLF_struct_17 {
 mat4 _f0;
 uint read_1;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 vec3 _f1;
 mat2 _f2;
 mat2x3 _f3;
 mat3x2 _f4;
 vec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_13 {
 int _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 mat3x4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_11 {
 uint _f0;
 float _f1;
 mat2 _f2;
 mat4x2 _f3;
 mat4 _f4;
 bvec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_12 _f0;
 uint workgroup_id;
 _GLF_struct_15 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_8 {
 int _f0;
 bvec4 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 bool _f1;
 float _f2;
 mat4x2 _f3;
 bvec3 _f4;
 bool _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 vec2 _f1;
 vec4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 uint num_workgroup;
 uint _f1;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 uvec4 _f1;
 bvec2 _f2;
 uint _f3;
 vec2 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 float _f3;
 _GLF_struct_7 _f4;
 uvec4 _f5;
 _GLF_struct_8 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 uvec3 _f1;
 mat4x2 _f2;
 mat2x3 _f3;
 uint _f4;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 int _f1;
 mat4 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 ivec3 _f1;
 mat2 _f2;
 _GLF_struct_1 _f3;
 uint read_2;
 vec3 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat4x3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_9(_GLF_struct_4(mat3x4(1.0), uvec4(_GLF_IDENTITY(1u, (1u) | 0u)), bvec2(true), 1u, vec2(1.0)), _GLF_struct_5(mat2x4(1.0), gl_NumWorkGroups.x, 1u), _GLF_struct_6(mat3x4(1.0), vec2(1.0), vec4(1.0), ivec3(1)), 1.0, _GLF_struct_7(mat3x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9729.6967))) > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) ? _GLF_FUZZED((0.6 + 6426.8852)) : 1.0))), true, 1.0, mat4x2(1.0), bvec3(true), true, uvec4(1u)), uvec4(1u), _GLF_struct_8(1, bvec4(true), _GLF_IDENTITY(ivec4(1), ~ (~ (ivec4(1)))), mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), mat4x2(1.0))), vec2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_80 _GLF_struct_replacement_80 = _GLF_struct_80(bvec2(true), _GLF_struct_77(_GLF_struct_73(vec2(1.0), mat4x2(1.0), 1u, mat4x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.9) : 1.0))))), vec4(1.0), ivec2(1)), uvec4(1u), _GLF_struct_74(vec4(_GLF_IDENTITY(1.0, (1.0) * 1.0)), true, mat4x3(1.0), mat3x4(1.0), bvec4(true)), _GLF_struct_75(1, 1, 1.0, mat2(1.0), 1u, uvec3(1u)), mat4(1.0), true, _GLF_struct_76(ivec3(1), mat4x3(1.0), mat4x2(1.0), mat3x4(1.0), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), _GLF_IDENTITY(~ (~ (1)), ~ (~ (~ (~ (1))))), ~ (~ (1))))), mat4(1.0))), gl_WorkGroupSize.x, vec2(1.0), 1u, _GLF_struct_79(_GLF_struct_78(mat4(1.0), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) | (1u)), mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), 0 | (int(6))), _GLF_IDENTITY(int(6), int(int(int(6))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         break;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)))))))))
        {
         if(_GLF_DEAD(false))
          return;
         for(_GLF_struct_107 _GLF_struct_replacement_107 = _GLF_struct_107(ivec4(1), mat2x3(1.0), _GLF_struct_106(mat3x4(1.0), _GLF_struct_102(vec3(1.0), mat3(1.0)), bvec2(true), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_103(uvec3(1u), bvec3(true), bvec4(true), mat4x2(1.0), uvec2(1u)), _GLF_struct_104(vec3(1.0), bvec4(true)), _GLF_struct_105(1u, mat2x3(1.0), true, bvec3(true), ivec4(1), mat4(1.0), bvec4(true)), mat3(1.0)), vec2(1.0), vec3(1.0), 1u); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_107._f2._injected_loop_counter < 1); _GLF_struct_replacement_107._f2._injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           for(_GLF_struct_112 _GLF_struct_replacement_112 = _GLF_struct_112(vec4(1.0), ivec3(1), 1, (1 & 1), mat4(1.0), _GLF_struct_109(mat2(1.0), _GLF_struct_108(true, bvec4(true), ivec2(1), uvec4(1u), mat2x3(1.0), uvec2(1u), mat4(1.0))), _GLF_struct_111(_GLF_struct_110(mat2x3(1.0), uvec4(1u), 1, mat4x2(1.0), mat3x4(1.0), ivec3(1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_112._injected_loop_counter > 0, false || (_GLF_struct_replacement_112._injected_loop_counter > 0))); _GLF_struct_replacement_112._injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_12(_GLF_struct_11(1u, 1.0, mat2(1.0), mat4x2(1.0), mat4(1.0), bvec4(true), uvec4(1u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(min(uvec3(45839u, 7402u, 119993u), 191173u)))).x, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(min(uvec3(45839u, 7402u, 119993u), 191173u)))).x)), _GLF_struct_15(_GLF_struct_13(1), _GLF_struct_14(mat2(1.0), vec3(1.0), mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(665.172)), bool(false)))), mat2x3(1.0), mat3x2(1.0), vec3(1.0), mat2x3(1.0)), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0)), (mat4(1.0)) - mat4(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.5)), float(0.0), bool(true)))))), ivec3(1));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(_GLF_struct_118 _GLF_struct_replacement_118 = _GLF_struct_118(_GLF_struct_114(1, vec2(1.0), _GLF_struct_113(mat2(1.0), mat3(1.0), bvec3(true), mat3x4(1.0), vec2(1.0))), ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_struct_117(_GLF_struct_115(mat4(1.0), 1.0, 1.0, mat3x2(1.0), bvec3(true), bvec2(true)), _GLF_struct_116(mat4(1.0), mat3x4(1.0), mat3x2(1.0), mat4(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_118._injected_loop_counter > 0); _GLF_struct_replacement_118._injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.3) : injectionSwitch.y)), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.3) : injectionSwitch.y)), true)))))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 _GLF_struct_70 _GLF_struct_replacement_70 = _GLF_struct_70(_GLF_struct_62(_GLF_struct_60(mat4x3(1.0), uvec3(1u), mat3x2(1.0), uvec4(1u), bvec3(true)), _GLF_struct_61(1u, bvec3(true), vec4(1.0), vec4(1.0)), mat3x4(1.0)), _GLF_struct_64(uvec4(1u), _GLF_struct_63(mat3(1.0), 1.0, mat2x4(1.0), uvec2(1u))), _GLF_struct_replacement_80.workgroup_size * _GLF_struct_replacement_16.workgroup_id, _GLF_struct_69(mat3x2(1.0), _GLF_struct_65(uvec2(1u), mat4x2(1.0), ivec3(1), 1), _GLF_struct_66(vec3(1.0)), _GLF_struct_67(mat3x2(1.0)), _GLF_struct_68(mat3(1.0))), vec3(1.0));
 _GLF_struct_46 _GLF_struct_replacement_46 = _GLF_struct_46(_GLF_struct_30(bvec3(true), _GLF_struct_26(vec3(1.0), mat4(1.0), bvec4(true), bvec2(true), ivec3(1), vec3(1.0)), _GLF_struct_27(mat2x3(1.0), mat2x3(1.0), vec2(1.0), mat2x4(1.0)), _GLF_struct_28(ivec2(1), uvec4(1u), bvec3(true), mat4x3(1.0), bvec4(true)), bvec3(true), true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_70.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u) + subgroup_local_id, ~ _GLF_IDENTITY((~ (_GLF_struct_replacement_70.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), ((~ (_GLF_struct_replacement_70.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (0u << _GLF_IDENTITY(uint(7u), uint(7u))))), clamp(_GLF_struct_replacement_70.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_struct_replacement_70.workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(atomicMax(subgroup_local_id, subgroup_id)) : _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))) + subgroup_local_id, _GLF_struct_replacement_70.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), _GLF_struct_29(bvec3(true), vec2(1.0), uvec3(1u))), _GLF_struct_33(_GLF_struct_31(1.0, bvec3(true), 1.0, ivec4(1), mat4(1.0)), ivec3(_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_struct_32(ivec3(1), mat2x3(1.0))), _GLF_struct_38(_GLF_struct_34(bvec3(true), uvec3(1u), ivec4(1), mat3(1.0), ivec4(1), ivec3(1), mat3(1.0)), mat2x4(1.0), _GLF_struct_35(mat4x2(1.0), ivec4(1), mat3(1.0), uvec2(_GLF_IDENTITY(1u, (0u ^ 0u) ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) ^ uvec2(0u, 0u))))) << 0u)))), bvec3(true)), _GLF_struct_36(ivec3(1), 1.0), mat3x2(1.0), _GLF_struct_37(mat2x4(1.0), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), vec4(1.0))), bvec3(true), _GLF_struct_41(_GLF_struct_39(1u, bvec4(true), uvec4(1u), ivec2(1), mat4(1.0), uvec4(1u)), _GLF_struct_40(_GLF_IDENTITY(1, 1 * (1)), 1u, true, uvec3(1u), vec4(1.0), _GLF_IDENTITY(ivec3(1), max(ivec3(1), ivec3(1))), mat3x2(1.0)), bvec4(true)), _GLF_struct_45(1, _GLF_struct_42(mat3x4(1.0), bvec2(true), uvec4(1u), mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-689.245)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), mat2(1.0), mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), vec2(1.0)), 1, _GLF_struct_43(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(true), mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(smoothstep(407.333, -23.64, 66.62)) : 1.0))), mat4x2(1.0), 1), _GLF_struct_44(true, uvec4(1u)), ivec3(1), mat3(1.0)));
 _GLF_struct_59 _GLF_struct_replacement_59 = _GLF_struct_59(_GLF_struct_51(_GLF_IDENTITY(vec4(1.0), vec4(mat2(vec4(1.0)))), _GLF_struct_47(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat2x3(vec2(1.0, 1.0), 1.0, 1.0, 0.0, 0.0))))))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat2x3(vec2(1.0, 1.0), 1.0, 1.0, 0.0, 0.0))))))), 0.0, 0.0, sqrt(1.0)), transpose(transpose(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat2x3(vec2(1.0, 1.0), 1.0, 1.0, 0.0, 0.0))))))), 0.0, 0.0, sqrt(1.0)))))))), mat2(1.0)), vec2(1.0), _GLF_struct_48(_GLF_IDENTITY(1, ~ (~ (1))), vec2(1.0)), _GLF_struct_49(mat3x2(1.0), mat3(1.0), vec2(1.0), 1.0, mat4(1.0), 1.0), _GLF_struct_50(mat3x4(1.0), mat2(1.0), mat3x2(1.0), mat2x3(1.0), 1.0, uvec3(1u)), vec3(_GLF_IDENTITY(1.0, (1.0) / 1.0))), ivec3(1), _GLF_struct_52(mat3x4(1.0), uvec3(1u)), _GLF_struct_replacement_70.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_struct_54(_GLF_struct_53(uvec4(1u)), mat3(1.0), uvec3(1u), bvec3(true)), _GLF_struct_58(_GLF_struct_55(1.0, vec3(1.0), mat4x3(1.0), mat3x4(1.0), mat2(1.0)), _GLF_struct_56(vec4(1.0), 1.0, uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(_GLF_struct_replacement_80.workgroup_size) : _GLF_IDENTITY(1u, (1u) / 1u)))), mat3x4(1.0), vec2(1.0), mat4(1.0)), mat4(1.0), _GLF_struct_57(vec2(1.0), uvec4(1u), mat4x2(1.0)), uvec3(1u), bvec3(true)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false, false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, false)))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     for(_GLF_struct_93 _GLF_struct_replacement_93 = _GLF_struct_93(_GLF_struct_82(_GLF_struct_81(uvec3(1u), bvec2(true), uvec4(1u), mat4x3(1.0), ivec4(1), uvec2(1u)), uvec4(1u), mat3x2(1.0)), _GLF_struct_84(mat4x3(1.0), vec4(1.0), _GLF_struct_83(mat4(1.0), 1.0, mat4x2(1.0))), uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_struct_89(_GLF_struct_85(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1))), 1u, ivec3(1)), _GLF_struct_86(uvec4(1u), ivec3(1), mat3x2(1.0), mat4x2(1.0), ivec3(1), 1u, bvec4(true)), _GLF_struct_87(mat2(1.0), vec3(1.0), ivec2(1)), mat4x3(1.0), _GLF_struct_88(mat3x4(1.0), mat3(1.0), 1.0, bvec3(true), bvec2(true), vec3(1.0))), _GLF_struct_92(_GLF_struct_90(uvec2(1u), mat4x3(1.0), mat2x4(1.0), uvec2(1u), vec3(1.0), 1.0, uvec3(1u)), bvec4(true), _GLF_struct_91(bvec3(true), 1u, 1, vec3(1.0), vec4(1.0), true), uvec3(1u), uvec3(1u), mat3x2(1.0)), _GLF_IDENTITY(1, min(1, 1)), mat3(1.0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_93._injected_loop_counter, int(int(_GLF_struct_replacement_93._injected_loop_counter))) > 0); _GLF_struct_replacement_93._injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 do
  {
   do
    {
     atomicStore(buf[_GLF_struct_replacement_59.next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(_GLF_IDENTITY(int(64), _GLF_IDENTITY(_GLF_IDENTITY(min(int(64), int(64)), int(ivec2(min(int(64), int(64)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))), (min(int(64), int(64))) - 0))))) - 0), 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(_GLF_struct_72 _GLF_struct_replacement_72 = _GLF_struct_72(1, uvec3(1u), _GLF_struct_71(mat2x4(1.0), mat4(1.0)), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_72._injected_loop_counter > 0); _GLF_struct_replacement_72._injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     for(_GLF_struct_101 _GLF_struct_replacement_101 = _GLF_struct_101(_GLF_struct_96(ivec3(1), _GLF_struct_94(1u, 1.0, uvec2(1u), bvec2(true)), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_95(mat2x4(1.0), bvec2(true))), mat4x2(1.0), _GLF_struct_100(_GLF_struct_97(1u, 1u, ivec4(1), mat2(1.0), mat4(1.0), 1.0), _GLF_struct_98(ivec2(1), ivec3(1)), _GLF_struct_99(mat3(1.0), mat4x2(1.0), ivec4(1), mat4x3(1.0), uvec3(1u), mat3x2(1.0), uvec3(1u)), 1), ivec3(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_101._f0._injected_loop_counter != _GLF_IDENTITY(1, (1) * 1)); _GLF_struct_replacement_101._f0._injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 1 * (_GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9407.6133), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec3(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / abs(1.0)), _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(7900.3490) : (injectionSwitch)[0])))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))))), _GLF_FUZZED(0.1)), bvec2(true, false))).x))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(_GLF_struct_130 _GLF_struct_replacement_130 = _GLF_struct_130(_GLF_struct_122(ivec4(1), _GLF_struct_119(1.0), _GLF_struct_120(uvec4(1u), bvec4(true), bvec2(true), mat3x2(1.0), mat4(1.0), mat4(1.0), bvec4(true)), mat4(1.0), _GLF_struct_121(ivec3(1))), _GLF_struct_124(_GLF_struct_123(uvec3(1u), uvec2(1u), int(_GLF_ZERO(0.0, injectionSwitch.x)), uvec4(1u))), _GLF_struct_129(_GLF_struct_125(1), mat2x3(1.0), _GLF_struct_126(bvec2(true), ivec2(1), vec3(1.0), mat3(1.0), mat3x4(1.0), ivec4(1)), bvec2(true), _GLF_struct_127(bvec3(true), uvec3(1u), mat3x2(1.0), 1), _GLF_struct_128(true, ivec2(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_130._f1._f0._injected_loop_counter != 1); _GLF_struct_replacement_130._f1._f0._injected_loop_counter ++)
      {
       return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true, false))))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
        break;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0)), min(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0)), _GLF_IDENTITY(1.0, (1.0) / sqrt(1.0))))), atomicLoad(buf[_GLF_struct_replacement_46._f0.virtual_gid], _GLF_IDENTITY(4, (4) / _GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(64, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(abs(-51888)) : 64)), 0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.3)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true)))) - length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))))), 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + log(1.0)), 0.0), _GLF_IDENTITY((vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + log(1.0)), 0.0)) * mat4(1.0), vec4(mat3(_GLF_IDENTITY((vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + log(1.0)), 0.0)) * mat4(1.0), (true ? (vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0)) + log(1.0)), 0.0)) * mat4(1.0) : _GLF_FUZZED(vec4(-5589.5889, -3.0, -8.7, -0.1)))), 1.0, 1.0, 0.0, 1.0, 1.0)))))), 0.0)), (vec2(vec4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.3), (false ? _GLF_FUZZED(9.4) : _GLF_FUZZED(9.3)))), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true)))) - length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))))), 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + log(1.0)), 0.0))), 0.0))) / vec2(1.0, 1.0)), max(vec2(vec4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0))), 0.0)), vec2(vec4(injectionSwitch, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.9) : 0.0))))))))).y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-400.583)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-400.583)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-400.583)), bool(false))) > injectionSwitch.y))))))))));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               return;
              }
            }
           else
            {
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(ivec3(1), _GLF_IDENTITY(1, int(int(1))), mat4(1.0)), ivec3(1), mat2(1.0), _GLF_struct_1(mat2x3(1.0), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) - uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)), mat4x2(1.0), mat2x3(_GLF_IDENTITY(1.0, (1.0) - tan(0.0))), 1u), atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_46._f0.virtual_gid, max(_GLF_struct_replacement_46._f0.virtual_gid, _GLF_struct_replacement_46._f0.virtual_gid))], _GLF_IDENTITY(4, (4) | (4)), 64, 0), vec3(1.0)), mat4x3(1.0));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           atomicStore(buf[_GLF_struct_replacement_59.next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_17.read_1, (_GLF_struct_replacement_17.read_1) ^ 0u) == _GLF_struct_replacement_3._f0.read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_17.read_1, (_GLF_IDENTITY(_GLF_struct_replacement_17.read_1, (_GLF_struct_replacement_17.read_1) - (0u ^ 0u))) ^ 0u) == _GLF_struct_replacement_3._f0.read_2), (false ? _GLF_FUZZED(_GLF_IDENTITY(85380u, clamp(85380u, 85380u, 85380u))) : uint(_GLF_IDENTITY(_GLF_struct_replacement_17.read_1, (_GLF_struct_replacement_17.read_1) ^ 0u) == _GLF_struct_replacement_3._f0.read_2)))) | 0u) + 1, uint(uvec3(uint(_GLF_struct_replacement_17.read_1 == _GLF_struct_replacement_3._f0.read_2) + 1, 1u, 1u))), 4, 64, 4);
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true), (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (int(3)) / 1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(3)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)), int(3)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     for(_GLF_struct_135 _GLF_struct_replacement_135 = _GLF_struct_135(ivec4(1), 0, _GLF_struct_134(_GLF_struct_131(ivec4(1), mat3x2(1.0), mat3x2(1.0), mat2(1.0)), _GLF_struct_132(uvec4(1u), ivec3(1), bvec3(true), uvec2(1u), ivec2(1)), 1, mat4(1.0), vec3(1.0), _GLF_struct_133(mat3(1.0), vec3(1.0), ivec2(1), ivec4(1), ivec3(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_135._injected_loop_counter < (1 & 1)); _GLF_struct_replacement_135._injected_loop_counter ++)
      {
       atomicStore(buf[_GLF_struct_replacement_59.next_virtual_gid], uint(_GLF_struct_replacement_17.read_1 == _GLF_struct_replacement_3._f0.read_2) + 1, 4, 64, 4);
       if(_GLF_DEAD(false))
        continue;
      }
     subgroupAll(true);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), false, true, true)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), true), true, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), true), true, false))))) && true), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), false || (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))), true), true, false))))) || false)); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(_GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_20(_GLF_struct_18(bvec2(true), (_GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(81731))) & -92803), 1.0), uvec2(1u), _GLF_struct_19(ivec2(1), uvec3(1u), mat2x4(1.0), ivec3(1), true), mat3(1.0)), mat3x4(1.0), _GLF_struct_24(bvec2(true), _GLF_struct_21(true, _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), mat2x3(1.0), bvec2(true), vec4(1.0), mat3(1.0)), _GLF_struct_22(uvec4(1u), mat2x3(1.0), mat2x4(1.0), mat2x3(1.0), 1u, vec2(1.0), uvec4(1u)), _GLF_struct_23(ivec2(1), 1, 1u, uvec2(_GLF_IDENTITY(1u, (1u) + _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0), vec3(mat4x2(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0), 0.0, 1.0, 1.0, 1.0, 0.0)))), _GLF_IDENTITY((vec2(vec3(injectionSwitch, 1.0))) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)), mix(vec2(((vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0))[0], _GLF_FUZZED(633.181)), vec2(_GLF_FUZZED(71.71), ((vec2(vec3(injectionSwitch, 1.0))) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))))[1]), bvec2(false, true))))).x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (_GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), clamp(vec2(vec3(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) * 1.0))), vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0))))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY((vec2(vec3(injectionSwitch, 1.0))), min((vec2(vec3(injectionSwitch, 1.0))), (vec2(vec3(injectionSwitch, 1.0))))) * mat2(1.0), mix(vec2((_GLF_IDENTITY(_GLF_IDENTITY((vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, -9.2)) : injectionSwitch)), 1.0))), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED((-1.5 - 81.19)), _GLF_FUZZED((- -0.6))), vec2(((vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, -9.2)) : injectionSwitch)), 1.0))))[0], ((vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, -9.2)) : injectionSwitch)), 1.0))))[1]), bvec2(true, true)), (true ? mix(vec2(_GLF_FUZZED((-1.5 - 81.19)), _GLF_FUZZED((- -0.6))), vec2(((vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, -9.2)) : injectionSwitch)), 1.0))))[0], ((vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, -9.2)) : injectionSwitch)), 1.0))))[1]), bvec2(true, true)) : _GLF_FUZZED(vec2(188.579, -9.8))))), ((vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, -9.2)) : injectionSwitch)), 1.0)))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) * mat2(1.0))[0], _GLF_FUZZED(633.181)), vec2(_GLF_FUZZED(71.71), ((vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0))[1]), bvec2(false, true))))).x)), uint(uint(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY((vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0), max((vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0), (vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0))), mix(vec2(((vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0))[0], _GLF_FUZZED(633.181)), vec2(_GLF_FUZZED(_GLF_IDENTITY(71.71, float(_GLF_IDENTITY(mat3(71.71, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(length(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0))))), mat3(mat3(_GLF_IDENTITY(mat3(71.71, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(length(0.0))), (true ? mat3(71.71, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(length(0.0))) : _GLF_FUZZED(mat3(528.238, -240.511, 5.5, 5.9, -5.1, -4470.3542, 7380.1754, 5.8, -2926.9621)))))))))), ((vec2(vec3(injectionSwitch, 1.0))) * mat2(1.0))[1]), bvec2(false, true))))).x)))))) >> 0u)))), 1, mat3(1.0), true), 1.0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_25._f0._f0._injected_loop_counter < 1); _GLF_struct_replacement_25._f0._f0._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true))
  return;
}
