#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), false))))), true, _GLF_IDENTITY(true, ! (! (true))))), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), false))))), true, _GLF_IDENTITY(true, ! (! (true)))))) || false)))));
uint subgroup_size = 16;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ (0u << _GLF_IDENTITY(uint(5u), uint(5u))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x, _GLF_IDENTITY((gl_WorkGroupSize.x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u)), (149154u & 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize[0], 1u * (gl_WorkGroupSize[0]))))), _GLF_IDENTITY(gl_WorkGroupSize[1], clamp(gl_WorkGroupSize[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) ^ 0)], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u)), min((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[_GLF_IDENTITY(1, 0 ^ (1))], clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u)), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize[1], ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) + 0u)))), clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) | 0u)) * 1u)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))) & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))))) ^ 0)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) * _GLF_IDENTITY(1, 0 | (1))), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0)), (true ? vec2(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0)) : _GLF_FUZZED(vec2(-56.44, -3.2))))).x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true))))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true)))))))) && true))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), false, false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-28.45) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, abs(0.0))), (vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, abs(0.0)))) + vec2(0.0, 0.0))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 1u))))).x, (gl_WorkGroupID.x) >> 0u))))), min(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 1u))))).x, (gl_WorkGroupID.x) >> 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 1u))))).x, (gl_WorkGroupID.x) >> 0u))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false)))))
  return;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true, false))))))))), (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     do
      {
       return;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)), false), bvec2(bvec2(bvec2(bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)), false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-56.95), _GLF_FUZZED(-0.5)), bvec2(false, false))).y)))) || false))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) / uvec2(1u, 1u)) * (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)).y + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) / uvec2(1u, 1u)).x * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) / uvec2(1u, 1u)).x * subgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) / uvec2(1u, 1u)).x * subgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) / uvec2(1u, 1u)).x * subgroup_size))) - 0u)) << 0u), uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size, min(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (true ? _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) ^ (uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (_GLF_IDENTITY(uvec2(6u), (_GLF_IDENTITY(uvec2(6u), ~ (~ (uvec2(6u))))) / uvec2(1u, 1u)))), uvec2(6u)))) : _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x * subgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size))))), uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base), (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base), uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * ((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))) | (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)) + uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x * subgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)))).y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, min(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x)) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))))) * subgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))))).x * subgroup_size, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size) | (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size)))), 0u))), 0u, 0u, 0u))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(ivec2(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (0 << _GLF_IDENTITY(int(6), int(6)))), 1)), (int(ivec2(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (0 << _GLF_IDENTITY(int(6), int(6)))), 1))) >> 0))) ^ (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) | 0)) | _GLF_IDENTITY((int(6)), ((int(6))) | (_GLF_IDENTITY((int(_GLF_IDENTITY(6, min(6, 6)))), ((int(6))) | (_GLF_IDENTITY((int(6)), ((int(6))) ^ 0)))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y) + (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | 0u)))) + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y) + (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(7u, (7u) >> _GLF_IDENTITY(0u, min(0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(7u, (7u) >> _GLF_IDENTITY(0u, min(0u, 0u))), ~ (~ (_GLF_IDENTITY(7u, (7u) >> _GLF_IDENTITY(0u, min(0u, 0u))))))) | (_GLF_IDENTITY(7u, (7u) >> _GLF_IDENTITY(0u, min(0u, 0u)))))), _GLF_IDENTITY(uint(7u), (uint(7u)) | 0u)))) + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, uint(uvec3(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, 0u, 0u))) * subgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, uint(uvec3(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, 0u, 0u))) * subgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, uint(uvec3(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, 0u, 0u))) * subgroup_size)))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), uvec2(0u, 0u) + (uvec2(subgroup_size, 1u))))), subgroup_size))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), (true ? _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (true ? GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(num_workgroup))))))) : _GLF_FUZZED(subgroup_local_id))), ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, uvec2(0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) | (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)).y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 1u)))) | (subgroup_local_id)))) + 1) % subgroup_size)))), GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, min(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)), GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))))).x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x), ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x)) | 0u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x), ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x)) | 0u)) | 0u)) | 0u), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))), (true ? _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ _GLF_IDENTITY((~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) ^ uvec2(0u, 0u)) * ((~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))))) : _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x), ~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))).x))))) * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), (128037u & 0u) | (((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size))))), 0u ^ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / (1u | 1u)) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) / 1u)) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size) / 1u) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_local_id)))) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) / 1u)) << 0u), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y)) + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) / 1u)) << 0u), GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) / 1u)) << 0u)))) << 0u)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, false, true)))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(81584) : 1)), (false ? _GLF_FUZZED(_GLF_IDENTITY(95795, min(95795, _GLF_IDENTITY(95795, min(95795, 95795))))) : _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(81584), max(_GLF_FUZZED(81584), _GLF_IDENTITY(_GLF_FUZZED(81584), max(_GLF_FUZZED(81584), _GLF_FUZZED(81584))))) : 1)), int(ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(81584) : 1)), 1)))))), 4, 64, 4);
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, _GLF_IDENTITY(0, (0) / 1) ^ (64)), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, (false ? _GLF_FUZZED((23289 ^ -40434)) : 64)))), 0), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false) ? ivec2(_GLF_IDENTITY(64, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0))))) ^ (64)), 0) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(-57036, 67187), (ivec2(-57036, 67187)) << ivec2(0, 0)), (true ? _GLF_IDENTITY(ivec2(-57036, 67187), (ivec2(-57036, 67187)) << ivec2(0, 0)) : _GLF_FUZZED(ivec2(-80649, -34402))))), (true ? ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0) : _GLF_FUZZED(_GLF_IDENTITY(ivec2(-57036, 67187), (ivec2(-57036, _GLF_IDENTITY(67187, 0 | (67187)))) << ivec2(0, 0)))) >> ivec2(0, 0))))) / (ivec2(1, 1) & ivec2(1, 1)))), _GLF_IDENTITY(0 | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, _GLF_IDENTITY(0 ^ (64), min(0 ^ (64), 0 ^ (64)))), 0), (true ? _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY((_GLF_IDENTITY(64, 0 ^ (64))), ((_GLF_IDENTITY(64, 0 ^ (64)))) | (ivec3(-65118, 16716, -34195).y & 0)) * 1)) >> 0), 0), max(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY((_GLF_IDENTITY(64, 0 ^ (64))), ((_GLF_IDENTITY(64, 0 ^ (64)))) | (ivec3(-65118, 16716, -34195).y & 0)) * 1)) >> 0), 0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY((_GLF_IDENTITY(64, 0 ^ (64))), ((_GLF_IDENTITY(64, 0 ^ (64)))) | (ivec3(-65118, 16716, -34195).y & 0)) * 1)) >> 0), 0), ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY((_GLF_IDENTITY(64, 0 ^ (64))), ((_GLF_IDENTITY(64, 0 ^ (64)))) | (ivec3(-65118, 16716, -34195).y & 0)) * 1)) >> 0), 0))))) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY(_GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), _GLF_IDENTITY(ivec2(ivec4(_GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), 1, 0)), (false ? _GLF_FUZZED(ivec2(78223, 17404)) : ivec2(ivec4(_GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), 1, 0)))))))), (_GLF_IDENTITY(0 | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), _GLF_IDENTITY((true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, _GLF_IDENTITY(67187, min(67187, 67187))))), ivec2(1, 1) * ((true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, _GLF_IDENTITY(67187, min(67187, 67187))))))))) / _GLF_IDENTITY(_GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), min((ivec2(1, 1) & ivec2(1, 1)), _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), min(_GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ivec2(ivec2((ivec2(1, 1) & ivec2(1, 1))))), (ivec2(1, 1) & ivec2(1, 1)))))), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(_GLF_IDENTITY(1, (1) / 1), 1) & ivec2(1, 1))))))), clamp(0 | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, (64) | (64)))), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), _GLF_IDENTITY((true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))), ivec2(ivec4((true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))), 1, 1))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((_GLF_IDENTITY(ivec2(1, 1), ~ (~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) ^ ivec2(0, 0))))) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1))))))), 0 | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY(0, (0) << 0)), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ _GLF_IDENTITY((64), ((64)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) ^ ivec2(0, 0)) | (ivec2(1, 1))) & ivec2(1, 1))))))), 0 | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 + (64))) | (64)), 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, 1 * (_GLF_IDENTITY(64, int(ivec2(64, 0)))))))), 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1) & ivec2(1, 1)), (_GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ~ (~ ((ivec2(1, 1) & ivec2(1, 1)))))) | ((ivec2(1, 1) & ivec2(1, 1)))))))))) | (0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), ((_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1))))) - ivec2(0, 0)), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), ((_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1))))) - ivec2(0, 0)), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1)))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, 0 ^ (64)), 0), (true ? ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) * 1)) >> 0), 0) : _GLF_FUZZED(ivec2(-57036, 67187))))) / _GLF_IDENTITY((ivec2(1, 1) & ivec2(1, 1)), ((ivec2(1, 1) & ivec2(1, 1))) | ((ivec2(1, 1) & ivec2(1, 1))))))))) - (0 >> _GLF_IDENTITY(int(3), int(3))))))))), (64) | (64)), 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, true && (true)))), ! (! ((! (_GLF_IDENTITY(true, true && (true))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))), false, true, false)), false || (bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))), false, true, false)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     for(int _injected_loop_counter = (1 & ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (int(3)) << 0)) | 0)) / 1), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0))))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ((! (false))) || false))))))) || false)), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.7)), bool(false)))) / 1.0) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size) | uvec2(0u, 0u)).x], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-85.79, -7.1)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.9, 7.6)))))).y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(subgroup_local_id + 1 < subgroup_size)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             do
              {
               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)) + 0u)], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == _GLF_IDENTITY(_GLF_IDENTITY(read_2, min(read_2, read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, min(read_2, read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, max(read_2, read_2)), min(read_2, read_2))) - 0u)) | (_GLF_IDENTITY(read_2, _GLF_IDENTITY(min(read_2, read_2), ~ (~ (min(read_2, read_2))))))), bool(bvec4(read_1 == _GLF_IDENTITY(_GLF_IDENTITY(read_2, min(read_2, read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, min(read_2, read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, max(read_2, read_2)), min(read_2, read_2))) - 0u)) | (_GLF_IDENTITY(read_2, _GLF_IDENTITY(min(read_2, read_2), ~ (~ (min(read_2, read_2))))))), true, true, false)))) + 1, 1u * (uint(read_1 == _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, max(read_2, read_2)), min(read_2, read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, min(read_2, read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, max(read_2, read_2)), min(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, (read_2) - 0u)) | (read_2)), read_2))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(read_2, (0u & 155487u) | (read_2)), _GLF_IDENTITY(min(read_2, read_2), ~ (~ (min(read_2, _GLF_IDENTITY(read_2, (read_2) / (1u ^ 0u)))))))))) + 1)), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-77487) : 64))) - 0), 4);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), (false ? _GLF_FUZZED(vec2(-9.3, -1934.8810)) : injectionSwitch)))).x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, length(0.0), 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, length(0.0), 1.0), vec3(0.0, 1.0, 0.0)), float(mat3(dot(vec3(1.0, length(0.0), 1.0), vec3(0.0, 1.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0))))), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-9.3, max(_GLF_IDENTITY(-9.3, clamp(_GLF_IDENTITY(-9.3, 0.0 + (-9.3)), -9.3, -9.3)), -9.3)), -1934.8810), max(_GLF_IDENTITY(vec2(-9.3, -1934.8810), mat2(1.0) * (vec2(-9.3, -1934.8810))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0))), clamp(_GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0))), min(_GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0))), mat2(1.0) * (_GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0))))))), _GLF_IDENTITY(vec2(-9.3, -1934.8810), vec2(vec3(vec2(-9.3, -1934.8810), 1.0)))))))) : injectionSwitch)))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((-9.6)), clamp(_GLF_FUZZED((-9.6)), _GLF_FUZZED((-9.6)), _GLF_FUZZED((-9.6)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((-9.6)), max(_GLF_IDENTITY(_GLF_FUZZED((-9.6)), max(_GLF_FUZZED((-9.6)), _GLF_IDENTITY(_GLF_FUZZED((-9.6)), (_GLF_FUZZED((-9.6))) / 1.0))), _GLF_FUZZED((-9.6)))), clamp(_GLF_FUZZED((-9.6)), _GLF_IDENTITY(_GLF_FUZZED((-9.6)), min(_GLF_FUZZED((-9.6)), _GLF_FUZZED((-9.6)))), _GLF_FUZZED(_GLF_IDENTITY((-9.6), float(mat2x4((-9.6), sqrt(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0))))))))) - 0.0)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-9.3, -1934.8810), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(-9.3, -1934.8810), (vec2(-9.3, -1934.8810)) + vec2(0.0, 0.0))), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(-9.3, -1934.8810), (vec2(-9.3, -1934.8810)) + vec2(0.0, 0.0))), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(-9.3, -1934.8810), (vec2(-9.3, -1934.8810)) + vec2(0.0, 0.0))), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))))))), vec2(-9.3, -1934.8810)))) : injectionSwitch, (_GLF_IDENTITY(true ? false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-9.3, -1934.8810), max(_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(-9.3, -1934.8810)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-24.54, clamp(-24.54, _GLF_IDENTITY(-24.54, 1.0 * (-24.54)), _GLF_IDENTITY(-24.54, mix(float(-24.54), float(_GLF_FUZZED(6.2)), bool(false)))))), ((vec2(-9.3, -1934.8810)))[1]), vec2(((vec2(-9.3, -1934.8810)))[0], _GLF_FUZZED(-139.896)), bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))), vec2(-9.3, -1934.8810)))) : injectionSwitch : _GLF_FUZZED(vec2(-5.6, 4738.0544)), (false ? _GLF_FUZZED(vec2(8221.0609, -2.3)) : _GLF_IDENTITY(true ? false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-9.3, -1934.8810), max(_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(-9.3, -1934.8810)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-24.54, clamp(-24.54, _GLF_IDENTITY(-24.54, 1.0 * (-24.54)), _GLF_IDENTITY(-24.54, mix(float(-24.54), float(_GLF_FUZZED(6.2)), bool(false)))))), ((vec2(-9.3, -1934.8810)))[1]), vec2(((vec2(-9.3, -1934.8810)))[0], _GLF_FUZZED(-139.896)), bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))), vec2(-9.3, -1934.8810)))) : injectionSwitch : _GLF_FUZZED(vec2(-5.6, 4738.0544)), mix(vec2(_GLF_FUZZED(8.0), (true ? false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-9.3, -1934.8810), max(_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(-9.3, -1934.8810)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-24.54, clamp(-24.54, _GLF_IDENTITY(-24.54, 1.0 * (-24.54)), _GLF_IDENTITY(-24.54, mix(float(-24.54), float(_GLF_FUZZED(6.2)), bool(false)))))), ((vec2(-9.3, -1934.8810)))[1]), vec2(((vec2(-9.3, -1934.8810)))[0], _GLF_FUZZED(-139.896)), bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))), vec2(-9.3, -1934.8810)))) : injectionSwitch : _GLF_FUZZED(vec2(-5.6, 4738.0544)))[1]), vec2((true ? false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-9.3, -1934.8810), max(_GLF_IDENTITY(vec2(-9.3, -1934.8810), _GLF_IDENTITY(mat2(1.0) * (vec2(-9.3, -1934.8810)), vec2(vec2(_GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(-9.3, -1934.8810)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-24.54, clamp(-24.54, _GLF_IDENTITY(-24.54, 1.0 * (-24.54)), _GLF_IDENTITY(-24.54, mix(float(-24.54), float(_GLF_FUZZED(6.2)), bool(false)))))), ((vec2(-9.3, -1934.8810)))[1]), vec2(((vec2(-9.3, -1934.8810)))[0], _GLF_FUZZED(-139.896)), bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), vec2(0.0, 0.0) + (mat2(1.0) * (vec2(-9.3, -1934.8810)))))))), vec2(-9.3, -1934.8810)))) : injectionSwitch : _GLF_FUZZED(vec2(-5.6, 4738.0544)))[0], _GLF_FUZZED(2.7)), bvec2(true, false))))))))))).x), bool(true))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(515.276), (_GLF_FUZZED(515.276)) / 1.0), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, 0 ^ (0))], mix(float((injectionSwitch)[0]), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (_GLF_IDENTITY(false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, 1.0 * (-90.96)), -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96))), _GLF_IDENTITY(float(mat2x4(false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, 1.0 * (-90.96)), -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), min(float(mat2x4(false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, 1.0 * (-90.96)), -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), float(mat2x4(false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, 1.0 * (-90.96)), -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0)))))))), mix(float(_GLF_FUZZED(-0.4)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (_GLF_IDENTITY(_GLF_FUZZED(-90.96), 1.0 * (_GLF_FUZZED(-90.96)))) + 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(-1.4), min(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.4))) : _GLF_IDENTITY(_GLF_FUZZED(-90.96), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96)))))), mix(float(_GLF_FUZZED(1.9)), float(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (false ? _GLF_IDENTITY(_GLF_FUZZED(-1.4), max(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.4))) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(-4.7)), float(-90.96), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(-90.96, clamp(-90.96, -90.96, _GLF_IDENTITY(-90.96, (false ? _GLF_FUZZED(-5.4) : -90.96))))))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(1.8)), float(-90.96), bool(true))), -90.96))), _GLF_FUZZED(_GLF_IDENTITY(-90.96, (-90.96) / 1.0)))), _GLF_FUZZED(-90.96))))))), bool(true)))), bool(true))), bool(false))), _GLF_IDENTITY(_GLF_FUZZED(64.22), (false ? _GLF_FUZZED(-1.3) : _GLF_FUZZED(64.22)))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))) || _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y)), true, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))), min(mix(vec2(_GLF_FUZZED(515.276), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], mix(float((injectionSwitch)[0]), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(-90.96), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96)))))), mix(float(_GLF_FUZZED(-0.4)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, min(-90.96, -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96)))))), mix(float(_GLF_FUZZED(1.9)), float(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(-90.96, -90.96))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(1.8)), float(-90.96), bool(true))), -90.96))), _GLF_FUZZED(_GLF_IDENTITY(-90.96, (-90.96) / 1.0)))), _GLF_FUZZED(-90.96)), max(min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(1.8)), float(-90.96), bool(true))), -90.96))), _GLF_FUZZED(_GLF_IDENTITY(-90.96, (-90.96) / 1.0)))), _GLF_FUZZED(-90.96)), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(1.8)), float(-90.96), bool(true))), -90.96))), _GLF_FUZZED(_GLF_IDENTITY(-90.96, (-90.96) / 1.0)))), _GLF_FUZZED(-90.96))))))))), bool(true)))), bool(true))), bool(false))), _GLF_FUZZED(64.22)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true))) && true), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))), true && (! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))))))))), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))), mix(vec2(_GLF_FUZZED(515.276), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(-90.96), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96)))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-0.4), max(_GLF_FUZZED(-0.4), _GLF_FUZZED(-0.4)))), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(-90.96), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(-90.96), _GLF_FUZZED(-90.96))), _GLF_FUZZED(-90.96)))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(1.9)), (float(_GLF_FUZZED(1.9))) * 1.0), float(float(_GLF_IDENTITY(_GLF_FUZZED(-90.96), _GLF_IDENTITY((false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(-90.96, -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(1.8)), float(-90.96), bool(true))), -90.96))), _GLF_FUZZED(_GLF_IDENTITY(-90.96, (-90.96) / 1.0)))), _GLF_FUZZED(-90.96)))), float(mat4x3((false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(-90.96, -90.96))), min(_GLF_IDENTITY(_GLF_FUZZED(-90.96), max(_GLF_FUZZED(_GLF_IDENTITY(-90.96, max(_GLF_IDENTITY(-90.96, mix(float(_GLF_FUZZED(1.8)), float(-90.96), bool(true))), -90.96))), _GLF_FUZZED(_GLF_IDENTITY(-90.96, (-90.96) / 1.0)))), _GLF_FUZZED(-90.96)))), length(0.0), log(exp(0.0)), 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))))), bool(true)))), bool(true))), bool(false))), _GLF_FUZZED(64.22)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y)), true, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))).y))))))
          {
          }
         else
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, bool(bvec3(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY((! (read_1 == read_2)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), (! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (_GLF_IDENTITY(read_1, uint(uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u)))) == read_2))) && true))) || false)))))))))))))))) || false)))), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, bool(bvec3(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY((! (read_1 == read_2)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! _GLF_IDENTITY((read_1 == read_2), ! (! (_GLF_IDENTITY((read_1 == read_2), ((read_1 == read_2)) || false)))))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(read_1, (read_1) | 0u) == read_2)), ((! (read_1 == read_2))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), (! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (_GLF_IDENTITY(read_1, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), 0u + (_GLF_IDENTITY(read_1, (read_1) ^ 0u)))))) == read_2))) && true))) || false)))))))))))))))) || false)))))))), (uint(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, bool(bvec3(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY((! (read_1 == read_2)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), (! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (_GLF_IDENTITY(read_1, uint(uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u)))) == read_2))) && true))) || false)))))))))))))))) || false)))), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, bool(bvec3(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY((! (read_1 == read_2)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! _GLF_IDENTITY((read_1 == read_2), ! (! (_GLF_IDENTITY((read_1 == read_2), ((read_1 == read_2)) || false)))))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(read_1, (read_1) | 0u) == read_2)), ((! (read_1 == read_2))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (read_1 == read_2))) && true)), (! (_GLF_IDENTITY((! (read_1 == read_2)), ((! (_GLF_IDENTITY(read_1, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), 0u + (_GLF_IDENTITY(read_1, (read_1) ^ 0u)))))) == read_2))) && true))) || false)))))))))))))))) || false))))))))) / 1u) + 1, 4, 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (false ? _GLF_FUZZED(dot(vec3(2.6, 3008.5557, 50.67), vec3(6.6, 7.1, 401.645))) : min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (false ? _GLF_FUZZED(2.6) : min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(roundEven(injectionSwitch)) : injectionSwitch)), injectionSwitch, injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-5934.2231), min(true ? injectionSwitch.y : _GLF_FUZZED(-5934.2231), true ? injectionSwitch.y : _GLF_FUZZED(-5934.2231)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))) || false)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))), (_GLF_IDENTITY(true, (true) || false)) && true))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))))))))
            break;
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mat3x2(-3.1, 780.789, -774.295, -69.76, -470.569, 85.25)[1]))).y))));
           continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
}
