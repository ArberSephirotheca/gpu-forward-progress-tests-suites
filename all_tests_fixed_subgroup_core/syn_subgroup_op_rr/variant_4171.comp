#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_32 {
 mat3x4 _f0;
 uvec3 _f1;
 vec4 _f2;
 ivec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_31 {
 mat4x2 _f0;
 mat2 _f1;
 vec3 _f2;
 mat3x4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_30 {
 mat4x3 _f0;
 vec4 _f1;
 mat3 _f2;
 ivec2 _f3;
 mat2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_29 {
 uvec3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 uvec2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 uvec4 _f1;
 ivec4 _f2;
 mat2x3 _f3;
 vec4 _f4;
 mat3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_33 {
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 uvec3 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
 _GLF_struct_32 _f5;
} ;

struct _GLF_struct_26 {
 bvec3 _f0;
 mat4 _f1;
 uvec4 _f2;
 bvec4 _f3;
 mat3x2 _f4;
 bool _f5;
} ;

struct _GLF_struct_25 {
 vec2 _f0;
 mat2x3 _f1;
 bvec2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_27 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_24 {
 uint _f0;
} ;

struct _GLF_struct_22 {
 mat2x3 _f0;
 uvec4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_21 {
 uvec3 _f0;
 vec3 _f1;
 uvec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
} ;

struct _GLF_struct_19 {
 ivec2 _f0;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 bvec4 _f1;
 mat2x3 _f2;
 vec2 _f3;
 ivec3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_23 {
 _GLF_struct_17 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_21 _f4;
 _GLF_struct_22 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_34 {
 _GLF_struct_23 _f0;
 uint workgroup_size;
 _GLF_struct_24 _f1;
 _GLF_struct_27 _f2;
 bvec3 _f3;
 mat2x4 _f4;
 uint _f5;
 _GLF_struct_33 _f6;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
 uint subgroup_size;
 bvec2 _f1;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 _GLF_struct_14 _f1;
 int _f2;
 mat3x2 _f3;
 _GLF_struct_15 _f4;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 mat3x4 _f1;
 vec3 _f2;
 bvec3 _f3;
 int _f4;
 mat2x4 _f5;
 bool _f6;
} ;

struct _GLF_struct_9 {
 bool _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 bvec4 _f1;
 uint _f2;
 uint _f3;
 bool _f4;
 uvec2 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 bvec4 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 bool _f5;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 float _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 uint _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 uint _f1;
 _GLF_struct_4 _f2;
 vec2 _f3;
 mat2x4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_1 {
 int _f0;
 vec2 _f1;
 bvec4 _f2;
 mat2 _f3;
 mat4 _f4;
 float _f5;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 mat3 _f3;
 ivec4 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_0 _f0;
 _GLF_struct_2 _f1;
 ivec3 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_11 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (-98260 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), _GLF_IDENTITY((vec3(injectionSwitch, 1.0)) - vec3(0.0, 0.0, 0.0), (_GLF_IDENTITY((vec3(injectionSwitch, 1.0)) - vec3(0.0, 0.0, 0.0), vec3(mat2x4((vec3(injectionSwitch, 1.0)) - vec3(0.0, 0.0, 0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(1.0)))), 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0)))) + cross(vec3(-543.907, -1.1, 1485.5520), vec3(-543.907, -1.1, 1485.5520))))), min(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) - vec3(0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) - vec3(0.0, 0.0, 0.0)))))), round(length(normalize(vec2(1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, log(_GLF_IDENTITY(1.0, (1.0) - 0.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6805.1158)), bool(false))), 1.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sin(0.0)))).y)) | _GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (1) | (1)), _GLF_IDENTITY(_GLF_IDENTITY((1) | (_GLF_IDENTITY(1, 0 ^ (1))), max((1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))))) ^ (1), 0 ^ (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))))) ^ (1))))), (1) | (_GLF_IDENTITY(1, 0 ^ (1))))), 0 + ((1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) - 0) ^ (1) : _GLF_FUZZED((-87675 << -9057))))))))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(round(length(normalize(exp(vec2(0.0, 0.0))))), (round(length(normalize(exp(vec2(0.0, 0.0)))))) / 1.0))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               break;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.5))) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]), (vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])) * sqrt(vec2(1.0, 1.0)))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false) || false)))
      barrier();
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))), false)))))), false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(9.5, 7949.0305)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))) || false, false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.0) : injectionSwitch.y)), injectionSwitch.y))))))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) || false))))))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))) || false)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     continue;
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x = subgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) - 0, 0 ^ ((_injected_loop_counter) - 0))) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(mat3(1.0), _GLF_struct_14(_GLF_struct_13(vec2(1.0))), 1, mat3x2(1.0), _GLF_struct_15(uvec4(1u), gl_SubgroupSize, bvec2(true)));
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((1 & 1), ~ (~ ((1 & 1)))), (_GLF_IDENTITY((1 & 1), ~ (~ ((1 & 1))))) * int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) * 1) << _GLF_IDENTITY(int(5), int(5)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) * 1) << _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-895.597)), bool(false))) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), true, true), false)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         break;
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((false ? -530.274 : -3085.4250))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))))))
                    return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, 0.0))))), (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(injectionSwitch.y, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(488.357, -8603.3340, -1.6, 958.621)))))))) : _GLF_FUZZED(-6.8))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-89.24))), 0.0, 0.0)))))))))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
      barrier();
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec3(bool(bool(_GLF_DEAD(false))), true, true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.y = subgroup_local_id;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, true)))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))));
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(int(int((0))), (false ? _GLF_FUZZED(-89617) : int(int((0)))))) | (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) ^ 0)) | 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) >> 0), int(1))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(1), 0), (false ? _GLF_FUZZED(ivec2(92975, 68349)) : ivec2(int(1), 0)))), clamp(int(ivec2(int(1), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))), int(ivec2(int(1), 0)), int(ivec2(int(1), 0))))))) >> _GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), max(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), min(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1))))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), max(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), min(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(1), int(1)))))))) >> 0) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1)))), (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1))))) | 0))), 1))))); _injected_loop_counter ++)
    {
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) << 0)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), ((1)) | (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), ~ (~ ((1)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))))))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.9), _GLF_FUZZED(0.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))) / cos(_GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0))))).x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), int(ivec4((_GLF_IDENTITY(1 ^ 1, (1 ^ 1) / 1)), 1, 0, 0)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
    return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.y = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(_GLF_struct_23(_GLF_struct_17(mat3x4(1.0), bvec4(true), mat2x3(1.0), vec2(1.0), ivec3(1), mat4x3(1.0)), _GLF_struct_18(bvec3(true)), _GLF_struct_19(ivec2(1)), _GLF_struct_20(mat2x4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0), mat3x4(mat4(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0)))))))), _GLF_struct_21(uvec3(1u), vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(tan(0.0) + (1.0), mix(float(_GLF_FUZZED(-6.4)), float(tan(0.0) + (1.0)), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))))), uvec3(1u), mat3x2(1.0)), _GLF_struct_22(mat2x3(1.0), uvec4(1u), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), (ivec3(1)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), max((_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) | 0)), (ivec3(1)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (ivec3(1)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(ivec3(1), (ivec3(1)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> ivec3(0, 0, 0))))) | ivec3(0, 0, 0))), bvec3(true)), gl_WorkGroupSize.x, _GLF_struct_24(1u), _GLF_struct_27(_GLF_struct_25(vec2(1.0), mat2x3(1.0), bvec2(true), uvec4(1u)), _GLF_struct_26(bvec3(true), mat4(1.0), uvec4(1u), bvec4(true), mat3x2(1.0), true), vec4(1.0)), bvec3(true), mat2x4(1.0), 1u, _GLF_struct_33(_GLF_struct_28(mat4(1.0), uvec4(1u), ivec4(1), mat2x3(1.0), vec4(1.0), mat3(1.0), bvec2(true)), _GLF_struct_29(uvec3(1u), mat3x4(1.0), mat2x4(1.0), uvec2(1u), ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(-24707) : ~ (1)))) - 0))))), uvec3(1u), _GLF_struct_30(mat4x3(1.0), vec4(1.0), mat3(1.0), ivec2(1), mat2(1.0), ivec2(1)), _GLF_struct_31(mat4x2(1.0), mat2(1.0), vec3(1.0), mat3x4(1.0), mat2x3(1.0)), _GLF_struct_32(mat3x4(1.0), uvec3(1u), vec4(1.0), ivec2(1), bvec3(true))));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), max(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x) * 1u, min(_GLF_IDENTITY((gl_WorkGroupID.x) * 1u, clamp(_GLF_IDENTITY((gl_WorkGroupID.x) * 1u, ((gl_WorkGroupID.x) * 1u) / 1u), (gl_WorkGroupID.x) * 1u, (gl_WorkGroupID.x) * 1u)), (gl_WorkGroupID.x) * 1u))), gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)))), false, false))));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.07), _GLF_FUZZED(-80.73)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) << (0 & 8965))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 & 8965)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 & 8965)), ~ (~ (_GLF_IDENTITY(0, (0) << (0 & 8965))))), _GLF_IDENTITY(0, (0) << (0 & 8965))), (false ? _GLF_FUZZED(78609) : max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 & 8965)), ~ (~ (_GLF_IDENTITY(0, (0) << (0 & 8965))))), _GLF_IDENTITY(0, (0) << (0 & 8965)))))))) >> 0))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), max((~ (int(5))), _GLF_IDENTITY((~ (int(5))), (false ? _GLF_FUZZED(97008) : (~ (int(5))))))))), int(ivec4((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), max((~ (int(5))), _GLF_IDENTITY((~ (int(5))), (false ? _GLF_FUZZED(97008) : (~ (int(5))))))))), 1, 0, 0))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY((~ (int(5))), (false ? _GLF_FUZZED(1659) : (~ (int(5))))) : _GLF_FUZZED(-98080))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), clamp((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))))), 0, 1, 1)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY((~ (int(5))), (false ? _GLF_FUZZED(1659) : (~ (int(5))))) : _GLF_FUZZED(-98080))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), clamp((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))))), 0, 1, 1)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY((~ (int(5))), (false ? _GLF_FUZZED(1659) : (~ (int(5))))) : _GLF_FUZZED(-98080))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), clamp((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))))), 0, 1, 1)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0)) | ((_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY((~ (int(5))), (false ? _GLF_FUZZED(1659) : (~ (int(5))))) : _GLF_FUZZED(-98080))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), clamp((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))))), 0, 1, 1)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | ((_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0)))))), injectionSwitch.x)) < injectionSwitch.y))))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_34.workgroup_size, min(_GLF_struct_replacement_34.workgroup_size, _GLF_struct_replacement_34.workgroup_size)) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), max(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), uint(_GLF_IDENTITY(5u, (5u) | (5u))))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), max(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), min((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), _GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), uint(uint((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))) - 0u)))), _GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), max(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), uint(_GLF_IDENTITY(5u, (5u) | (5u))))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), max(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), min((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), _GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), uint(uint((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))) - 0u)))), _GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), max(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), uint(_GLF_IDENTITY(5u, (5u) | (5u))))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), max(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), min((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), _GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), uint(uint((workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(19030u) : (1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))) - 0u)))), _GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), max((1u << _GLF_IDENTITY(uint(5u), uint(5u))), (1u << _GLF_IDENTITY(uint(5u), uint(5u))))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))), ~ (~ ((_GLF_IDENTITY(workgroup_id, (workgroup_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_0(ivec3(1), mat3x2(1.0)), _GLF_struct_2(mat2x4(1.0), mat3x4(1.0), mat4x3(1.0), _GLF_IDENTITY(mat3(1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) + _GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), (_GLF_IDENTITY(0.0, (0.0) / 1.0)) * abs(1.0)))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED((-9827.3292 * -5.3)), mix(float(_GLF_IDENTITY(_GLF_FUZZED((-9827.3292 * -5.3)), mix(float(_GLF_FUZZED((-9827.3292 * -5.3))), float(_GLF_FUZZED(-232.267)), bool(false)))), float(_GLF_FUZZED(6.6)), bool(false)))), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(-798.915, 6152.2241, 294.162, -7658.9701, 727.650, -309.907, 8.5, 5.3, 0.1)) : _GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), (_GLF_IDENTITY(0.0, (0.0) / 1.0)) * abs(1.0)))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED((-9827.3292 * -5.3)), mix(float(_GLF_IDENTITY(_GLF_FUZZED((-9827.3292 * -5.3)), mix(float(_GLF_FUZZED((-9827.3292 * -5.3))), float(_GLF_FUZZED(-232.267)), bool(false)))), float(_GLF_FUZZED(6.6)), bool(false)))), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), (_GLF_IDENTITY(0.0, (0.0) / 1.0)) * abs(1.0)))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED((-9827.3292 * -5.3)), mix(float(_GLF_IDENTITY(_GLF_FUZZED((-9827.3292 * -5.3)), mix(float(_GLF_FUZZED((-9827.3292 * -5.3))), float(_GLF_FUZZED(-232.267)), bool(false)))), float(_GLF_FUZZED(6.6)), bool(false)))), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))), ivec4(1), _GLF_struct_1(1, vec2(1.0), bvec4(true), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0))))) + mat2(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))) : _GLF_FUZZED(mat2(321.061, 6.4, _GLF_IDENTITY(-503.673, min(-503.673, _GLF_IDENTITY(-503.673, _GLF_IDENTITY(max(-503.673, -503.673), (max(-503.673, -503.673)) - 0.0)))), 56.88)))), mat4(1.0), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | (1))))), clamp(ivec3(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | (1))))), ivec3(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | (1))))), ivec3(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | (1))))))), max(ivec3(1), ivec3(1))), _GLF_struct_6(_GLF_struct_3(bvec4(true), 1u, uvec4(1u)), 1u, _GLF_struct_4(vec2(1.0)), vec2(1.0), mat2x4(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), _GLF_struct_5(mat3x2(1.0), 1.0, mat3x4(1.0))), _GLF_struct_11(_GLF_struct_7(mat4x2(1.0), bvec4(true), _GLF_IDENTITY(1u, 0u ^ (1u)), 1u, true, uvec2(1u), uvec2(1u)), bvec4(true), _GLF_struct_8(vec2(1.0)), _GLF_struct_9(true, workgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, uint(uvec3(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, 1u, 0u))) * _GLF_struct_replacement_16._f4.subgroup_size + GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.y), _GLF_struct_10(uvec4(1u), mat3x4(1.0), vec3(1.0), bvec3(true), 1, mat2x4(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.6) : 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, _GLF_IDENTITY(float(mat3x4((0.0) - 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.1) : 0.0)))) + (float(mat3x4((0.0) - 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(532.557, -25.51)) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch), mix(vec2((true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(532.557, -25.51)) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(-57.21)), vec2(_GLF_FUZZED(((0.4 + 7.2) / 809.904)), (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(532.557, -25.51)) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch))[1]), bvec2(false, true))))) : _GLF_FUZZED(vec2(8793.7954, 3.7)))).x), 1.0, 0.0, 0.0, 0.0)))))), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0)))), true), true));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))) - 0) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, max(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x)) * _GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, 0u | (_GLF_struct_replacement_16._f4.subgroup_size)))), max(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, max(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x)) * _GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, 0u | (_GLF_struct_replacement_16._f4.subgroup_size)))), _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, max(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x, GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.x)) * _GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, 0u | (_GLF_struct_replacement_16._f4.subgroup_size)))))) + ((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup, (GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup) ^ uvec4(0u, 0u, 0u, 0u)).xy.y + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(int(98.42)) : 0)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(int(98.42)) : 0)), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(int(98.42), (int(98.42)) ^ 0)) : 0))) | 0))) + (1))) % _GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_16._f4.subgroup_size, (_GLF_struct_replacement_16._f4.subgroup_size) - 0u)))));
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.z = next_virtual_gid;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat2(1.0, abs(0.0), 1.0, 1.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))) - 0) >> _GLF_IDENTITY(int(3), int(3))), 0 + (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY(~ (~ ((0 >> _GLF_IDENTITY(int(3), int(3))))), (~ (~ ((0 >> _GLF_IDENTITY(int(3), int(3)))))) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch, 0.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), clamp(normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0)))))), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)))))).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch, 0.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), clamp(normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0)))))), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)))))).y) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false)))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false)))))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), false), true)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), false, true, false)))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), false), true)))), false, false, true)), bool(bool(bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec4(bool(bvec2(true, false)), false, false, true))), false))))), false), true)))), false, false, true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) / uvec4(1u, 1u, 1u, 1u))) << uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, 0u)) | (min(0u, 0u)))))), GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[2], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3], ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), max(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), ~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]))))))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[2], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3], ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), max(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), ~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]))))))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[1], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[2], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3], ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), max(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), ~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), _GLF_IDENTITY(uint(uint((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]))), (uint(uint((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3])))) | (uint(uint((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]))))))))))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[0], GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2) * ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(7u), _GLF_IDENTITY(uvec4(7u), (uvec4(7u)) >> uvec4(0u, 0u, 0u, 0u)))) >> _GLF_IDENTITY(uvec4(7u), uvec4(7u))))[2], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3], ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), max(~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]), ~ (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2[3]))))))))))))).x], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5))), (true ? ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, -53817, _injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_12._f4._f3.virtual_gid], uint(uvec4(buf[_GLF_struct_replacement_12._f4._f3.virtual_gid], _GLF_IDENTITY(1u, (1u) / 1u), 1u, 1u))), 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         barrier();
        }
      }
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z = read_1;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_12._f4._f3.virtual_gid, (_GLF_struct_replacement_12._f4._f3.virtual_gid) | 0u)], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w = read_2, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w = read_2) << 0u);
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idnext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1)))) < _GLF_struct_replacement_16._f4.subgroup_size)
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + 1, _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0)))) | (0 << _GLF_IDENTITY(int(1), int(1)))), (0 >> _GLF_IDENTITY(int(5), int(5))))))))), min(_GLF_IDENTITY(max(4, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0)))) | (0 << _GLF_IDENTITY(int(1), int(1)))), (0 >> _GLF_IDENTITY(int(5), int(5))))))))), (max(4, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0)))) | (0 << _GLF_IDENTITY(int(1), int(1)))), (0 >> _GLF_IDENTITY(int(5), int(5)))))))))) * 1), max(4, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0))), (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0)))) | (0 << _GLF_IDENTITY(int(1), int(1)))), (0 >> _GLF_IDENTITY(int(5), int(5)))))))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(78250), clamp(_GLF_IDENTITY(_GLF_FUZZED(78250), _GLF_IDENTITY((_GLF_FUZZED(78250)), ~ (~ ((_GLF_FUZZED(78250))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_FUZZED(78250), _GLF_FUZZED(78250))) : 4))) >> 0, ((_GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED(78250) : 4, (_GLF_IDENTITY(false ? _GLF_FUZZED(78250) : 4, clamp(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(78250) : 4, _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(78250), (_GLF_FUZZED(78250)) << 0) : 4, _GLF_IDENTITY((false ? _GLF_FUZZED(78250) : 4) >> 0, 0 ^ ((false ? _GLF_FUZZED(78250) : 4) >> 0))), false ? _GLF_FUZZED(78250) : 4))) >> 0)))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0))))))) | 0)) ^ 0)), _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, (64) | 0)))), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED((- 38755)))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((! (false)), false, true), bvec3(bvec4(bvec3((! (false)), false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3((! (false)), false, true), bvec3(bvec4(bvec3((! (false)), false, true), false))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (true && (_GLF_IDENTITY(false, true && (false)))))))))) || false)), ! (! (false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (true && (_GLF_IDENTITY(false, true && (false)))))))))) || false)), ! (! (false)))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((! (false)), false, true), bvec3(bvec4(bvec3((! (false)), false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3((! (false)), false, true), bvec3(bvec4(bvec3((! (false)), false, true), false))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (true && (_GLF_IDENTITY(false, true && (false)))))))))) || false)), ! (! (false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (true && (_GLF_IDENTITY(false, true && (false)))))))))) || false)), ! (! (false)))))))))))))))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, log(1.0))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, log(1.0)))), _GLF_IDENTITY(dot(vec3(cos(0.0), 0.0, 0.0), vec3(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), dot(vec3(cos(0.0), 0.0, 0.0), vec3(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (-77190 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 1, max(1 | 1, 1 | 1))))) || false)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(86.30)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
              }
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), (int(2)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     return;
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)), _GLF_IDENTITY(! _GLF_IDENTITY((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)), false || (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))))), ((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false))))) || false))), (_GLF_IDENTITY(! _GLF_IDENTITY((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)), false || (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))))), ((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false))))) || false))), (! _GLF_IDENTITY((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)), false || (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))))), ((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false))))) || false)))) || false)) || false)))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true))))))), true, false)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)))))))) || false) && true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 0.0, 1.0, 0.0, 1.0)), (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 0.0, 1.0, 0.0, 1.0))) * mat2(1.0))).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, min(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2, GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2)).x], uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z, max(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z, GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z)) == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + 1, 4, 64, _GLF_IDENTITY(4, (4) >> (0 << _GLF_IDENTITY(int(5), int(5)))));
   subgroupAll(true);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)) - 0.0))).x < injectionSwitch.y)), false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((29412 & 0) << _GLF_IDENTITY(int(3), int(3)), (false ? _GLF_FUZZED(20361) : _GLF_IDENTITY((29412 & 0) << _GLF_IDENTITY(int(3), int(3)), ((29412 & 0) << _GLF_IDENTITY(int(3), int(3))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(ivec2(((29412 & 0) << _GLF_IDENTITY(int(3), int(3))), 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
}
