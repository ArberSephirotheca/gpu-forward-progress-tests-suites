#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size;
 uvec4 GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid;
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base;
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size;
 uvec4 GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_6_1_1_13read_2subgroup_size;
 GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy = GLF_merged2_0_1_6_1_1_13read_2subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 ^ 0 : _GLF_FUZZED(52787)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(4), (int(4)) - 0) : _GLF_FUZZED((+ 51346)))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)), false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.y = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.w = GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w = GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.w;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false))))))) || false)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))) && true)) || false), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))) || false) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-68.63), _GLF_FUZZED(float(false))), bvec2(_GLF_IDENTITY(false, false || (false)), false))).x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))), bool(_GLF_IDENTITY(bool((false)), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))), false || (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))), false, true))))))), ! (! (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))) || (true))), bvec3(bvec4(bvec3(false, false, true), true))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (bool((false))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true)), false, false)))) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(_GLF_IDENTITY(bool((false)), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), bool(bvec3(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), false, true)))) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), bool(bvec3(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), false, true)))) && true))), (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), bool(bvec3(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), false, true)))) && true)))) || false)))))))), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (! (! (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false)))))) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, false || (true))), bvec3(bvec4(bvec3(false, false, true), true))))))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2489.7832)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2489.7832)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0) * 1.0)) > injectionSwitch.y)) || (bool((false))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), ! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (! (false)))))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true)), false, false)))) || false)))))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
uint subgroup_size = 16;
 do
  {
   GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.z = subgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))
    return;
  }
 GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.y = GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.z;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z = _GLF_IDENTITY(GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.y, (_GLF_IDENTITY(GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.y, (GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.y) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id, uvec4(GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id[0], GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id[1], GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id[2], GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id[3])).xy.y, (GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.y) | 0u)));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy.x = _GLF_IDENTITY(subgroup_local_id, (0u & 55859u) ^ (subgroup_local_id));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
      return;
     return;
    }
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y = GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(298.192, -5.0)) : injectionSwitch)))), clamp(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(298.192, -5.0)) : injectionSwitch)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(298.192, -5.0)) : injectionSwitch)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(298.192, -5.0)) : injectionSwitch))))))).y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           if(_GLF_DEAD(false))
            return;
           break;
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.y = num_workgroup;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || _GLF_IDENTITY(((_GLF_DEAD(false))), bool(bvec3(((_GLF_DEAD(false))), true, true)))) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(determinant(mat4(9989.2386, 427.567, -9.6, 887.437, -624.487, 2.1, -4.9, 98.42, -20.13, 3.8, -4.4, -4.4, 0.9, -8648.0583, -3.5, 0.3))))))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.x = GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.y;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.z = workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   _GLF_IDENTITY(GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy.y = GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.z, 0u | (GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy.y = GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.z));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.w = GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy.y;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.w = GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.w;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(! (! (_GLF_DEAD(false))), false, false, false)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(! (! (_GLF_DEAD(false))), false, false, false)))))), bool(bool((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(! (! (_GLF_DEAD(false))), false, false, false)))))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _GLF_IDENTITY(_injected_loop_counter ++, (0 | (0 >> _GLF_IDENTITY(int(1), int(1)))) | (_injected_loop_counter ++)))
    {
     GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.z = workgroup_id;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          return;
         return;
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint workgroup_base = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.w * GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.z = workgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.z + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z)) + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size), clamp(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size), (~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size)) | (~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size))), ~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size), ~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size))))).y, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y : _GLF_FUZZED(GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.xy.x)));
 do
  {
   _GLF_IDENTITY(GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.w = virtual_gid, 0u | (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.w = virtual_gid, (_GLF_IDENTITY(GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.w = virtual_gid, 0u + (GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.w = virtual_gid))) >> 0u)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.y = GLF_merged3_0_2_56_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizesubgroup_sizevirtual_gid.w;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.w = GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 uint next_virtual_gid = GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.z + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z + _GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z), min(((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, uint(uint((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z)))), 0u | ((_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, uint(uint((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z)))))), min(((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z), ((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) >> 0)))) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z)))));
 do
  {
   GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.x = next_virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9938.9029)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) + 0), int(8)))); _injected_loop_counter --)
      {
       return;
      }
    }
   GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.z = GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.x;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.x = GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.z;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), false, false, false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), false, false, false))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), false, false, false))))), false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2048.3012)), bool(false))) < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, true))))))), ! (! (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2048.3012)), bool(false))) < injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))))))))))), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, true))))))), ! _GLF_IDENTITY((! (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || ((! (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.w], 4, 64, 0);
 GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.x = read_1;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.z = GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_base.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y = GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.z;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, false || (false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), true))))))))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))) || false)), false || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false))), ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, ! (! (true)))))))) || false)))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_1virtual_gid.w], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), int(ivec2(max(0, 0), _GLF_IDENTITY(0, (0) >> 0))))));
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.x = read_2;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > 0), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > 0))); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 & -72907); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.y = GLF_merged3_0_1_6_1_1_11_2_1_14read_2subgroup_idworkgroup_size.x;
     if(_GLF_DEAD(false))
      break;
    }
  }
 GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.x = GLF_merged4_0_1_16_1_1_6_2_1_12_3_1_14next_virtual_gidread_2workgroup_idworkgroup_size.y;
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z = GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.x, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z = GLF_merged3_0_2_43_2_1_16_3_1_11GLF_merged2_0_1_6_1_1_13read_2subgroup_sizenext_virtual_gidsubgroup_id.xy.x) * 1u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
  }
 if(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, uint(uvec3(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, 0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))))) | (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z)), bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))), true, true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, bool(bvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_size.z, true, true, true))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))), true, true))))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            return;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ -1.8)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.7)), bvec2(true, false))).x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) - uvec4(0u, 0u, 0u, 0u)), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)).x], uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y == GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z) + 1, 4, 64, 4);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), bool(bvec3(false || (_GLF_IDENTITY(false, true && (false))), false, true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && true), _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), bool(bvec3(! (! (false)), false, false))))))
        {
         do
          {
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
        }
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(false);
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))))))
      return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y == _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)).z) + 1, 4, 64, _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 0)))) / 1), _GLF_IDENTITY(4, int(ivec3(4, 0, 0))))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), bool(bvec2(_injected_loop_counter < (1 | 1), true)))) || false)) || false)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), bool(bvec2(_injected_loop_counter < (1 | 1), true)))) || false)) || false))) && true); _injected_loop_counter ++)
    {
     subgroupAll(true);
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true))) && true)))
  return;
 if(_GLF_DEAD(false))
  return;
}
