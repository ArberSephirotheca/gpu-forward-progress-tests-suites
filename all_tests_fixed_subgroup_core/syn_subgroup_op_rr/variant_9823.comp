#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   switch(_GLF_SWITCH((0 ^ 0)))
    {
     case 12:
     for(     findMSB((-91012 % -61896));
 false; unpackUnorm2x16(read_2))
      {
       uvec3 _GLF_SWITCH_0_0v;
       bvec3(true, false, false);
      }
     case 0:
     case 77:
     case 98:
     case 48:
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
     subgroupAll(true);
     break;
     case 47:
     {
      mat4x3(7.6, -8915.8405, -3829.5242, 469.269, 4.5, 0.8, -0.6, 163.272, 9982.3550, -4.1, -19.89, -496.317);
      mat3x4 _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
      {
       ;
       mat4 _GLF_SWITCH_0_3v;
       float _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
       ;
       mat4x2 _GLF_SWITCH_0_6v;
      }
      int _GLF_SWITCH_0_7v;
      ;
      {
       ivec2(-19846, -8989);
       if(false)
        {
         vec3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
         vec2 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v;
         _GLF_SWITCH_0_10v;
         mat3(414.343, -20.65, -257.227, -37.50, -9884.8501, -5652.8493, -65.05, 36.90, -33.04);
         uaddCarry(read_2, workgroup_base, read_1);
         mat2x3 _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v[25], _GLF_SWITCH_0_15v;
         ((uvec3(30236u, 50596u, 23806u) % uvec3(179106u, 51992u, 18694u)) / subgroup_size);
         mat3x2(3822.1042, 3609.8634, 90.56, 9.6, -116.815, -0.6);
         (ivec4(-93829, 89905, -85060, -75472).ra / ivec2(13198, -12333));
        }
       else
        {
         _GLF_SWITCH_0_2v;
         bool _GLF_SWITCH_0_16v;
         float _GLF_SWITCH_0_17v;
         mat2x4(40.90, 5961.1021, -41.89, -5.3, -2.0, -1.1, 10.76, -6172.4705);
         mat3x4(-7.9, 61.21, -1288.5857, 9934.5619, 118.649, -2.5, -957.443, -41.78, 3.8, 704.069, 5854.9021, -16.35);
         ivec3(71013, 35410, -9950);
        }
       if(true)
        {
         ivec3(-72314, 83165, -14482);
         bvec3(true, false, false);
         true;
         uvec3 _GLF_SWITCH_0_18v;
         (ivec2(5749, 1437) % _GLF_SWITCH_0_7v);
         ;
        }
       {
        ;
       }
       mat3x2(8171.1203, 5.2, -3.7, -2869.2307, 0.4, 8.9);
      }
     }
     default:
     1;
    }
  }
}
