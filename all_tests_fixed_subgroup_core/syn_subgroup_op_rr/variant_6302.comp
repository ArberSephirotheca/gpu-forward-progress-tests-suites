#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_40 {
 bool _f0;
} ;

struct _GLF_struct_38 {
 vec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_39 {
 bvec3 _f0;
 _GLF_struct_38 _f1;
 bool _f2;
} ;

struct _GLF_struct_37 {
 float _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_36 {
 uint _f0;
} ;

struct _GLF_struct_41 {
 _GLF_struct_36 _f0;
 _GLF_struct_37 _f1;
 ivec2 _f2;
 int _injected_loop_counter;
 _GLF_struct_39 _f3;
 bool _f4;
 _GLF_struct_40 _f5;
} ;

struct _GLF_struct_35 {
 uint workgroup_size;
 uvec4 _f0;
} ;

struct _GLF_struct_32 {
 mat4x3 _f0;
 uvec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_33 {
 _GLF_struct_32 _f0;
} ;

struct _GLF_struct_31 {
 mat3x4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_30 {
 uint read_2;
 uvec2 _f0;
} ;

struct _GLF_struct_29 {
 bvec4 _f0;
} ;

struct _GLF_struct_34 {
 _GLF_struct_29 _f0;
 _GLF_struct_30 _f1;
 _GLF_struct_31 _f2;
 _GLF_struct_33 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_26 {
 int _f0;
 vec4 _f1;
 mat3x4 _f2;
 float _f3;
 mat2 _f4;
} ;

struct _GLF_struct_25 {
 vec2 _f0;
 bvec3 _f1;
 uvec4 _f2;
 vec4 _f3;
 bvec4 _f4;
 vec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_24 {
 bvec4 _f0;
 vec2 _f1;
 float _f2;
 ivec2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_27 {
 bool _f0;
 mat4x2 _f1;
 _GLF_struct_24 _f2;
 _GLF_struct_25 _f3;
 _GLF_struct_26 _f4;
} ;

struct _GLF_struct_22 {
 ivec4 _f0;
 mat2 _f1;
 mat4x3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_21 {
 bool _f0;
 vec3 _f1;
 bvec3 _f2;
 float _f3;
} ;

struct _GLF_struct_20 {
 ivec4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 bvec3 _f3;
 int _f4;
 mat4 _f5;
} ;

struct _GLF_struct_23 {
 bvec4 _f0;
 _GLF_struct_20 _f1;
 mat3 _f2;
 mat4 _f3;
 _GLF_struct_21 _f4;
 _GLF_struct_22 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_18 {
 mat3x2 _f0;
 mat4 _f1;
 mat2x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_17 {
 mat3x2 _f0;
 mat3x4 _f1;
 mat3x4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_16 {
 float _f0;
 mat2x4 _f1;
 vec2 _f2;
 uvec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
 float _f3;
 mat2x3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_14 {
 mat3x4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 mat4x3 _f1;
 mat3x4 _f2;
 ivec4 _f3;
 float _f4;
 int _f5;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 mat2 _f1;
 float _f2;
 bool _f3;
 bvec2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_8 {
 uvec2 _f0;
 mat4x2 _f1;
 mat4x2 _f2;
 bvec4 _f3;
 uint _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 mat4x3 _f3;
 mat4x2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_28 {
 uint workgroup_id;
 _GLF_struct_11 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_19 _f3;
 _GLF_struct_23 _f4;
 _GLF_struct_27 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_7 {
 int _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 uint subgroup_local_id;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 uvec2 _f1;
 _GLF_struct_0 _f2;
 float _f3;
 _GLF_struct_1 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_3 {
 uint subgroup_id;
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_SubgroupID, _GLF_struct_2(bvec2(true), uvec2(1u), _GLF_struct_0(mat2(1.0)), 1.0, _GLF_struct_1(mat3(1.0)), vec3(1.0)));
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1, _GLF_struct_5(_GLF_struct_4(ivec3(1), true)), _GLF_struct_6(mat3x4(1.0), ivec4(1)), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(gl_WorkGroupSize.x, uvec4(_GLF_IDENTITY(1u, (1u) | (1u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))));
        }
       else
        {
        }
      }
    }
   barrier();
  }
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(gl_WorkGroupID.x, _GLF_struct_11(_GLF_struct_8(uvec2(1u), mat4x2(1.0), mat4x2(1.0), bvec4(true), 1u, uvec2(1u)), _GLF_struct_9(_GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(76.81, 2524.4571, -126.884, _GLF_IDENTITY(1.3, float(vec3(_GLF_IDENTITY(1.3, float(mat3(1.3, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0, 1.0))), -77.31, -81.83, -7.1, -4928.1069, _GLF_IDENTITY(5458.1774, float(vec4(_GLF_IDENTITY(5458.1774, mix(float(_GLF_FUZZED(-3.8)), float(5458.1774), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, exp(0.0)))), 9174.2246, 784.470, -21.28, -3766.9253, 9.2, _GLF_IDENTITY(675.585, min(_GLF_IDENTITY(675.585, (true ? 675.585 : _GLF_FUZZED(-6639.5737))), 675.585)), -84.48), transpose(transpose(mat4(76.81, _GLF_IDENTITY(2524.4571, max(2524.4571, 2524.4571)), -126.884, 1.3, -77.31, -81.83, -7.1, -4928.1069, 5458.1774, 9174.2246, 784.470, -21.28, -3766.9253, 9.2, 675.585, -84.48))))) : mat4(1.0))), _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))))))))), 1.0, true, bvec2(true), ivec3(_GLF_IDENTITY(1, (1) << 0))), _GLF_struct_10(mat3x2(1.0), mat4x3(1.0), mat3x4(1.0), ivec4(1), 1.0, 1), mat4x3(1.0), mat4x2(1.0), mat4x2(1.0)), _GLF_struct_13(_GLF_struct_12(mat3(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))), float(_GLF_FUZZED(-4667.3305)), bool(false)))))))), _GLF_struct_15(_GLF_struct_14(mat3x4(1.0), ivec4(1))), _GLF_struct_19(_GLF_struct_16(1.0, mat2x4(1.0), vec2(1.0), uvec3(1u), _GLF_IDENTITY(true, ! (! (true)))), _GLF_struct_17(mat3x2(1.0), mat3x4(1.0), mat3x4(1.0), _GLF_IDENTITY(ivec3(1), min(ivec3(1), _GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))))), _GLF_struct_18(mat3x2(1.0), _GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))))))), mat2x4(1.0), uvec2(1u)), 1.0, mat2x3(1.0), mat2x4(1.0)), _GLF_struct_23(bvec4(true), _GLF_struct_20(ivec4(1), mat4x3(1.0), ivec2(1), bvec3(true), 1, mat4(1.0)), mat3(1.0), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_struct_21(true, vec3(1.0), bvec3(true), 1.0), _GLF_struct_22(ivec4(1), mat2(1.0), mat4x3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bvec4(true)), bvec2(true)), _GLF_struct_27(true, mat4x2(1.0), _GLF_struct_24(bvec4(true), vec2(1.0), 1.0, ivec2(1), mat3x2(1.0)), _GLF_struct_25(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), bvec3(bvec4(bvec3(true), true))), uvec4(1u), vec4(1.0), bvec4(true), vec3(1.0), bvec4(true)), _GLF_struct_26(_GLF_IDENTITY(1, (1) / 1), vec4(1.0), mat3x4(1.0), 1.0, mat2(1.0))), mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))), (false ? _GLF_FUZZED(vec2(4.5, -4.5)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))))).x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y)))))) && true, ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y)))))) && true) || false)))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, _GLF_IDENTITY(0u, (1u | 1u) * (_GLF_IDENTITY(0u, min(0u, 0u)))), 0u)) | uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size)))))), 0u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u))))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, (_GLF_struct_replacement_35.workgroup_size) | (_GLF_struct_replacement_35.workgroup_size)), _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, clamp(_GLF_struct_replacement_35.workgroup_size, _GLF_struct_replacement_35.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_35.workgroup_size, 0u ^ (_GLF_struct_replacement_35.workgroup_size)))), 0u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))) >> 0u)) * _GLF_IDENTITY(_GLF_struct_replacement_28.workgroup_id, max(_GLF_IDENTITY(_GLF_struct_replacement_28.workgroup_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) - 0u) ^ (_GLF_struct_replacement_28.workgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_28.workgroup_id, (_GLF_struct_replacement_28.workgroup_id) | (_GLF_struct_replacement_28.workgroup_id))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) + 0u), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_id * subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_id, (_GLF_struct_replacement_3.subgroup_id) >> 0u) * subgroup_size, 0u, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.2)), float(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))))))), bool(true))))))))))) + _GLF_struct_replacement_7.subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (workgroup_base))))) + _GLF_struct_replacement_3.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3.subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3.subgroup_id * subgroup_size, uint(uint(workgroup_base + _GLF_struct_replacement_3.subgroup_id * subgroup_size))) : _GLF_FUZZED(subgroup_size)))), (_GLF_IDENTITY(~ (workgroup_base + _GLF_struct_replacement_3.subgroup_id * subgroup_size), uint(uvec4(~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_id, 1u * (_GLF_struct_replacement_3.subgroup_id)) * subgroup_size), ((workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_id, 1u * (_GLF_struct_replacement_3.subgroup_id)) * subgroup_size)) | ((workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_id, 1u * (_GLF_struct_replacement_3.subgroup_id)) * subgroup_size))), 0u, 0u, 1u)))) >> _GLF_IDENTITY(0u, (0u) * 1u)))) + _GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), clamp((_GLF_IDENTITY((_GLF_struct_replacement_7.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_7.subgroup_local_id + 1, (_GLF_struct_replacement_7.subgroup_local_id + 1) << 0u)), ((_GLF_struct_replacement_7.subgroup_local_id + 1)) - 0u), (1u ^ 1u)), (true ? uvec2(_GLF_IDENTITY((_GLF_struct_replacement_7.subgroup_local_id + 1), ((_GLF_struct_replacement_7.subgroup_local_id + 1)) - 0u), (1u ^ 1u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec2(106082u, 15712u)), uvec2(0u, 0u) ^ (_GLF_FUZZED(uvec2(106082u, 15712u)))))))) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size)) | (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))), ((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), 1u * (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_struct_replacement_7.subgroup_local_id, uint(uvec3(_GLF_struct_replacement_7.subgroup_local_id, 0u, 1u))) + 1) % subgroup_size), (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size)) | (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))), ((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), 1u * (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))))), 0u, 0u, ((((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), min(uvec4(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(62468u) : subgroup_size))), clamp(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size)) | (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))), ((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), 1u * (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))))), 0u, 0u, ((((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), uvec4(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size)) | (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))), ((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_7.subgroup_local_id + 1), 0u ^ ((_GLF_struct_replacement_7.subgroup_local_id + 1))) % subgroup_size), 1u * (((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY(0u, ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) << _GLF_IDENTITY(uint(6u), uint(6u))) ^ (0u)), 0u, ((((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, uint(uvec2(2u, 1u))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_7.subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_7.subgroup_local_id)) + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) : _GLF_FUZZED(num_workgroup))), subgroup_size, subgroup_size)), 0u ^ ((_GLF_struct_replacement_7.subgroup_local_id + 1) % subgroup_size)))));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), mix(float(_GLF_FUZZED(141.860)), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))), bool(true)))), (injectionSwitch.x) * 1.0) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((7.1 + 77.12))), bool(false))))) && true), true, false, true))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))), false || (bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 _GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(_GLF_struct_29(bvec4(_GLF_IDENTITY(true, (true) && true))), _GLF_struct_30(atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) + (uvec2(1u))) : _GLF_FUZZED(uvec2(157650u, 101199u))))), _GLF_struct_31(mat3x4(1.0), mat4(1.0)), _GLF_struct_33(_GLF_struct_32(mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.9)), float(1.0), bool(true)))) * 1.0)), uvec3(1u), bvec4(true))), vec2(1.0));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat2x4(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), max(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.0) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-644.680)), float(0.0), bool(true))))))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0))), (float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0)))) / 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))), transpose(transpose(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) * 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))))))))), 0.0, 0.0))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))) : _GLF_FUZZED(vec2(7.4, -207.811)))).y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat2x4(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), max(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.0) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-644.680)), float(0.0), bool(true))))))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0))), (float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0)))) / 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))), transpose(transpose(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) * 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))))))))), 0.0, 0.0))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))) : _GLF_FUZZED(vec2(7.4, -207.811)))).y), false, false)), (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat2x4(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), max(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.0) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-644.680)), float(0.0), bool(true))))))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0))), (float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0)))) / 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))), transpose(transpose(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) * 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))))))))), 0.0, 0.0))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))) : _GLF_FUZZED(vec2(7.4, -207.811)))).y), false, false)), ! (! (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat2x4(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, exp(0.0), 0.0, 0.0))), injectionSwitch[1])).x, injectionSwitch.x)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, determinant(mat2(determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(2.7, 85.63, 18.95, -17.10, -2.1, 60.38, 5.6, 58.18, 422.046, -315.991, -4.1, 2896.3517, 8769.2379, 4278.3629, -5.7, 8.8))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0)), 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), max(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.0) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-644.680)), float(0.0), bool(true))))))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0))), (float(mat2x3(1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), cos(0.0)))) / 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))), transpose(transpose(mat4(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) * 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), (mat2(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)) * mat2(1.0)))))))))))), 0.0, 0.0))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((- injectionSwitch)))) : _GLF_FUZZED(vec2(7.4, -207.811)))).y), false, false)))))) && true)))))
    {
     for(_GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(_GLF_struct_36(1u), _GLF_struct_37(1.0, mat3x2(1.0)), ivec2(1), 1, _GLF_struct_39(bvec3(true), _GLF_struct_38(vec4(1.0), mat2x4(1.0)), true), true, _GLF_struct_40(true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_41._injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) >> 0)); _GLF_struct_replacement_41._injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(vec3(5.7, -6.8, 1435.1855).t)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((1 << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.3)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec4(abs(1.0), 1.0, 1.0, 0.0), vec4(0.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y))), dot(vec4(abs(1.0), 1.0, 1.0, 0.0), vec4(0.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y))))) > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec3(0, 0, (((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_struct_replacement_7.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_7.subgroup_local_id, min(_GLF_struct_replacement_7.subgroup_local_id, _GLF_struct_replacement_7.subgroup_local_id))) / 1u) + 1 < subgroup_size)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) + 0)), int(8)))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))))), true && (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)))))))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))) * mat2(1.0))).y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)) || false)))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u) == _GLF_struct_replacement_34._f1.read_2) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0), 4, 64, 4);
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = ((0 | 0) ^ ((_GLF_IDENTITY(0, (0) | 0) ^ 0) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, 0 ^ (7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) || false, true && (((injectionSwitch.x < injectionSwitch.y)) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))
              barrier();
            }
           else
            {
            }
          }
        }
       subgroupAll(false);
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) >> 0))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), (int(1)) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_struct_replacement_34._f1.read_2) + 1, 4, 64, 4);
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               subgroupAll(true);
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((true ? 3.6 : 5.9))), vec2(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-107.609, (-107.609) - 0.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(-107.609, (-107.609) - 0.0), mix(float(_GLF_IDENTITY(-107.609, (-107.609) - 0.0)), float(_GLF_FUZZED(-6.7)), bool(false))))) / -7729.1226)), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0), (mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(491.175) : 1.0)))))), 1.0, 0.0, 1.0, exp(0.0), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - vec2(0.0, 0.0), mix(vec2(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), exp(0.0), 1.0), (mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - vec2(0.0, 0.0))[0], _GLF_FUZZED(-6.0)), vec2(_GLF_FUZZED(-1814.6695), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0), (mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, exp(0.0), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - vec2(0.0, 0.0))[1]), bvec2(false, _GLF_IDENTITY(true, bool(bool(true))))))).y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), false || (bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(ivec2(0, 1))))))) ^ (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((18843 * _injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) || false))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, ! (! (false))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
