#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) - 0.0) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))))), injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (gl_NumWorkGroups))), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) ^ (gl_NumWorkGroups))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + log(vec2(1.0, 1.0))), mix(vec2(_GLF_FUZZED(-6158.0637), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(0.0, 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.0, 4911.5772)) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6158.0637), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(0.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6158.0637), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))))) | (1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))).x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | uvec3(0u, 0u, 0u)))), clamp((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.7) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0)), clamp(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0)))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)))) ^ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))), uvec3(0u, 0u, 0u) ^ ((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (gl_NumWorkGroups))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(7.3))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) ? _GLF_FUZZED(6628.3451) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), 1.0 * (clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(0.9)), float(clamp(0.0, 0.0, 0.0)), bool(true))), clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))))))), injectionSwitch.x)) ^ (gl_NumWorkGroups))))))), (uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))))), injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (gl_NumWorkGroups))), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), injectionSwitch.x), clamp(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), min(_GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), max(float(vec4(0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), max(float(vec4(0.0, 1.0, 1.0, 0.0)), float(vec4(0.0, 1.0, 1.0, 0.0)))))), float(vec4(0.0, 1.0, 1.0, 0.0))))), injectionSwitch.x)))) ^ (gl_NumWorkGroups))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6158.0637), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(0.0, 0.0), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(-2466.8594, 7073.4147))))).x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.0, 4911.5772)) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6158.0637), _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(mod(injectionSwitch, -784.736)) : (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6158.0637), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1))]), vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(0.0, 0.0)), ((false ? _GLF_FUZZED(injectionSwitch) : (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6158.0637), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1))]), vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[0], _GLF_FUZZED(-39.77)), bvec2(true, false)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)))))).x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | uvec3(0u, 0u, 0u)))), clamp((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.7) : injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), (false ? _GLF_FUZZED(-123.521) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, injectionSwitch.x)))), injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, tan(0.0) + (1.0)), 1.0) * (injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x))))) / 1.0), injectionSwitch.x)))) ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))), min((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))), (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))), uvec3(0u, 0u, 0u) ^ ((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (gl_NumWorkGroups))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(0.0)), (true ? _GLF_IDENTITY(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(0.0)), transpose(transpose(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(0.0))))) : _GLF_FUZZED(mat2(-604.046, -2.7, 68.33, -15.40)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(7.3))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6628.3451) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), clamp(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(0.9)), float(clamp(0.0, 0.0, 0.0)), bool(true))), clamp(0.0, 0.0, 0.0)))))))), (_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(7.3))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6628.3451) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), clamp(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0)), (false ? _GLF_FUZZED(3665.8632) : _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0)), (false ? _GLF_FUZZED(-12.21) : float(mat3(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0))))))), 0.0, 0.0), mix(float(_GLF_FUZZED(0.9)), float(clamp(0.0, 0.0, 0.0)), bool(true))), clamp(0.0, 0.0, 0.0))))))))) + 0.0), injectionSwitch.x)) ^ (gl_NumWorkGroups)))))))) * uvec3(1u, 1u, 1u))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec3((gl_WorkGroupSize)), min(uvec3((gl_WorkGroupSize)), uvec3((gl_WorkGroupSize)))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(98149u, 18933u, 13193u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec3(98149u, 18933u, 13193u)) : (gl_WorkGroupSize)) | (false ? _GLF_FUZZED(uvec3(98149u, 18933u, 13193u)) : (gl_WorkGroupSize)))))).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), min(1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
       return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.5) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(99.17))))) < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), true && (! ((injectionSwitch.x < injectionSwitch.y))))))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 1.0, 1.0)), max(float(vec3(injectionSwitch.x, 1.0, 1.0)), float(vec3(injectionSwitch.x, 1.0, 1.0))))) < injectionSwitch.y)), true), false))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), false, true))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false || (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))))), (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, false, false)))) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true)), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)))))) && (false))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y)))), true), false)))))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(66130u, 162021u, 141794u)) : gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))) ^ (_GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) / _GLF_IDENTITY(abs(vec2(1.0, 1.0)), max(abs(vec2(1.0, 1.0)), _GLF_IDENTITY(abs(vec2(1.0, 1.0)), vec2(vec4(abs(vec2(1.0, 1.0)), 0.0, 1.0)))))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), min(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(uvec3(152570u, 9614u, 127636u)) : uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(max(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(uvec3(152570u, 9614u, 127636u)) : uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-759.116), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(2.1)), bvec2(true, false))))) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), uvec3(0u, 0u, 0u) | (max(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(uvec3(152570u, 9614u, 127636u)) : uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-759.116), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(2.1)), bvec2(true, false))))) / abs(vec2(1.0, 1.0))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), ~ (~ (ivec2(0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 0.0, 0.0, 0.0, 0.0, 1.0))))), injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0))), min(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0))), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(_GLF_IDENTITY(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0)), min(_GLF_IDENTITY(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0))) / vec2(1.0, 1.0)), vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0)))) / vec2(1.0, 1.0)))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0))), min(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0))), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), clamp(_GLF_IDENTITY(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0)), min(_GLF_IDENTITY(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0)), (vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0))) / vec2(1.0, 1.0)), vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), vec2(injectionSwitch.x, 0.0), vec2(injectionSwitch.x, 0.0)))) / vec2(1.0, 1.0)))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      return;
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), false || (bool(bvec4(_GLF_DEAD(false), true, false, true))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id)), (_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id))) / 1u), _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id)))))), max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) >> _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), ~ (~ (~ (0u)))))))))), min((_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (subgroup_size) >> 0u)))))))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) >> 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec3(subgroup_id, 1u, 0u)), max(uint(uvec3(subgroup_id, 1u, 0u)), uint(uvec3(subgroup_id, 1u, 0u))))) * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), 0u ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))))), (_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) + 0u)) ^ 0u)), (_GLF_IDENTITY((~ (subgroup_size)), 0u ^ ((~ (subgroup_size))))) / 1u))), (false ? _GLF_FUZZED(subgroup_size) : ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) * 1u);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (4) / (0 | 1)), 4)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) + sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(93.90)), float(injectionSwitch.y), bool(true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       barrier();
      }
     int i = 0;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) || false), true, true, false)))))
        {
         for(int _injected_loop_counter = (0 & 60136); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) >> 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, max(0u, 0u))))) ^ 0u))), (0u) >> 0u)) - 0u), 0u), (uvec4(next_virtual_gid, 1u, 0u, 0u)) >> uvec4(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(162137u, (162137u) / 1u) & (0u & 122383u))), 0u, 0u))), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))), false, false)))), ((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))), false, false))))) && true) && true) ? uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), _GLF_IDENTITY(max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, _GLF_IDENTITY(1u, (1u) ^ 0u), 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u)), (max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))) | (max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u), max((_GLF_IDENTITY(max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u)), (max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))) | (max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u)), (max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))) | (max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u))))), clamp(uvec4(next_virtual_gid, 1u, 0u, 0u), _GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)))), 0u))), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))), 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(_GLF_IDENTITY(0u, 0u + (0u)), 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(1u), uvec4(1u))) & uvec4(40695u, 140773u, 120636u, 37941u)) + (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))), ~ (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : next_virtual_gid)), 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))))))) << uvec4(0u, 0u, 0u, 0u))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) << 0u)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(1u), uvec4(1u))) & uvec4(40695u, 140773u, 120636u, 37941u)) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec4(181196u, 133031u, 34580u, 178574u)) : uvec4(0u, 0u, 0u, 0u))) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))), ~ (~ (_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), uvec4(0u, 0u, 0u, 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))))))))))))))) << uvec4(0u, 0u, 0u, 0u))), min((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : next_virtual_gid))) | (next_virtual_gid)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) / 1u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(workgroup_size) : ~ (0u))))), 0u), uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u) ^ (uvec4(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) >> 0u)), 1u, 0u, 0u)))), ((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(1u), uvec4(1u))) & uvec4(_GLF_IDENTITY(40695u, ~ (~ (40695u))), 140773u, 120636u, 37941u)) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))), (_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 0u))), 0u, 0u)))))) | uvec4(0u, 0u, 0u, 0u))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(next_virtual_gid, 1u, 0u, 0u)))) | (uvec4(next_virtual_gid, 1u, 0u, 0u))))))))))) << uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, 0u | (0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) << 0u)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), _GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), (uvec4(next_virtual_gid, 1u, 0u, 0u)) | (uvec4(next_virtual_gid, 1u, 0u, 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, _GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 0u))), 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(1u), uvec4(1u))) & uvec4(40695u, 140773u, 120636u, 37941u)) + (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))) ^ 0u)) ^ (uvec4(next_virtual_gid, 1u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)))))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))))) << uvec4(0u, 0u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), 1u, 0u, 0u), max(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(next_virtual_gid, 1u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u)))), ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED((_GLF_IDENTITY(workgroup_id --, 0u | (workgroup_id --)))) : 0u)), 0u)), 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) & uvec4(41772u, 9894u, 176258u, 174549u)) | (uvec4(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED((workgroup_id --)) : 0u)), 0u)), 0u, 0u, 0u))) >> _GLF_IDENTITY(uvec4(1u), uvec4(1u))) & uvec4(40695u, 140773u, 120636u, 37941u)) + (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ _GLF_IDENTITY((uvec4(next_virtual_gid, 1u, 0u, 0u)), ((uvec4(next_virtual_gid, 1u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(next_virtual_gid, 1u, 0u, 0u))))))))) << uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), ~ (~ (uint(uvec2(0u, 1u))))))))) << 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), min(uvec4(next_virtual_gid, 1u, 0u, 0u), _GLF_IDENTITY(uvec4(next_virtual_gid, 1u, 0u, 0u), (uvec4(next_virtual_gid, 1u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))), (uvec4(next_virtual_gid, 1u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))), (uvec4(next_virtual_gid, 1u, 0u, 0u)) >> uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_local_id))))], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, 0 + (64)), max(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) ^ 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((64), max(_GLF_IDENTITY((64), max((64), (64))), (64))) / 1, (_GLF_IDENTITY(_GLF_IDENTITY((64), max(_GLF_IDENTITY((64), _GLF_IDENTITY(max((64), (64)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (max((64), (64))))), (64))) / 1, _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((64), max(_GLF_IDENTITY((64), max((64), (64))), (64))) / 1), max((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((64), max(_GLF_IDENTITY((64), max((64), (64))), (64))) / 1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((64), max(_GLF_IDENTITY((64), max((64), (64))), (64))) / 1))))) | (_GLF_IDENTITY((64), max(_GLF_IDENTITY((_GLF_IDENTITY(64, (64) - 0)), max((64), (64))), (64))) / 1)), ~ (~ ((64) / 1)))), 64)), 4);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, false))))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) && true))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))), bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))))), true && (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))))))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! _GLF_IDENTITY((bool(bool(true))), ! (! ((bool(bool(true)))))))))), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))), (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))), false || (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))))))) || false)), true, false, false))))))) && true)) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), true && ((_GLF_IDENTITY(true, ! (! (true))))))), true))))))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), true))))))))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))), true && _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(true, (true) || false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(true, (true) || false))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(true, (true) || false))), false))), true))))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(true, (true) || false))))))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(true, (true) || false)))))))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(true, (true) || false))))))))))))), (bool(bool((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false))))))))))))))) || false))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && ((true) || false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) || false))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))), true))))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(true, (true) || false))))))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(true, (true) || false)))))))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), true, _GLF_IDENTITY(true, (true) || false))))))))))))), (bool(bool((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bool((true))))), (true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))) || (false)))) || false))))))))))))))) || false)))))) && true)), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(true, false || (true))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(true, false || (true))), true, false)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(true, false || (true))), true, false)))))))), true && (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(true, false || (true))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && true), _GLF_IDENTITY(false, true && (false)) || (true))), true, false)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(true, false || (true))), true, false))))))))))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | (0 << _GLF_IDENTITY(int(7), int(7)))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                  break;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true)) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0)), 1.0 * (float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0))))), injectionSwitch.y)), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0)), 1.0 * (float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0))))), injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               continue;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), bool(bvec3(false, false, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true), false)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, true))), true), false)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec2(! (_GLF_IDENTITY(false, true && (false))), false))))))), true && (false))))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-206.742, float(mat4x2(-206.742, 0.0, 1.0, 0.0, 0.0, sqrt(abs(1.0)), 1.0, 1.0))))), vec2(_GLF_IDENTITY(_GLF_FUZZED(vec3(25.93, -1.5, 4407.2063).xy.t), min(_GLF_FUZZED(vec3(25.93, -1.5, 4407.2063).xy.t), _GLF_FUZZED(vec3(25.93, -1.5, 4407.2063).xy.t))), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5257) : 1))]), bvec2(false, true))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7893.8189)), bool(false))) > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(9419.6650))) > injectionSwitch.y))))
  barrier();
}
