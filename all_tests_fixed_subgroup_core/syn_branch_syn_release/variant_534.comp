#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, true)))))) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size)))))), ((workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size))))))) | (_GLF_IDENTITY((workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size)))))), (true ? (workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size)))))) : _GLF_FUZZED(workgroup_size))))), max((workgroup_size) | (workgroup_size), (workgroup_size) | (workgroup_size)))) * workgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | _GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size))))), max(~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size))))), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size)))))))), max((workgroup_size) | (workgroup_size), (workgroup_size) | (workgroup_size)))) * workgroup_id), min(~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) ^ 0u)), ~ ((workgroup_size)))))), max((workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)), (workgroup_size) | (workgroup_size)))) * workgroup_id), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size)))))), max((workgroup_size) | (workgroup_size), (workgroup_size) | (workgroup_size)))) * workgroup_id, 0u + (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | _GLF_IDENTITY((workgroup_size), ~ (_GLF_IDENTITY(~ ((workgroup_size)), clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((workgroup_size)))))), max((workgroup_size) | (workgroup_size), (workgroup_size) | (workgroup_size)))) * workgroup_id)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)), _GLF_IDENTITY(~ (~ (subgroup_id)), (false ? _GLF_FUZZED(workgroup_base) : ~ (~ (subgroup_id))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u + _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))), ~ (~ (subgroup_id))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))))) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false) || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) * mat2(1.0)))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))))) && true))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), workgroup_base))))) >> 0u) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))) >> 0u) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u), subgroup_id * subgroup_size), 0u ^ (max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u), subgroup_id * subgroup_size))))) >> 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))))) >> 0u)) | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, _GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(6), int(6))))), (max(0, _GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(6), int(6)))))) | (max(0, _GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(6), int(6)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(6), int(6))), 0)), ~ (~ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(6), int(6))), 0)), ~ (~ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(6), int(6))), 0)), (int(ivec3(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(6), int(6))), 0))) / 1)))))))) | _GLF_IDENTITY((1), 0 + (_GLF_IDENTITY((1), ((1)) >> 0))))) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ 0), max((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) * 1)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), false, false))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), false, false))))))), true, true))))), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), false, false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), false, false))), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), false, false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(396.546), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-77.16)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(665.791)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)))), false, false))), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(step(injectionSwitch, injectionSwitch)) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))))) * _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), mix(vec2((_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(step(injectionSwitch, injectionSwitch)) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))))) * _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(-43.20)), vec2(_GLF_FUZZED((-4752.6821)), (_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(step(injectionSwitch, injectionSwitch)) : _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))))) * _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))[1]), bvec2(false, true))), _GLF_IDENTITY(clamp((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y))), max(clamp((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y))), _GLF_IDENTITY(clamp((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y))), vec2(mat4x2(clamp((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y))), exp(0.0), 1.0, 1.0, 0.0, 1.0, exp(0.0)))))))).x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch[0], (true ? _GLF_IDENTITY(injectionSwitch[0], float(vec3(_GLF_IDENTITY(injectionSwitch[0], float(vec3(injectionSwitch[0], 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0))) : _GLF_FUZZED(-1.9)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, float(mat4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))))))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, true)))))), mix(float(_GLF_FUZZED(float(-38826))), float(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true)))), bool(true))), injectionSwitch[_GLF_IDENTITY(1, 0 ^ (1))])).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), mix(float(_GLF_FUZZED(4981.5603)), float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), clamp(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true))))), bool(true))), mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true))))), injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(11994)))])).y))))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch[0], (true ? _GLF_IDENTITY(injectionSwitch[0], float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(vec3(injectionSwitch[0], 1.0, 1.0))), (false ? _GLF_FUZZED(2.3) : _GLF_IDENTITY(injectionSwitch[0], float(vec3(injectionSwitch[0], 1.0, 1.0))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0))) : _GLF_FUZZED(-1.9)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) - vec2(0.0, 0.0))))[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY(-97.46, clamp(-97.46, -97.46, _GLF_IDENTITY(-97.46, min(-97.46, -97.46)))))), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, float(mat4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY(-97.46, (false ? _GLF_FUZZED(vec4(7.4, -8727.6996, -5536.7857, -86.42).p) : _GLF_IDENTITY(-97.46, (-97.46) - 0.0))))), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))))))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), _GLF_IDENTITY(float(injectionSwitch[0]), mix(float(float(injectionSwitch[0])), float(_GLF_FUZZED((true ? -97.51 : 5.7))), bool(false))), bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, true)))))), mix(float(_GLF_FUZZED(float(-38826))), float(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.46)), float(injectionSwitch[0]), bool(true)))), bool(true))), injectionSwitch[_GLF_IDENTITY(1, 0 ^ (1))])).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((injectionSwitch) / cos(vec2(0.0, 0.0)), (_GLF_IDENTITY((injectionSwitch) / cos(vec2(0.0, 0.0)), clamp((injectionSwitch) / cos(vec2(0.0, 0.0)), (injectionSwitch) / cos(vec2(0.0, 0.0)), (injectionSwitch) / cos(vec2(0.0, 0.0))))) - sqrt(vec2(0.0, 0.0)))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(cos(vec2(0.0, 0.0)), max(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)))[0], min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(cos(vec2(0.0, 0.0)), max(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(cos(vec2(0.0, 0.0)), max(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)))[0]) / 1.0), _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(cos(vec2(0.0, 0.0)), max(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)))[0]))), bool(true)), mix(float(_GLF_FUZZED(4981.5603)), float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-97.46, min(-97.46, -97.46)))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), clamp(mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))), mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(cos(vec2(0.0, 0.0)), max(_GLF_IDENTITY(cos(vec2(0.0, 0.0)), vec2(mat2x3(cos(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(cos(vec2(0.0, 0.0)), vec2(0.0, 0.0) + (cos(vec2(0.0, 0.0))))))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true)), mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true))))), bool(true))), mix(float(_GLF_FUZZED(-97.46)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch) / cos(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))[0]), bool(true))))), injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(11994)))])).y))))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1, ~ (~ (subgroup_local_id + 1))) < _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), ~ (~ (subgroup_size))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(false ? _GLF_FUZZED(i) : int(0), (false ? _GLF_FUZZED(i) : int(0)) << 0))), int(0)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter < 1))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) || false); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), ~ (~ (_GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) / 1)))) << 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, ~ (~ (4))))));
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (uint(2)) ^ (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), _GLF_IDENTITY(4, (false ? _GLF_IDENTITY(_GLF_FUZZED(-11709), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-11709), (_GLF_FUZZED(-11709)) | 0)))) : _GLF_IDENTITY(4, (4) | _GLF_IDENTITY((4), ((4)) >> 0)))), 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), mix(vec2(_GLF_FUZZED(vec2(_GLF_IDENTITY(-84.70, (true ? _GLF_IDENTITY(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), clamp(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), clamp(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)))))) : _GLF_FUZZED(-5.7))), 1374.1203).y), _GLF_IDENTITY(_GLF_FUZZED(414.401), 0.0 + (_GLF_FUZZED(414.401)))), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || _GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec4((true), true, true, true)))) || false)) || false))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), mix(vec2(_GLF_FUZZED(vec2(_GLF_IDENTITY(-84.70, (true ? _GLF_IDENTITY(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), clamp(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, _GLF_IDENTITY(-84.70, min(-84.70, -84.70)))), clamp(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), _GLF_IDENTITY(_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)), 0.0 + (_GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)))), _GLF_IDENTITY(-84.70, clamp(-84.70, -84.70, -84.70)))))) : _GLF_IDENTITY(_GLF_FUZZED(-5.7), (true ? _GLF_IDENTITY(_GLF_FUZZED(-5.7), max(_GLF_FUZZED(-5.7), _GLF_FUZZED(-5.7))) : _GLF_FUZZED(-3.8))))), _GLF_IDENTITY(1374.1203, clamp(1374.1203, _GLF_IDENTITY(1374.1203, min(1374.1203, _GLF_IDENTITY(1374.1203, (1374.1203) / 1.0))), _GLF_IDENTITY(1374.1203, (1374.1203) - 0.0)))).y), _GLF_IDENTITY(_GLF_FUZZED(414.401), 0.0 + (_GLF_FUZZED(414.401)))), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), ((injectionSwitch)[0]) / 1.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))))[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || _GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec4((true), true, true, true)))) || false)) || false))))).y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true)))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))) || (_GLF_IDENTITY(false, true && (false))))))) || (_GLF_IDENTITY(false, false || (false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), true && (bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))))), false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}
