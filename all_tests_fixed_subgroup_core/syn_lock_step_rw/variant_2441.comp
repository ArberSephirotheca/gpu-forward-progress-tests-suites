#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 mat4x3 _f0;
} ;

struct _GLF_struct_2 {
 uint _f0;
 ivec4 _f1;
 mat3x2 _f2;
 vec4 _f3;
 vec2 _f4;
 mat4x3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 _GLF_struct_2 _f1;
 mat4x2 _f2;
 vec4 _f3;
 _GLF_struct_3 _f4;
 mat4x2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 uint workgroup_id;
 _GLF_struct_0 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 uint _f1;
 mat2x3 _f2;
 ivec3 _f3;
 _GLF_struct_4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))) || false)))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, max(0, 0)) ^ 0)); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), bool(bool(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true)))))), false, true)))))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))) || false))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9752.8828)), vec2(_GLF_FUZZED(float(false)), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(false, true))).x), (false ? _GLF_FUZZED(1.9) : _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.9) : injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4155.8805)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(8726.3287) : float(injectionSwitch.x))))), bool(true)))), float(_GLF_FUZZED(-199.107)), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) > injectionSwitch.y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), true && (true && (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_FUZZED(-4.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0))).y))))))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4155.8805)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(8726.3287) : float(injectionSwitch.x))))), bool(true)))), float(_GLF_FUZZED(-199.107)), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) > injectionSwitch.y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), true && (true && (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_FUZZED(-4.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0))).y))))))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4155.8805)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(8726.3287) : float(injectionSwitch.x))))), bool(true)))), float(_GLF_FUZZED(-199.107)), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) > injectionSwitch.y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), true && (true && (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_FUZZED(-4.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0))).y))))))))))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4155.8805)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(8726.3287) : float(injectionSwitch.x))))), bool(true)))), float(_GLF_FUZZED(-199.107)), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) > injectionSwitch.y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), true && (true && (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.3), _GLF_FUZZED(-4.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0))).y))))))))))))), true, true, true))))))))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), false))))))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true)) || false)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true)) || false))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true)) || false)))))))))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false)))))) || false)))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (0 & 85608) ^ (1)))) * (_injected_loop_counter --)))
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))) || false)))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3775.5597)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3775.5597)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_IDENTITY(true, ! (! (true)))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), false, false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) && true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, (0 | 0), 1), (_GLF_IDENTITY(ivec4(1, 1, (0 | 0), 1), min(ivec4(1, 1, (0 | 0), 1), ivec4(1, 1, (0 | 0), 1)))) >> ivec4(0, 0, 0, 0))))) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, length(vec2(0.0, 0.0)), cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true))), true && (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true))), (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)))) && true)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.0, -7.8)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), (bool(! (injectionSwitch.x > injectionSwitch.y))) && true))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)), false), bvec2(bvec2(bvec2(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)), false))))))))), (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), true)))) && true))))))))) || false)))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) && true))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), (true ? vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]) : _GLF_FUZZED(injectionSwitch))))[0], min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), injectionSwitch[1]))[0])), injectionSwitch[1]), mix(vec2((vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), (true ? vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]) : _GLF_FUZZED(injectionSwitch))))[0], min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), injectionSwitch[1]))[0])), injectionSwitch[1]))[0], _GLF_FUZZED(61.39)), vec2(_GLF_FUZZED(-719.481), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), (true ? vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]) : _GLF_FUZZED(injectionSwitch))))[0], min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0), mat4x2(mat4x3(mat4x2(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0)))))), injectionSwitch[1]))[0])), injectionSwitch[1]))[1]), bvec2(false, true)))).y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
       return;
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.0) : injectionSwitch.x))), bool(true))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(479.535) : _GLF_IDENTITY(sqrt(0.0), clamp(sqrt(0.0), sqrt(0.0), sqrt(0.0)))))), (mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, sqrt(0.0))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.0) : injectionSwitch.x))), bool(true))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(479.535) : _GLF_IDENTITY(sqrt(0.0), clamp(sqrt(0.0), sqrt(0.0), sqrt(0.0)))))), (mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, sqrt(0.0))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch.x)) > injectionSwitch.y)) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, ~ (~ (0)))))), (int(0)) ^ 0))) ^ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))));
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, min(1, 1)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.4), _GLF_FUZZED(4.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y))));
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) || false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(32.85)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.5)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7980.7607)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7980.7607)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), true)))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) * int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                  barrier();
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5404.2213), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(500.437)), bvec2(true, false))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-6.7)), bvec2(false, false)))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))), ((injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-6.7)), bvec2(false, false)))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(_GLF_IDENTITY(-6.7, clamp(-6.7, -6.7, -6.7)))), bvec2(false, false)))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-82.80)), vec2(_GLF_FUZZED(-6762.0378), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((injectionSwitch) * mat2(1.0))[1]) / 1.0)), bvec2(false, true))), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-6.7)), bvec2(false, false)))))).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-5827.6619, 91.53, -1.4, -6124.4727)) : mat2(1.0))), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-6.7)), bvec2(false, false)))))).y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, true), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), false, true)))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), false, true)))), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), false, true)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-43.73)), float(injectionSwitch.y), bool(true))), true))), false, true)))), true)))), true))))), false, false))))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), false, false))))), true, true))))))))))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(-8987.2484)), bool(false))), injectionSwitch.x)) < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))) || false))) || false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), (int(_GLF_IDENTITY(1, (1) - 0))) >> 0)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)) && true)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), true && (! (false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (false), true && (! (false))), true), false))))))), (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(-15907) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x) ^ 0u)), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x) ^ 0u)), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x) ^ 0u)), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x) ^ 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), max(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)), uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, uint(uvec4(7u, (0u | 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uvec3(7u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((subgroup_size ^ uvec3(23707u, 130007u, 120016u))) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))).x) ^ 0u))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))) || false)))))))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_DEAD(false)) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), ! (! (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), true, true, true)), (bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), true, true, true))) || false))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), true, true, true)), (bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), true, true, true))) || false))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) || false)))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (true))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0))))))))) || false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) && true, ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) && true) || false)))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.5)), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             continue;
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    return;
   for(int _injected_loop_counter = (-88067 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(116031u, 76463u, 134670u)))).x)), min(((_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(116031u, 76463u, 134670u)))).x)), _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(116031u, 76463u, 134670u)))).x)), ~ (~ (((_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(116031u, 76463u, 134670u)))).x))))))) >> 0u), (gl_WorkGroupSize.x))) + 0u)));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-87571) : _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, ! (! (false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.2)), bool(false))))), 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) + 0.0), sin(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(0.0, 1.0, 1.0))), 0.0, log(1.0))), mix(float(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.2)), bool(false))))), 0.0, exp(0.0), sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(0.0, 1.0, 1.0))), 0.0, log(1.0))), (float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0)))))) - vec2(0.0, 0.0))).y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.2)), _GLF_IDENTITY(bool(false), true && (bool(false))))))), 0.0, exp(0.0), sin(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, sqrt(0.0)), vec3(0.0, 1.0, 1.0))), 0.0, log(1.0)))) - 0.0)), float(_GLF_FUZZED(32.41)), bool(false))))))))
        barrier();
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), (! (_injected_loop_counter != 1)) && true)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, false || (true)), true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
      continue;
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)), true))) || false)))
      barrier();
    }
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(uvec2(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)), 1u))), gl_WorkGroupID.x, _GLF_struct_0(bvec4(true)), mat3x4(1.0)), 1u, mat2x3(1.0), ivec3(1), _GLF_struct_4(vec4(1.0), _GLF_struct_2(1u, ivec4(1), mat3x2(1.0), vec4(1.0), vec2(1.0), mat4x3(1.0), mat4x3(1.0)), mat4x2(1.0), vec4(1.0), _GLF_struct_3(mat4x3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), mat4x2(_GLF_IDENTITY(1.0, 0.0 + (1.0))), vec4(1.0)));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_5._f0.workgroup_id, min(workgroup_size * _GLF_struct_replacement_5._f0.workgroup_id, workgroup_size * _GLF_struct_replacement_5._f0.workgroup_id));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec2(false, true))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), true, false, true)))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), true, false, true))))))))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))))) && true)))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), true && (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)), 1, _GLF_IDENTITY(1, (1) | (1)))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & (-66759 - -26315), 1 * (0 & (-66759 - -26315))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.7)), bool(false)), clamp(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.7)), bool(false)), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.7)), bool(false)), _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.7)), bool(false)), float(float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.7)), bool(false)))))))) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, true && (false))) || false, false, true, false)), bool(bvec3(bool(bvec4((_GLF_IDENTITY(false, true && (false))) || false, false, true, false)), true, true))))), true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (-1701.5737) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-635.855)))), 964.835))) : subgroup_id, (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (true ? -1701.5737 : _GLF_FUZZED(-1.3))), 964.835))) : subgroup_id) | (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, -1701.5737, 964.835))) : subgroup_id)))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (-1701.5737) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-635.855)))), 964.835))) : subgroup_id, (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (true ? -1701.5737 : _GLF_FUZZED(-1.3))), 964.835))) : subgroup_id) | (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, -1701.5737, 964.835))) : subgroup_id)))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (-1701.5737) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-635.855)))), 964.835))) : subgroup_id, (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (true ? -1701.5737 : _GLF_FUZZED(-1.3))), 964.835))) : subgroup_id) | (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, -1701.5737, 964.835))) : subgroup_id)))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (-1701.5737) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-635.855)))), 964.835))) : subgroup_id, (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, _GLF_IDENTITY(-1701.5737, (true ? -1701.5737 : _GLF_FUZZED(-1.3))), 964.835))) : subgroup_id) | (false ? _GLF_FUZZED(packSnorm4x8(vec4(184.960, 757.168, -1701.5737, 964.835))) : subgroup_id)))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))) + 0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, false)))))))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) ^ 0)), 0 + (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) ^ 0)), int(ivec3(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) ^ 0)), 1, 0)))))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(5), int(5))), int(ivec4((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) >> _GLF_IDENTITY(int(0), int(0))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) >> _GLF_IDENTITY(int(0), int(0)))) | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) >> _GLF_IDENTITY(int(0), int(0))))) << _GLF_IDENTITY(int(5), int(5))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) + 0u)))), (_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, 0u | (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], (buf[virtual_gid]) + 0u))))) ^ (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))), 4, 64, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(ivec3(0, 1, 0))), 0)))), 0)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) - 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(560.949) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6621.3946)), bool(false)))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, (true) && true)), bvec2(bvec3(bvec2(false, true), true)))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) * 1)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(399.946, -62.83)))).x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.9) : 0.0)), log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(54513) : 64)), 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(382.920)), float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.x), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.x), bool(true)), max(mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(7.9)), float(injectionSwitch.x), bool(true))))) - 0.0)), bool(true)))) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(fract(length(vec3(-6.2, 6.2, 2.4)))))) > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), min(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), mat2(1.0) * (vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), min(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), mat2(1.0) * (vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)))))), max(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), min(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), mat2(1.0) * (vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)))))), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), min(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), mat2(1.0) * (vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)))))))), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), min(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)), mat2(1.0) * (vec2((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(7.8)))), abs(0.0)))))))))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.7)), bool(_GLF_IDENTITY(false, bool(bool(false)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         continue;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, false || ((_GLF_IDENTITY(false, ! (! (false)))) || false))) || false))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))) + 0.0)) / 1.0), injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           break;
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.8) : 0.0))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read)), 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))) || false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  return;
}
