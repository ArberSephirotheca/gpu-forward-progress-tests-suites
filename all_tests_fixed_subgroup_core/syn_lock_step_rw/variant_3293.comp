#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.1), _GLF_FUZZED((+ 66.66))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), injectionSwitch)).y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.2) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 do
  {
   _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY(uvec2(0u, 0u) | (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base), (uvec2(0u, 0u) | (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base)) << uvec2(0u, 0u)))) ^ uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), 0u));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), false || (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-18.52) : injectionSwitch.x)) > injectionSwitch.y))))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, log(1.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))), false, true))), true)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (0 ^ 0)) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), false || ((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), false, true, false)), _GLF_IDENTITY(true && (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), false, true, false))), (_GLF_IDENTITY(true && (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), false, true, false))), (true && (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), false, true, false)))) || false)) && true))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.y = _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false, _GLF_IDENTITY(false, false || (false)))))));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), false, false), false))), true))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           barrier();
          }
        }
       barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) / 1)) + 0) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), _GLF_IDENTITY(int(ivec2((0), 0)), (int(ivec2((0), 0))) ^ 0)))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid, (false ? _GLF_FUZZED(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid) : _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid) | uvec4(0u, 0u, 0u, 0u)))).y;
  }
uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0))), clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0))), (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0)))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0))), 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 0 ^ ((0) | 0))))))), 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(false)))))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) && true))))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))), max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) && true))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))), 1 * (_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))), ~ (_GLF_IDENTITY(~ ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))), clamp(~ ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))), ~ ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))), ~ ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))))))))))) < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), min(int(3), int(3)))) / 1))) >> _GLF_IDENTITY(int(3), int(3)), 0 ^ ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))) >> _GLF_IDENTITY(int(3), int(3))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), min(int(3), int(3)))) / 1))) >> _GLF_IDENTITY(int(3), int(3)), 0 ^ ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))) >> _GLF_IDENTITY(int(3), int(3)))))) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (_injected_loop_counter ++)))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(86.29, 2598.3339))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, max(7, 7)), (_GLF_IDENTITY(7, max(7, 7))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(7, max(7, 7)), (_GLF_IDENTITY(7, max(7, 7))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(7, max(7, 7)), (_GLF_IDENTITY(7, max(7, 7))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(7))), min((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, 0 | (7)), 7))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), _GLF_IDENTITY((_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), (_GLF_IDENTITY((0), 0 ^ ((0)))) ^ (0 >> _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), 0 | (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)))), _GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), (_GLF_IDENTITY((0), 0 ^ ((0)))) ^ (0 >> _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), 0 | (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)))), _GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), 0, 0), max(ivec3((_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), (_GLF_IDENTITY((0), 0 ^ ((0)))) ^ (0 >> _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), 0 | (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)))), _GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), 0, 0), ivec3((_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), (_GLF_IDENTITY((0), 0 ^ ((0)))) ^ (0 >> _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)), 0 | (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7)))), _GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), 0, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / abs(1.0)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), 0 + (_GLF_IDENTITY((~ (int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((~ (int(1)))), (_GLF_IDENTITY(int((~ (int(1)))), (int((~ (int(1))))) ^ 0)) | (int((_GLF_IDENTITY(~ (int(1)), min(~ (int(1)), ~ (int(1))))))))), (int(_GLF_IDENTITY(int((~ (int(1)))), _GLF_IDENTITY((_GLF_IDENTITY(int((~ (int(1)))), (int((~ (int(1))))) ^ 0)) | (int((~ (int(1))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(int((~ (int(1)))), (int((~ (int(1))))) ^ 0)) | (int((~ (int(1))))), ~ (~ ((_GLF_IDENTITY(int((~ (int(1)))), (int((~ (int(1))))) ^ 0)) | (int((~ (int(1))))))))))))) + 0)))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))))), false, true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(654.298, mix(float(_GLF_FUZZED(6.9)), float(654.298), bool(true))))), bool(false)))) - 0.0) < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y)), true, false, true))))))) && true)))
            {
             GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y = workgroup_base;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (0 & -67521) | (int(1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, log(1.0), 1.0, sin(0.0), 0.0, 0.0, 1.0))).y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 59931)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(vec2(-3.4, 5086.6190)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-3.4, max(-3.4, -3.4)), 5086.6190)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(vec2(-3.4, 5086.6190)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x * GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y, clamp(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y) >> 0u), _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y) | (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y, uint(uvec4(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y, 0u, 0u, 1u))))))) + GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x * GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z + subgroup_local_id, (true ? GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.y + _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x * GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x * GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z) | 0u) + subgroup_local_id : _GLF_FUZZED(workgroup_size)))) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.w = _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u);
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy, (_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> _GLF_IDENTITY(uvec2(1u), uvec2(1u))))) | (GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy)).y + GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.xy.x * GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)) % GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z, min((subgroup_local_id + 1) % GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z, (subgroup_local_id + 1) % GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.z)));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(false, (false) && true)))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) ? 0 : _GLF_FUZZED(-33947))), 0))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 + (0))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), 1 * (int(5)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
        {
        }
       else
        {
         GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.z = next_virtual_gid;
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.33)), float(injectionSwitch.y), bool(true)))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))))) || false)), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.w], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.x = read;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidnum_workgroup.z], uint(1), 4, 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(-2.8) : injectionSwitch.x, _GLF_IDENTITY(float(vec2(false ? _GLF_FUZZED(-2.8) : injectionSwitch.x, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(675.231)), bool(false))))))), max(float(vec2(false ? _GLF_FUZZED(-2.8) : injectionSwitch.x, 1.0)), float(vec2(false ? _GLF_FUZZED(-2.8) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 1.0)))))))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-48.72)), float(injectionSwitch.x), bool(true)))), float(_GLF_FUZZED((32.69 + -6077.3952))), bool(false))) : _GLF_FUZZED(length(injectionSwitch)))) > injectionSwitch.y))));
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 9517)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(44.74))), injectionSwitch.x))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) || false))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(checker[GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.w], GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_11readsubgroup_idsubgroup_sizevirtual_gid.x, 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
