#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))) || false))))), false || (! (_GLF_IDENTITY(false, false || (false))))))))))), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), false || (! (_GLF_IDENTITY(false, false || (false))))))))))), (_GLF_DEAD(false)) && true), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)))))))))))))))))))))), (_GLF_DEAD(false)) && true), true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, false || (false))))), ! (! (! (! (! (_GLF_IDENTITY(false, false || (false)))))))))))) || false))))), false || (! (_GLF_IDENTITY(false, false || (false))))))))))), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), false || (! (_GLF_IDENTITY(false, false || (false))))))))))), (_GLF_DEAD(false)) && true), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false || (false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false))) && true)), false), bvec3(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false || (false), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (! ((false)))))))), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)), bvec3(bvec4(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)), true))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)), bvec3(bvec4(bvec3(bvec3(false || (false), _GLF_IDENTITY(false, ! (! (false))), false)), true))), true)))))))))))))))))))))))))), (_GLF_DEAD(false)) && true), true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))).x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))).x, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))).x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))), mix(vec2(_GLF_FUZZED((7.1 / 7.1)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))))[1], mix(float(_GLF_FUZZED(vec2(-39.17, 2.1).s)), float((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))))[1]), bool(true)))), vec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))))[0], _GLF_FUZZED(0.9)), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1354.9442, -3987.0594)))).x)) > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))) && true))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              break;
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))))) - 0.0), 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-82892))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))))) - 0.0), 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-82892))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), _GLF_FUZZED(4.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-8.8)), bool(false))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))))) - 0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(atanh(-5.4)) : 1.0)), 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(-82892, ~ (~ (-82892)))))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x) - sqrt(0.0)))) > injectionSwitch.y)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) || false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec3(bool(bvec3(false, false, false)), true, true))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))))))))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), false, true, true)), ! (! (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), false, true, true))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), false, true, true)), ! (! (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), false, true, true))))))), false, false, false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), true, false, false)))))))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), false)))))
            barrier();
           break;
          }
         break;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (1 ^ 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x : _GLF_FUZZED(-5.7))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (false ? _GLF_FUZZED(vec3(802.321, -2.2, -6.4)) : vec3(injectionSwitch, 1.0))))), max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (false ? _GLF_FUZZED(vec3(802.321, -2.2, -6.4)) : vec3(injectionSwitch, 1.0))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (false ? _GLF_FUZZED(vec3(802.321, -2.2, -6.4)) : vec3(injectionSwitch, 1.0))))))).y, (injectionSwitch.y) / 1.0)))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), bool(true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))))), max(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), bool(true)), (false ? _GLF_FUZZED(279.434) : mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((0.0), ((0.0)) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))))))), bool(true))))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8277.4691) : 0.0)), min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), bool(true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))))), min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(5.5, clamp(5.5, _GLF_IDENTITY(5.5, float(mat2x4(_GLF_IDENTITY(5.5, max(5.5, 5.5)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(5.5, max(5.5, 5.5)))))), float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), bool(true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(4054.6501, clamp(4054.6501, 4054.6501, _GLF_IDENTITY(4054.6501, (4054.6501) / 1.0)))))))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), (_GLF_IDENTITY(0.0, 1.0 * (0.0))) - 0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(mat2x3(-406.871, -6.9, -4264.7397, 11.63, 1.4, 2237.4692)) : mat2x3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))), bool(true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))))))))), injectionSwitch.x)), 0 | (int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.7)), float(_GLF_IDENTITY(0.0, (0.0) * 1.0)), bool(true))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.5)), float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 0.0, 1.0))) * (0.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(smoothstep(-97.45, 41.06, -8810.3745)) : _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 1.0, sqrt(0.0), 1.0, 1.0), (mat2x3(0.0, 1.0, 1.0, sqrt(0.0), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (true ? 0.0 : _GLF_FUZZED(4054.6501))), max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) * 1.0) : _GLF_FUZZED(4054.6501))) : _GLF_IDENTITY(_GLF_FUZZED(701.861), min(_GLF_FUZZED(701.861), _GLF_IDENTITY(_GLF_FUZZED(701.861), (_GLF_FUZZED(701.861)) / 1.0)))), ((true ? _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) * 1.0) : _GLF_FUZZED(4054.6501))) : _GLF_IDENTITY(_GLF_FUZZED(701.861), min(_GLF_FUZZED(701.861), _GLF_IDENTITY(_GLF_FUZZED(701.861), (_GLF_FUZZED(701.861)) / 1.0))))) + 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))), 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4054.6501))))), tan(0.0), 0.0, 1.0, 0.0, 0.0)))) * 1.0))))), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(7), int(7)))), 1 * (_GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))) ^ 0), int(7))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! _GLF_IDENTITY((! ((false))), ((! ((false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))) || false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), _GLF_IDENTITY(((_GLF_IDENTITY(! (false), (! (false)) || false))) && true, (_GLF_IDENTITY(((_GLF_IDENTITY(! (false), (! (false)) || false))) && true, bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(! (false), (! (false)) || false))) && true), (bool(((_GLF_IDENTITY(! (false), (! (false)) || false))) && true)) || false)))) || false)))), true, false, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec4(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(false))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), false, true)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), bool(bvec2(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), false))))), bool(bvec2((! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), bool(bvec2(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(65.83, -7524.7885)))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x))))) > injectionSwitch.y))))))))) && _GLF_IDENTITY(true, (true) || false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false))))))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), (false ? _GLF_FUZZED(93650u) : _GLF_IDENTITY(min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (~ (gl_NumWorkGroups))))).x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), max(_GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(_GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY((bool(bool(_GLF_WRAPPED_IF_FALSE(false)))) || false, (_GLF_IDENTITY((bool(bool(_GLF_WRAPPED_IF_FALSE(false)))) || false, ((bool(bool(_GLF_WRAPPED_IF_FALSE(false)))) || false) && true)) && true))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec2((! (_GLF_DEAD(false))), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_DEAD(false))))))))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> (0 | 0)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))) || false)))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), ! _GLF_IDENTITY((! ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0))))).x > injectionSwitch.y)))))), true && ((! ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0))))).x > injectionSwitch.y))))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (true ? gl_WorkGroupID.x : _GLF_FUZZED(60033u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(7.3) : injectionSwitch.x))) + 0.0) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) * mat2(1.0), min((mat2(1.0) * (injectionSwitch)) * mat2(1.0), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))))).y))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 & 58570); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false))))), (_GLF_IDENTITY(false, (false) || false)) || false)), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec2((false) || false, true)), ! (! (bool(bvec2((false) || false, true)))))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (bool(bvec4(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false))))))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 1, 0))), _injected_loop_counter)) != (1 & _GLF_IDENTITY(1, (1) | (1)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))) ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! (! (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) / 1))), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + int(_GLF_ZERO(0.0, injectionSwitch.x))))) != 0))) && true))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) | 0, _GLF_IDENTITY(((_injected_loop_counter --) | 0) - 0, (((_injected_loop_counter --) | 0) - 0) - 0))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec4(bool(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, false))))), false, true, true)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), true && ((false))), _GLF_IDENTITY((! (false)), ! (! ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), (bool(bool(! (false)))) || false)))))) || false)), (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), true && ((false))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))) || false, ((! (_GLF_IDENTITY(false, true && (false)))) || false) && true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch.x)), (_GLF_IDENTITY(false ? _GLF_FUZZED((_GLF_IDENTITY(+ -43.19, (false ? _GLF_FUZZED(76.12) : + -43.19)))) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-563.700)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (true ? false ? _GLF_FUZZED((_GLF_IDENTITY(+ -43.19, (false ? _GLF_FUZZED(76.12) : + -43.19)))) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-563.700)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) : _GLF_FUZZED(-659.051))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1])).x)), injectionSwitch.x)) > injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec2(_GLF_DEAD(false), false))))))
          barrier();
         continue;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, int(ivec2(0, 0))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) | 0))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-32849) : _injected_loop_counter)) > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(ceil(6696.2731)) : injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))))))) || false), _GLF_IDENTITY(true, bool(bvec3(true, false, true))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-32849) : _injected_loop_counter)) > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-32849) : _injected_loop_counter)) > 0, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-4214.0962, -5.7)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) || false))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) && true)))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ (0 ^ _GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))), 1)), 1))))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true)) && true)))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), min(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, max(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(workgroup_base, 0u, (uint(_GLF_ONE(1.0, injectionSwitch.y)) & 1u), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-691.878)))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 0.0))))))))), (uint(uvec4(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, (uint(_GLF_ONE(1.0, injectionSwitch.y)) & 1u), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x))))) ^ 0u)) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) % subgroup_size, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, ((1) - 0) | 0))) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(37.56)), bool(false))))))))), ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uvec4(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | 0) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1u, 1u, 1u)))) << 0u))) | 0u) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-5.3)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u)), 0u ^ (min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-5.3)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u))))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))) | (subgroup_size))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u)), clamp(0u, 0u, 0u)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u)) | 0u), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u)) | 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u)) | 0u), ~ (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, (1) - 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u)) | 0u)))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), min((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) / 1u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))) | (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 & 93969) | ((_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ _GLF_IDENTITY(0u, (0u) - (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))) | (subgroup_size)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(subgroup_local_id))), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(1, (1) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))) ^ 0u))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))) | (subgroup_size))) ^ 0u)) | 0u)) ^ 0u)) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) >> 0u)))));
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(4, 0 + (4))), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(4, 0 + (4))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(4, 0 + (4))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(4, 0 + (4))), 0 + (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(4, 0 + (4)))))))), 4)), 64, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 | (0))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(0, 0 | (0))), 0 | ((_GLF_IDENTITY(0, 0 | (0))))))) | (_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))))), max(0, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ ((0)), clamp(~ ((0)), ~ ((0)), ~ ((0))))))) / 1)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-50678))), _GLF_IDENTITY(1, ~ (~ (1)))))), ~ (~ ((1)))) | 0, ((1) | _GLF_IDENTITY(0, clamp(0, 0, 0))) - _GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : uint(1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : uint(1)), max((false ? _GLF_FUZZED(workgroup_base) : uint(1)), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : uint(1)), 0u | (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : uint(1)), _GLF_IDENTITY(uint(uint((false ? _GLF_FUZZED(workgroup_base) : uint(1)))), (uint(uint((false ? _GLF_FUZZED(workgroup_base) : uint(1))))) + (0u ^ 0u)))))))) / 1u)), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) / 1u), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u)))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) - 0u))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(0u, ~ (~ (0u)))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) - 0u))))))))), (uvec2(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) / 1u), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u)))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) - 0u))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(0u, ~ (~ (0u)))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) - 0u)))))))))) << uvec2(0u, 0u)) ^ _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) - 0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), max(_GLF_FUZZED(workgroup_base), _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), _GLF_IDENTITY((_GLF_FUZZED(workgroup_base)) >> 0u, uint(uint((_GLF_FUZZED(workgroup_base)) >> 0u)))))) : uint(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) | (1)))), (~ (~ (_GLF_IDENTITY(1, (1) | (1))))) >> 0))))), 1u)), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1), _GLF_IDENTITY(uint(1), (uint(1)) << 0u))))), 1u)))), (false ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u))))) ^ uvec2(0u, 0u)) : _GLF_FUZZED(uvec2(187195u, 144089u)))))), (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) | (_GLF_FUZZED(workgroup_base))) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (false ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) << 0u), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) << 0u, max(_GLF_IDENTITY((uint(1)) << 0u, clamp((uint(1)) << 0u, (uint(1)) << 0u, (uint(1)) << 0u)), (uint(1)) << 0u))), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u))))) - uvec2(0u, 0u))))) * uvec2(1u, 1u)))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (1u ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))), 1.0, 0.0, 0.0, sqrt(0.0), exp(0.0), 0.0)), mix(float(_GLF_FUZZED(246.511)), float(float(mat4x3(0.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))), 1.0, 0.0, 0.0, sqrt(0.0), exp(0.0), 0.0))), bool(true)))), injectionSwitch.x))) * (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))) : uint(1))), _GLF_IDENTITY(1u, max(1u, 1u)))), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(uaddCarry(workgroup_base, atomicXor(workgroup_id, subgroup_local_id), subgroup_local_id)))))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec4(uint(1), 1u, 1u, 1u))), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) * 1)), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (1u ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))) * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-37.92)), bool(false))))))) * (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))) : uint(1))), _GLF_IDENTITY(1u, max(1u, 1u)))), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (~ (1))), 1))))), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, 0u | (1u)) : _GLF_FUZZED(uaddCarry(workgroup_base, atomicXor(workgroup_id, subgroup_local_id), subgroup_local_id)))))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(43.20), _GLF_FUZZED(-5.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x < injectionSwitch.y))) ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u), min(uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u), uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))))))))) - uvec2(0u, 0u)))) ^ uvec2(0u, 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1), _GLF_IDENTITY(uint(1), (uint(1)) << 0u))))), 1u)))), (false ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u))))) ^ uvec2(0u, 0u)) : _GLF_FUZZED(uvec2(187195u, 144089u)))))), (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) | (_GLF_FUZZED(workgroup_base))) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (false ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) << 0u), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))), (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) << 0u, max(_GLF_IDENTITY((uint(1)) << 0u, clamp((uint(1)) << 0u, (uint(1)) << 0u, (uint(1)) << 0u)), (uint(1)) << 0u))), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u))))) - uvec2(0u, 0u))))) * uvec2(1u, 1u)))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (1u ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))), 1.0, 0.0, 0.0, sqrt(0.0), exp(0.0), 0.0)), mix(float(_GLF_FUZZED(246.511)), float(float(mat4x3(0.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))), 1.0, 0.0, 0.0, sqrt(0.0), exp(0.0), 0.0))), bool(true)))), injectionSwitch.x))) * (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))) : uint(1))), _GLF_IDENTITY(1u, max(1u, 1u)))), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(uaddCarry(workgroup_base, atomicXor(workgroup_id, subgroup_local_id), subgroup_local_id)))))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec4(uint(1), 1u, 1u, 1u))), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) * 1)), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (1u ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))) * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-37.92)), bool(false))))))) * (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))) : uint(1))), _GLF_IDENTITY(1u, max(1u, 1u)))), uvec2(1u, 1u) * ((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (~ (1))), 1))))), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, 0u | (1u)) : _GLF_FUZZED(uaddCarry(workgroup_base, atomicXor(workgroup_id, subgroup_local_id), subgroup_local_id)))))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(43.20), _GLF_FUZZED(-5.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x < injectionSwitch.y))) ? _GLF_FUZZED(uvec2(150397u, 154163u)) : _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)), uvec2(1u, 1u) * ((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u), min(uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u), uvec2(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 1u)))))))))) - uvec2(0u, 0u)))) ^ uvec2(0u, 0u)))))))), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7344.5712), _GLF_FUZZED(-99.96)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), clamp(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0))))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), clamp(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, float(mat3x4(1.0, round(length(normalize(1.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), clamp(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), sqrt(1.0), 1.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), clamp(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0), 1.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(1.0), 1.0))))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true)), false || (bool(bvec4(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)), (bool(bvec4(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))) && true)))), bool(bool(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.0) : injectionSwitch.x)) > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))), true, false, false))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(26337))), 64, _GLF_IDENTITY(4, (4) / 1));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
}
