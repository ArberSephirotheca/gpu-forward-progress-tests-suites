#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ (44.84 * 53.48)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED((false ? ivec3(-71144, -2418, -82145)[1] : 5303)) : 7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))) && true))))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), bool(bvec3(bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), true, false)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
                    break;
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(83410u)), _GLF_FUZZED((541.689 - -5.1))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
                  break;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), ~ (~ (0 << _GLF_IDENTITY(int(4), int(4))))), 0 << _GLF_IDENTITY(int(4), int(4)), 0 << _GLF_IDENTITY(int(4), int(4)))), 0 << _GLF_IDENTITY(int(4), int(4))))) ^ _GLF_IDENTITY(1, (1) | (1))), ! (! (_injected_loop_counter < (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), ((0 << _GLF_IDENTITY(int(4), int(4)))) - 0) ^ _GLF_IDENTITY(1, (1) | (1))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(false, (false) || false), true))) && (false))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(20.98) : injectionSwitch.x)) > injectionSwitch.y))))
              continue;
             return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) - 0)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7577.1392), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.8)), bvec2(true, false))).y))))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false))))) || false))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) / 1))) | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    break;
                  }
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ((0 >> _GLF_IDENTITY(int(5), int(5)))) / 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(-52384)))) + 0))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
          break;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (0 & -86021); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter ++)
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x, mix(float(_GLF_FUZZED(-1.7)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x), bool(true))) > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.1) : injectionSwitch.y))) / 1.0)))))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), false || (_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(13.24)), float(injectionSwitch.y), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(13.24)), float(injectionSwitch.y), bool(true)), clamp(mix(float(_GLF_FUZZED(13.24)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(13.24)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(13.24)), float(injectionSwitch.y), bool(true))))) / 1.0))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))) && true), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), true && (true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))) || false))))))))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          break;
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-13.12, -4885.2142)))).x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-7.1)), _GLF_FUZZED(7836.8804)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) || false)))).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), false || (bool(bvec4(false, true, false, true)))))))
          return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false, false, false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 << _GLF_IDENTITY(int(1), int(1))) ^ 0) | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), false, false)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), false, false))))) && true)))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false)), true))))))));
                }
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || false)))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7991.5793), _GLF_FUZZED(7.8)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        break;
      }
     break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true))))), true, true)), false || (bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true))))), true, true)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       break;
                      }
                     return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           return;
                          }
                         do
                          {
                           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
                          return;
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, false))))))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
                        return;
                       break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                             return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))) || (! (false))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(! (false), false || (! (false))))), false, true)), (bool(bvec3(! (! (_GLF_IDENTITY(! (false), false || (! (false))))), false, true))) && true)), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (false))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(! (false), false || (! (false))))), false, true)), (bool(bvec3(! (! (_GLF_IDENTITY(! (false), false || (! (false))))), false, true))) && true))))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       do
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1))) - 0, (1 | 1) * ((_GLF_IDENTITY(1, clamp(1, 1, 1))) - 0))), _GLF_IDENTITY(1, int(ivec3(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), (_GLF_IDENTITY(0, 0 ^ (0))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), (_GLF_IDENTITY(0, 0 ^ (0))) << 0)))))), 1))); _injected_loop_counter ++)
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 return;
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, false || (true)), true))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             return;
                             if(_GLF_DEAD(false))
                              break;
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true)))), bool(bvec2((_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true)))), false)))))), (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _injected_loop_counter)) != (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(mix(float(_GLF_FUZZED(9643.8707)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)), (false ? _GLF_FUZZED(_GLF_IDENTITY(3.1, max(_GLF_IDENTITY(3.1, max(_GLF_IDENTITY(3.1, clamp(3.1, 3.1, 3.1)), _GLF_IDENTITY(3.1, max(3.1, 3.1)))), _GLF_IDENTITY(3.1, (_GLF_IDENTITY(3.1, (_GLF_IDENTITY(3.1, min(_GLF_IDENTITY(3.1, min(3.1, 3.1)), _GLF_IDENTITY(3.1, (false ? _GLF_FUZZED(25.33) : _GLF_IDENTITY(3.1, min(3.1, 3.1))))))) * 1.0)) - 0.0)))) : mix(float(_GLF_FUZZED(9643.8707)), _GLF_IDENTITY(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), mix(float(_GLF_FUZZED(-1.2)), float(float(_GLF_ZERO(0.0, injectionSwitch.x))), bool(true))), bool(true)))))) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true)))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), (_GLF_IDENTITY(int(5), 0 ^ (int(5)))) | (_GLF_IDENTITY(int(5), 0 ^ (int(5)))))), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (int(5)))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(_GLF_IDENTITY(5, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (5)))))), (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))), _GLF_IDENTITY(bool(bool(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), (_GLF_IDENTITY(int(5), 0 ^ (int(5)))) | (_GLF_IDENTITY(int(5), 0 ^ (int(5)))))), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (int(5)))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), clamp(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), (_GLF_IDENTITY(int(5), 0 ^ (int(5)))) - 0), _GLF_IDENTITY(int(5), 0 ^ (int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), ~ (~ (_GLF_IDENTITY(int(5), 0 ^ (int(5)))))), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), clamp(int(_GLF_IDENTITY(5, min(5, 5))), int(_GLF_IDENTITY(5, min(5, 5))), int(_GLF_IDENTITY(5, min(5, 5))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))))), true && (bool(bool(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), (_GLF_IDENTITY(int(5), 0 ^ (int(5)))) | (_GLF_IDENTITY(int(5), 0 ^ (int(5)))))), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (int(5)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(0 ^ (int(5)), (0 ^ (int(5))) | (_GLF_IDENTITY(0 ^ (int(5)), _GLF_IDENTITY(int(ivec3(0 ^ (int(5)), 0, 0)), (int(ivec3(0 ^ (int(5)), 0, 0))) / 1))))))))))))))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), clamp(_GLF_IDENTITY(int(2), 0 ^ (int(2))), int(2), int(2)))))); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(false))
                                return;
                               return;
                              }
                             if(_GLF_DEAD(false))
                              break;
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              break;
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     break;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(vec3(-160.058, 1979.0620, -5074.7600))) : injectionSwitch)).y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), true && (bool(_GLF_IDENTITY(false, (false) && true))))))), ((_GLF_IDENTITY(false, (false) && true))) && true)), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false))) && true)))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), false || (bool(bool(_GLF_DEAD(false)))))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (! (false))), true, false)))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size))) | 0u, ((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size))) | 0u) | 0u)) : _GLF_FUZZED(192127u))), _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size)), _GLF_IDENTITY(1u, (104467u & 0u) + (1u)) * (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u), 0u | (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))))), subgroup_size)))), uint(_GLF_IDENTITY(uint(uint((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size))))), (uint(uint((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), (_GLF_IDENTITY(min(subgroup_size, subgroup_size), 0u | (min(subgroup_size, subgroup_size)))) >> 0u))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size)))))) ^ 0u)))), 0u | (uint(_GLF_IDENTITY(uint((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), ((~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), 0u ^ ((~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))))) - (0u | 0u)) - 0u))), subgroup_size)))), uint(_GLF_IDENTITY(uint(uint((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size))))), (uint(uint((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) - 0u))), subgroup_size)))))) ^ 0u))))))) | 0u) : _GLF_FUZZED(192127u))), _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size)))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u)))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 0u)), 0u ^ (_GLF_IDENTITY(uint(uvec2(subgroup_local_id, 0u)), (uint(uvec2(subgroup_local_id, 0u))) / 1u))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) * uvec2(1u, 1u))))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))))))))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u))))))))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))))))))) | (_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))) - 0u)), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), uint(uvec3((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))) - 0u)), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_local_id)), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), 1u, 1u)))))), 1u, 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), _GLF_IDENTITY(bool(false), false || (bool(false)))))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY(max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))), clamp(max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))))), uint(uvec4(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), (_GLF_IDENTITY(uint(subgroup_local_id), ~ (~ (uint(subgroup_local_id))))) << 0u))), uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) / 1u)) / 1u)) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(virtual_gid))))))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)))) << 0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u))), clamp(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), uint(uvec2(subgroup_local_id, 0u)))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))))))))))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), 0u, 0u, (127718u & 0u))), min(uint(uvec4((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), 0u, 0u, (127718u & 0u))), uint(uvec4((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), 0u, 0u, (127718u & 0u)))))), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id))) - (0u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | (uint(5u)))))), 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))), 0u ^ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))), 1u * (uint(uvec2(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), clamp((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), 1u, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(104938u, 23455u, 78836u)) : uvec3((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), 1u, 1u))))), 0u | ((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))))))))))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, 0u + (0u)))))))), max((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))), min((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 0u)), (true ? uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))) : _GLF_FUZZED(uint(5.0)))))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u)))))))))))))) + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter)))), int(ivec4(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))), (true ? _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(-21494)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0)), int(int((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(min(int(2), int(2)), _GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))) : _GLF_FUZZED(int(workgroup_size)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(2) : _GLF_FUZZED(_injected_loop_counter))), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0)))))))))), (_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(ivec4(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))), (true ? _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(-21494)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), clamp(int(2), int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(ivec2(2, 1))), _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2)))), 1)))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0)), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), clamp(int(2), int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(ivec2(2, 1))), _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2)))), 1)))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0))) / 1), int(int((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) / 1)), clamp(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(min(int(2), int(2)), (_GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), min(int(2), int(2))))) - (0 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))) : _GLF_FUZZED(int(workgroup_size)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(2) : _GLF_FUZZED(_injected_loop_counter))), int(2)), _GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1)), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1)), (int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1))) ^ 0)) | (int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1))))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(_GLF_IDENTITY(2, int(int(2))))), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0))))))), (int(ivec4(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))), (true ? _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(-21494)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), clamp(int(2), int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(ivec2(2, 1))), _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2)))), 1)))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0)), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), clamp(int(2), int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(ivec2(2, 1))), _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2)))), 1)))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0))) / 1), int(int((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) / 1)), clamp(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) - 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(min(int(2), int(2)), (_GLF_IDENTITY(min(int(2), int(2)), min(min(int(2), int(2)), min(int(2), int(2))))) - (0 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))) : _GLF_FUZZED(int(workgroup_size)))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(2) : _GLF_FUZZED(_injected_loop_counter))), int(2)), _GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1)), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1)), (int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1))) ^ 0)) | (int(ivec2(_GLF_IDENTITY(min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))), (min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1))))) ^ 0), 1))))))))), ~ (~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(min(int(2), int(_GLF_IDENTITY(2, int(int(2))))), min(min(int(2), int(2)), _GLF_IDENTITY(min(int(2), int(2)), int(ivec2(min(int(2), int(2)), 1)))))))))))) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) + 0)))))))) | 0))))) + 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) / vec2(1.0, 1.0))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false)))))
          return;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              return;
             return;
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), (64) / 1), 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, false || ((bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
        return;
       return;
      }
    }
   else
    {
    }
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         for(int _injected_loop_counter = (14909 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), false))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
