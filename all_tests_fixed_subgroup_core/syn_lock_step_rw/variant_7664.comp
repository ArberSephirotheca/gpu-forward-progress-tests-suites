#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat4 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_2 {
 float _f0;
 bvec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 float _f1;
 vec3 _f2;
 uint read;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 _GLF_struct_0 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 vec4 _f2;
 _GLF_struct_5 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))) | 0)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false, false)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), bool(bvec4(bool(bvec3(true, false, false)), true, _GLF_IDENTITY(false, false || (false)), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))) : injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, _GLF_IDENTITY(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), (false ? _GLF_FUZZED(6080.1382) : _GLF_IDENTITY(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), min(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), min(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))))) / 1.0, mix(float(_GLF_FUZZED(-94.61)), float((false ? _GLF_FUZZED(-4.5) : injectionSwitch.x) / 1.0), bool(true))))), float(_GLF_FUZZED(1.1)), bool(false))))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))) : injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, _GLF_IDENTITY(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), (false ? _GLF_FUZZED(6080.1382) : _GLF_IDENTITY(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), min(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), min(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))))) / 1.0, mix(float(_GLF_FUZZED(-94.61)), float((false ? _GLF_FUZZED(-4.5) : injectionSwitch.x) / 1.0), bool(true))))), float(_GLF_FUZZED(1.1)), bool(false))))) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))), clamp(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))), (_GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5)))) / 1.0), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))), clamp(_GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))), _GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))), _GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))))), _GLF_FUZZED(_GLF_IDENTITY(-4.5, clamp(-4.5, -4.5, -4.5))))) : injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, _GLF_IDENTITY(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), (false ? _GLF_FUZZED(6080.1382) : _GLF_IDENTITY(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), min(max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_FUZZED(-4.5) : injectionSwitch.x), max(false ? _GLF_FUZZED(-4.5) : injectionSwitch.x, false ? _GLF_IDENTITY(_GLF_FUZZED(-4.5), max(_GLF_FUZZED(-4.5), _GLF_IDENTITY(_GLF_FUZZED(-4.5), float(_GLF_IDENTITY(mat2x4(_GLF_FUZZED(-4.5), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, cos(0.0)), mat2x4(mat3x4(mat2x4(_GLF_FUZZED(-4.5), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, cos(0.0))))))))) : injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0))))), clamp(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0))))), _GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0))))), _GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), min(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0))), float(_GLF_FUZZED((-54.76 / 79.36))), bool(false)))))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-4.5, min(-4.5, -4.5)), _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(_GLF_IDENTITY(-4.5, min(_GLF_IDENTITY(-4.5, min(_GLF_IDENTITY(-4.5, min(-4.5, -4.5)), _GLF_IDENTITY(-4.5, max(-4.5, -4.5)))), -4.5)), 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(_GLF_IDENTITY(-4.5, (-4.5) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0)), float(vec2(-4.5, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(step(-5.9, -3.0)))))))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, _GLF_IDENTITY(float(vec2(-4.5, 1.0)), min(float(vec2(-4.5, 1.0)), float(vec2(-4.5, 1.0)))))) : injectionSwitch.x))))) / 1.0, mix(float(_GLF_FUZZED(-94.61)), float((false ? _GLF_FUZZED(-4.5) : injectionSwitch.x) / 1.0), bool(true))))), float(_GLF_FUZZED(1.1)), bool(false))))) < injectionSwitch.y) || false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) - vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), max(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))) + mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))) * mat2(1.0)).y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false), false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false), false, false)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), false), false, false))))))) || false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) > injectionSwitch.y)), true)))) && true)))
          {
           for(int _injected_loop_counter = (0 & 9907); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 1) | 0)); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (false)) && true)) || false))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (_GLF_IDENTITY(0 | 0, min(_GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0)), 0 | 0))))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (true) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true)), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true)))), false || (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true)))), bool(bvec4(! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true)))), false, false, false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, max((0u) * _GLF_IDENTITY(1u, 0u | (1u)), (0u) * 1u))) | (gl_WorkGroupSize.x));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))), false))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) << _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) * 1u), 0u, _GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 0u))))) + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), min((1u), (1u))) | (1u)), 1u)) * (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u))) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-10063 & ((0 >> _GLF_IDENTITY(int(8), int(8))) ^ 0))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-8.6)))), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-8.6))))) / vec2(1.0, 1.0))).x > injectionSwitch.y)))))) || false)))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 | (0)) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), (! (false)) || false)))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && (! (_GLF_IDENTITY(false, bool(bool(false))))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))) ? _GLF_FUZZED(refract(9706.0390, 89.45, intBitsToFloat(-51979))) : injectionSwitch.y)))), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) / 1), 0))) << 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(89.99)))) + 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(89.99)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(89.99)))) + 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(89.99)))) + 0.0)) / 1.0)))))))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false)))))))))))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), ((injectionSwitch) + vec2(0.0, 0.0)) / vec2(1.0, 1.0))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) - 0.0) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(_GLF_IDENTITY(0.0, (0.0) - sin(0.0))), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], ((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0]) * 1.0), (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(1.0) * ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), (false ? _GLF_FUZZED(ivec4(73958, -83003, 942, -17514)) : ivec4(0, 1, 1, 1)))), ~ (~ (int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), (false ? _GLF_FUZZED(ivec4(73958, -83003, 942, -17514)) : ivec4(0, 1, 1, 1))))))))], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) - abs(vec2(0.0, 0.0)))), (injectionSwitch))) + vec2(0.0, 0.0)).y), true && ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) - 0.0) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(_GLF_IDENTITY(0.0, (0.0) - sin(0.0))), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], ((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0]) * 1.0), (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(1.0) * ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat4x3((injectionSwitch), 1.0, tan(0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))), 0.0, 0.0))), (injectionSwitch))), mix(vec2(_GLF_FUZZED(-932.596), _GLF_FUZZED((-5.2 - -535.755))), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], clamp((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), (false ? _GLF_FUZZED(ivec4(73958, -83003, 942, -17514)) : ivec4(0, 1, 1, 1)))), ~ (~ (int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), (false ? _GLF_FUZZED(ivec4(73958, -83003, 942, -17514)) : ivec4(0, 1, 1, 1))))))))], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0])), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[1]), bvec2(true, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) - abs(vec2(0.0, 0.0)))), (injectionSwitch))) + vec2(0.0, 0.0)).y))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6323.5745) : injectionSwitch.y)))), false)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                          }
                         return;
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), false))), false)))))))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sqrt(1.0), 0.0))).x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                          return;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))).x, log(1.0) + (injectionSwitch.x)) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-295.328)), vec2(_GLF_FUZZED(5.3), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)));
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_1(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.8) : 0.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-807.078) : 0.0)), 0.0)))), 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 0.0))), 1.0, 1.0), 0.0 + (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 0.0))), 1.0, 1.0), (clamp(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0))), 1.0, 0.0, 1.0, 0.0))), 1.0, 1.0)) - sqrt(0.0)))))), _GLF_struct_0(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1u, (1u) | (1u))))), uvec3(1u), _GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))))), 1.0, vec3(1.0), atomicLoad(buf[virtual_gid], 4, 64, 0)), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((2.8 * 495.405))), bool(false))), 1.0), (vec3(1.0, 1.0, 1.0)) / vec3(1.0, 1.0, 1.0))), 0.0 + (float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) / vec3(1.0, 1.0, 1.0)))))))), _GLF_struct_3(_GLF_struct_2(_GLF_IDENTITY(1.0, float(mat2x3(1.0, log(1.0), 0.0, 1.0, 0.0, abs(1.0)))), bvec4(true), mat4(1.0))), vec4(1.0), _GLF_struct_5(_GLF_struct_4(mat4(1.0))));
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))) || false)))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))) || false)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062))), (false ? _GLF_FUZZED(-607.847) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062))))), true, true)))))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) || false)))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062))))))))))) || false), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * sqrt(vec2(1.0, 1.0))).y, (true ? injectionSwitch.y : _GLF_FUZZED(646.062))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * sqrt(vec2(1.0, 1.0))).y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y : _GLF_FUZZED(646.062)))) && true)))))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))), false, true)))))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(3634.0819)), float(injectionSwitch[1]), bool(true))))).y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                 break;
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != 0); _injected_loop_counter --)
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), false))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), false))))))))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true, true))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != (1 | 0)); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-9.9)), bool(false))), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))))), vec2(_GLF_FUZZED(-4.2), _GLF_FUZZED(-96.78)), bvec2(false, false))).x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6474.5534))) > injectionSwitch.y))))))
        return;
      }
     else
      {
      }
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(3, 3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (int(3))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(3), 0 ^ (int(3))) : _GLF_FUZZED(-72957), (true ? _GLF_IDENTITY(int(3), 0 ^ (int(3))) : _GLF_FUZZED(-72957)) >> 0)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-27.28), _GLF_FUZZED((+ 0.7))), bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, false))))))) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED((- -1.7))), (float(_GLF_FUZZED((- -1.7)))) - 0.0), float(1.0), bool(true))))), mix(vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))))[0], _GLF_FUZZED(425.484)), vec2(_GLF_FUZZED(-3493.7498), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) - vec2(0.0, 0.0))[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))), _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))), sqrt(0.0), 1.0, 0.0, 0.0)), (vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), min(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0), (mat4x2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0)) * mat4(1.0))), max(vec2(_GLF_IDENTITY(mat4x2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0), (mat4x2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0)) * mat4(1.0))), vec2(_GLF_IDENTITY(mat4x2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0), (mat4x2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.0)), bool(false)))) / 1.0))), 0.0, 0.0)) * mat4(1.0)))))), (injectionSwitch) * vec2(1.0, 1.0))), (true ? (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))), sqrt(0.0), 1.0, 0.0, 0.0))) / vec2(1.0, 1.0)))))))).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), mix(vec2((vec2(vec2(injectionSwitch)))[0], (vec2(vec2(injectionSwitch)))[1]), vec2(_GLF_FUZZED(-9.2), _GLF_FUZZED(5.7)), bvec2(false, false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(_GLF_IDENTITY(425.484, (true ? _GLF_IDENTITY(425.484, _GLF_IDENTITY((false ? _GLF_FUZZED(-50.24) : 425.484), ((false ? _GLF_FUZZED(-50.24) : 425.484)) * 1.0)) : _GLF_FUZZED(-27.95))))), vec2(_GLF_FUZZED(-3493.7498), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))))) - vec2(0.0, 0.0))[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))), max(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), _GLF_IDENTITY((true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9))), max((true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9))), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) + vec2(0.0, 0.0)), 0.0))), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))), max(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec2(5384.3464, 4.9), min(vec2(5384.3464, 4.9), vec2(5384.3464, 4.9)))))), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))))), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))))), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, 4.9)))))))), mix(vec2(_GLF_FUZZED(62.72), _GLF_FUZZED(70.20)), vec2((min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(425.484)), vec2(_GLF_FUZZED(-3493.7498), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(vec2(31.27, -977.314))) : vec2(1.0, 1.0))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) - vec2(0.0, 0.0))[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(5384.3464, _GLF_IDENTITY(4.9, (4.9) + 0.0))))))))[0], (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(425.484)), vec2(_GLF_FUZZED(-3493.7498), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))) - vec2(0.0, 0.0))[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_IDENTITY(_GLF_FUZZED(vec2(5384.3464, 4.9)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_FUZZED(vec2(5384.3464, 4.9)), (false ? _GLF_FUZZED(vec2(-144.479, 5.2)) : _GLF_FUZZED(vec2(5384.3464, 4.9)))))))))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))).y) / cos(0.0)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))))[0], _GLF_FUZZED(425.484)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]), (_GLF_IDENTITY(true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, _GLF_IDENTITY(_GLF_IDENTITY(2.5, _GLF_ONE(1.0, injectionSwitch.y) * (2.5)), max(_GLF_IDENTITY(2.5, _GLF_ONE(1.0, injectionSwitch.y) * (2.5)), _GLF_IDENTITY(_GLF_IDENTITY(2.5, _GLF_ONE(1.0, injectionSwitch.y) * (2.5)), 1.0 * (_GLF_IDENTITY(2.5, _GLF_ONE(1.0, injectionSwitch.y) * (2.5)))))))) : _GLF_FUZZED(vec2(-9.3, 0.9)))))), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)))) * vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * vec2(1.0, 1.0)), vec2(1.0, 1.0)))) * vec2(1.0, 1.0))))[0], _GLF_FUZZED(425.484)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]), (_GLF_IDENTITY(true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), round(length(normalize(1.0))), 1.0))))) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)) : _GLF_FUZZED(vec2(-9.3, 0.9)))))), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.6, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-4.6, (-4.6) - 0.0), 0.0, 0.0)), (true ? _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-4.6, (-4.6) - 0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(5543.7564) : float(vec3(_GLF_IDENTITY(-4.6, (-4.6) - 0.0), 0.0, 0.0)))) : _GLF_FUZZED(-24.45)))), 313.521)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, exp(0.0), exp(length(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(mat3x4(-54.92, 33.45, 7.8, -7.3, 73.38, -6752.7137, 74.65, 743.172, 5364.7411, _GLF_IDENTITY(-3291.0397, max(-3291.0397, -3291.0397)), 3105.3125, 605.735)) : mat3x4(1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, exp(0.0), exp(length(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(425.484)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]), (_GLF_IDENTITY(_GLF_IDENTITY(true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)), vec2(1.0, 1.0) * (true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) : _GLF_FUZZED(vec2(88.91, 12.32)))))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), vec2(vec3((injectionSwitch) * vec2(1.0, 1.0), sqrt(0.0))))))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)) : _GLF_FUZZED(vec2(-9.3, 0.9)))))), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))))).y) * _GLF_ONE(1.0, injectionSwitch.y)))))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))) || false)))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4.2) : 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(mat2(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4.2) : 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), (float(vec4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) / 1.0)), 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) * vec2(1.0, 1.0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), min((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) * vec2(1.0, 1.0)), mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(425.484), clamp(_GLF_FUZZED(425.484), _GLF_IDENTITY(_GLF_FUZZED(425.484), max(_GLF_FUZZED(425.484), _GLF_FUZZED(425.484))), _GLF_IDENTITY(_GLF_FUZZED(425.484), (_GLF_FUZZED(425.484)) - 0.0))), (_GLF_IDENTITY(_GLF_FUZZED(425.484), clamp(_GLF_FUZZED(425.484), _GLF_IDENTITY(_GLF_FUZZED(425.484), max(_GLF_FUZZED(425.484), _GLF_FUZZED(425.484))), _GLF_IDENTITY(_GLF_FUZZED(425.484), (_GLF_FUZZED(425.484)) - 0.0)))) - determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), min(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(425.484), clamp(_GLF_FUZZED(425.484), _GLF_IDENTITY(_GLF_FUZZED(425.484), max(_GLF_FUZZED(425.484), _GLF_FUZZED(425.484))), _GLF_IDENTITY(_GLF_FUZZED(425.484), (_GLF_FUZZED(425.484)) - 0.0))), (_GLF_IDENTITY(_GLF_FUZZED(425.484), clamp(_GLF_FUZZED(425.484), _GLF_IDENTITY(_GLF_FUZZED(425.484), max(_GLF_FUZZED(425.484), _GLF_FUZZED(425.484))), _GLF_IDENTITY(_GLF_FUZZED(425.484), (_GLF_FUZZED(425.484)) - 0.0)))) - determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(425.484), clamp(_GLF_FUZZED(425.484), _GLF_IDENTITY(_GLF_FUZZED(425.484), max(_GLF_FUZZED(425.484), _GLF_FUZZED(425.484))), _GLF_IDENTITY(_GLF_FUZZED(425.484), (_GLF_FUZZED(425.484)) - 0.0))), (_GLF_IDENTITY(_GLF_FUZZED(425.484), clamp(_GLF_FUZZED(425.484), _GLF_IDENTITY(_GLF_FUZZED(425.484), max(_GLF_FUZZED(425.484), _GLF_FUZZED(425.484))), _GLF_IDENTITY(_GLF_FUZZED(425.484), (_GLF_FUZZED(425.484)) - 0.0)))) - determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))), vec2(_GLF_FUZZED(-3493.7498), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat4(vec2(1.0, 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), mix(vec2((vec2(mat4(vec2(1.0, 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(612.478)), vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((vec2(mat4(vec2(1.0, 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))[1], clamp((vec2(mat4(vec2(1.0, 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))[1], (vec2(mat4(vec2(1.0, 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))[1], (vec2(mat4(vec2(1.0, 1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))[1]))), bvec2(false, true)))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) - vec2(0.0, 0.0))[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (injectionSwitch) * vec2(1.0, 1.0) : _GLF_IDENTITY(_GLF_FUZZED(vec2(5384.3464, 4.9)), vec2(1.0, 1.0) * (_GLF_FUZZED(vec2(5384.3464, 4.9))))))))))).y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(425.484)), vec2(_GLF_FUZZED(-3493.7498), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) - vec2(0.0, 0.0))[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED((-4678.8357 * 803.792))), vec2(((injectionSwitch) * vec2(1.0, 1.0))[0], ((injectionSwitch) * vec2(1.0, 1.0))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) : _GLF_FUZZED(vec2(5384.3464, 4.9))))))))).y) / cos(0.0)), 1.0 * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[_GLF_IDENTITY(0, max(0, 0))], _GLF_FUZZED(425.484)), mix(vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(7.7)), vec2((vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[_GLF_IDENTITY(0, max(0, 0))], _GLF_FUZZED(425.484)))[0], (vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[_GLF_IDENTITY(0, max(0, 0))], _GLF_FUZZED(425.484)))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]), (_GLF_IDENTITY(true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)), cos(vec2(0.0, 0.0)) * (true ? vec2(_GLF_FUZZED(-3493.7498), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]) : _GLF_FUZZED(vec2(-5.3, 2.5)))))), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))).y)))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                        }
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_6._f0._f1.read, min(_GLF_struct_replacement_6._f0._f1.read, _GLF_IDENTITY(_GLF_struct_replacement_6._f0._f1.read, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6._f0._f1.read, (_GLF_IDENTITY(_GLF_struct_replacement_6._f0._f1.read, (_GLF_struct_replacement_6._f0._f1.read) ^ 0u)) | 0u), ~ (~ (_GLF_struct_replacement_6._f0._f1.read))), _GLF_struct_replacement_6._f0._f1.read)))), 4, 64, _GLF_IDENTITY(4, (0 | 0) | (_GLF_IDENTITY(4, (4) | (4)))));
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))))))), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))))))), (_GLF_DEAD(false)) || false), true, false, false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
                return;
              }
             break;
            }
           break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && true), true, true, true))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))
              {
              }
             else
              {
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
            }
           break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ((-63105 & 0) & 87608) ^ (_injected_loop_counter)) != 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 >> _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x < injectionSwitch.y) || false))))))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(length(vec4(696.017, 80.74, -2.1, -2.8))))), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-989.837)), float(1.0), bool(true))), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.0) : 1.0)))))), 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y)), injectionSwitch.y))))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                                  return;
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, sqrt(0.0), 1.0, 0.0)))))))
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          break;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           continue;
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) && true)), true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true)))))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
