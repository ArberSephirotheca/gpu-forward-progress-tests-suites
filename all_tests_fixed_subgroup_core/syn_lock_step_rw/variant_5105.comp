#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(false, (false) && true)), false, false)))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(false, (false) && true)), false, false)))))), bool(bvec4(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(false, (false) && true)), false, false)))))), false, false, false))), true))))) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), 0 ^ (0 << _GLF_IDENTITY(int(4), int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)) >> 0))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(4.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y) / 1.0)))))))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
                          return;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true)))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               return;
                              }
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                {
                                 return;
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
                          continue;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          continue;
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(2.1)), bool(false)))))) > injectionSwitch.y))))))
                                  continue;
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, true && ((! (false)) && true)))) && true)))))
                                  return;
                                 if(_GLF_DEAD(false))
                                  break;
                                 continue;
                                }
                              }
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! ((! (_GLF_WRAPPED_IF_TRUE(true)))), (! ((! (_GLF_WRAPPED_IF_TRUE(true))))) || false)))))))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                    continue;
                                   continue;
                                  }
                                 do
                                  {
                                   return;
                                  }
                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             else
                              {
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) - 0.0), injectionSwitch.y, injectionSwitch.y))))))
                          {
                           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || false))))) || false))))
                              return;
                            }
                           break;
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.5), _GLF_FUZZED(9.3)), bvec2(false, false))).x > injectionSwitch.y))))
                            continue;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))), false))))))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.2))), 1.0, 1.0))) < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED(-3.2)), bool(false)))))))
                          break;
                        }
                       else
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) + 0.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                  }
                                 else
                                  {
                                   return;
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                     break;
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(-76841) : int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec2((1), 1)))) | ((1))))); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                              break;
                             for(int _injected_loop_counter = ((0 & _GLF_IDENTITY(93975, (_GLF_IDENTITY(93975, (93975) << 0)) / 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    break;
                                   do
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
                                      return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))
                                      {
                                      }
                                     else
                                      {
                                       return;
                                      }
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                                    break;
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                break;
                               continue;
                               if(_GLF_DEAD(false))
                                continue;
                              }
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, _GLF_IDENTITY(0 ^ 1, int(ivec4(0 ^ 1, 0, 0, 1))), 0 ^ 1)))); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                              continue;
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(false, true)))))))
                              break;
                             return;
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(false))
                              break;
                             continue;
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                            continue;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                            break;
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (false) && true)))));
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0))), (tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), mix(float((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))), float(_GLF_FUZZED((154.564))), bool(false))), (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))))))), max(determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), mix(float((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))), float(_GLF_FUZZED((154.564))), bool(false))), (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))))))), determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), mix(float((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))), float(_GLF_FUZZED((154.564))), bool(false))), (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))))))))))))).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0))), (tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)))) + 0.0), determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, abs(1.0) * (0.0))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), 1.0, log(1.0), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), mix(float((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))), float(_GLF_FUZZED((_GLF_IDENTITY(154.564, clamp(154.564, 154.564, 154.564))))), bool(false))), (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))))))))), min(vec2(mat2(injectionSwitch, _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0))), (tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)))) + 0.0), determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, abs(1.0) * (0.0))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), 1.0, log(1.0), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), mix(float((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))), float(_GLF_FUZZED((_GLF_IDENTITY(154.564, clamp(154.564, 154.564, 154.564))))), bool(false))), (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))))))))), vec2(mat2(injectionSwitch, _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0))), (tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)))) + 0.0), determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, abs(1.0) * (0.0))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), 1.0, log(1.0), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))), mix(float((true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587)))), float(_GLF_FUZZED((_GLF_IDENTITY(154.564, clamp(154.564, 154.564, 154.564))))), bool(false))), (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(sign(8742.7587))))))))))))).x, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0))) > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (injectionSwitch.y))))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6874.9537)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(10.43)), mix(float(_GLF_FUZZED(-757.426)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(10.43), min(_GLF_FUZZED(10.43), _GLF_FUZZED(10.43)))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(10.43)), min(float(_GLF_FUZZED(10.43)), float(_GLF_FUZZED(10.43)))), float(_GLF_FUZZED(10.43)), float(_GLF_FUZZED(10.43))))), bool(true))), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))));
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     break;
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                           for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) << 0))), (true ? (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) << 0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) << 0)), 0 + (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(8, (false ? _GLF_FUZZED(-73299) : 8))), _GLF_IDENTITY(int(8), (int(8)) << 0)))), 1)), 0 ^ (int(ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) << 0)), 0 + (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) << 0)))), 1)))))) : _GLF_FUZZED(71691))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ (0 << _GLF_IDENTITY(int(6), int(6))))))); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1), ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))), true, false))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true, true, true))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))))))
              return;
             break;
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), max(min(1, 1), _GLF_IDENTITY(min(1, 1), (min(1, 1)) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false))))))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4.9)), bool(false))) < injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4.9)), bool(false))) < injectionSwitch.y)), bool(bvec3(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4.9)), bool(false))) < injectionSwitch.y)), false, false)))))), true))))))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (false) || false))))), true && (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (false) || false))))), false || ((_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (false) || false)))))))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                      break;
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) + vec2(0.0, 0.0)).y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      break;
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-91.69, 6.0)) : injectionSwitch)))).x > injectionSwitch.y))))
                  continue;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), sqrt(1.0), 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat3(mat3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), sqrt(1.0), 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), 0.0 + (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), sqrt(1.0), 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat3(mat3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), sqrt(1.0), 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7555.0427)), bool(false)))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-3.9, -760.863)) : injectionSwitch)) * mat2(1.0))).x, mix(float(_GLF_FUZZED(2.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), false || ((_GLF_IDENTITY(false, (false) && true)))))), true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), false || ((_GLF_IDENTITY(false, (false) && true)))))), true && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x), float(_GLF_FUZZED(((- 866.679) / -972.842))), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, sin(0.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, sin(0.0)), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0))).x), float(_GLF_FUZZED(7555.0427)), bool(false)))), bool(true)))))) - 0.0) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.2)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, sin(0.0), 1.0, 0.0, exp(sqrt(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(vec4(-2149.8321, -1.9, 60.61, -7.6).a)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), bool(true))))), min(vec2(mat4(injectionSwitch, 0.0, 1.0, sin(0.0), 1.0, 0.0, exp(sqrt(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(tan(-9300.6350)))), 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0), (mat3x2(1.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0)) * mat3(1.0)))), injectionSwitch.y))), vec2(mat4(injectionSwitch, 0.0, 1.0, sin(0.0), 1.0, 0.0, exp(sqrt(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))).x), bool(true))) < injectionSwitch.y))))
              {
               return;
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    continue;
                   break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), true && (! (! (_GLF_IDENTITY(false, true && (false))))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) && true))))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), min(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), min(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), min(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))), false)))) && true))))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), true && (false || (true)))), false || (true))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY((! (! (false))), ! (! ((! (! (false)))))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false))))))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), ! (! (bool(_GLF_IDENTITY(false, true && (false))))))))))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, false, true)))), true))) || false))) && true))
                    continue;
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (45695 & (0 >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           do
            {
             for(int _injected_loop_counter = ((1 | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           continue;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false, true)))))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, true)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.0, -6.7)))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), log(1.0), 0.0, exp(0.0), 0.0, 0.0, length(0.0), tan(0.0)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.0, -6.7)))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), log(1.0), 0.0, exp(0.0), 0.0, 0.0, length(0.0), tan(0.0)))).x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_DEAD(false), false)))), (! (! (bool(bvec2(_GLF_DEAD(false), false))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), true, true, true)), bool(bvec4(bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), true, true, true)), false, true, true)))), ! (! (bool(bvec2(_GLF_DEAD(false), false))))))) && true)) || false)) || _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) << 0u), (((subgroup_local_id + 1) % subgroup_size)) + 0u);
 do
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) ^ (0 << _GLF_IDENTITY(int(5), int(5))), min((_GLF_IDENTITY(1, (1) | (1))) ^ (0 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) ^ (0 << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(1, (1) | (1))) ^ (0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(int(5))))))) ^ 0))))], float(vec3(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED((+ -6260.5184))), float(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * cos(0.0))), bool(true))), 0.0, 1.0))))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))], float(vec3(injectionSwitch[1], 0.0, 1.0)))), mix(vec2(_GLF_FUZZED(-1.5), _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) * 1)], injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))], float(vec3(injectionSwitch[1], 0.0, 1.0)))))[1], (false ? _GLF_FUZZED(-149.045) : (vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))], float(vec3(injectionSwitch[1], 0.0, 1.0)))))[1]))), vec2((_GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec4(ivec3(1, 1, 0), 1), ~ (~ (ivec4(ivec3(1, 1, 0), 1))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(73610, -55493, -92033)) : ivec3(_GLF_IDENTITY(ivec4(ivec3(1, 1, 0), 1), ~ (~ (ivec4(ivec3(1, 1, 0), 1))))))))))], float(vec3(injectionSwitch[1], 0.0, 1.0)))), (vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec4(ivec3(1, 1, 0), 1), ~ (~ (ivec4(ivec3(1, 1, 0), 1))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(73610, -55493, -92033)) : ivec3(_GLF_IDENTITY(ivec4(ivec3(1, 1, 0), 1), ~ (~ (ivec4(ivec3(1, 1, 0), 1))))))))))], float(vec3(injectionSwitch[1], 0.0, 1.0))))) + vec2(0.0, 0.0)))[0], _GLF_FUZZED(-93.34)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))).x > injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), 1 * (_GLF_IDENTITY((1), 0 ^ ((1))))))) ^ (0 << _GLF_IDENTITY(int(5), int(5))))], float(vec3(injectionSwitch[_GLF_IDENTITY(1, (1) * 1)], 0.0, 1.0))))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(injectionSwitch[1], 0.0, 1.0))))).x > injectionSwitch.y))))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(round(vec2(-2542.8894, 362.115)), max(round(vec2(-2542.8894, 362.115)), round(vec2(-2542.8894, 362.115))))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), mix(float(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), clamp(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0)))))), float(_GLF_FUZZED(30.06)), bool(false)))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), mix(float(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), clamp(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0)))))), float(_GLF_FUZZED(30.06)), bool(false)))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), mix(float(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), clamp(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0)))))), float(_GLF_FUZZED(30.06)), bool(false)))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y, true), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), mix(float(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), clamp(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, float(float(-2542.8894))), -2542.8894)), 0.0, exp(0.0)))))), float(_GLF_FUZZED(30.06)), bool(false)))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y, true), true), false)))))))), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))))))) || false, false || ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(round(vec2(-2542.8894, 362.115)), max(round(vec2(-2542.8894, 362.115)), round(vec2(-2542.8894, 362.115))))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), ((false ? _GLF_FUZZED(_GLF_IDENTITY(round(vec2(-2542.8894, 362.115)), max(round(vec2(-2542.8894, 362.115)), round(vec2(-2542.8894, 362.115))))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), clamp(mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))))))) + sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), _GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), mix(float(_GLF_FUZZED(1404.1384)), float(_GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), float(_GLF_IDENTITY(vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0), mix(vec3((vec3(mix(float(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)), (vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))) + vec3(0.0, 0.0, 0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[0], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[1], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[2]), vec3(_GLF_FUZZED(9.5), _GLF_FUZZED(6265.0495), _GLF_FUZZED(5.6)), bvec3(false, false, false)))))), bool(true))))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), _GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), mix(float(_GLF_FUZZED(1404.1384)), float(_GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), float(_GLF_IDENTITY(vec3(mix(float(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0), mix(vec3((vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[0], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[1], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[2]), _GLF_IDENTITY(vec3(_GLF_FUZZED(9.5), _GLF_FUZZED(6265.0495), _GLF_FUZZED(5.6)), (vec3(_GLF_FUZZED(9.5), _GLF_FUZZED(6265.0495), _GLF_FUZZED(5.6))) - abs(vec3(0.0, 0.0, 0.0))), bvec3(false, false, false)))))), bool(true))))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y), false))), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(713.971, -5243.8202)))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))))))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(round(vec2(-2542.8894, 362.115)), max(round(vec2(-2542.8894, 362.115)), round(vec2(-2542.8894, 362.115))))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), ((false ? _GLF_FUZZED(_GLF_IDENTITY(round(vec2(-2542.8894, 362.115)), max(round(vec2(-2542.8894, 362.115)), round(vec2(-2542.8894, 362.115))))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), clamp(mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-85.36, 2526.9156)) : injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-177.907) : injectionSwitch[1])))), injectionSwitch)))), mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), mat2(1.0) * (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))))))) + sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), -2542.8894)), 0.0, exp(0.0))), 0.0 + (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), -2542.8894)), 0.0, exp(0.0))), max(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), -2542.8894)), 0.0, exp(0.0))), float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, _GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), -2542.8894)), 0.0, exp(0.0)))))))), float(_GLF_FUZZED(30.06)), bool(false)), mix(float(_GLF_FUZZED(1404.1384)), float(_GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), float(_GLF_IDENTITY(vec3(mix(float(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(-2542.8894, max(-2542.8894, _GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, _GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)))))), clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0), mix(vec3((vec3(mix(float(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)), (vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))) + vec3(0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0))), 0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[0], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[1], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[2]), vec3(_GLF_FUZZED(9.5), _GLF_FUZZED(6265.0495), _GLF_FUZZED(5.6)), bvec3(false, false, false)))))), bool(true))))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(_GLF_IDENTITY(-2542.8894, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), (_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0))), _GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), mix(float(_GLF_FUZZED(1404.1384)), float(_GLF_IDENTITY(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), float(_GLF_IDENTITY(vec3(mix(float(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(-2542.8894, max(-2542.8894, -2542.8894)), clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0), mix(vec3((vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[0], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, exp(0.0)))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[1], (vec3(mix(float(float(vec3(_GLF_IDENTITY(-2542.8894, clamp(-2542.8894, -2542.8894, -2542.8894)), 0.0, _GLF_IDENTITY(exp(0.0), (false ? _GLF_FUZZED(9.6) : exp(0.0)))))), float(_GLF_FUZZED(30.06)), bool(false)), 0.0, 0.0))[2]), _GLF_IDENTITY(vec3(_GLF_FUZZED(9.5), _GLF_FUZZED(6265.0495), _GLF_FUZZED(5.6)), (vec3(_GLF_FUZZED(9.5), _GLF_FUZZED(6265.0495), _GLF_FUZZED(5.6))) - abs(vec3(0.0, 0.0, 0.0))), bvec3(false, false, false)))))), bool(true))))) * 1.0)), 362.115))) : injectionSwitch)).x > injectionSwitch.y), false))), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(713.971, -5243.8202))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(713.971, -5243.8202)))) + log(vec2(1.0, 1.0)))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y))))))))))))))) && true)) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(round(vec2(-2542.8894, 362.115))), mix(vec2((_GLF_FUZZED(round(vec2(-2542.8894, 362.115))))[0], _GLF_FUZZED(-0.1)), vec2(_GLF_IDENTITY(_GLF_FUZZED(-681.038), (_GLF_IDENTITY(_GLF_FUZZED(-681.038), min(_GLF_FUZZED(-681.038), _GLF_FUZZED(-681.038)))) / 1.0), (_GLF_FUZZED(round(vec2(-2542.8894, 362.115))))[1]), bvec2(_GLF_IDENTITY(false, ! (! (false))), true))) : injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(4.3), _GLF_FUZZED(3112.1764)), vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))))).y), ! (! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch), max((false ? _GLF_FUZZED(round(vec2(-2542.8894, 362.115))) : injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(round(vec2(-2542.8894, 362.115))), vec2(mat2x4(_GLF_FUZZED(round(vec2(-2542.8894, 362.115))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))) : injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.03), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.4)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.6)), bool(false))), injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 1.0))))).y)))), true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y)))))), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), true))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), true)))) || false))))), ! (! (bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))), false, true)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))), false, true)), true, true)))), ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), false, false)))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY(_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)))))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(2520.4403))) < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, determinant(mat2(length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))).y))))) || false), true), false, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), false, false)))), false, true))), false)))))))))), (bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), true))))))), ! (! (bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), false, false)))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x < injectionSwitch.y), false, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch.yy))).y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), false, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || ((! (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) || false), false))))))) || false), true), false, false)))), false, true))), false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false))))) && true)) && true), (_GLF_WRAPPED_LOOP(false)) || false)) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), true)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), true)), true, false)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), true)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), true)), true, false))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), true)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), true)), true, false))))), true, false)))))), false))))))), (_GLF_WRAPPED_LOOP(false)) && true)) && true), (_GLF_WRAPPED_LOOP(false)) || false)) || false)))));
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, (3) >> 0)))), int(3))) << 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), int(3), int(3)), 1 * (clamp(int(3), int(3), int(3)))))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                    return;
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), clamp((0 ^ 1), (0 ^ 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))) / 1))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))) / 1))))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))) / 1)))))))) : _GLF_FUZZED(_injected_loop_counter)))), max((0 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))) | (1))))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))), min(0 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))), 0 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((0 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))))))))))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1))))); _injected_loop_counter ++)
                    {
                     do
                      {
                       return;
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(vec2(-1379.7217, 287.817)) : injectionSwitch)).x > injectionSwitch.y) && true)))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), clamp(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))), mix(float(_GLF_FUZZED(9927.5694)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), clamp(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))), bool(true))), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), (! (_GLF_IDENTITY(true, (true) && true))) || false)))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || (false))));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, 1 * (64)), 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec4(bool(bvec2(_GLF_DEAD(false), true)), true, false, false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, max(0, 0)), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED(799.712)), float(_GLF_IDENTITY(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), min(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED(-6.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0)), float(_GLF_FUZZED(-3.9)), bool(false)))))), bool(true))), max(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0)))))), bool(true))))))))).y)))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED(799.712)), float(_GLF_IDENTITY(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED(1.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0)), bool(true)))), float(_GLF_FUZZED(-1028.0054)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), min(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), max(false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0), false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1], (injectionSwitch[1]) - 0.0)))))), bool(true))))))))).y))))) ^ 0), clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(88924)))], min(injectionSwitch[_GLF_IDENTITY(1, int(ivec2(1, 0)))], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0) : _GLF_FUZZED(dot(vec3(6925.1436, 1.4, 4653.0673), vec3(-0.1, -2520.9360, -682.248))))))))))).y)))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))))).y)))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))))) * mat2(1.0))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-1391.3177) : _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))))).y))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false)))) || false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter --)
    {
     atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
    }
  }
}
