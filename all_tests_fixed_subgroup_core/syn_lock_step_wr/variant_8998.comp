#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_70 {
 uvec2 _f0;
 bvec2 _f1;
 vec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_69 {
 ivec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_68 {
 mat4x2 _f0;
 uvec4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_71 {
 _GLF_struct_68 _f0;
 ivec3 _f1;
 float _f2;
 _GLF_struct_69 _f3;
 _GLF_struct_70 _f4;
 uint _f5;
 mat4 _f6;
} ;

struct _GLF_struct_72 {
 mat3 _f0;
 float _f1;
 vec3 _f2;
 mat4 _f3;
 uint next_virtual_gid;
 _GLF_struct_71 _f4;
} ;

struct _GLF_struct_65 {
 uvec4 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_64 {
 mat3 _f0;
 bvec2 _f1;
 ivec4 _f2;
 mat3 _f3;
 ivec3 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
 uint workgroup_base;
} ;

struct _GLF_struct_66 {
 _GLF_struct_64 _f0;
 mat2x3 _f1;
 _GLF_struct_65 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_62 {
 mat3x4 _f0;
} ;

struct _GLF_struct_61 {
 mat2x3 _f0;
 bvec2 _f1;
 uint _f2;
 bvec4 _f3;
 uvec4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_60 {
 mat4 _f0;
 mat4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_63 {
 _GLF_struct_60 _f0;
 _GLF_struct_61 _f1;
 mat4x3 _f2;
 mat3 _f3;
 _GLF_struct_62 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_67 {
 vec3 _f0;
 _GLF_struct_63 _f1;
 _GLF_struct_66 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_59 {
 int _injected_loop_counter;
 mat2x4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_56 {
 bvec2 _f0;
} ;

struct _GLF_struct_55 {
 mat2x3 _f0;
} ;

struct _GLF_struct_54 {
 mat3x2 _f0;
 uvec2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_53 {
 mat4x2 _f0;
 mat4 _f1;
 bvec2 _f2;
 mat4 _f3;
 float _f4;
} ;

struct _GLF_struct_57 {
 _GLF_struct_53 _f0;
 _GLF_struct_54 _f1;
 _GLF_struct_55 _f2;
 mat3x2 _f3;
 _GLF_struct_56 _f4;
} ;

struct _GLF_struct_51 {
 vec3 _f0;
 ivec4 _f1;
 mat3 _f2;
 mat2 _f3;
 mat4x3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_50 {
 mat4x2 _f0;
} ;

struct _GLF_struct_52 {
 _GLF_struct_50 _f0;
 _GLF_struct_51 _f1;
} ;

struct _GLF_struct_48 {
 bool _f0;
 bvec2 _f1;
 uvec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_47 {
 ivec2 _f0;
} ;

struct _GLF_struct_46 {
 vec4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_49 {
 _GLF_struct_46 _f0;
 _GLF_struct_47 _f1;
 mat2x4 _f2;
 _GLF_struct_48 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_58 {
 int _injected_loop_counter;
 _GLF_struct_49 _f0;
 vec3 _f1;
 _GLF_struct_52 _f2;
 _GLF_struct_57 _f3;
 bool _f4;
} ;

struct _GLF_struct_43 {
 mat3 _f0;
 mat2 _f1;
 ivec2 _f2;
 ivec2 _f3;
 mat2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_42 {
 uvec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_41 {
 vec2 _f0;
 ivec3 _f1;
 ivec4 _f2;
 bvec2 _f3;
 bvec2 _f4;
 int _f5;
} ;

struct _GLF_struct_40 {
 vec3 _f0;
 mat2 _f1;
 mat4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_44 {
 uvec4 _f0;
 _GLF_struct_40 _f1;
 uvec2 _f2;
 _GLF_struct_41 _f3;
 _GLF_struct_42 _f4;
 _GLF_struct_43 _f5;
} ;

struct _GLF_struct_45 {
 _GLF_struct_44 _f0;
 mat3 _f1;
 bvec3 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_37 {
 uint _f0;
 uint _f1;
 uvec3 _f2;
 mat2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_36 {
 mat3 _f0;
 vec4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_38 {
 _GLF_struct_36 _f0;
 _GLF_struct_37 _f1;
 ivec3 _f2;
 mat2x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_34 {
 ivec2 _f0;
 int _f1;
 mat3x2 _f2;
 vec2 _f3;
 mat4x3 _f4;
 int _f5;
 mat4 _f6;
} ;

struct _GLF_struct_33 {
 mat3x4 _f0;
 ivec3 _f1;
 uvec4 _f2;
 uvec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_35 {
 _GLF_struct_33 _f0;
 bvec2 _f1;
 _GLF_struct_34 _f2;
} ;

struct _GLF_struct_39 {
 _GLF_struct_35 _f0;
 int _injected_loop_counter;
 _GLF_struct_38 _f1;
} ;

struct _GLF_struct_30 {
 uvec4 _f0;
 ivec4 _f1;
 mat4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_29 {
 float _f0;
 bvec3 _f1;
 ivec3 _f2;
 vec3 _f3;
 uvec2 _f4;
 uvec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_28 {
 mat3 _f0;
 ivec4 _f1;
 int _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_27 {
 uint _f0;
 mat3x2 _f1;
 vec3 _f2;
 bvec3 _f3;
 float _f4;
} ;

struct _GLF_struct_31 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 vec3 _f3;
 _GLF_struct_30 _f4;
} ;

struct _GLF_struct_32 {
 mat2 _f0;
 uvec3 GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id;
 _GLF_struct_31 _f1;
 mat2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_24 {
 bvec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_25 {
 uvec2 _f0;
 ivec4 _f1;
 _GLF_struct_24 _f2;
 int _f3;
} ;

struct _GLF_struct_22 {
 vec4 _f0;
 vec4 _f1;
 vec3 _f2;
 ivec4 _f3;
 uint _f4;
 mat3 _f5;
} ;

struct _GLF_struct_21 {
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size;
 bvec4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 _GLF_struct_22 _f1;
 bvec4 _f2;
 float _f3;
} ;

struct _GLF_struct_19 {
 uint _f0;
 mat4 _f1;
 float _f2;
 ivec2 _f3;
 mat2x3 _f4;
 vec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_18 {
 bool _f0;
 float _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_17 {
 bvec2 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
 bvec4 _f3;
 vec3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_20 {
 mat2x3 _f0;
 bvec3 _f1;
 vec2 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 ivec3 _f1;
 uvec2 _f2;
 bvec3 _f3;
 mat4x2 _f4;
 uvec2 _f5;
 float _f6;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_13 {
 uint _f0;
 vec3 _f1;
 bvec3 _f2;
 vec2 _f3;
 ivec3 _f4;
 uvec2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 uvec3 _f1;
 ivec3 _f2;
 _GLF_struct_14 _f3;
 uvec3 _f4;
 uvec3 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_26 {
 _GLF_struct_16 _f0;
 bool _f1;
 ivec3 _f2;
 vec2 _f3;
 _GLF_struct_20 _f4;
 _GLF_struct_23 _f5;
 _GLF_struct_25 _f6;
} ;

struct _GLF_struct_10 {
 uint _f0;
 vec2 _f1;
 uvec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 mat3x2 _f1;
 vec4 _f2;
 vec2 _f3;
 bvec3 _f4;
 bvec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 uint num_workgroup;
 _GLF_struct_10 _f1;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 uint virtual_gid;
 bvec4 _f1;
 float _f2;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 mat2x4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_6 {
 uint workgroup_size;
 _GLF_struct_5 _f0;
 uvec3 _f1;
 mat4x2 _f2;
 mat3x4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_7 {
 uint _f0;
 mat4x3 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 mat2 _f1;
 vec2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 mat3 _f3;
 vec3 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 _GLF_struct_3 _f1;
 int _f2;
 float _f3;
 uvec4 _f4;
 vec3 _f5;
 uint subgroup_local_id;
 mat4x2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uvec4 GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread;
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 _GLF_struct_26 _GLF_struct_replacement_26;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1699.2809)), bool(false))) < injectionSwitch.y)) && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 uvec4 GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_32 _GLF_struct_replacement_32;
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread.xyz = GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid;
  }
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz = GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread.xyz;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)), mix(float(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-2.6)), _GLF_IDENTITY(bool(false), (bool(false)) && true)))))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))) && true)), bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))), false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)))))) && true)), bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))), false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)), mix(float(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-2.6)), _GLF_IDENTITY(bool(false), (bool(false)) && true)))))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))) && true)), bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))), false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)))))) && true)), bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))), false))))))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)), mix(float(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), float(_GLF_FUZZED((0.4 * -5962.4287))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-2.6, clamp(-2.6, -2.6, -2.6)))), _GLF_IDENTITY(bool(false), (bool(false)) && true)))))) || _GLF_IDENTITY(false, false || (false)))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)), mix(float(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), float(_GLF_FUZZED((0.4 * -5962.4287))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-2.6, clamp(-2.6, -2.6, -2.6)))), _GLF_IDENTITY(bool(false), (bool(false)) && true)))))) || _GLF_IDENTITY(false, false || (false))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), false || (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)))))), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))) && true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)) || false)))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)) || false)))))), false))), bvec2(bvec2(bvec2(bvec2(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.4, -1.7)) : injectionSwitch)).y), (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)) || false)))))), false))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)) || false, false || ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : injectionSwitch.y)))) || false)))), bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)) || false, false || ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : injectionSwitch.y)))) || false)))), false, _GLF_IDENTITY(false, true && (false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))))), true, false), true))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true, true), bvec3(bvec3(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true, true), bvec3(bvec3(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true, true)))))))))))) && true)), bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-9.4, -1.7)), mix(vec2(_GLF_FUZZED(-61.17), _GLF_FUZZED((-1.8 * 9.0))), vec2((_GLF_FUZZED(vec2(-9.4, -1.7)))[0], (_GLF_FUZZED(vec2(-9.4, -1.7)))[1]), bvec2(true, true))) : injectionSwitch)).y), (! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))), false))))))))))))) && true)))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))), (false ? _GLF_FUZZED(4.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))))))), false)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), false, true))))))))), bool(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), false, false, false))) && true)), (false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true)))))), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true))) && true))))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.w = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.y;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.w;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         break;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true))))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.z = _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))))))
          return;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.z;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(_GLF_struct_58 _GLF_struct_replacement_58 = _GLF_struct_58((ivec2(-33804, 64071).x & _GLF_IDENTITY(0, (false ? _GLF_FUZZED(45465) : 0))), _GLF_struct_49(_GLF_struct_46(vec4(1.0), mat2x3(1.0)), _GLF_struct_47(ivec2(1)), mat2x4(1.0), _GLF_struct_48(true, bvec2(true), uvec3(1u), mat2(1.0)), ivec3(1)), vec3(1.0), _GLF_struct_52(_GLF_struct_50(mat4x2(1.0)), _GLF_struct_51(vec3(1.0), ivec4(1), mat3(1.0), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))))))), (true ? mat2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))))))) : _GLF_FUZZED(mat2(mat2x3(8627.9776, -5.1, 96.59, 0.6, -3787.7679, -69.06)))))), mat4x3(1.0), mat3x2(1.0))), _GLF_struct_57(_GLF_struct_53(mat4x2(1.0), mat4(1.0), bvec2(true), mat4(1.0), 1.0), _GLF_struct_54(mat3x2(1.0), uvec2(1u), _GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | (uvec3(1u)))), _GLF_struct_55(mat2x3(1.0)), mat3x2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(7.9)))), _GLF_struct_56(bvec2(true))), true); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_58._injected_loop_counter != 1); _GLF_struct_replacement_58._injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
        break;
      }
     GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat2x4(1.0), _GLF_struct_3(vec2(1.0), _GLF_struct_0(mat4(1.0)), _GLF_struct_1(mat4(1.0), mat2(1.0)), mat3(1.0), vec3(1.0), _GLF_struct_2(vec2(1.0), mat2(1.0), vec2(1.0), mat3(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), _GLF_IDENTITY(1, (1) - 0), 1.0, uvec4(1u), vec3(1.0), gl_SubgroupInvocationID, mat4x2(1.0));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            {
            }
           else
            {
             return;
            }
          }
         GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.x = _GLF_struct_replacement_4.subgroup_local_id;
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_struct_11(_GLF_struct_9(mat2x4(1.0), mat3x2(1.0), vec4(1.0), vec2(1.0), bvec3(true), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))))))))), ivec3(1)), _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), _GLF_struct_10(1u, vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(mat2x4(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) + 0.0)), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))), mat4(1.0))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(_GLF_struct_45 _GLF_struct_replacement_45 = _GLF_struct_45(_GLF_struct_44(uvec4(1u), _GLF_struct_40(_GLF_IDENTITY(vec3(1.0), vec3(mat3x4(vec3(1.0), 1.0, cos(0.0), tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), clamp(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), clamp(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 1.0)))) + 0.0)))), mat2(1.0), mat4(1.0), vec4(1.0)), uvec2(1u), _GLF_struct_41(vec2(1.0), ivec3(1), ivec4(1), bvec2(true), bvec2(true), 1), _GLF_struct_42(uvec4(1u), true), _GLF_struct_43(mat3(1.0), mat2(1.0), ivec2(1), ivec2(1), mat2(1.0), _GLF_IDENTITY(uvec4(1u), ~ (~ (_GLF_IDENTITY(uvec4(1u), (true ? uvec4(1u) : _GLF_FUZZED((mat3(1.9, -9.8, -4392.7135, 0.5, 1.3, -51.68, 4.3, 3736.1775, -9403.7242) , GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id))))))))), mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((float(62280u) * 161.174))), float(1.0), bool(true)))), bvec3(true), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), log(abs(1.0)) + (_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), mat3(1.0) * (vec3(0.0, 0.0, 0.0))))))), injectionSwitch.x))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))), true)))), false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0))))), true, true))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)), true))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)), false || ((_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(true, true), false, true)), false, false))))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)), bool(bool(! (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)))))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), bool(bool(false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)), bool(bool(! (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)))))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))))), bool(bvec4(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_45._injected_loop_counter < 1, (_GLF_struct_replacement_45._injected_loop_counter < 1) && true)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, (true) || false)))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < 1)) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0)))) + 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0)))) + 0.0), (false ? _GLF_FUZZED(fma(-1.9, -9.9, 35.55)) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0)))) + 0.0)))), float(_GLF_FUZZED(67.96)), bool(false)))) - 0.0) < injectionSwitch.y)), true, true)))))), _GLF_IDENTITY(true, bool(bvec3(true, false, false))), _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(true))))), bool(bvec4(true, false, true, false))), (injectionSwitch.x < injectionSwitch.y)), true)))) || false)); _GLF_struct_replacement_45._injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) / 1.0), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(65.61)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(1.0, (1.0) + 0.0))))) / vec2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))).y), bool(true)))))))))
          continue;
        }
       else
        {
         GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.x = _GLF_struct_replacement_12._f1.num_workgroup;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), true)))))), true), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), true)))))), true))))), ! (! (bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), true)))))), true), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((false) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) || false)), false), true), true)))))), true))))))))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), true)), (bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)), (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-154.697) : injectionSwitch.x)), 0.0, 0.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) >> 0) > 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) >> 0) > 0)), bool(bvec4((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) >> 0) > 0)), false, true, false))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) >> 0) > 0)), bool(bvec4((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) >> 0) > 0)), false, true, false))), true, true, false))) && true); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (false)))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), true && ((false))))))) || false), bool(bool(! (false)))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch), (clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)) / vec2(1.0, 1.0))).y))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), ! (! ((false))))) || false), true, false)))), true && (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (false)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), false || (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec3((false), true, false))), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ! _GLF_IDENTITY((! ((false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((! ((false))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3((! ((false))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3((! ((false))), true, true)))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3((! ((false))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3((! ((false))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3((! ((false))), true, true)))))))), true))))), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))) || false), true, false)))), true && (! (_GLF_IDENTITY(! (false), false || (! (false)))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), bool(bvec3((! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), true, false))), true && (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (! (false))))))))))) || false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, false)))), true && (! (_GLF_IDENTITY(! (false), false || (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (false), false || (! (false))))), ! (! (true && (! (_GLF_IDENTITY(! (false), false || (! (false))))))))), true && (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), bool(bvec4((_GLF_IDENTITY(! (false), false || (! (false)))), true, false, true))))))))))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, false)))), true && (! (_GLF_IDENTITY(! (false), false || (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (false), false || (! (false))))), ! (! (true && (! (_GLF_IDENTITY(! (false), false || (! (false))))))))), true && (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), true, false)))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), bool(bvec4((_GLF_IDENTITY(! (false), false || (! (false)))), true, false, true))))))))))) || false))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), true && (! (! ((false))))))) || false), true, _GLF_IDENTITY(false, (false) && true))))), true && (! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), true && ((! (false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec3(bool(bvec3(false, true, false)), true, true))))), ! (! ((false))))) || false), true, false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && (! (_GLF_IDENTITY(! (false), false || (! (false)))))), true && (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) && ((false))))))) || false), _GLF_IDENTITY(true, bool(bvec2(true, true))), false)))), true && _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (! ((_GLF_IDENTITY(! (false), false || (! (false))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (! ((_GLF_IDENTITY(! (false), false || (! (false))))))), false))))))), bool(bvec4((! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (! ((_GLF_IDENTITY(! (false), false || (! (false))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ! (! ((_GLF_IDENTITY(! (false), false || (! (false))))))), false))))))), true, false, true))))))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1u, mat4x3(1.0), _GLF_struct_6(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))) : _GLF_FUZZED(149155u))), _GLF_struct_5(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), mat2x3(1.0), bvec3(true), mat2x4(1.0), mat2(1.0)), uvec3(1u), mat4x2(1.0), mat3x4(1.0), _GLF_IDENTITY(ivec2(1), (ivec2(1)) * ivec2(1, 1))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = _GLF_struct_replacement_7._f2.workgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x < injectionSwitch.y))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, false))))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(_GLF_struct_59 _GLF_struct_replacement_59 = _GLF_struct_59((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(_GLF_IDENTITY(0, (0) >> 0))), ~ (~ (_GLF_IDENTITY(0 | (int(0)), min(0 | (int(0)), 0 | (int(0)))))))), int(0), int(_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), ~ (~ (_GLF_IDENTITY(0 | (int(0)), ~ (~ (0 | (int(0)))))))))), int(ivec3(int(_GLF_IDENTITY(int(0), 0 | (int(0)))), 1, 0))))))))), mat2x4(1.0), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_59._injected_loop_counter != 1); _GLF_struct_replacement_59._injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), int(3)))) ^ 0) ^ (int(3))), int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec2(3, 0), clamp(ivec2(3, 0), ivec2(3, 0), _GLF_IDENTITY(ivec2(3, 0), ~ (~ (ivec2(3, 0))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_DEAD(false), true))), false || (! (bool(bvec2(_GLF_DEAD(false), true)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               continue;
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.w = workgroup_id) >> 0u);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_IDENTITY(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_injected_loop_counter < _GLF_IDENTITY((1 | int(_GLF_ONE(1.0, injectionSwitch.y))), ((1 | int(_GLF_ONE(1.0, injectionSwitch.y)))) / (0 ^ 1)))))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4(mat2(1.0)), (mat4(mat2(1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y))))
      continue;
     _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.z = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.w, (GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.z = GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.w) - 0u);
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, exp(0.0)))).x < injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y) && true))) || false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       _GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, min(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, (GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id) / uvec3(1u, 1u, 1u)))), GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id)), (GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, min(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, (GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id) / uvec3(1u, 1u, 1u)))), GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id)), (GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id) - uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))) >> uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, uvec3(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id[_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 0)), _GLF_IDENTITY((int(ivec3(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0)), 0))) | (int(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), 0 + (~ (_GLF_IDENTITY(0, (0) >> 0)))), ~ (_GLF_IDENTITY(0, (0) >> 0)), ~ (_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 0)))) | (0))) | (0)))))))), 0, 0))), _GLF_IDENTITY(((int(ivec3(0, 0, 0))) | (int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, (0) >> 0))), int(_GLF_IDENTITY(ivec2(~ (~ (_GLF_IDENTITY(0, (0) >> 0))), 0), (ivec2(~ (~ (_GLF_IDENTITY(0, (0) >> 0))), 0)) / ivec2(1, 1))))), 0, 0)))), (_GLF_IDENTITY(((int(ivec3(0, 0, 0))) | (int(ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0))) >> 0)))), 0, 0)))), min(((int(ivec3(0, 0, 0))) | (int(ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) >> 0)))), 0, 0)))), ((int(ivec3(0, 0, 0))) | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) >> 0)))), 0, 0)), min(int(ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) >> 0)))), 0, 0)), int(ivec3(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) >> 0)))), 0, 0))))))))) ^ 0) >> 0)))], GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, clamp(GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id, GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id)) : _GLF_FUZZED(max(uvec3(128470u, 49371u, 64474u), subgroup_id))))[2]))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u)))).z;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, (true) || false), false))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), false || ((_GLF_WRAPPED_IF_TRUE(true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)))), (vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0))))) * vec2(1.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
    }
   return;
  }
 _GLF_struct_67 _GLF_struct_replacement_67 = _GLF_struct_67(vec3(1.0), _GLF_struct_63(_GLF_struct_60(mat4(1.0), mat4(1.0), uvec2(1u)), _GLF_struct_61(mat2x3(1.0), bvec2(true), 1u, bvec4(true), uvec4(1u), mat4x2(1.0)), mat4x3(1.0), mat3(1.0), _GLF_struct_62(mat3x4(1.0)), ivec2(1)), _GLF_struct_66(_GLF_struct_64(mat3(1.0), bvec2(true), ivec4(1), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(-2805.6828, 251.380, -6.0, 4.4, 849.064, 5.8, -1216.3255, -8111.6114, -5509.5676)) : mat3(1.0))), ivec3(1), mat3x4(1.0), mat3x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size[_GLF_IDENTITY(0, ~ (~ (0)))], GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-21664)))])).y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y) | (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y)) * _GLF_IDENTITY(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id, uvec3(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id), max(uvec3(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id), uvec3(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id))))).z, uint(uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y * _GLF_IDENTITY(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id, ~ (~ (_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id))).z, 0u)))), mat2x3(1.0), _GLF_struct_65(uvec4(1u), mat3x2(1.0), mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) - 0.0))), bvec2(true)), mat4x3(1.0));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.y = _GLF_struct_replacement_67._f2._f0.workgroup_base;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))) ^ 0) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    break;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), true && (! (false)))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (_GLF_IDENTITY(true, ! (! (true))))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y = GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.y;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), float(injectionSwitch.x))))), float(_GLF_FUZZED(-4.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat2(1.0), _GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y + GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.x, bvec4(true), 1.0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true))))))
                return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(402.775)), vec2(_GLF_FUZZED((2277.2013)), (injectionSwitch)[1]), bvec2(false, true))).x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(dot(vec4(3.2, 49.23, 3.2, 6073.8211), vec4(2.0, -9.6, -6.7, -5.6)), (_GLF_IDENTITY(dot(vec4(3.2, 49.23, 3.2, 6073.8211), vec4(2.0, -9.6, -6.7, -5.6)), _GLF_IDENTITY(float(mat4x2(dot(vec4(3.2, 49.23, 3.2, 6073.8211), vec4(2.0, -9.6, -6.7, -5.6)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (float(mat4x2(dot(vec4(3.2, 49.23, 3.2, 6073.8211), vec4(2.0, -9.6, -6.7, -5.6)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))) / 1.0))) / 1.0)) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(402.775)), vec2(_GLF_FUZZED((2277.2013)), (injectionSwitch)[1]), bvec2(false, true))).x)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-76.51))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (_GLF_IDENTITY((injectionSwitch) * vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), ((injectionSwitch) * vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)) * mat2(1.0))) - vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y)))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.z = _GLF_struct_replacement_8.virtual_gid, _GLF_IDENTITY((GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.z = _GLF_struct_replacement_8.virtual_gid) >> uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8034.6230)), bool(false))), injectionSwitch.x)), ((GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.z = _GLF_struct_replacement_8.virtual_gid) >> uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8034.6230)), bool(false))), injectionSwitch.x))) << 0u));
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_struct_72 _GLF_struct_replacement_72 = _GLF_struct_72(mat3(1.0), 1.0, vec3(1.0), mat4(1.0), _GLF_IDENTITY(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id, (_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id) / uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id, (_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id) / uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)))).y, (_GLF_IDENTITY(_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id, (_GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id) / uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)).y) >> 0u) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(max(0u, _GLF_IDENTITY(0u, (0u) + 0u)), (max(0u, _GLF_IDENTITY(0u, (0u) + 0u))) ^ (122004u & 0u))) ^ (uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, clamp(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, min(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (false ? _GLF_FUZZED(GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread) : GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid)), GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid)), GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid) | (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid)))).xyz.y, 1u, 0u, 1u))))), min(_GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) + 0u))) ^ (uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u))))), _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(191064u))), (0u) + 0u))) ^ _GLF_IDENTITY((uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u))), ((uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)))) ^ 0u))))), 0u | (_GLF_IDENTITY(_GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid) >> uvec4(0u, 0u, 0u, 0u)).xyz.y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) + 0u))) ^ (uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u))))), min(_GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) + 0u))) ^ (uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u))))), (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) + 0u))) ^ (uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)))))) | 0u), _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) + 0u))) ^ (uint(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y, 1u, 0u, 1u))))))))), _GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, _GLF_IDENTITY(uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[0], _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid))) | uvec4(0u, 0u, 0u, 0u))[1], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[2], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[3]), ~ (~ (uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[0], _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid))) | uvec4(0u, 0u, 0u, 0u))[1], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[2], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[3]))))).xyz.y)) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (uvec3(1u, 1u, 1u) ^ (uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u))) ^ (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz)), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[0], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[1], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[2], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[3]))) - uvec4(0u, 0u, 0u, 0u))) | (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid))))).xyz), ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, uvec4(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[0], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[1], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[2], GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid[3]))) - uvec4(0u, 0u, 0u, 0u))) | (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid))))).xyz)))) / uvec3(1u, 1u, 1u)).x + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) * 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz) / _GLF_IDENTITY(uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u)), (uvec3(1u, _GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(1u, (1u) / 1u))) + uvec3(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u))).x + 1, uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz) / _GLF_IDENTITY(uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u)), (uvec3(1u, _GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(1u, (1u) / 1u))) + uvec3(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u))).x + 1, 1u)))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), ~ (~ (_GLF_IDENTITY(uint(6u), uint(6u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz) ^ uvec3(0u, 0u, 0u)), (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) / _GLF_IDENTITY(1u, 0u + (1u))))).x + 1) * ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, max(6u, 6u))), (uint(_GLF_IDENTITY(6u, max(6u, 6u)))) << 0u))) >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ _GLF_IDENTITY((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u)))))), clamp((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(_GLF_IDENTITY(6u, uint(uvec4(6u, 1u, 1u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(6u, (6u) << 0u), clamp(_GLF_IDENTITY(6u, (6u) << 0u), _GLF_IDENTITY(6u, (6u) << 0u), _GLF_IDENTITY(6u, (6u) << 0u)))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u))))))), 1u * (_GLF_IDENTITY(~ ((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u))))))), clamp(~ ((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u))))))), ~ ((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u))))))), ~ ((_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u))))))))))))), (_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(_GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u))), 0u | (_GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u)))))))))), (_GLF_IDENTITY(6u, clamp(6u, 6u, _GLF_IDENTITY(6u, min(6u, _GLF_IDENTITY(6u, (6u) << 0u)))))))))))), ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz) / uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (false ? _GLF_IDENTITY(_GLF_FUZZED(46286u), (_GLF_IDENTITY(_GLF_FUZZED(46286u), min(_GLF_FUZZED(46286u), _GLF_FUZZED(46286u)))) | (_GLF_FUZZED(46286u))) : 1u))) >> 0u), 1u, _GLF_IDENTITY(1u, (1u) / 1u))).x + 1) * ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : uint(6u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : uint(6u))), (_GLF_IDENTITY(uint(6u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : uint(6u)))) | 0u)) | 0u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, ~ (_GLF_IDENTITY(~ (6u), min(~ (6u), ~ _GLF_IDENTITY((6u), ((6u)) | 0u)))))), uint(_GLF_IDENTITY(6u, (6u) | (6u))))))))) << 0u))) % GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz.y), _GLF_struct_71(_GLF_struct_68(mat4x2(1.0), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u)), ivec2(1)), ivec3(1), 1.0, _GLF_struct_69(ivec4(1), mat3(1.0)), _GLF_struct_70(uvec2(1u), bvec2(true), vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1294.7835)), float(1.0), bool(true)))), uvec2(1u)), 1u, mat4(1.0)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), true && (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), false))))))
  return;
 GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.w = _GLF_struct_replacement_72.next_virtual_gid;
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
        break;
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))), clamp(mat2(1.0) * (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))), mat2(1.0) * (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))), mat2(1.0) * (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))))))) * mat2(1.0), _GLF_IDENTITY(vec2(mat3((vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))) * mat2(1.0), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-486.533))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), abs(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), vec4(mat2x3(vec4(0.0, 0.0, 1.0, 1.0), 1.0, 1.0)))))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))))), (vec2(mat3((vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))) * mat2(1.0), 1.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))))) - vec2(0.0, 0.0)))), (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-61.38)), bool(false))), tan(0.0), sqrt(0.0), 0.0))) / vec2(1.0, 1.0))), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), min((injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), min((injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) * mat2(1.0))))))).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(fma(vec2(1.4, -66.71)[1], -50.17, -47.23)) : injectionSwitch.x)) > injectionSwitch.y), false, false))) || false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(93.69, -635.701)) : (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               break;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, (true ? GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid : _GLF_FUZZED(GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread))).w], uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))), 4, 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.6) : injectionSwitch.y))))))
      break;
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(0, (0 | 0) ^ (0))], injectionSwitch[1])))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(0, (0 | 0) ^ (0))], injectionSwitch[1])))), vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(0, (0 | 0) ^ (0))], injectionSwitch[1])))), (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(0, (0 | 0) ^ (0))], injectionSwitch[1])))) : _GLF_FUZZED(injectionSwitch))), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(0, max(0, 0))], mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(0, max(0, 0))]), float(_GLF_FUZZED(-1.3)), bool(false))), injectionSwitch[1])))).x, float(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], injectionSwitch[1])))).x)))) - 0.0) < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (injectionSwitch.x) / _GLF_IDENTITY(1.0, max(1.0, 1.0))) < injectionSwitch.y)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), false))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           for(_GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(_GLF_struct_35(_GLF_struct_33(mat3x4(1.0), ivec3(1), uvec4(1u), uvec2(1u), 1u), bvec2(true), _GLF_struct_34(ivec2(1), 1, mat3x2(1.0), vec2(1.0), mat4x3(1.0), 1, mat4(1.0))), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((0), clamp((0), (0), (0))), 0, 0, _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY((0), clamp((0), (0), (0))), 0, 0, _GLF_IDENTITY(0, min(0, 0))), (ivec4(_GLF_IDENTITY((0), clamp((0), (0), (0))), 0, 0, _GLF_IDENTITY(0, min(0, 0)))) - ivec4(0, 0, 0, 0))) | (ivec4(_GLF_IDENTITY((0), clamp((0), (0), (0))), 0, 0, _GLF_IDENTITY(0, min(0, 0))))))) >> 0, 0 | ((0) >> _GLF_IDENTITY(0, clamp(0, 0, 0)))), 0 | ((0) >> 0))), _GLF_IDENTITY(min(0, 0), clamp(min(0, 0), _GLF_IDENTITY(min(0, 0), (min(0, 0)) << 0), _GLF_IDENTITY(min(0, 0), clamp(min(0, 0), min(0, 0), min(0, 0)))))), _GLF_struct_38(_GLF_struct_36(mat3(1.0), vec4(1.0), vec4(1.0)), _GLF_struct_37(1u, 1u, uvec3(1u), mat2(1.0), ivec4(1)), ivec3(1), mat2x4(1.0), ivec3(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_39._injected_loop_counter, max(_GLF_IDENTITY(_GLF_struct_replacement_39._injected_loop_counter, (_GLF_struct_replacement_39._injected_loop_counter) | (_GLF_IDENTITY(_GLF_struct_replacement_39._injected_loop_counter, 0 ^ _GLF_IDENTITY((_GLF_struct_replacement_39._injected_loop_counter), max((_GLF_struct_replacement_39._injected_loop_counter), _GLF_IDENTITY((_GLF_struct_replacement_39._injected_loop_counter), 0 ^ ((_GLF_struct_replacement_39._injected_loop_counter)))))))), _GLF_IDENTITY(_GLF_struct_replacement_39._injected_loop_counter, _GLF_IDENTITY(int(ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0)), clamp(_GLF_IDENTITY(int(ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0)), max(int(ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0)), int(_GLF_IDENTITY(ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0), (ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0)) * ivec2(1, 1))))), int(ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0)), int(ivec2(_GLF_struct_replacement_39._injected_loop_counter, 0))))))), (_GLF_IDENTITY(_GLF_struct_replacement_39._injected_loop_counter, int(ivec4(_GLF_struct_replacement_39._injected_loop_counter, 1, 0, 1)))) / 1) != (_GLF_IDENTITY(1 & 1, 1 * (1 & 1)))); _GLF_struct_replacement_39._injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true)))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) < injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0)), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, round(length(normalize(1.0)))), transpose(transpose(mat3x2(0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, round(length(normalize(1.0))))))))), 1.0))))))) > injectionSwitch.y))));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) || false)) && true)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             break;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(0, 0)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (1))), int(1))) >> 0))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(mat2x3((injectionSwitch.y), 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 1.0), vec3(1.0, 1.0, 0.0)))))) / 1.0) : _GLF_FUZZED(7192.9775)))))))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))
              break;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))) || false))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false))), false, true))))))) || false)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false))), false, true))))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false))), false, true))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false))), false, true))))))) || false)))))))), (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), true, false)))))))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) && true, (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), false || (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))) && true, bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, true)))) && true)) && true)))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((0 & 3369), clamp((0 & 3369), (0 & 3369), (0 & 3369))) ^ (1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))) | (4))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), ~ (~ (_GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec3(bvec2((! (true)), true), false))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(1)), ((int(1))) | 0), clamp(~ (int(1)), ~ _GLF_IDENTITY((int(1)), max((int(1)), (int(1)))), ~ (int(1))))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.0)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 1.0)), float(mat4x2(float(vec2(injectionSwitch.x, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid)).xyz.z], 4, 64, 0);
 GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread.w = read;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id.x = GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidread.w;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true, false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true); _injected_loop_counter ++)
    {
     _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id, min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id, (GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id, (GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id) | (GLF_merged4_0_1_4_1_1_11_2_1_13_3_1_12readsubgroup_idsubgroup_sizeworkgroup_id)))).x;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       _GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x = _GLF_struct_replacement_26._f5._f0.GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | 0)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), ! (! (true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (true ? GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz : _GLF_FUZZED(uvec3(102163u, 143946u, 6626u)))).z, max(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (true ? GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz : _GLF_FUZZED(uvec3(102163u, 143946u, 6626u)))).z, _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz, (true ? GLF_merged2_0_3_73_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidnext_virtual_gid.xyz : _GLF_FUZZED(uvec3(102163u, 143946u, 6626u)))).z))], _GLF_struct_replacement_32.GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(distance(vec2(81.82, 1.7), injectionSwitch)))) > injectionSwitch.y))))
        break;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
