#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 uvec4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 bvec2 _f1;
 bvec2 _f2;
 uvec4 _f3;
 vec3 _f4;
 uvec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 ivec2 _f1;
 bvec2 _f2;
 mat2x3 _f3;
 vec3 _f4;
 mat2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 uvec4 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 bool _f1;
} ;

struct _GLF_struct_4 {
 uint _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_6 {
 uint _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 uint workgroup_size;
 _GLF_struct_6 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 uint subgroup_id;
 vec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 ivec3 _f1;
 bool _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 vec4 _f3;
 uvec2 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec3(1.0), _GLF_struct_0(mat2x4(1.0), ivec3(1), mat2x4(1.0), vec4(1.0), uvec2(1u), mat3x2(1.0)), _GLF_struct_2(_GLF_struct_1(mat4(1.0), gl_SubgroupID, vec3(1.0)), ivec3(1), true, uvec4(1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.z = _GLF_struct_replacement_3._f2._f0.subgroup_id;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.y = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec4(1.0), gl_WorkGroupSize.x, _GLF_struct_6(1u, _GLF_struct_4(1u, mat4x2(1.0)), _GLF_struct_5(ivec2(1), true)), _GLF_struct_10(_GLF_struct_7(mat4x3(1.0), ivec2(1), bvec2(true), mat2x3(1.0), vec3(1.0), mat2(1.0), mat2x3(1.0)), _GLF_struct_8(mat4(1.0), bvec2(true), bvec2(true), uvec4(1u), vec3(1.0), uvec2(1u), ivec3(1)), uvec4(1u), _GLF_struct_9(uvec4(1u), mat4(1.0))));
 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = _GLF_struct_replacement_11.workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.z * subgroup_size + subgroup_local_id;
 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.z * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y], 4, 64, 0);
 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x = read;
 atomicStore(checker[GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y], GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x, 4, 64, 4);
}
