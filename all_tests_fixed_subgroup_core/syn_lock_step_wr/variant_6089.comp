#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u), (uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u)) * uvec4(1u, 1u, 1u, 1u)))), 1u)))) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_local_id)))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, max(64, 64)) : _GLF_FUZZED((~ 59933))))) >> 0), 0);
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)], read, 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) * 1))));
}
