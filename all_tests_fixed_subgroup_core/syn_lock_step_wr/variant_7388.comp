#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false)))), bool(bvec3(false, true, true))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, float(float(0.0))), 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-95.86))), (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) ^ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), min(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))) << 0u)))) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x) - 0u) : _GLF_FUZZED(subgroup_size)))))), clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x))), ~ (~ ((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x)))))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(uint(uvec3(workgroup_size * workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_size * workgroup_id, 0u, 1u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), _GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))) && true, ((bool(_GLF_IDENTITY(false, (false) && true))) && true) && true))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, (false) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3((_GLF_IDENTITY(false, (false) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true))))))))))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)))) - 0u) + _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)), subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))) || false), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false)), true, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y)), false, false, true)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y)), false, false, true)))), (bool(bool(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y)), false, false, true))))) && true))), (bool(bool(_GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y)), false, false, true)))), (bool(bool(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y)), false, false, true))))) && true)))) && true))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(subgroup_id * subgroup_size, 0u))), min(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), max(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(uvec4(max((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id + 1))) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), (uvec4(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)) | uvec4(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_size))), 0u, 0u, 0u)))))))), 0u ^ _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : (((subgroup_local_id + 1) % subgroup_size))))) >> 0u), 1u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : (((subgroup_local_id + 1) % subgroup_size))))) >> 0u), 1u, 0u)))), max(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : (((subgroup_local_id + 1) % subgroup_size))))) >> 0u), 1u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : (((subgroup_local_id + 1) % subgroup_size))))) >> 0u), 1u, 0u)))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : (((subgroup_local_id + 1) % subgroup_size))))) >> 0u), 1u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : (((subgroup_local_id + 1) % subgroup_size))))) >> 0u), 1u, 0u))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.8), _GLF_FUZZED(57.91)), bvec2(false, false))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(40.77))), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0), mat3(mat4x3(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0)))))) : _GLF_FUZZED(40.77)))) - 0.0))), _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0)))), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0)))) - 0.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0))), injectionSwitch.x))) / 1.0), mix(float(_GLF_FUZZED(26.03)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0)))) - 0.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0))), injectionSwitch.x))) / 1.0)), bool(true))), injectionSwitch.x)))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0)))) - 0.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0))), injectionSwitch.x))) / 1.0), mix(float(_GLF_FUZZED(26.03)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-19.03)), float(injectionSwitch.x), bool(true)))) - 0.0)))) - 0.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0))), injectionSwitch.x))) / 1.0)), bool(true))), injectionSwitch.x))))), float(_GLF_FUZZED((- 1.4))), bool(false))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) * 1.0), 0.0, 1.0, 1.0))))) * sqrt(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0)))))))) > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec2(-1.7, -2.4), max(vec2(-1.7, -2.4), _GLF_IDENTITY(vec2(-1.7, -2.4), (vec2(-1.7, -2.4)) * mat2(1.0)))).y), float(mat3(_GLF_FUZZED(vec2(-1.7, -2.4).y), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), bvec2(false, true)), min(mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec2(-1.7, -2.4), max(vec2(-1.7, -2.4), _GLF_IDENTITY(vec2(-1.7, -2.4), (vec2(-1.7, -2.4)) * mat2(1.0)))).y), float(mat3(_GLF_FUZZED(vec2(-1.7, -2.4).y), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), bvec2(false, true)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec2(-1.7, -2.4), max(vec2(-1.7, -2.4), _GLF_IDENTITY(vec2(-1.7, -2.4), (vec2(-1.7, -2.4)) * mat2(1.0)))).y), float(mat3(_GLF_FUZZED(vec2(-1.7, -2.4).y), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), bvec2(false, true))))).x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), (injectionSwitch.x > injectionSwitch.y) && true))), (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) && true)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x)), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(cos(0.0), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), (_GLF_IDENTITY(min(0.0, 0.0), (min(0.0, 0.0)) - determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) - _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0.0, (0.0) / 1.0))))), dot(vec2(cos(0.0), 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(50521))), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))).x), max(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, injectionSwitch.x)))) + tan(0.0))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), min(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))).y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(cos(0.0), 1.0), vec2(0.0, 0.0)), dot(vec2(cos(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, cos(0.0), 1.0)), (true ? float(vec3(1.0, cos(0.0), 1.0)) : _GLF_FUZZED(560.948))))), vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(44.45))), 1.0))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 1.0))), 1.0, 1.0))))).x), max(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, injectionSwitch.x)))) + tan(0.0))))) > injectionSwitch.y)))))) && true), false || (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.4) : _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-136.664)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.y)))))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), clamp(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(step(292.679, -6.7))))))), (_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(min(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(vec3(6490.2771, 5.4, 0.7).s)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec2(bool(false), false)), true && (bool(bvec2(bool(false), false)))))))) / 1.0)))) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), clamp(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(25.38, -7067.6150, -1.1, -9038.8126)[1]) : injectionSwitch)), max(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(25.38, -7067.6150, -1.1, -9038.8126)[1]) : injectionSwitch)), max(injectionSwitch, injectionSwitch)).x))), min(injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(min(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(vec3(6490.2771, 5.4, 0.7).s)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))) / 1.0)))) > injectionSwitch.y)))))) && true))))), true))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false))))))))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) - 0)) | 0))))), 4, _GLF_IDENTITY(64, (64) | (64)), _GLF_IDENTITY(4, 0 | (4)));
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)) + 0u), uint(5u)), max(_GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(uint(5u), uint(5u))))), clamp((0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)) + 0u), uint(5u)), max(_GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(uint(5u), uint(5u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)) + 0u), uint(5u)), max(_GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(uint(5u), uint(5u))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)) + 0u), uint(5u)), max(_GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(uint(5u), uint(5u))))), uint(uvec2((0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)) + 0u), uint(5u)), max(_GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(uint(5u), uint(5u))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))) | (_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))]), min(uint(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))]), uint(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))]))), (uint(buf[virtual_gid])) << 0u))), buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)), min((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)))) << 0u))))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(1u * (read), _GLF_IDENTITY((1u * (read)), ((1u * (read))) - 0u) - 0u)), _GLF_IDENTITY(4, 0 | (4)), 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), false || (_GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) || false))), _GLF_IDENTITY(bool(bool(bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true))))), bool(_GLF_IDENTITY(bvec2(bool(bool(bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(bool(bool(bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(false, false, false)))), _GLF_IDENTITY(bool(bvec4(bool(bool(bool(bvec3(false, false, false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(bvec4(bool(bool(bool(bvec3(false, false, false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(bool(bool(bool(bvec3(false, false, false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bool(bool(bvec3(false, false, false)))))), (bool(_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bool(bool(bvec3(false, false, false))))))) && true)))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, false || (true)), true, false)), false || (bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true, (true) && true) && _GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), (! ((false))) || false), _GLF_IDENTITY(_GLF_IDENTITY(! (! (! ((false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (! ((false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), true && (! ((! ((false))))))))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true))))), (bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true)))), true && (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! ((false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! (_GLF_IDENTITY((false), ((false)) && true))))))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, _GLF_IDENTITY(bool(bvec2((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, true)), false || (bool(bvec2((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, true)))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(! (! (! ((false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! (_GLF_IDENTITY((false), ((false)) && true))))))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, _GLF_IDENTITY(bool(bvec2((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, true)), false || (bool(bvec2((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, true)))))) || false)))), ((_GLF_IDENTITY(! (! (! ((false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! (_GLF_IDENTITY((false), ((false)) && true))))))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, _GLF_IDENTITY(bool(bvec2((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, true)), false || (bool(bvec2((bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true, true)))))) || false))))) && true)) || false)), ! (! ((! (_GLF_IDENTITY(! (! (! ((false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (! ((false))), false || (! (! _GLF_IDENTITY(((false)), true && (((false)))))))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true))))), (bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, true)))))) && true)))))))))), false || (! (! (! ((false)))))))), ! (! ((_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((false))), bool(bvec2(! (! ((false))), false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! _GLF_IDENTITY((! ((false))), ! (! ((! ((false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true))))), (bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! _GLF_IDENTITY(((false)), (((false))) || false))), false, true)))))) && true))), (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((! ((false))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))) && ((! ((false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! _GLF_IDENTITY((! ((false))), bool(bool((! ((false))))))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), _GLF_IDENTITY(false, false || (false)), true))))), (bool(_GLF_IDENTITY(bvec3(! (! (! ((false)))), false, true), bvec3(bvec3(bvec3(! (! (! ((false)))), false, true)))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))) || false))))) || false))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (! (! ((false)))), true && (! (! (! ((false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(! (! (! ((false)))), true && (! (! (! ((false)))))))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
