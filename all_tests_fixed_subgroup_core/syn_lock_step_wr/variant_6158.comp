#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))), injectionSwitch)).y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((vec3(-9.8, -8003.3409, 838.912).s - -69.18))), bool(false))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(abs(vec2(0.0, 0.0))) + (injectionSwitch)).y), false, false, true)))), true))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), true)))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(59.05)), float(injectionSwitch.y), bool(true)))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) && true), true)))), true))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), true)))))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_WRAPPED_LOOP(false))))) || false)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x = subgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (14181 & 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-66.19, -5.7)) : injectionSwitch)).y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(cos(-857.360)) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + length(0.0))), false))))))))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
      }
     else
      {
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.3)), bool(false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.3)), bool(false))))), (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.3)), bool(false)))))) || false))))))))) && true))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))))) && true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0)) ^ 0)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     return;
    }
   GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y = subgroup_local_id;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) + int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                return;
              }
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false, true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.y = num_workgroup;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), bool(bvec4(! (false), true, false, true)))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false)))), true, true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false)))), true, true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), false)), false, false))))), true, true))), true, false))))), (bool(bvec2((false), false))) || false)), bool(bvec4(! (false), true, false, true))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), (bool(bvec2((false), false))) || false)), bool(bvec4(! (false), true, false, true)))))))) || false), (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))) || false)) && true)))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), bool(bvec4(! (false), true, false, true)))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false)))), true, true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), true && ((false))), false), bvec2(bvec2(bvec2((false), false)))), true, true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, true && (false))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), true, false))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), false)), false, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), true), bvec3(bvec4(bvec3(bvec2((false), false), true), true))))), false)), true, false)))), bvec2(bvec2(bvec2((false), false)))), true, true))))))), false)), false, false)))))))), true, true))), true, false))))), (bool(bvec2((false), false))) || false)), bool(bvec4(! (false), _GLF_IDENTITY(true, ! (! (true))), false, true))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), (bool(bvec2((false), false))) || false)), bool(bvec4(! (false), true, false, true)))))))) || false), (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))) || false)) && true)))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.1), _GLF_FUZZED(-71.76)), vec2((injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))))))], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), vec2(_GLF_IDENTITY(_GLF_FUZZED(-8.1), mix(float(_GLF_FUZZED(-22.27)), float(_GLF_FUZZED(-8.1)), bool(true))), (injectionSwitch)[1]), bvec2(false, true))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5978.8281), _GLF_IDENTITY(_GLF_FUZZED(94.14), clamp(_GLF_IDENTITY(_GLF_FUZZED(94.14), float(mat3x4(_GLF_FUZZED(94.14), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_FUZZED(94.14), (false ? _GLF_FUZZED(7.1) : _GLF_FUZZED(94.14))), _GLF_FUZZED(94.14)))), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, clamp(1, 1, 1))]), bvec2(true, true))), injectionSwitch)).y)), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, false, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(true, false, false)))), false)))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false))))))))))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), ! (! (bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false))))))))))))))))), (! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec4(bvec3(bvec3(true, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), bool(_GLF_IDENTITY(bvec2(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), true)), bvec2(bvec4(bvec2(bvec2(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), true)), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), true)), bvec2(bvec4(bvec2(bvec2(bool(bool(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))), true)), false, true)))), true))))))))))) || false))))), false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(2), int(2))) ^ (_injected_loop_counter)) < 1, true)), ! (! (_GLF_IDENTITY(bool(bvec2(_injected_loop_counter < 1, true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)))))))), true)), true, false, true)))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7660.1121)), float(injectionSwitch.x), bool(true))) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(7.5) : injectionSwitch[0])), injectionSwitch[0])), (false ? _GLF_FUZZED(-992.276) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(810.377, max(810.377, 810.377))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))[0])), injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(7.5) : injectionSwitch[0])), injectionSwitch[0])), (false ? _GLF_FUZZED(-992.276) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(810.377, max(810.377, 810.377))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))[0])), injectionSwitch[1])) - vec2(0.0, 0.0))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       break;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-8.3))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5)), (_GLF_IDENTITY(int(5), int(5))) * 1))), 0 | ((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)), ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1))) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)))), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)), ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1))) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)), ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1))) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1)), ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1))) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) * 1))))) ^ 0))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) ^ 0)), ~ (~ (((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (5))), int(5)), (_GLF_IDENTITY(int(5), int(5))) * 1))), 0 | ((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) * 1)))))) >> _GLF_IDENTITY(int(5), int(5)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(21944) : _injected_loop_counter))) | (_injected_loop_counter))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.w = workgroup_id;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.z * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.w;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(1719) : _GLF_IDENTITY(0, clamp(0, 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, ((0u & 176389u) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u, 1u))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 0u))))))) + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x * subgroup_size + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y;
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x * subgroup_size + (_GLF_IDENTITY((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1), (_GLF_IDENTITY((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1), ((GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1)) << 0u)) << (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | 0u)) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) * 1), _GLF_IDENTITY(int(7), (int(7)) ^ 0))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
    return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, length(vec2(0.0, 0.0)), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0)))))), length(0.0), sin(0.0), sin(0.0), 0.0, 1.0, 0.0, 1.0))), 1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(vec2(-6.5, 956.166)) : vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, length(vec2(0.0, 0.0)), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, length(vec2(0.0, 0.0)), 0.0, 1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), min(injectionSwitch, injectionSwitch)).y))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.z = read;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false), _GLF_IDENTITY(true, ! (! (true))))))))))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), _GLF_IDENTITY(false || (bool(bvec4(false, true, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false || (bool(bvec4(false, true, true, true))), true && (false || (bool(bvec4(false, true, true, true))))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false || (bool(bvec4(false, true, true, true))), true && (false || (bool(bvec4(false, true, true, true))))), true, false)), false, true))))))))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && true) && true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0))) : _GLF_FUZZED(-9.4)))))))
                  return;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false)))) && true))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, 0.0 + ((injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), 0 ^ ((0 | 0))), ((0 | 0)) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 0.0)))) - 0.0)) - 0.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0)) ^ 0))); _injected_loop_counter --)
    {
     atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_12next_virtual_gidnum_workgroupreadworkgroup_id.z, 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(-80752, clamp(_GLF_IDENTITY(-80752, clamp(-80752, -80752, -80752)), -80752, -80752)) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), false || (bool(bvec3(true, false, true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.1)), bool(false))) : _GLF_FUZZED(-2.7))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * vec2(1.0, 1.0)), vec2(1.0, 1.0))) * ((injectionSwitch) * mat2(1.0)))).y) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), false, false))))))), true, false, true)))), false || (true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), true && (! ((false)))))), true, false, true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec2(! (true), false), bvec2(bvec3(bvec2(! (true), false), false)))))))) || false) && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true))), (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true)))) && true)))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), bool(bvec2(! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)), true, false, true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)), true, false, _GLF_IDENTITY(true, (true) && true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bool(! ((false))), ! (! (bool(! ((false)))))))), true && (! ((false)))))) || false)), true, false, true))))), false), true, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)), true, false, true))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)), true, false, true))))), false), true, false)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)), true, false, true))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) || false)), true && (_GLF_IDENTITY(! ((false)), (! ((false))) || false))))) || false)), true, false, true))))), false), true, false))))))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), (_GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(((false)), false, false), bvec3(bvec4(bvec3(((false)), false, false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(((false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(((false)), false, false), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(((false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(((false)), false, false), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))), true && ((bool(_GLF_IDENTITY(bvec3(((false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(((false)), false, false), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(((false)), false, false), true))), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))))))))) || false) && true))) || false)))), true && (! ((false)))))), true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, _GLF_IDENTITY(true, (true) || false)), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), false))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), _GLF_IDENTITY(false, false || (false))))))))), true))))))))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), (_GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(((false)), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), (_GLF_IDENTITY((false), bool(bvec2((false), true)))) && true)), false, false), true)))), (bool(_GLF_IDENTITY(bvec3(((false)), false, false), bvec3(bvec4(bvec3(((false)), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))), true))))) && true))) || false)))), true && (! ((false)))))), true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(true))), false, true), false))))))))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), true && (! ((false)))))), true, false, true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && (! ((false)))))), true, false, true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), (true && (! ((false)))) || false)))), true, false, true)))), ((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, _GLF_IDENTITY(true, true && (true))))), (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, _GLF_IDENTITY(true, true && (true)))))) && true))) && true), true, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true))))), true && (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(true, (true) || false)), bvec3(bvec3(bvec3(true, false, true)))))))))), true && _GLF_IDENTITY((bool(bvec4((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! ((false)), true && (! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), (((false))) && true)))))))), true, false, true)))), true, true, true))), ((bool(bvec4((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true)))), true, true, true)))) || false)))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (true && (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! _GLF_IDENTITY(((false)), ! (_GLF_IDENTITY(! (((false))), (! (((false)))) || false)))), bool(bvec3(true && (! _GLF_IDENTITY(((false)), ! (_GLF_IDENTITY(! (((false))), (! (((false)))) || false)))), false, false)))))), true, false, true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! ((false))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false, true)))))))))), true && (! ((false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), false)))))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))))))), true && (! ((false))))), (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) && true)) && true)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), true && (! ((false)))), (_GLF_IDENTITY(! ((false)), true && (! ((false))))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), true && (! ((false)))), (_GLF_IDENTITY(! ((false)), true && (! ((false))))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), true && (! ((false)))), (_GLF_IDENTITY(! ((false)), true && (! ((false))))) && true)))))))))))), true, _GLF_IDENTITY(false, false || (false)), true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))))), mix(float(float(vec3(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0))))))), float(_GLF_FUZZED(-2.5)), bool(false)))) < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))).y))))))))))), false || ((_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && true), true && (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), false || ((! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), true, _GLF_IDENTITY(false, false || (false)), true)), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! (_GLF_IDENTITY((false), ((false)) && true))))))))), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), ! (! (true && (! ((false)))))))))))))), ! (! (! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), bool(bvec4(true && (! ((false))), true, false, false)))))))))))), true, _GLF_IDENTITY(false, false || (false)), true))), true && (_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! (_GLF_IDENTITY((false), ((false)) && true))))))))), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), ! (! (true && (! ((false)))))))))))))), ! (! (! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), bool(bvec4(true && (! ((false))), true, false, false)))))))))))), true, _GLF_IDENTITY(false, false || (false)), true))), ! (! ((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! (_GLF_IDENTITY((false), ((false)) && true))))))))), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), ! (! (true && (! ((false)))))))))))))), ! (! (! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), bool(bvec4(true && (! ((false))), true, false, false)))))))))))), true, _GLF_IDENTITY(false, false || (false)), true))))))))), true && ((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))), (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))) && true), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), ! (! (((_GLF_IDENTITY(false, ! (! (false)))))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), bool(bool(_GLF_IDENTITY(true && (! ((false))), ! (! (true && (! ((false)))))))))))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))))), true, _GLF_IDENTITY(false, false || (false)), true))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))))), bool(bvec4(_GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), ! (! (((_GLF_IDENTITY(false, ! (! (false)))))))), false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)) || false)))), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))), true)), ! (! (bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! ((false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), bool(bvec4(! (! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, true, false)))))), true, _GLF_IDENTITY(false, false || (false)), true))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (! ((! ((false)))))))))), bool(bvec2(! (! (! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (! ((! ((false)))))))))), false))))), true, false, true))), _GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), true && (! ((false))))), ! (! (! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))) && _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))), true && (_GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))), bool(bvec3(_GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))), ! (! ((! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true))))))), true, true))))))))))), true, false, true)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY(((! (bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), (true && _GLF_IDENTITY((! ((_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)), true && (bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)))))))) && true))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))) || false), true && (! ((_GLF_IDENTITY(false, (false) && true)))))))))), true, false, true))))), ! (! (((! (bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), (true && _GLF_IDENTITY((! ((_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)), true && (bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)))))))) && true))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))) || false), true && (! ((_GLF_IDENTITY(false, (false) && true)))))))))), true, false, true)))))))), bool(bvec4(_GLF_IDENTITY(((! (bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), (true && _GLF_IDENTITY((! ((_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)), true && (bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)))))))) && true))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))) || false), true && (! ((_GLF_IDENTITY(false, (false) && true)))))))))), true, false, true))))), ! (! (((! (bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), (true && _GLF_IDENTITY((! ((_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)), true && (bool(bvec3(! ((! ((_GLF_IDENTITY(false, ! (! (false))))))), false, false)))))))) && true))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))) || false), true && (! ((_GLF_IDENTITY(false, (false) && true)))))))))), true, false, true)))))))), true, true, false))))) || false))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), ! (! (((false))))), bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY(((false)), ! (! (((false))))), (! _GLF_IDENTITY(((false)), ! (! (((false)))))) || false), false, true))))))), true, false, true))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(bool(bvec4(! ((false)), false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(! ((false)), false, false, false)), ! (! (bool(bvec4(! ((false)), false, false, false))))))))), true && (! _GLF_IDENTITY(((false)), ! (! (((false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(bool(bvec4(! ((false)), false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(! ((false)), false, false, false)), ! _GLF_IDENTITY((! (bool(bvec4(! ((false)), false, false, false)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (bool(bvec4(! ((false)), false, false, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (bool(bvec4(! ((false)), false, false, false)))), false || (bool(! (bool(bvec4(! ((false)), false, false, false))))))), ! (! (bool(_GLF_IDENTITY(bool(! (bool(bvec4(! ((false)), false, false, false)))), false || (bool(! (bool(bvec4(! ((false)), false, false, false)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3((! (bool(bvec4(! ((false)), false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true && (! _GLF_IDENTITY(((false)), ! (! (((false))))))))) && true)), true, false, true)))), bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_IDENTITY(! (! (((false)))), _GLF_IDENTITY(bool(bvec2(! (! (((false)))), true)), false || (bool(bvec2(! (! (((false)))), true)))))), true && (_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), ! (_GLF_IDENTITY(! (! ((false))), (! (! ((false)))) || false)))))))))), true, false, true)))), ! (! (! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), ! (! (((false))))), true && (! ((false))))), true && (! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), ! (! (((false))))), true && (! _GLF_IDENTITY(((false)), false || (((false)))))))))), true, false, true))))))), true, true)))))), true, true, true)), _GLF_IDENTITY(true && (bool(bvec4((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true)))), true, true, true))), ! (! (_GLF_IDENTITY(true && _GLF_IDENTITY((bool(bvec4((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true)))), true, true, true))), false || ((bool(bvec4((! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true)))), true, true, _GLF_IDENTITY(true, (true) || false)))))), ! (! (true && (bool(bvec4((! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(true && (! ((false))), _GLF_IDENTITY(true, true && (true)) && (true && (! ((false)))))))), true, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), true, false, true)), true))))), true, true, true)))))))))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))).y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))
            {
             for(int _injected_loop_counter = (1 ^ (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
       if(_GLF_DEAD(false))
        return;
       return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
