#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), (max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))).x)) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), (max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))).x)) + 0.0), 1.0 * (_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), (max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))).x)) + 0.0))), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), (max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))).x)) + 0.0)))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))), mat2(1.0) * (mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))))))), injectionSwitch.x)))) > injectionSwitch.y))))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                return;
               return;
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, tan(0.0)), (true ? mat2(injectionSwitch, 0.0, tan(0.0)) : _GLF_FUZZED(mat2(-37.19, 9348.4218, 6291.6593, -2.5)))))).y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)))))).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)))))).y : _GLF_FUZZED(-24.33)))) && true)) && true)))), true), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true, false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true, false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true, false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true))))))), true, true, false))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), true), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), true), true), bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), true), true), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), true), true), bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))), true), true), true))))))))))))))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, false, false, false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-230.178)), float((injectionSwitch)[0]), bool(true))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float((mat2x4(-16.19, -2.8, -734.483, -4.4, 9.0, 4.9, -5.7, 8874.4730) == mat2x4(0.6, -6097.2496, 7.1, -1.2, -24.29, 7.0, -3.4, 29.07)))), _GLF_FUZZED(41.23)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false))))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true), false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-230.178)), float((injectionSwitch)[0]), bool(true))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float((mat2x4(-16.19, -2.8, -734.483, -4.4, 9.0, 4.9, -5.7, 8874.4730) == mat2x4(0.6, -6097.2496, 7.1, -1.2, -24.29, 7.0, -3.4, 29.07)))), _GLF_FUZZED(41.23)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false))))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true), false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-230.178)), float((injectionSwitch)[0]), bool(true))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float((mat2x4(-16.19, -2.8, -734.483, -4.4, 9.0, 4.9, -5.7, 8874.4730) == mat2x4(0.6, -6097.2496, 7.1, -1.2, -24.29, 7.0, -3.4, 29.07)))), _GLF_FUZZED(41.23)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), true, false))))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true), false))))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), false)))) && true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec2((true) || false, false))))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((_GLF_IDENTITY(false, true && (false)))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! ((false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))), true && (! ((false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))), (! (false)) && true))))), (false) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(injectionSwitch.x < injectionSwitch.y)) && true)) || false))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(injectionSwitch.x < injectionSwitch.y)) && true)) || false))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sqrt(0.0))))))), (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))) || false))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0))))).x < injectionSwitch.y)))))) || false)) && true)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true, false, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec3(6620, 52910, -70553)[0]) : 1)), 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, _GLF_IDENTITY((7) | 0, ~ (~ ((7) | 0))))))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, _GLF_IDENTITY((7) | 0, ~ (~ ((7) | 0))))))), (int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, _GLF_IDENTITY((7) | 0, ~ (~ ((7) | 0)))))))) | (int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, _GLF_IDENTITY((7) | 0, ~ (~ ((7) | 0))))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(7, (7) - 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(7, (7) - 0), 0 + (_GLF_IDENTITY(7, (7) - 0)))))))), _GLF_IDENTITY(7, 1 * (7)), 7))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (int(7)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 ^ (int(_GLF_IDENTITY(int(7), (int(7)) / int(_GLF_ONE(1.0, injectionSwitch.y)))))), (int(int(7))) * 1)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), _GLF_IDENTITY(float(vec2((injectionSwitch.x), 0.0)), (false ? _GLF_FUZZED(7.9) : float(vec2((injectionSwitch.x), 0.0))))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) * 1.0)) - 0.0) - 0.0))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.2) : injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * abs(sqrt(vec2(1.0, 1.0))), mat2(1.0) * ((injectionSwitch) * abs(sqrt(vec2(1.0, 1.0)))))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) || false)))), ((! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) || false))))) || false)), true))), _GLF_IDENTITY(false, bool(bool(false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)) || false), ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true))))))) && true)) || false))))) && true), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), false), true)))))))) && _GLF_IDENTITY(true, (true) && true))) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2258.1273, 4045.4205)))).y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, abs(1.0), 0.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED((+ mat3x2(1.9, -36.91, -48.68, 6.4, 5.0, 814.873))) : mat3x2(injectionSwitch.y, abs(1.0), 0.0, 1.0, 0.0, 1.0)))))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, clamp(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, min(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))
    {
     return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).y, max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).y))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(int(2), 0, 1)), (_GLF_IDENTITY(int(ivec3(int(2), 0, 1)), (false ? _GLF_FUZZED(-80539) : int(ivec3(int(2), 0, 1))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec4(workgroup_size * workgroup_id, 1u, 1u, 1u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) ^ 0))), (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | 0))), (6) / 1))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true, true, false))))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(! (! (false))), bool(bvec4(bool(! (! (false))), true, true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(! (! (false))), bool(bvec4(bool(! (! (false))), true, true, true))))), (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(! (! (false))), bool(bvec4(bool(! (! (false))), true, true, true)))))) || false)))))))), bool(bvec4(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, determinant(mat4(0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 0.0)), 0.0, 0.0)), (vec2(mat4x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, determinant(mat4(0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 0.0)), 0.0, 0.0))) - vec2(0.0, 0.0))).x > injectionSwitch.y)), false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false))))), false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), true)))), ! (! (bool(bvec3(_GLF_DEAD(false), true, false)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), (1.0 * (injectionSwitch.x)) - 0.0)))))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))))) > injectionSwitch.y) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), _GLF_IDENTITY(min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)), clamp(_GLF_IDENTITY(min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)), (min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) * exp(0.0)), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))), float(mat3(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))), 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))), max(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), _GLF_IDENTITY(float(_GLF_FUZZED(6.0)), min(_GLF_IDENTITY(float(_GLF_FUZZED(6.0)), min(float(_GLF_FUZZED(6.0)), _GLF_IDENTITY(float(_GLF_FUZZED(6.0)), clamp(float(_GLF_FUZZED(6.0)), float(_GLF_FUZZED(6.0)), float(_GLF_FUZZED(6.0)))))), float(_GLF_FUZZED(6.0)))), bool(false))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_IDENTITY(_GLF_FUZZED(-9.4), clamp(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2586.8391), _GLF_FUZZED(-26.48)), bvec2(false, false))).x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4), float(_GLF_IDENTITY(mat3(false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), transpose(transpose(mat3(false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))))))))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((247.075 + 47.36))), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false)))))), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false)))))), (true ? clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false)))))) : _GLF_FUZZED(-838.611))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false)))))), mix(float(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))))))), float(_GLF_FUZZED(-9689.5978)), bool(false)))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_IDENTITY(_GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)), tan(0.0) + (_GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)))) : _GLF_FUZZED(-9.4))), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(-9.4), (false ? _GLF_FUZZED(fma(-32.59, 39.16, -1184.7991)) : _GLF_FUZZED(-9.4))))))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(6.0)), bool(false))), 1.0))))))))) > injectionSwitch.y) && true)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.4, clamp(-9.4, -9.4, -9.4))), min(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_IDENTITY(_GLF_FUZZED(-9.4), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(_GLF_IDENTITY(-9.4, clamp(-9.4, -9.4, -9.4))), 1.0, 0.0, 0.0), (vec4(_GLF_FUZZED(-9.4), 1.0, 0.0, 0.0)) * mat4(1.0)))), _GLF_FUZZED(-9.4))), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), float(_GLF_IDENTITY(vec2(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(-9.4)), float(_GLF_FUZZED(1.4)), bool(false))))), mix(float(_GLF_FUZZED(-6.6)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(-9.4)), float(_GLF_FUZZED(1.4)), bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(-9.4)), float(_GLF_FUZZED(1.4)), bool(false))))), mix(float(_GLF_FUZZED(3.7)), float(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(-9.4)), float(_GLF_FUZZED(1.4)), bool(false)))))), bool(true)))) / 1.0)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), (_GLF_FUZZED(-9.4)) + log(1.0)))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), 0.0), _GLF_IDENTITY(max(vec2(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0))), (_GLF_IDENTITY(1.0 * (injectionSwitch.x), min(1.0 * (injectionSwitch.x), _GLF_IDENTITY(1.0 * (injectionSwitch.x), 1.0 * _GLF_IDENTITY((1.0 * (injectionSwitch.x)), clamp(_GLF_IDENTITY((1.0 * (injectionSwitch.x)), (_GLF_IDENTITY((1.0 * (injectionSwitch.x)), (true ? (1.0 * (injectionSwitch.x)) : _GLF_FUZZED(-6.4)))) + 0.0), (1.0 * (injectionSwitch.x)), _GLF_IDENTITY((1.0 * (injectionSwitch.x)), mix(float((1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(-880.093)), bool(false))))))))) - 0.0))))), 0.0), vec2(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(5746.6371)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), clamp(float(_GLF_FUZZED(-9.4)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), float(vec2(_GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), mix(float(float(_GLF_FUZZED(-9.4))), float(_GLF_FUZZED(-875.621)), bool(false))), 1.0))), float(_GLF_FUZZED(-9.4)))), bool(true))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), max(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(5746.6371)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), clamp(float(_GLF_FUZZED(-9.4)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), float(vec2(_GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), mix(float(float(_GLF_FUZZED(-9.4))), float(_GLF_FUZZED(-875.621)), bool(false))), 1.0))), float(_GLF_FUZZED(-9.4)))), bool(true))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), mix(float(_GLF_FUZZED(-978.601)), float(false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(5746.6371)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), clamp(float(_GLF_FUZZED(-9.4)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), float(vec2(_GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), mix(float(float(_GLF_FUZZED(-9.4))), float(_GLF_FUZZED(-875.621)), bool(false))), 1.0))), float(_GLF_FUZZED(-9.4)))), bool(true))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), bool(true))), false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), mix(float(_GLF_FUZZED(5746.6371)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), clamp(float(_GLF_FUZZED(-9.4)), _GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), float(vec2(_GLF_IDENTITY(float(_GLF_FUZZED(-9.4)), mix(float(float(_GLF_FUZZED(-9.4))), float(_GLF_FUZZED(-875.621)), bool(false))), 1.0))), float(_GLF_FUZZED(-9.4)))), bool(true))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))))), 0.0)), min(max(vec2(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), max((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), (1.0 * _GLF_IDENTITY((injectionSwitch.x), max(_GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-1052.7067) : (injectionSwitch.x))), max((injectionSwitch.x), (injectionSwitch.x)))) - 0.0), (injectionSwitch.x)))) - 0.0)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (injectionSwitch.x), (1.0 * _GLF_IDENTITY((injectionSwitch.x), max(_GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x)))) - 0.0), (injectionSwitch.x)))) - 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9255.7831) : _GLF_IDENTITY(1.0 * (injectionSwitch.x), (1.0 * _GLF_IDENTITY((injectionSwitch.x), max(_GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x)))) - 0.0), (injectionSwitch.x)))) - 0.0)))) : _GLF_FUZZED(313.940)))))), 0.0), vec2(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))) + 0.0)))), 0.0)), max(vec2(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), log(1.0), 1.0), transpose(transpose(mat4x3(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 1.0)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x, 1.0 * (injectionSwitch.x))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(46.38)), float(0.0), bool(true)))))), vec2(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), mix(float(_GLF_FUZZED(-4.1)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), bool(true)))), 0.0)))))))) > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))))), (false ? _GLF_FUZZED(1706) : _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2)))))) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))))), (false ? _GLF_FUZZED(1706) : _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2)))))) ^ 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))))), (false ? _GLF_FUZZED(1706) : _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), min((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2)))))) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), bool(bvec3(bool(bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), false, true))))))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1)))) : _GLF_FUZZED(58731)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), 0u + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(58731))), (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_IDENTITY(_GLF_FUZZED(58731), (_GLF_FUZZED(58731)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * (1u & 1u))) % subgroup_size), uint(uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_IDENTITY(_GLF_FUZZED(58731), _GLF_IDENTITY(min(_GLF_FUZZED(58731), _GLF_IDENTITY(_GLF_FUZZED(58731), max(_GLF_FUZZED(58731), _GLF_FUZZED(58731)))), min(_GLF_IDENTITY(min(_GLF_FUZZED(58731), _GLF_IDENTITY(_GLF_FUZZED(58731), max(_GLF_FUZZED(58731), _GLF_FUZZED(58731)))), (0 >> _GLF_IDENTITY(int(8), int(8))) | (min(_GLF_FUZZED(58731), _GLF_IDENTITY(_GLF_FUZZED(58731), max(_GLF_FUZZED(58731), _GLF_FUZZED(58731)))))), min(_GLF_FUZZED(58731), _GLF_IDENTITY(_GLF_FUZZED(58731), max(_GLF_FUZZED(58731), _GLF_FUZZED(58731)))))))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), 1u, 0u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (2791 & 0))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, true))))), ((! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true)), bool(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))))), true), false)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8051.7815)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) || false)))
          {
          }
         else
          {
           return;
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) - (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, 0 + (3)))))), _GLF_IDENTITY(int(3), ~ (~ (int(3))))))), 4);
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) & 1)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) - length(vec3(0.0, 0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, max(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y) - length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) - length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(true, (true) || false), false)), _GLF_IDENTITY(false || (bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) - length(vec3(0.0, 0.0, 0.0))), true, false))), (false || (bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) - length(vec3(0.0, 0.0, 0.0))), true, false)))) && true)))) && true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bvec2((false) || false, true), bvec2(bvec3(bvec2((false) || false, true), true))))))) && true), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) && true), bool(bool(false))))))), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false))))), true && (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false))))), (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false))))), bool(bvec4(true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))) && true)))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) + (0 << _GLF_IDENTITY(int(0), int(0)))) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) >> 0))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true)))))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, int(ivec2(2, 1))))))))) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, 0, 1, 1), max(ivec4(2, 0, 1, 1), ivec4(2, 0, 1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, 0, 1, 1), max(ivec4(2, 0, 1, 1), ivec4(2, 0, 1, 1))))), (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, 0, 1, 1), max(ivec4(2, 0, 1, 1), ivec4(2, 0, 1, 1)))))) | (0 >> _GLF_IDENTITY(int(3), int(3))))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, 0, 1, 1), max(ivec4(2, 0, 1, 1), ivec4(2, 0, 1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, 0, 1, 1), max(ivec4(2, 0, 1, 1), ivec4(2, 0, 1, 1))))), (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, 0, 1, 1), max(ivec4(2, 0, 1, 1), ivec4(2, 0, 1, 1)))))) | (0 >> _GLF_IDENTITY(int(3), int(3))))) >> 0)) >> 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))), false || (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false, false)))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) - 0));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_DEAD(false))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_DEAD(false)))))))))) && true, ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true, bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true)))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true, bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))))) && true, bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true)))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true)), false || (bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))))))))), bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true, bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false))) && true)))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))) || false)))))) && true, bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))))))), false, false))))))), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-68.24)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
      break;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false, false, false))))), false || (bool(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false, false, false)))))))))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x < injectionSwitch.y)), true && (((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x < injectionSwitch.y)))), ! (! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), false || ((! ((injectionSwitch.x < injectionSwitch.y))))), true, true)), false || (bool(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), false || ((! ((injectionSwitch.x < injectionSwitch.y))))), true, true)))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(abs(0.0))))), true && ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x < injectionSwitch.y)))))), ! (! (! ((injectionSwitch.x < injectionSwitch.y))))))) || false)))))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
