#version 460
struct _GLF_struct_2 {
 uint workgroup_base;
 bool _f0;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 int _f1;
 uvec3 _f2;
 mat3x4 _f3;
 mat2x4 _f4;
 uint subgroup_local_id;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 vec2 _f1;
 ivec4 _f2;
 float _f3;
 uint _f4;
 _GLF_struct_0 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(mat2(1.0), vec2(1.0), ivec4(1), 1.0, 1u, _GLF_struct_0(vec3(1.0), 1, uvec3(1u), mat3x4(1.0), mat2x4(1.0), gl_SubgroupInvocationID));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(workgroup_size * workgroup_id, true);
 uint virtual_gid = _GLF_struct_replacement_2.workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_1._f5.subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_2.workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_1._f5.subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
