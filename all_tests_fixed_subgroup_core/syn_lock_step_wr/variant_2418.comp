#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z = subgroup_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(45.09) & 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (int(45.09) & 0), (_injected_loop_counter != (int(45.09) & 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bool(bool(bvec2(false, false))))))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.4)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))), bool(_GLF_IDENTITY(true, bool(bool(true)))))) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0), bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), false, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-4554.2413)), bool(false)))), mix(float(_GLF_FUZZED((_GLF_IDENTITY(0.2, (0.2) / 1.0)))), float(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-4554.2413)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) && true)) && true))))), bool(true)))))) && (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false))))), (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))))) || false))) || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))) && true), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y))), (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true && (injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3(true && (injectionSwitch.x > injectionSwitch.y), true, false))))), true && (bool(_GLF_IDENTITY(bvec3(true && (injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3(true && (injectionSwitch.x > injectionSwitch.y), true, false))))))))) && true))))))), true)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w = subgroup_local_id, 1u * (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w = subgroup_local_id));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bool(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (bool(bool(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          break;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? injectionSwitch[0] : _GLF_FUZZED(-5.8))), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-5.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(4796.0443) : injectionSwitch[1])), mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false))), max(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false))), _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)), max(_GLF_IDENTITY(mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)), max(mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)), _GLF_IDENTITY(mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)), clamp(mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)), mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)), mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)))))), mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-71.18)), bool(false)))))))), float(_GLF_FUZZED(-7.1)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) || false)))), bool(true))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), _GLF_IDENTITY((uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) / ((uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u))))), clamp((uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) / ((uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u))))), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) / ((uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u))))), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) / ((uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))))) ^ uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (0u) | 0u), 0u) | (gl_NumWorkGroups), (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), false || (! (_GLF_IDENTITY(true, true && (true)))))) && true))), (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) | (gl_NumWorkGroups) : _GLF_FUZZED(uvec3(126344u, 11016u, 89710u)))))) ^ uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << (1u ^ _GLF_IDENTITY(1u, (1u) >> 0u)))) >> 0u, ((_GLF_IDENTITY(0u, (0u) << (1u ^ 1u))) >> 0u) | 0u)), 0u), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY((uvec4((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u))))), _GLF_IDENTITY((uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u), ~ (~ ((_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))))) | (gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(_GLF_IDENTITY(uint(4u), ~ (~ (uint(4u)))), uint(4u))), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), ((uvec4((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u))) * (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(126380u, 141589u, 152049u)) : _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))))))) ^ uvec3(0u, 0u, 0u), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), max(_GLF_IDENTITY(~ (4u), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))) : ~ (4u))), ~ (4u))))))))))) | uvec4(0u, 0u, 0u, 0u)) * uvec4(1u, 1u, 1u, 1u))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(-7.9, mix(-33.13, 2.8, 9.8), vec2(-4.8, 78.30))) : injectionSwitch)).y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 0.0, abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))) || false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) >> 0, _GLF_IDENTITY(int(ivec3((int(3)) >> 0, (1 & 1), 1)), 0 | (int(ivec3((int(3)) >> 0, (1 & 1), 1)))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true, false)), false)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true, false)), false)))))), false, true)))));
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true, true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true, true)))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true, true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true, true))))))))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true, true))))))))))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(148881u) : workgroup_id)))), workgroup_id));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6484.3074) : _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) << uvec4(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 0u, 1u), ~ (_GLF_IDENTITY(~ (uvec3(0u, 0u, 1u)), (~ (uvec3(0u, 0u, 1u))) + uvec3(0u, 0u, 0u)))))), 0u, 0u, 0u), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), min(uvec4(1u, 1u, 1u, 1u), uvec4(1u, 1u, 1u, 1u))) * (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) << uvec4(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, 0u, 0u), max((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) >> uvec4(0u, 0u, 0u, 0u))) << uvec4(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, 0u, 0u), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, clamp(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, ~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id)))))) << uvec4(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, 0u, 0u)))))).z * subgroup_size + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       return;
      }
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1))))) | 0)); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            return;
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true)))))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * subgroup_size, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z, ~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z)))))) * subgroup_size) | (0u ^ 0u)) + (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685)))), ~ (_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685))))), (~ ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685)))))) | 0u))) % subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * subgroup_size, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z, ~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z)))))) * subgroup_size) | (0u ^ 0u)) + (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685)))), ~ (_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685))))), (~ ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685)))))) | 0u))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * subgroup_size, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z, ~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z)))))) * subgroup_size) | (0u ^ 0u)) + (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685)))), ~ (_GLF_IDENTITY(~ ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685))))), (~ ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1), _GLF_IDENTITY((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0, max((0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), clamp(_GLF_IDENTITY(((1)), (((1))) << 0), ((1)), ((1)))) | ((1)))) / _GLF_IDENTITY(1, max(1, 1)))) << 0, (0 ^ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1)) << 0)))))) : _GLF_FUZZED(-74685)))))) | 0u))) % subgroup_size)) >> 0u))));
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id), max(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id), (true ? (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id))), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id)) | ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id))))) ^ _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), (_GLF_IDENTITY((uvec4(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), (true ? _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), clamp((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), _GLF_IDENTITY((uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), (_GLF_IDENTITY((uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), (_GLF_IDENTITY((uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), clamp((uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), (uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))), (uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u)))))) << uvec4(0u, 0u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u)), (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u))))) : _GLF_FUZZED(uvec4(96146u, 193683u, 65311u, _GLF_IDENTITY(101806u, uint(uint(101806u)))))))) - uvec4(0u, 0u, 0u, 0u))).x], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(float(true))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, (8) ^ 0))))) : _GLF_FUZZED(-57417), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, (8) ^ 0))))) : _GLF_FUZZED(-57417), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, (8) ^ 0))))) : _GLF_FUZZED(-57417)) | (0 | 0)))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)) | ((false ? _GLF_FUZZED(-39631) : int(8))))) - 0), int(_GLF_IDENTITY(int(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_IDENTITY(_GLF_FUZZED(-39631), (_GLF_FUZZED(-39631)) | (_GLF_FUZZED(-39631))) : int(8)) : _GLF_FUZZED(-57417))), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)))))), (int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0))))))) << 0)) | ((false ? _GLF_FUZZED(-39631) : int(8))))), (false ? _GLF_FUZZED(70537) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_IDENTITY(_GLF_FUZZED(-39631), (_GLF_FUZZED(-39631)) | (_GLF_FUZZED(-39631))) : int(8)) : _GLF_FUZZED(-57417))), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)))))), (int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0))))))) << 0)) | ((false ? _GLF_FUZZED(-39631) : int(8))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_IDENTITY(_GLF_FUZZED(-39631), (_GLF_FUZZED(-39631)) | (_GLF_FUZZED(-39631))) : int(8)) : _GLF_FUZZED(-57417))), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)))))), (int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0))))))) << 0)) | ((false ? _GLF_FUZZED(-39631) : int(8))))), ((_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_IDENTITY(_GLF_FUZZED(-39631), (_GLF_FUZZED(-39631)) | (_GLF_FUZZED(-39631))) : int(8)) : _GLF_FUZZED(-57417))), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)))))), (int(int(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)), 0 ^ ((_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (8)))), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0))))))) << 0)) | ((false ? _GLF_FUZZED(-39631) : int(8)))))) * 1)) << 0))) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-39631, (-39631) | (-39631))) : _GLF_IDENTITY(int(8), (int(8)) | (int(8)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) || false)) ? (false ? _GLF_FUZZED(-39631) : int(8)) : _GLF_FUZZED(-57417))), (_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)) | ((false ? _GLF_IDENTITY(_GLF_FUZZED(-39631), clamp(_GLF_FUZZED(-39631), _GLF_FUZZED(-39631), _GLF_FUZZED(-39631))) : int(8))))) - 0)), 0 | (int(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) ? (false ? _GLF_FUZZED(-39631) : int(8)) : _GLF_FUZZED(-57417))), (_GLF_IDENTITY((false ? _GLF_FUZZED(-39631) : int(8)), ((false ? _GLF_FUZZED(-39631) : int(8))) | 0)) | ((false ? _GLF_FUZZED(-39631) : _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(-10972) : int(8))))))) - 0))))) * 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (0 << _GLF_IDENTITY(int(1), int(1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 + (3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) / 1))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false), (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false)) && true))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(ivec3(1 << _GLF_IDENTITY(int(1), int(1)), 1, 1)))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), max(int(_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), (int(_GLF_IDENTITY(1, min(1, 1)))) | (int(_GLF_IDENTITY(1, min(1, 1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))))))), true))) || false)))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                continue;
              }
            }
           else
            {
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(1.5))), (false ? _GLF_FUZZED(atan(-5350.3198, 0.3)) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(false)), false), bvec2(bvec4(bvec2(! (_GLF_DEAD(false)), false), false, false))))))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec4(bvec2(false, false), true, true)))), false || (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, false), true, true))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - 0)))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), false || (false || ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)) || false), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (~ (_GLF_IDENTITY(0, 0 | (0)))) - 0))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(_GLF_IDENTITY(6, ~ (~ (6)))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
              break;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec2(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), true)), true && (bool(bvec2(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), true)))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0)), (float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0))) + 0.0)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), true, false, true)))))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) && true))))) || false), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (injectionSwitch.x > injectionSwitch.y))))), false), true))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) * (_injected_loop_counter)) > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), clamp(_GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY(1, 0 ^ (1)))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-36842)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-99332) : _injected_loop_counter))) | 0) > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-36842)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(true, false || (true)) ? 0 : _GLF_FUZZED(-36842)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
      }
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && true)))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   do
    {
     GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y = read;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
        }
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, 5)))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false)))), false || (! (_GLF_WRAPPED_LOOP(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false))))), ! (! ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false))))))))) || _GLF_IDENTITY(false, false || (false)))));
   if(_GLF_DEAD(false))
    continue;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0)), max(float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0)), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4430.5375)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))) + log(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (true ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-1.3, 2.1))))).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)))), 0.0 + (determinant(mat3(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.2) : 0.0)), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), float(_GLF_FUZZED(429.333)), bool(false)))))) * 1.0))))), 1.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.2), _GLF_FUZZED(-83.56)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0))), injectionSwitch)), injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0, 1.0, exp(0.0))), (true ? float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, exp(0.0))) : _GLF_FUZZED(-5.4)))), sqrt(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y)))), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((injectionSwitch[1]) + 0.0, mix(float(_GLF_FUZZED(93.38)), float((injectionSwitch[1]) + 0.0), bool(true)))))).y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)))))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), 1.0)), max(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0), (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0)) * vec2(1.0, 1.0))) - log(vec2(1.0, 1.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec4((injectionSwitch) * mat2(1.0), 1.0, 0.0))))))).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-86.06) : injectionSwitch.y)))))), 1.0)))), exp(sqrt(0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9176.6238) : 0.0)), 1.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0), (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0)) - vec2(0.0, 0.0))), max(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / exp(vec2(0.0, 0.0))).y) * sqrt(1.0)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0)), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0), mix(vec2((vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0))[0], _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), 1.0)), mix(vec2(_GLF_FUZZED(((-777.589 * -5.9))), _GLF_FUZZED(4.2)), vec2(((vec2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), 1.0)))[0], ((vec2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), 1.0)))[1]), bvec2(true, true)))[1]), vec2(_GLF_FUZZED(-571.768), _GLF_FUZZED(-709.142)), bvec2(false, false)))))), exp(sqrt(0.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(7016.9121, mix(float(_GLF_FUZZED(3.6)), float(7016.9121), bool(true))))), float(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY((max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) - 0.0, clamp((max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) - 0.0, (max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) - 0.0, (max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) - 0.0)))), 1.0)), max(float(vec2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), mix(float(_GLF_FUZZED(-310.384)), float(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (true ? max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2066.3953, 9115.0745)) : injectionSwitch)), determinant(mat2(0.0, 1.0, 0.0, log(1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), log(1.0), 0.0, 1.0, 0.0, determinant(mat2(abs(1.0), 0.0, 0.0, 1.0)), 0.0), (_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2066.3953, 9115.0745)) : injectionSwitch)), determinant(mat2(0.0, 1.0, 0.0, log(1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), log(1.0), 0.0, 1.0, 0.0, determinant(mat2(abs(1.0), 0.0, 0.0, 1.0)), 0.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2066.3953, 9115.0745)) : injectionSwitch)), determinant(mat2(0.0, 1.0, 0.0, log(1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), log(1.0), 0.0, 1.0, 0.0, determinant(mat2(abs(1.0), 0.0, 0.0, 1.0)), 0.0)))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y) : _GLF_FUZZED(-4.6)))) / 1.0)))), bool(true)))), 1.0)), float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0)))), exp(sqrt(0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY((mat2(0.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(mat2(2.7, 3.9, -17.14, 3.6)) : (mat2(0.0, 0.0, 0.0, 0.0)))) * mat2(1.0), (true ? (mat2(0.0, 0.0, 0.0, 0.0)) * mat2(1.0) : _GLF_FUZZED(mat2(-53.25, 438.596, -9.8, -9453.4500)))))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.5))), 0.0)), 1.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) - 0.0), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) * 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y), _GLF_IDENTITY(dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0)), dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0))) + (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y)))), min(float(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y), _GLF_IDENTITY(dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0)), dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0))) + (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y)))), float(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y), _GLF_IDENTITY(dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0)), dot(vec2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec2(0.0, 0.0))) + (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))).y)))))), float(_GLF_FUZZED(41.60)), bool(false)))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), (float(float(injectionSwitch.y))) / 1.0)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), (injectionSwitch.y) * 1.0), injectionSwitch.y)))), 1.0)), float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), 1.0)))), exp(sqrt(0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0)))))), bool(true)))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(365.812)))))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / 1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y, 4, 64, 4);
  }
}
