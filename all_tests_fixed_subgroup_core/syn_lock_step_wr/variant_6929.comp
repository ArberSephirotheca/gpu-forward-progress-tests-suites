#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec2(0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      {
       for(int _injected_loop_counter = ((((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7)))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 1 * (0)), 0)) | (int(7))))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), int(ivec4(int(7), int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1))))))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) | (3))) | 0)), max(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) | (3))) | 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((_GLF_IDENTITY(3, (3) | (3))), clamp((_GLF_IDENTITY(3, (3) | (3))), (_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY((_GLF_IDENTITY(3, (3) | (3))), (false ? _GLF_FUZZED(-81667) : (_GLF_IDENTITY(3, (3) | (3))))))) | 0)), (int(_GLF_IDENTITY(3, _GLF_IDENTITY((_GLF_IDENTITY(3, (3) | (3))), clamp((_GLF_IDENTITY(3, (3) | (3))), (_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY((_GLF_IDENTITY(3, (3) | (3))), (false ? _GLF_FUZZED(-81667) : (_GLF_IDENTITY(3, (3) | (3))))))) | 0))) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-105.454)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ -1.7))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED((true ? (-- _injected_loop_counter) : 50965)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4720.8607)), float(injectionSwitch.y), bool(true)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - sin(0.0))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((injectionSwitch[0]) * 1.0, (true ? (injectionSwitch[0]) * 1.0 : _GLF_FUZZED(-989.742)))))), injectionSwitch[1])).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(103.717), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(8.7), max(_GLF_FUZZED(8.7), _GLF_FUZZED(8.7)))), bvec2(true, false))).y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec2((false), false)))))), bool(bool((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec2((false), false)))))))))))))))
            {
            }
           else
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), (bool(bvec4(_GLF_DEAD(false), false, false, false))) || false)))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! _GLF_IDENTITY((false), bool(bool((false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), 0 + ((1 | 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bool(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (bool(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(float(-44287))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))) && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))) || false))))))), ! (! (false)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(! (! ((false) || false)), _GLF_IDENTITY(bool(bvec3(! (! ((false) || false)), true, false)), (bool(bvec3(! (! ((false) || false)), true, false))) && true)))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), true)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)), bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (! (true))), false))))), true))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), true, false)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), false)))), true)), false || (bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), true)))))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))))), true, true, true))))));
          }
        }
       else
        {
        }
      }
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y), true)))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (! (true)))), false), bvec3(bvec3(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)))))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 & _GLF_IDENTITY((75860 * 49359), 0 | ((_GLF_IDENTITY(75860 * 49359, 0 ^ (75860 * 49359)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), int(3)))) ^ 0), int(3))), clamp((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 1 * (int(3))), int(3), int(3)))) ^ 0), int(3))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (int(3)) | (int(3))))), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-14091) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, ~ (~ (3))), 3, 3))), int(3), int(3)))), ((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), int(3))))) - _GLF_IDENTITY(0, (0) | (0))) ^ 0), _GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(-6120)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0)))) >> 0, max((_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0)))) >> 0, (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0)))) >> 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (int(3)) << 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0))))))), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0)), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0)), (min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))) | (min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))))) | (min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))))))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))), _GLF_IDENTITY(clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 1 * (int(3))), int(3), int(3)))) ^ 0), int(3))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-14091) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), int(3)))), ((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), int(3))))) - 0) ^ 0), int(3)))), (clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 1 * (int(3))), int(3), int(3)))) ^ 0), int(3))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, 0 ^ (3)))))) - 0)), int(3)))) ^ 0), int(3))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-14091) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), _GLF_IDENTITY(int(3), int(int(int(3))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | 0), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), int(3))))) - 0) ^ 0), int(3))))) + 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3))))) | ((int(3)))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (int(3)) << 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0))))))), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ((int(3))) | 0) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)), 0 + (min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)))), 1, 1)), int(int(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)), 0 + (min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)))), 1, 1)), ~ (~ (int(ivec3(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)), 0 + (min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0)))), 1, 1)))))))))), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 ^ ((int(3)))) | (int(3)))) << 0)) + 0)))))))) | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) ^ 0)), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 1 * (int(3))), int(3), int(3)))) ^ 0), int(3))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-14091) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), int(3)))), ((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3), int(3))))) - 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), _GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))), int(3)))), ((_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 ^ (3))) << ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(5), int(5)))), 3))), int(3), int(3))))) - 0) : _GLF_FUZZED(_injected_loop_counter))) ^ 0), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, clamp(3, 3, 3))) | (3))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ((int(3))) * 1) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (int(3)) << 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(ivec2(_GLF_IDENTITY(int(3), (int(3)) << 0), 0))))))), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ((int(3))) | 0) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), 0 + ((int(3)))) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, 3)))) | (int(3)))) << 0)) + 0))), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))))))))), (_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) / 1), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), int(3)))) ^ 0), int(3))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) / 1), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), int(3)))) ^ 0), int(3))), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) / 1), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), int(3)))) ^ 0), int(3)))) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) / 1), (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), int(3)))) ^ 0), int(3))))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) ^ 0)), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(3, (3) ^ 0))), (~ (int(_GLF_IDENTITY(3, (3) ^ 0)))) >> (0 >> _GLF_IDENTITY(int(2), int(2))))))))) ^ 0), _GLF_IDENTITY(int(3), 0 + (int(3))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3))))), (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(67232))), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(67232)))) / (1 | 0)), 1, 1, 0))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), _GLF_IDENTITY(int(3), (int(3)) - 0))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) | 0))) << 0), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) ? (_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((int(3)), ((int(3))) | 0))))) : _GLF_FUZZED(_injected_loop_counter))) << 0)) + 0))), _GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), max(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) ^ 0)) | (int(3)))) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), clamp(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))) + _GLF_IDENTITY(0, (0) | (0))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) | 0))) << 0), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) ? (_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((int(3)), ((int(3))) | 0))))) : _GLF_FUZZED(_injected_loop_counter))) << 0)) + 0))), _GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), max(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) ^ 0)) | (int(3)))) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), clamp(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))) + _GLF_IDENTITY(0, (0) | (0))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) | 0))) << 0), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) ? (_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((int(3)), ((int(3))) | 0))))) : _GLF_FUZZED(_injected_loop_counter))) << 0)) + 0))), _GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), max(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) ^ 0)) | (int(3)))) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), clamp(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))) + _GLF_IDENTITY(0, (0) | (0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) << 0)) + 0))), min(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) | 0))) << 0), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) ? (_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((int(3)), ((int(3))) | 0))))) : _GLF_FUZZED(_injected_loop_counter))) << 0)) + 0))), _GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), max(clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) ^ 0)) | (int(3)))) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), clamp(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))) + _GLF_IDENTITY(0, (0) | (0)))))))))))) || false)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (! (true))))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 & 1) & 1)); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, false, false, false)), false, true, false)), ! (! (bool(bvec4(bool(bvec4(false, false, false, false)), false, true, false)))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            {
             for(int _injected_loop_counter = (((0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, 1 * (7)))), _GLF_IDENTITY(7, (7) / 1)))), int(7))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), (false ? _GLF_FUZZED(min(_injected_loop_counter, 7633)) : (1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, max(7, 7)), 7))), int(7))) | (0 << _GLF_IDENTITY(int(8), int(8))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) + vec2(0.0, 0.0)))) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(47103)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8400.6638)), bvec2(true, false))).y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.3) : injectionSwitch.y))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false))))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * sqrt(1.0)), (_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))) - 0.0))).y)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(max(-0.5, 870.843)) : injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(max(-0.5, 870.843)) : injectionSwitch.x)) > injectionSwitch.y))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), max((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 1u, 0u, 0u))) * subgroup_size + subgroup_local_id), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), subgroup_size, _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))) + subgroup_local_id))) - 0u);
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 1u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((uvec3((subgroup_local_id + 1), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 1u)), ((uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)) | ((uvec3((subgroup_local_id + 1), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 1u))))))) % subgroup_size), _GLF_IDENTITY(uint(uvec3(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), uint(uvec2(subgroup_local_id, 1u)))))) - 0u)) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) ^ 0u, 0u | ((subgroup_local_id + 1) ^ 0u)))) | (subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)), clamp((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)), max((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))))) | (subgroup_local_id + 1)) - 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1))))) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u)), 0u, 1u)), (uint(uvec3(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), 0u | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), 1u * (max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))), _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (true ? uvec2(subgroup_size, 1u) : _GLF_FUZZED(uvec2(105566u, 109092u))))))))))))), 0u, 1u))) | _GLF_IDENTITY((uint(uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(187838u) : _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))))), 0u, 1u))), ((uint(uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(187838u) : _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))))), 0u, 1u)))) + 0u)))) | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.2)), float(0.0), bool(true))))), 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-7910.2272)), float(0.0), bool(true))), 0.0))), 1.0)), (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0))) * _GLF_IDENTITY(1.0, 0.0 + (1.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0)), max(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(tan(0.0), (tan(0.0)) + abs(0.0)), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0)), (dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, tan(0.0), 1.0), vec4(mat3(_GLF_IDENTITY(vec4(0.0, 0.0, tan(0.0), 1.0), mix(vec4((vec4(0.0, 0.0, tan(0.0), 1.0))[0], _GLF_FUZZED(-8.6), _GLF_FUZZED(12.01), _GLF_FUZZED(7.2)), vec4(_GLF_FUZZED((+ -3979.2680)), (vec4(0.0, 0.0, tan(0.0), 1.0))[1], (vec4(0.0, 0.0, tan(0.0), 1.0))[2], (vec4(0.0, 0.0, tan(0.0), 1.0))[3]), bvec4(false, true, true, true))), 1.0, 0.0, abs(0.0), 1.0, 0.0))))) * 1.0)), _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), clamp(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), 0.0)), vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0)), (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0))) * 1.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0))))).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, false))))), ((! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))))], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true)), true && ((_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(true))) && _GLF_IDENTITY(true, ! (! (true))), false || ((! (_GLF_WRAPPED_IF_TRUE(true))) && true))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
        {
         atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], read, 4, 64, 4);
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}
