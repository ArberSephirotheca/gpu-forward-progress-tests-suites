#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true && (bool(false)), false || (true && (bool(false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false))))))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, false || (true)) && (bool(false)))), true), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), true && (bool(false)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, (true) && true) && (bool(false)))), true), true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), true, false))))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), true))))))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true && (bool(false)), false || (true && (bool(false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false))))))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, false || (true)) && (bool(false)))), true), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), true && (bool(false)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, (true) && true) && (bool(false)))), true), true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), true, false))))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || (bool(false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(false)), ! (! ((bool(false))))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) || _GLF_IDENTITY((bool(false)), true && ((bool(false))))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(false)), ! (! ((bool(false))))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) || _GLF_IDENTITY((bool(false)), true && ((bool(false))))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))) && true))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))), ((_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))) && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))), bool(bvec4(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false))))), true, true, false))))))))))) || false), true, false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))), false, false, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || _GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) || false))), bool(bool((bool(_GLF_IDENTITY(false, (false) || false))))))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))), (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((bool(false)), ! (! (_GLF_IDENTITY((bool(false)), ! (! ((bool(false)))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2449.0259), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.0)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false))))) || (bool(false)))))))), false, false, false))))))) || false), true, false))))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), true), true)))))) && true))))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(float(97869)) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(76.26)), float(injectionSwitch.y), bool(true)))) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), false, true, true))))), (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))) || false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((true))), ! (! (bool(bool((true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((true))), ! (! (bool(bool((true))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(bool((true))), ! (! (bool(bool((true))))))), true, true, true)))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool((true))), ! (! (bool(bool((true))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(bool((true))), ! (! (bool(bool((true))))))), true, true, true)))))))) || false)))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x = subgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))), false, true, true))))))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, false, false))))), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-2.5 / 6.0))), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.0)))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), ((_GLF_IDENTITY(true, (true) || false))) || _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) << (0 & -86517))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(false, true))), true, true, false))))))))), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) - (0 ^ 0)) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), 0 ^ (int(8)))) >> 0)))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))));
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0)))), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, length(vec2(0.0, 0.0)))), dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))))), mix(vec4((vec4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(7.7), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(-2.0)), bvec2(true, false)))))), dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))))))[0], (vec4(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))), dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0))), _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))) * mat4(_GLF_ONE(1.0, injectionSwitch.y)), ((vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))) * mat4(_GLF_ONE(1.0, injectionSwitch.y))) * mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0))))))))[1], _GLF_FUZZED(-73.82), _GLF_FUZZED((918.055 + -2.3))), vec4(_GLF_FUZZED(5.9), _GLF_FUZZED(-21.33), (vec4(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))), dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))))))[2], (vec4(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.5)), bool(false))), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))), dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0))))), (true ? _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(-5.5)), bool(false)), (true ? mix(float(0.0), float(_GLF_FUZZED(-5.5)), bool(false)) : _GLF_FUZZED(-219.021)))), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, 0.0, length(0.0), 1.0), (mat2(0.0, 0.0, length(0.0), 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(mat2(0.0, 0.0, length(0.0), 1.0), (mat2(0.0, 0.0, length(0.0), 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(mat2(0.0, 0.0, length(0.0), 1.0), (mat2(0.0, 0.0, length(0.0), 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))), 0.0)), 0.0)), 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)))), dot(vec4(1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)))))) : _GLF_FUZZED(43.65)))))[3]), bvec4(false, false, true, true))))), (true ? injectionSwitch.y : _GLF_FUZZED(-2389.7400))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bvec4(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-1.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))), true, false, true))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))))) || false)))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))), true, false, false))), false))), true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.0)), float(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0))), bool(true))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true && (bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))) && true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (1 << _GLF_IDENTITY(int(7), int(7))) | (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 1 * (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || false), false, true))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (68928 & 0)); _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.z = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u))).x), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(0u, 0u, 0u)), 0u))).x), 0u, (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))) & 137227u), 0u)), (false ? _GLF_FUZZED(32906u) : uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u))).x), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)))) - uvec3(0u, 0u, 0u)), 0u))).x), clamp((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) : GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) * uvec3(1u, 1u, 1u))) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))))) - uvec3(0u, 0u, 0u)), 0u))).x), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, max(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))) - uvec3(0u, 0u, 0u)), 0u))).x), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u)), 0u))).x)))) ^ 0u), 0u, (0u & 137227u), 0u))))), ~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u)))))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)))) | ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) / 1u), _GLF_IDENTITY(min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x), (min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)) >> 0u)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) | 0u)) / 1u), max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[0], GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[1], GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[2])).x))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), max((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u))).x), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(0u, 0u, 0u)), 0u))).x), 0u, (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))) & 137227u), 0u)), (false ? _GLF_FUZZED(32906u) : uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u))).x), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)))) - uvec3(0u, 0u, 0u)), 0u))).x), clamp((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) : GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) * uvec3(1u, 1u, 1u))) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))))) - uvec3(0u, 0u, 0u)), 0u))).x), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, max(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))) - uvec3(0u, 0u, 0u)), 0u))).x), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u)), 0u))).x)))) ^ 0u), 0u, (0u & 137227u), 0u))))), ~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u)))))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)))) | ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) / 1u), _GLF_IDENTITY(min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x), (min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)) >> 0u)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) | 0u)) / 1u), max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[0], GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[1], GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[2])).x))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), max((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))))))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u))).x), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(0u, 0u, 0u)), 0u))).x), 0u, (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))) & 137227u), 0u)), (false ? _GLF_FUZZED(32906u) : uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u))).x), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, ~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)))) - uvec3(0u, 0u, 0u)), 0u))).x), clamp((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (false ? _GLF_FUZZED(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) : GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) * uvec3(1u, 1u, 1u))) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))))) - uvec3(0u, 0u, 0u)), 0u))).x), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, max(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size))) - uvec3(0u, 0u, 0u)), 0u))).x), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) - uvec3(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u)), 0u))).x)))) ^ 0u), 0u, (0u & 137227u), 0u))))), ~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))) ^ 0u)))))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)))) | ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) / 1u), _GLF_IDENTITY(min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x), (min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)) >> 0u)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x) | 0u)) / 1u), max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, uvec3(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[0], GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[1], GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size[2])).x))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), max((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x))), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).x)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x)))))))))))) ^ 0u)) << 0u));
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))))), false, false)), (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))))), false, false))) && true))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.0) : injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(-9978.1732))) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.x = _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))) ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), _GLF_IDENTITY(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))), min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))), ~ (_GLF_IDENTITY(~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))), (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))))) | (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))))))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))), uint(uint(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))))))))))))), (GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.x = _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))), (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))) || _GLF_IDENTITY(false, true && (false)))) ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), _GLF_IDENTITY(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))), min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))), (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))))) | (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))))), min(_GLF_IDENTITY(~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))), (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))))) | (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))))), _GLF_IDENTITY(~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))), (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))))) | (~ (0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))))))))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true))))) ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup)))), uint(uint(0u | (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup)))) - 0u)), (false ? _GLF_FUZZED(num_workgroup) : ~ (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))))))))))))))) + 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(6.0)), vec2(_GLF_FUZZED(-5.8), (vec2(0.0, 0.0))[1]), bvec2(false, true)))).y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z = workgroup_size;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, exp(0.0), 0.0, 1.0))).y, false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-86.02))))), 1.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, exp(0.0), 0.0, 1.0)), (vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-86.02))))), 1.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, exp(0.0), 0.0, 1.0))) / cos(vec2(0.0, 0.0)))).y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(0.0, 0.0)))).y)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) < int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), max(vec4(1.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0))))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)))))), false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), false, true, true)), (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true), false, true, true))) && true))));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, (true) && true), false, true)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), false || (true && ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, true, false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, true, false))), false), false, false))))))))))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((mat3x2(-7.5, -2572.8714, -4510.0904, 9.3, -5.5, 1379.2234) , 7.1)) : injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)) || false)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))) || false))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))))) || false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u))), ((_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)))) - 0u), _GLF_IDENTITY((~ (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)))) >> 0u, 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)))), ((~ (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u))))) - 0u) >> 0u))))), (true ? _GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u))), ((_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)))) - 0u), _GLF_IDENTITY((~ (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)))) >> 0u, 1u * (_GLF_IDENTITY((~ (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)))), ((~ (_GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u, 0u | ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u))))) - 0u) >> 0u))))) : _GLF_FUZZED(subgroup_id))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(int(7), int(7)))) | (~ (1 << _GLF_IDENTITY(int(7), int(7)))))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), int(7)))))) | (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7))))))))))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(int(7), int(7)))) | (~ (1 << _GLF_IDENTITY(int(7), int(7))))))))))) * 1))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(int(7), int(7)))) | (~ (1 << _GLF_IDENTITY(int(7), int(7)))))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), int(7)))))) | (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7))))))))))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(int(7), int(7)))) | (~ (1 << _GLF_IDENTITY(int(7), int(7))))))))))) * 1))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(int(7), int(7)))) | (~ (1 << _GLF_IDENTITY(int(7), int(7)))))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), int(7)))))) | (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7))))))))))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2))) | (1 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(7), int(7))), (~ (1 << _GLF_IDENTITY(int(7), int(7)))) | (~ (1 << _GLF_IDENTITY(int(7), int(7))))))))))) * 1)))) >> 0)) ^ 0) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-0.3))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-0.3))))), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-0.3))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-0.3))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-0.3))))), float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-0.3))))), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, cos(0.0)))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
        }
      }
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))) || false))))))
      barrier();
    }
   else
    {
     GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(5.5, min(5.5, 5.5))) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(sqrt(4555.0033)) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-156.955), _GLF_FUZZED(-0.5)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))))
      barrier();
    }
  }
 uint virtual_gid = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.z + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-960.344) : injectionSwitch.y))) - log(1.0))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-960.344) : injectionSwitch.y))) - log(1.0))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-960.344) : injectionSwitch.y))) - log(1.0))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-960.344) : injectionSwitch.y))) - log(1.0))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-960.344) : injectionSwitch.y))) - log(1.0)))))) && _GLF_IDENTITY(true, true && (true))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(subgroup_id) : 5u))), uvec2(5u)))).x + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size, min(GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size, GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size)).z + ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), uvec2(0u, 0u) | (uvec2(subgroup_local_id, 1u))))) + 1) % GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.z);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.7) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y))], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.y = read, ~ (~ (GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.y = read)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), int(ivec4(0 >> _GLF_IDENTITY(int(6), int(6)), 1, (0 ^ 1), 1))), 0 >> _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.4)), float(0.0), bool(true))), mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(29.43)), bool(false)))), float(_GLF_FUZZED(-908.070)), bool(false))))), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), mat3(1.0) * (vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) - vec3(0.0, 0.0, 0.0))), dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec3(138.203, -6.8, 4.9), -164.861)))), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec3(138.203, -6.8, 4.9), -164.861)))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec3(138.203, -6.8, 4.9), -164.861)))))), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.0)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 1.0, 1.0, 0.0), vec4(mat3x4(vec4(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0), mat3(1.0) * (vec3(0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (true))) ? _GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(float(mat3(max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0)), (true ? _GLF_IDENTITY(float(mat3(max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0)), clamp(float(mat3(max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0)), float(mat3(max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0)), float(mat3(max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0)))) : _GLF_FUZZED(-8.5))))), 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec3(138.203, -6.8, 4.9), -164.861)))), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0), 0.0, log(1.0), 1.0, 1.0, 0.0, length(0.0), 0.0, 1.0))))) + (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, log(1.0), 0.0, 1.0, 0.0, sqrt(1.0))), max(float(mat4x2(injectionSwitch.x, 1.0, 0.0, log(1.0), 0.0, 1.0, 0.0, sqrt(1.0))), float(mat4x2(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), 0.0, 1.0, 0.0, sqrt(1.0)))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9745.6213))), min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(-9745.6213, (_GLF_IDENTITY(-9745.6213, clamp(_GLF_IDENTITY(-9745.6213, min(-9745.6213, -9745.6213)), -9745.6213, -9745.6213))) / 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).y : _GLF_FUZZED(-99.93))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).y)), (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch.y : _GLF_FUZZED(-9745.6213)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))) || false)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(610.839)), bool(false))) > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))));
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(90276) : 1))) | _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), min(ivec2(0, 0), ivec2(0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(true)))), false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))))))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), (_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0) ^ 0), ! (! (_injected_loop_counter < (1 ^ 0))))) || false)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))) || false))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (false))))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-2.7 * 4.7))), bool(false))))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), true && (! (false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) || false)) || false))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), true, true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))) || false)) && true))
      barrier();
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-91427 & 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, max(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).y], GLF_merged3_0_1_13_1_1_4_2_1_13num_workgroupreadsubgroup_size.y, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) << 0)), ((_GLF_IDENTITY(4, (4) << 0))) << 0) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), max(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) << ivec4(0, 0, 0, 0))), (int(_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), max(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) << ivec4(0, 0, 0, 0)))) << 0), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), 1), max(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) << ivec4(0, 0, 0, 0)))), ~ (~ ((int(_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (_GLF_IDENTITY(ivec4(int(6), (1 ^ 0), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), 1), max(ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(int(6), (1 ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) << ivec4(0, 0, 0, 0)))))))))), int(6)))));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(49.55))), injectionSwitch[1])))), injectionSwitch)))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(49.55))), injectionSwitch[1])))), injectionSwitch)))).x, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(49.55))), injectionSwitch[1])))), injectionSwitch)))).x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(49.55))), injectionSwitch[1])))), injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(49.55))), injectionSwitch[1])))), injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(49.55))), injectionSwitch[1])))), injectionSwitch)))).x)))) > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) && true))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | ((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | 1), 0 | _GLF_IDENTITY(((1 | 1)), (true ? ((1 | 1)) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(798.632))))) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false, false))))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2((injectionSwitch)[0], _GLF_FUZZED((1697.3898))), vec2(_GLF_FUZZED((- _GLF_IDENTITY(-2700.8371, exp(0.0) * (-2700.8371)))), (injectionSwitch)[1]), bvec2(false, true))).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))) || false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
