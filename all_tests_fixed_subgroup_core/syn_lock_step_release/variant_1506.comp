#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, false))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || _GLF_IDENTITY(false, (false) && true))); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), false || (bool(_GLF_IDENTITY(true, false || (true))))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, false)), ! (! (bool(bvec4(true, true, false, false)))))), true, true)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.0)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) > injectionSwitch.y))))))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)) && true, (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)) && true, false || (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)) && true, false || ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true))))))))))) || false)) && true))))) || false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec4(614.074, -8.8, _GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), 1.0 * (_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678))))), (float(_GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), 1.0 * (_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)))))) - 0.0))), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-67.45 / -9098.9196))), float(0.0), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))), max(vec2(vec4(614.074, -8.8, _GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (_GLF_IDENTITY(true ? -9859.2678 : _GLF_FUZZED(26.64), (true ? -9859.2678 : _GLF_FUZZED(26.64)) / cos(0.0)))), -9859.2678, -9859.2678)), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))), vec2(vec4(614.074, -8.8, _GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(_GLF_IDENTITY(748.451, min(748.451, 748.451)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec4(614.074, -8.8, _GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), 1.0 * (_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678))))), (float(_GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), 1.0 * (_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)))))) - 0.0))), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-67.45 / -9098.9196))), float(0.0), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))), max(vec2(vec4(614.074, -8.8, _GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (_GLF_IDENTITY(true ? -9859.2678 : _GLF_FUZZED(26.64), (true ? -9859.2678 : _GLF_FUZZED(26.64)) / cos(0.0)))), -9859.2678, -9859.2678)), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))), vec2(vec4(614.074, -8.8, _GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(_GLF_IDENTITY(748.451, min(748.451, 748.451)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))))), vec2(mat3x4(_GLF_IDENTITY(vec2(vec4(614.074, -8.8, _GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), 1.0 * (_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678))))), (float(_GLF_IDENTITY(_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), 1.0 * (_GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)))))) - 0.0))), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-67.45 / -9098.9196))), float(0.0), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))), max(vec2(vec4(614.074, -8.8, _GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (_GLF_IDENTITY(true ? -9859.2678 : _GLF_FUZZED(26.64), (true ? -9859.2678 : _GLF_FUZZED(26.64)) / cos(0.0)))), -9859.2678, -9859.2678)), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))), vec2(vec4(614.074, -8.8, _GLF_IDENTITY(-9859.2678, clamp(_GLF_IDENTITY(-9859.2678, (true ? -9859.2678 : _GLF_FUZZED(26.64))), -9859.2678, -9859.2678)), _GLF_IDENTITY(748.451, _GLF_IDENTITY(float(mat4x2(748.451, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)), clamp(float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(748.451, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(_GLF_IDENTITY(748.451, min(748.451, 748.451)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))))))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / sqrt(vec2(1.0, 1.0)))))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(abs(vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0)))))[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(4.8), _GLF_FUZZED(8.5)), bvec2(false, false))), _GLF_IDENTITY(clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), min(clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))))), injectionSwitch)).x > injectionSwitch.y), false, false, false))))))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, max(0, 0)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))], injectionSwitch[1]))[0], injectionSwitch[1])).x > injectionSwitch.y)))))), ((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0)))))], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-91.45) : injectionSwitch[1])), mix(float(injectionSwitch[1]), float(_GLF_FUZZED(8.5)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) || false))), injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))) || false))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(73.88, -2830.9387)) : injectionSwitch)))))[0], (injectionSwitch)[1]), max(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(73.88, -2830.9387)) : injectionSwitch)))))[0], (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(73.88, -2830.9387)) : injectionSwitch)))))[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-2.8), _GLF_FUZZED(59.69)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))), false, false)), false))))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), false, true)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), false, true)), false, true))))))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-784.631))), injectionSwitch.x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, length(vec2(0.0, 0.0)) + (injectionSwitch.x))))) << 0)); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), 0 ^ (clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -78947)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) - 0))))), 0 | _GLF_IDENTITY((int(ivec4(4, 1, 0, _GLF_IDENTITY(0, max(0, 0))))), (_GLF_IDENTITY((int(ivec4(4, 1, 0, 0))), ~ (~ ((int(ivec4(4, 1, 0, 0))))))) - (0 | 0))))), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)), max(float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)), float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))))), float(_GLF_FUZZED(-3.6)), bool(false)))) * 1.0) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), max((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))) * 1.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(smoothstep(-1.2, 54.50, dot(vec2(966.572, 46.10), injectionSwitch))))) > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2((! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), true)), true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(sqrt(vec2(67.08, -45.09))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), ! (! _GLF_IDENTITY(((! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec4(_GLF_IDENTITY(((! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), false || (((! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, (1.0) / 1.0)) > injectionSwitch.y))))), true, false, true)))))) || false))))))) || false), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), false || (bool(_GLF_WRAPPED_IF_FALSE(false))))) || false))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))) || false)) && true)))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           do
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) >> 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)); _injected_loop_counter ++)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               do
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         else
                          {
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(9259.3800, -599.471)) : (injectionSwitch) * mat2(1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), 0.0 + (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                              barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))) && true))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, true)), ! (! (bool(bvec3((false), true, true)))))) && true, (_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) && true) && true)))) && true))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (1 | (0 << _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (35153 & (0 >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, abs(1.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(65.20)), bool(false))), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(_GLF_IDENTITY(1.0, float(mat2x4(1.0, exp(0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.1)), bool(false))), 1.0, 1.0, 0.0))))), determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (true ? mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(transpose(mat4(5.0, -34.99, -7028.2326, -1.9, 8928.1250, 5.3, -0.3, -9.5, 5.7, -4.1, 2.1, -22.54, _GLF_IDENTITY(40.90, (_GLF_IDENTITY(40.90, (_GLF_IDENTITY(40.90, max(40.90, 40.90))) - 0.0)) + 0.0), 42.55, -210.633, -67.14)))))), 0.0, 0.0, sin(0.0), 0.0))), 1.0, 1.0, 1.0)))), 1.0, 1.0))).x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.9), _GLF_IDENTITY(_GLF_FUZZED(7.1), min(_GLF_IDENTITY(_GLF_FUZZED(7.1), min(_GLF_FUZZED(7.1), _GLF_FUZZED(7.1))), _GLF_FUZZED(7.1)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))))), bvec2(true, true))).x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y) || false)))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], max(gl_WorkGroupSize[_GLF_IDENTITY(2, ~ (~ (2)))], gl_WorkGroupSize[2])))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size), (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size)) | (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size))))) | (subgroup_id * subgroup_size)))), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size), (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size)) | (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size))))) | (subgroup_id * subgroup_size)))), ~ (~ (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size), (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size)) | (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size))))) | (subgroup_id * subgroup_size))))))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size), (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size)) | (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size))))) | (subgroup_id * subgroup_size)))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size), (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size)) | (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))), subgroup_id * subgroup_size))))) | (subgroup_id * subgroup_size)))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 1u, 0u))), min(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))) >> 0u), min(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))) >> 0u), _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))) >> 0u))), _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))) >> 0u))), _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), 1u * (clamp(workgroup_base, workgroup_base, workgroup_base)))))), 1u * (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))) >> 0u), _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), 1u * (clamp(workgroup_base, workgroup_base, workgroup_base)))))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, 0u)), 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))) >> 0u), (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))) >> 0u)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u))))) ^ 0u) >> 0u), (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))) >> 0u)) << (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))), _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base)), min(_GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base)), _GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base))))))))) - (0u << _GLF_IDENTITY(uint(7u), uint(7u))), ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, 0u)), 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))))) >> 0u), (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), ((_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), uint(uvec2((_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), 1u))))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))) / 1u)))) >> 0u)) >> _GLF_IDENTITY(0u, (0u) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u))))) ^ 0u) >> 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u))))) ^ 0u) >> 0u), 0u + (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))), 1u))))) / 1u))))) ^ 0u) >> 0u)))))), (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))), (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), 1u))))) / _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) >> 0u)) << (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (8u) / 1u)), uint(8u)))))), _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base)), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base)), min(_GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base)), _GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base)))), _GLF_IDENTITY(1u, (1u) | (1u)) * (clamp(workgroup_base, workgroup_base, workgroup_base))))))))) - (0u << _GLF_IDENTITY(uint(7u), uint(7u)))) / 1u)) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_local_id))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)), (false ? _GLF_FUZZED(3686) : (_GLF_IDENTITY(1, (1) ^ 0)))), (_GLF_IDENTITY(1, (1) ^ 0)))), (_GLF_IDENTITY(1, (1) ^ 0)))) | (1))) | _GLF_IDENTITY((1), ((1)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(1u, max(1u, 1u)) * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u)) % subgroup_size))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1)), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1)), max(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1)), subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1), clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1))))))))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))))) - 0u) - 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))) - 0u) - 0u)), _GLF_IDENTITY(1u, max(1u, 1u)) * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(workgroup_size))))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), min(_GLF_IDENTITY((1), ((1)) ^ 0), (1))), (1), (1))) ^ 0)) | (1))) | (1))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), ((_GLF_IDENTITY(! (true), true && (! (true))))) || false))))) ? _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) : _GLF_FUZZED(workgroup_size))))), clamp((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))))))) % subgroup_size, _GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size) | ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size)), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size) | 0u), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | _GLF_IDENTITY((1), max((1), (1))))) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (! (true)) || false))) ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))) | (1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) >> 0) ^ 0)) | (1))) | (1)) / 1)) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))))) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size), min(_GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, max(1u, 1u)) * ((subgroup_local_id + 1) % subgroup_size)))))))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(workgroup_size)))))))))) >> (0u ^ 0u));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) | 0), (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))), ~ (_GLF_IDENTITY(~ (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))), 0 | (~ _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))), clamp((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))))))))))))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(_GLF_IDENTITY(16645, max(16645, 16645)), 16645, 16645)))))), uint(_GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))) : _GLF_FUZZED((~ -66474)))), (true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))))))))), min(_GLF_IDENTITY(min(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (-71321 & 0)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))))), uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))))))), (min(uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))))), uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))))))) | (min(uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))), max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))), (_GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))) >> 0), _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))))))), uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645))))))))), min(uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))))), uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(16645, clamp(16645, 16645, 16645)))))))))), 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0), ~ (~ (_GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0))), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0))), ((_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0)))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), 1 * (_GLF_IDENTITY((64), ((64)) >> 0))) << 0), _GLF_IDENTITY(min(64, 64), (min(64, 64)) | 0)))))))), (64) + 0), _GLF_IDENTITY(64, (64) - 0))), 4);
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (! (false)) || false)) && true))), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (! (false)) || false)) && true))), false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (false)) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), bool(bvec4(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), false, true, true)))))) && true), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (false)) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), bool(bvec4(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), false, true, true)))))) && true)))))) || false)));
 for(int _injected_loop_counter = (1 | (0 | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> 0), 0)) | 0, 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0)) | 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> 0), 0)) | 0, 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0)) | 0))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY((0), clamp((0), (0), (0))) >> 0), 0)) | 0, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 ^ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | 0)))))))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-114.167)), float(injectionSwitch.y), bool(true)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (next_virtual_gid), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(~ (next_virtual_gid), (~ (_GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))) | (~ _GLF_IDENTITY((next_virtual_gid), (true ? (next_virtual_gid) : _GLF_FUZZED(workgroup_id))))) : _GLF_FUZZED(next_virtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(~ (next_virtual_gid), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(~ (next_virtual_gid), (~ (next_virtual_gid)) | (~ (next_virtual_gid))) : _GLF_FUZZED(next_virtual_gid)))), ((_GLF_IDENTITY(~ (next_virtual_gid), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(~ (next_virtual_gid), (~ (next_virtual_gid)) | (~ (next_virtual_gid))) : _GLF_FUZZED(next_virtual_gid))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) | (_GLF_IDENTITY(~ (next_virtual_gid), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(~ (next_virtual_gid), (~ (next_virtual_gid)) | (~ (next_virtual_gid))) : _GLF_IDENTITY(_GLF_FUZZED(next_virtual_gid), (_GLF_FUZZED(next_virtual_gid)) | (_GLF_FUZZED(next_virtual_gid))))))))), _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))], uint(_GLF_IDENTITY(2, _GLF_IDENTITY(((-36354 & 0) | 0) | (2), int(_GLF_IDENTITY(ivec2(((-36354 & 0) | 0) | (2), (0 & 35217)), ~ (~ (ivec2(((-36354 & 0) | 0) | (2), (0 & 35217))))))))), 4, 64, 4);
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true))));
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bool(bool(bool(_GLF_DEAD(false))))))), ! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = (0 & ivec4(-4067, 73901, 57202, -6551).r); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))) ^ (_injected_loop_counter ++)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))) || false))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3((false), false, false))) || false)))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(atanh(27.18)))) > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (((0 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 0, 1), min(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 0, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 0, 1)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(true, (true) || false) ? int(6) : _GLF_FUZZED(-68241))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
