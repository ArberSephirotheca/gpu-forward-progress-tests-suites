#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ ((1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(50.75 * -947.269, max(50.75 * -947.269, 50.75 * -947.269))), min((_GLF_IDENTITY(50.75 * -947.269, max(50.75 * -947.269, 50.75 * -947.269))), (_GLF_IDENTITY(50.75 * -947.269, max(50.75 * -947.269, 50.75 * -947.269))))))), bool(false))), 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2383.2445)), bool(false))), _GLF_IDENTITY(1.0, (1.0) * sqrt(1.0)), 1.0))).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))) || false)))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))) || false))))))))), true, false)))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.z = subgroup_id;
  }
 else
  {
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.y = subgroup_local_id;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     do
      {
       GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.y = num_workgroup;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), false))), false, true, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-93.65)), bool(false))))), injectionSwitch.y, injectionSwitch.y)))), false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true)))))))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))))))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)), (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true))) || false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true))))))), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true))))))), true)), true), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true))))))), true)), true), false))))))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-269.423)), bool(false))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-269.423)), bool(false)))) && true)), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.8, 18.67)))).x < injectionSwitch.y), false, true))))))), _GLF_IDENTITY(false, ! (! (false)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - (0 ^ 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, true && (true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))
                barrier();
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)))) < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false)), (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size) | (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size))) >> uvec2(0u, 0u)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.0, -7870.3781)) : injectionSwitch)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sqrt(length(vec3(0.0, 0.0, 0.0)))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(false, true && (false)))) || false))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) | (1)) & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.z * subgroup_size + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.y) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.z = virtual_gid, 1u * (GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.z = virtual_gid));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-770.066, -39.16)))), _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 1.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.w, (GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.w) | (GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.w)) + GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.z * subgroup_size + ((GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.y + _GLF_IDENTITY(1, (_GLF_IDENTITY(0 | 0, (true ? _GLF_IDENTITY(0 | 0, ~ (~ (0 | 0))) : _GLF_FUZZED(mix(15006, -41586, true))))) | (1))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.x = next_virtual_gid;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.x = GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupsubgroup_id.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) | (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base, (GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base) | (GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base)).z], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(0.0), 0.0), vec2(1.0, 1.0)), dot(vec2(sqrt(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), 0.0), vec2(1.0, 1.0))), determinant(mat4(1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), false || (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) && true))))), false, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), false || (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) && true))))), false, false)))))))) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, ~ (~ (3))), _GLF_IDENTITY(3, 0 ^ (3))))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false))))), ! (! (! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(false))))))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false))))), ! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(false)))))), false || (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(false)))))), bool(bvec3(! (! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false))))))), ! (! (! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(false))))))))))))))))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))) || false)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))) || false))))));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_base.x], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ _GLF_IDENTITY(((1u) ^ 0u), (((1u) ^ 0u)) << 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) / 1)) - (62338 & 0)))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), min((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u))), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ _GLF_IDENTITY(((1u) ^ 0u), (((1u) ^ 0u)) << 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) / 1)) - (62338 & 0)))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), min((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u))), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ _GLF_IDENTITY(((1u) ^ 0u), (((1u) ^ 0u)) << 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) / 1)) - (62338 & 0)))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), min((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u))), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ _GLF_IDENTITY(((1u) ^ 0u), (((1u) ^ 0u)) << 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) / 1)) - (62338 & 0)))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), min((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u))), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ _GLF_IDENTITY(((1u) ^ 0u), (((1u) ^ 0u)) << 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) / 1)) - (62338 & 0)))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), min((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u))), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ _GLF_IDENTITY(((1u) ^ 0u), (((1u) ^ 0u)) << 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) / 1)) - (62338 & 0)))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), min((_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u))), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(2)) | (_GLF_IDENTITY(1u, (1u) ^ 0u) ^ 1u), (true ? (uint(2)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ 0u, (_GLF_IDENTITY((1u) ^ 0u, ~ (~ ((1u) ^ 0u)))) | 0u)) ^ 1u) : _GLF_FUZZED(num_workgroup)))))))))))), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) || false), true && ((false) && _GLF_IDENTITY(true, (true) || false)))), ! (! (! (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) || false), true && ((false) && _GLF_IDENTITY(true, (true) || false))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-95.86)), bool(false))))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), max(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 0.0), (mat2(injectionSwitch.y, 1.0, 0.0, 0.0)) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(mat2(injectionSwitch.y, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 0.0, 0.0)), mix(float(float(mat2(injectionSwitch.y, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 0.0, 0.0))), float(_GLF_FUZZED(47.24)), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(-6.6, (true ? -6.6 : _GLF_FUZZED(-3491.7962)))))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) + 0)) | (0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(-1.1)), bool(false)))) & 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
