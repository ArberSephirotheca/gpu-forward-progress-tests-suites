#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch))))) * mat2(1.0)).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x))) / 1.0))) > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0)))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x))) / 1.0))) > injectionSwitch.y)))), bool(bvec3((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)), mix(vec2(_GLF_FUZZED(3.9), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)))[1]), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)))[0], _GLF_FUZZED(-1.3)), bvec2(true, false))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, sin(0.0), 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec3(sin(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(sin(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), clamp(dot(vec3(sin(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(sin(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(sin(0.0), 0.0, 1.0), vec3(1.0, 1.0, 0.0))))), abs(1.0), 1.0))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x))) / 1.0))) > injectionSwitch.y)))), true, false))), false, false))))))
        {
         for(int _injected_loop_counter = (51966 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false, true, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.6)), bool(false)))) * cos(0.0)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_IDENTITY(~ (_injected_loop_counter), 0 | (~ (_injected_loop_counter)))) << 0))) != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (39700 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY(false, ! (! (false))) || (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))))), false))))))), false || _GLF_IDENTITY((bool(bvec3(false, true, false))), ((bool(bvec3(false, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, false)))))))))
  barrier();
 for(int _injected_loop_counter = ((4588 & 0) & -87958); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(1, int(ivec2(1, 0)))))) || false); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.7) : injectionSwitch.x)) > injectionSwitch.y) && true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bool((_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bool((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false, false))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(int(86280u)))))), int(1)))))), true, true, true)))) && true)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-8.9, mix(float(_GLF_FUZZED(float(true))), float(-8.9), bool(true))), 1620.7804)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804))) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-2389.5309), _GLF_FUZZED(-774.383)), bvec2(false, false))), vec2(1.0, 1.0))))))), mat2(1.0) * ((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804))), (true ? (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804))) : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0)))))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-8.9, mix(float(_GLF_FUZZED(float(true))), float(-8.9), bool(true))), 1620.7804)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804))) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), min(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-2389.5309), _GLF_FUZZED(-774.383)), bvec2(false, false))), vec2(1.0, 1.0))))))), mat2(1.0) * ((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804))), (true ? (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.9, 1620.7804))) : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0)))))).x) / 1.0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((57057 & 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))) || false), (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), ~ (~ (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))), 1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), clamp((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), int(ivec3((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), 0, 1)))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (2))), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x, _GLF_IDENTITY((gl_WorkGroupSize.x), _GLF_IDENTITY(uint(uint((gl_WorkGroupSize.x))), _GLF_IDENTITY((0u ^ 0u), min((_GLF_IDENTITY(0u ^ 0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) >> 0u))), (uint(uint(_GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) >> 0u)))) >> 0u))), _GLF_IDENTITY((0u ^ 0u), (false ? _GLF_FUZZED(subgroup_id) : (0u ^ 0u))))) | (uint(uint((gl_WorkGroupSize.x)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u))))).x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u))))).x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | 0u), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), uint(uvec3((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_FUZZED(subgroup_id)))))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), 1u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), min((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))), 0u | (clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), ((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)), gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id))))))) - 0u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), _GLF_IDENTITY(min((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id))))))), (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), ~ (~ (uint(4u)))))) ^ (min((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)))))))))))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), gl_WorkGroupSize)).x) ^ 0u)) ^ 0u), gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id))))))))), 0u)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-27431))), (0) >> 0), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, clamp(0, 0, 0))))), min((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, clamp(0, 0, 0))))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, clamp(0, 0, 0))))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, clamp(0, 0, 0))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[1], (false ? _GLF_FUZZED(-20.18) : (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[1]))), vec2(_GLF_FUZZED(1.7), _GLF_FUZZED(-821.832)), bvec2(false, false))).x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(atomicExchange(subgroup_size, atomicMin(num_workgroup, subgroup_id))))))) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[1], (false ? _GLF_FUZZED(-20.18) : (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))[1]))), vec2(_GLF_FUZZED(1.7), _GLF_FUZZED(-821.832)), bvec2(false, false))).x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(atomicExchange(subgroup_size, atomicMin(num_workgroup, subgroup_id))))))) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) | 0u) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(181.791), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-40288) : 1))]), mat2(1.0) * _GLF_IDENTITY((vec2(_GLF_FUZZED(181.791), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-6128.9621), min(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-6128.9621))), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, ! (! (true)))))) / vec2(1.0, 1.0))), injectionSwitch)))[1])), clamp((vec2(_GLF_FUZZED(181.791), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, ! (! (true)))))) / vec2(1.0, 1.0))), injectionSwitch)))[1])), (vec2(_GLF_FUZZED(181.791), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec2((injectionSwitch)[0], 1.0))), (injectionSwitch)[1]), bvec2(true, true)), (mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(1.0), exp(vec2(0.0, 0.0)) * (((injectionSwitch)) * mat2(1.0))))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, ! (! (true)))))) / vec2(1.0, 1.0))), injectionSwitch)))[1])), (vec2(_GLF_FUZZED(181.791), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, ! (! (true))))), min(mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, ! (! (true))))), mix(vec2(_GLF_FUZZED(-6128.9621), _GLF_FUZZED(-8944.4859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, ! (! (true)))))))) / vec2(1.0, 1.0))), injectionSwitch)))[1]))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-3696.8936) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(712.329), (_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))) - 0.0)), (_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-3696.8936) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(712.329), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), max(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), mix(float(_GLF_FUZZED(float(-31566))), float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), bool(true)))))) - 0.0)), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-3696.8936) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(712.329), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), max(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), mix(float(_GLF_FUZZED(float(-31566))), float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), bool(true)))))) - 0.0, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(_GLF_IDENTITY(712.329, clamp(712.329, _GLF_IDENTITY(712.329, 0.0 + (712.329)), 712.329))))), max(_GLF_IDENTITY(_GLF_FUZZED(712.329), _GLF_IDENTITY(clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)), 0.0 + (_GLF_IDENTITY(clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)), (clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))) - 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), mix(float(_GLF_FUZZED(float(-31566))), float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))))), bool(true)))))) - 0.0) - sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-3696.8936) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(712.329), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), _GLF_IDENTITY(clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)), (clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))) * 1.0)), max(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), mix(float(_GLF_FUZZED(float(-31566))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), clamp(float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), (float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))))) * 1.0))), bool(true)))))) - 0.0)), (true ? vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], float(_GLF_IDENTITY(mat3x4((injectionSwitch)[0], 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, length(0.0)), transpose(transpose(mat3x4((injectionSwitch)[0], 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, length(0.0)))))))) / 1.0), (false ? _GLF_FUZZED(-3696.8936) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(712.329), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), max(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(_GLF_IDENTITY(712.329, mix(float(_GLF_FUZZED(5.0)), float(712.329), bool(true)))), _GLF_FUZZED(712.329))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_IDENTITY(_GLF_FUZZED(712.329), min(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), mix(float(_GLF_FUZZED(float(-31566))), float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(_GLF_IDENTITY(712.329, max(712.329, 712.329))), _GLF_FUZZED(712.329)))), bool(true)))))) - 0.0)) : _GLF_FUZZED(vec2(859.283, 123.764))))) / vec2(1.0, 1.0)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-3696.8936) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(712.329), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), max(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(712.329), (_GLF_FUZZED(712.329)) - 0.0), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329))), mix(float(_GLF_FUZZED(float(-31566))), float(_GLF_IDENTITY(_GLF_FUZZED(712.329), clamp(_GLF_FUZZED(712.329), _GLF_FUZZED(712.329), _GLF_FUZZED(712.329)))), bool(true)))))) - 0.0))))) * mat2(1.0)), bvec2(true, false))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(148.369)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true)))) * abs(1.0)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(148.369)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true)))) * abs(_GLF_IDENTITY(1.0, 0.0 + (1.0)))) > injectionSwitch.y)) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))), (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))))) || false)))))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) + 0.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), (true ? vec4(0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(vec4(3.0, 86.80, 0.6, -4.2)))))), 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))))) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), true && (false || (injectionSwitch.x > injectionSwitch.y))))))))), false, false, false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((49925 & 0) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)), bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true), true, false)), false, false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, true)), true)))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) ^ 0)], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | 0)) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> 0), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (true ? 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << 0), int(0)) : _GLF_FUZZED(-48209)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-42634) : 0))), int(0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1))))), (~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))) + 0))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1))))), (~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))) + 0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1))))), (~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))) + 0))), (_GLF_IDENTITY((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1))))), (~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))) + 0)))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1))))), (~ ((_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) | (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))) + 0))))) | (min(int(0), int(0))))), 1))), int(0), int(0)))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x))) * cos(0.0)) < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(0)), clamp(_GLF_IDENTITY((int(0)), 0 ^ (_GLF_IDENTITY((int(0)), 0 | ((int(0)))))), _GLF_IDENTITY((int(0)), 0 | ((int(0)))), (int(0)))), 0 ^ (_GLF_IDENTITY(~ (int(0)), (true ? ~ (int(0)) : _GLF_FUZZED(-35438))))))), int(0)), 1, 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))) * mat2(1.0)) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y))), ivec4(0, _GLF_IDENTITY(0, 0 | (0)), 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 + (0))), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))))) : _GLF_FUZZED((_injected_loop_counter ++))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(70477) : int(0))), _GLF_IDENTITY(int(0), clamp(int(_GLF_IDENTITY(0, 0 | (0))), int(0), int(0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(70477) : int(0))), _GLF_IDENTITY(int(0), clamp(int(_GLF_IDENTITY(0, 0 | (0))), int(0), int(0))))) | 0), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.0)), vec2(_GLF_FUZZED(13.80), (injectionSwitch)[1]), bvec2(false, true))).y)) ? 0 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0))))), int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), clamp(~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), ~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), ~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))))), int(ivec3(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), clamp(~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), ~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))), ~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))))), 1, 0)))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), max(int(1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), (int(1 << _GLF_IDENTITY(int(0), int(0)))) >> 0)))))))), 0 | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), max(int(1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), (int(1 << _GLF_IDENTITY(int(0), int(0)))) >> 0)))))))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))) : _GLF_FUZZED(9141))), (int(0)) | (int(0))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | 0))))), clamp(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), int(0)), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))))), clamp(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter)))), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 1 * (1 << _GLF_IDENTITY(int(0), int(0)))), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))), (int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0))))))) | 0))))))))))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0))))) ^ 0), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0)))))))) | (int(0))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0)))), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(int(0), int(0)))))))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (int(0))), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0))), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((int(0)), 0 ^ ((int(0))))))) | ((int(0)))) | (int(0))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (int(0))), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0))), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((int(0)), 0 ^ ((int(0))))))) | ((int(0)))) | (int(0))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (int(0))), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0))), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((int(0)), 0 ^ ((int(0))))))) | ((int(0)))) | (int(0))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))))))) ^ 0))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 1 * (int(0)))) | (int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(45160) : _GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)))))))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) - 0))) | (_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), max(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), max(int(1 << _GLF_IDENTITY(int(0), int(0))), int(1 << _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), (int(1 << _GLF_IDENTITY(int(0), int(0)))) >> 0)))) | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), clamp(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (1 & 1) * (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, min(0, 0)))) | (int(0))))), ((~ (_GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, min(0, 0)))) | (int(0)))))) ^ 0))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) / 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(0), int(0))), 0 | (int(1 << _GLF_IDENTITY(int(0), int(0)))))))))))))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), (_GLF_IDENTITY(min(int(0), int(0)), _GLF_IDENTITY((min(int(0), int(0))), ((min(int(0), int(0)))) / 1) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0))))))))), int(0)), (min(int(0), int(0))) * 1)))) | (min(int(0), int(0))))), 1))), int(0), int(0)))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * cos(0.0)) < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 1, 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y))))), _GLF_IDENTITY(ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) - ivec4(0, 0, 0, 0))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 1, 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y))))), _GLF_IDENTITY(ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) - ivec4(0, 0, 0, 0))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 1, 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y))))), _GLF_IDENTITY(ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) - ivec4(0, 0, 0, 0))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 1, 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(1.3, -354.750))))))).y))))), _GLF_IDENTITY(ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))) >> 0)))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) - ivec4(0, 0, 0, 0)))))))))))) : _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter ++)), (_GLF_FUZZED((_injected_loop_counter ++))) ^ 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), (_GLF_IDENTITY(0, 0 ^ (0))) | 0)), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), 0 | (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))))))) | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))) && true), (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(547.209, -1938.0039)))).y)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! _GLF_IDENTITY((! (! (false))), ! (! ((! (! (false)))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (true ? vec2(injectionSwitch) : _GLF_FUZZED(injectionSwitch))))).x, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.x), bool(true)))) / 1.0) < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), log(1.0), abs(0.0))), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), log(1.0), abs(0.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(-3.1)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), vec2(1.0, 1.0) * (vec2(injectionSwitch.x, 1.0)))), mix(float(_GLF_FUZZED(-0.8)), float(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), vec2(1.0, 1.0) * (vec2(injectionSwitch.x, 1.0))))), bool(true))))), bool(_GLF_IDENTITY(true, ! (! (true))))))) / 1.0) < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && _GLF_IDENTITY(true, ! (! (true)))), false)))))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.x), bool(true)), (true ? mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.x), bool(true)) : _GLF_IDENTITY(_GLF_FUZZED(fma(-970.723, -90.25, 2.8)), clamp(_GLF_IDENTITY(_GLF_FUZZED(fma(-970.723, -90.25, 2.8)), max(_GLF_FUZZED(fma(-970.723, -90.25, 2.8)), _GLF_FUZZED(fma(-970.723, -90.25, 2.8)))), _GLF_FUZZED(fma(-970.723, -90.25, 2.8)), _GLF_IDENTITY(_GLF_FUZZED(fma(-970.723, -90.25, 2.8)), (true ? _GLF_FUZZED(fma(-970.723, -90.25, 2.8)) : _GLF_FUZZED(4.2))))))))) / 1.0) < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))))))))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-72.50)), bool(false))))) || false))), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, true && (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)), true)))), true))))))))))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u), virtual_gid))], uint(1), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), ! (! (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, false, false)))))), true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true, true))))))))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
                  {
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 1.0), (vec4(injectionSwitch.y, 1.0, 1.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) - 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)) > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), false)), true)))), true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)) + (injectionSwitch.x)) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(95.60))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true)))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true))))), true)))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(((62.70))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-9.7)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)), clamp(vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)), vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)), vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)))))))))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(((62.70))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-9.7)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)), clamp(vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)), vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)), vec2(mat4x3((injectionSwitch) * mat2(1.0), _GLF_ONE(1.0, injectionSwitch.y), abs(determinant(mat2(0.0, 1.0, 0.0, 0.0))), log(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0), 1.0)))))))))))).y) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) * 1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0) + (vec3(_GLF_IDENTITY(1.0, (1.0) * 1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)))))) / 1.0))).y))) || false)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) * mat2(1.0)).y), true), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(42.17), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(2.5)), bvec2(true, false))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3(((injectionSwitch))[0], abs(1.0), abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0))), _GLF_FUZZED(249.834)), vec2(_GLF_FUZZED(3.0), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / sqrt(cos(vec2(0.0, 0.0)))))), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3(((injectionSwitch))[0], abs(1.0), abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0))), _GLF_FUZZED(249.834)), vec2(_GLF_FUZZED(3.0), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / sqrt(cos(vec2(0.0, 0.0)))))), mix(vec2(_GLF_FUZZED(-2947.8063), _GLF_FUZZED(21.10)), vec2(((false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3(((injectionSwitch))[0], abs(1.0), abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0))), _GLF_FUZZED(249.834)), vec2(_GLF_FUZZED(3.0), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / sqrt(cos(vec2(0.0, 0.0)))))))[0], ((false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3(((injectionSwitch))[0], abs(1.0), abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0))), _GLF_FUZZED(249.834)), vec2(_GLF_FUZZED(3.0), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / sqrt(cos(vec2(0.0, 0.0)))))))[1]), bvec2(true, true))), (false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3(((injectionSwitch))[0], abs(1.0), abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0))), _GLF_FUZZED(249.834)), vec2(_GLF_FUZZED(3.0), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / sqrt(cos(vec2(0.0, 0.0)))))), (false ? _GLF_FUZZED(vec2(296.020, 27.37).xy) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), (min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3(((injectionSwitch))[0], abs(1.0), abs(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0))), _GLF_FUZZED(249.834)), vec2(_GLF_FUZZED(3.0), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) / sqrt(cos(vec2(0.0, 0.0))))))))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))) || false))))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-69.29), _GLF_FUZZED(-7.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) * mat2(1.0)).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y)), (_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))).y)), (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y)))))) || false)) || _GLF_IDENTITY(false, bool(bvec2(false, false))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y)), (_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))).y)), (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y)))))) || false)) || _GLF_IDENTITY(false, bool(bvec2(false, false))))), false || (bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y)), (_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))).y)), (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).y)))))) || false)) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)), (injectionSwitch))) * mat2(1.0)).y))) || false)) || false)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acosh(8047.5315)) : injectionSwitch.x)) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acosh(8047.5315)) : injectionSwitch.x)) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acosh(8047.5315)) : injectionSwitch.x)) > injectionSwitch.y))), false)))) && _GLF_IDENTITY(true, bool(bool(true)))))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) | (3))) * 1)), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != int(_GLF_ZERO(0.0, injectionSwitch.x)))))) && true); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5248.3285, -8.5)) : injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5248.3285, -8.5)) : injectionSwitch)).y)) || false), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5248.3285, -8.5)) : injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5248.3285, -8.5)) : injectionSwitch)).y)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < 1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
                barrier();
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (injectionSwitch.x)) > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 | (int(6))), max(_GLF_IDENTITY(int(6), 0 | (int(6))), _GLF_IDENTITY(int(6), 0 | (int(6)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-3418.3871, 527.579)) : injectionSwitch)))).y)) ? _GLF_FUZZED((_injected_loop_counter ^ _GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))))) : (_GLF_IDENTITY(1, min(1, 1))))), ~ (~ (_GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, max(_injected_loop_counter ^ _injected_loop_counter, _injected_loop_counter ^ _injected_loop_counter))), min((_injected_loop_counter ^ _injected_loop_counter), (_injected_loop_counter ^ _injected_loop_counter)))) : (1), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter ^ _injected_loop_counter), min((_injected_loop_counter ^ _injected_loop_counter), (_injected_loop_counter ^ _injected_loop_counter)))) : (1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter ^ _injected_loop_counter), min((_injected_loop_counter ^ _injected_loop_counter), (_injected_loop_counter ^ _injected_loop_counter)))) : (1)) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))))))))) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 0 + (int(4)))) >> 0), int(_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (4)))), 0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) * 1)) | (4)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(int(int(4))), ~ (~ (int(int(int(4)))))))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(int(int(4))), ~ (~ (int(int(int(4))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))) * (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(0 << _GLF_IDENTITY(int(4), int(4)), 0 << _GLF_IDENTITY(int(4), int(4)))), 1 * (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))), int(4)))), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(int(int(4))), ~ (~ (int(int(int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))))) * (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(int(int(4))), ~ (~ (int(int(int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(_injected_loop_counter))) * (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(4)), 1 * _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), ~ (~ ((0 << _GLF_IDENTITY(int(4), int(4))))))) | ((0 << _GLF_IDENTITY(int(4), int(4)))))))) : _GLF_FUZZED(_injected_loop_counter))))))))), (_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ? _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (true ? _injected_loop_counter ^ _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) + 0))))) / 1)), min(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (true ? _injected_loop_counter ^ _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) + 0))))) / 1)), ((_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (true ? _injected_loop_counter ^ _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) + 0))))) / 1))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (true ? _injected_loop_counter ^ _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) + 0))))) / 1)), ((_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter ^ _injected_loop_counter, (true ? _injected_loop_counter ^ _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) + 0))))) / 1))) >> 0)))) : _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))) : _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(float(18082)), _GLF_FUZZED(85.83)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))) ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter ^ _injected_loop_counter)), 0 | (_GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter ^ _injected_loop_counter)), (_GLF_FUZZED((_injected_loop_counter ^ _injected_loop_counter))) / 1))) : (1))))) - (_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, (0) - 0))) << _GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), clamp(_GLF_IDENTITY(int(4), 0 + (int(4))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), max(_GLF_IDENTITY(int(4), 0 + (int(4))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), int(ivec4(_GLF_IDENTITY(int(4), 0 + (int(4))), 1, 0, 0))))), _GLF_IDENTITY(int(4), 0 + (int(4)))))) >> 0), int(4)), 0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (int(4)) / 1), int(4))), int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) / 1)) - 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(0, (0) << 0) | (4))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(0, (0) << 0) | (4))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | ((4))) | 0)), min((_GLF_IDENTITY(4, (4) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4))) >> 0), (4) | _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0 ^ (0)))))))) | (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) / 1))), (_GLF_IDENTITY(4, _GLF_IDENTITY((4) * _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (_GLF_IDENTITY(1, 0 ^ (1))) | 0)) | (1)), (false ? _GLF_FUZZED(-12584) : (4) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | (1)))))) | (4)))), _GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(int(int(4)))), int(4)), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) * 1)), _GLF_IDENTITY(int(4), int(int(int(4))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))))), 1 * (_GLF_IDENTITY(1, 0 ^ (1)))) : _GLF_IDENTITY(_GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), (_GLF_IDENTITY(_GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), clamp(_GLF_FUZZED(ivec4(45243, -39128, _GLF_IDENTITY(-7053, max(-7053, -7053)), 59914).a), _GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), _GLF_FUZZED(ivec4(45243, _GLF_IDENTITY(-39128, int(ivec4(-39128, 1, 1, 1))), -7053, 59914).a)))) | (_GLF_IDENTITY(_GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), (true ? _GLF_FUZZED(ivec4(45243, _GLF_IDENTITY(-39128, int(ivec3(-39128, 1, 0))), -7053, 59914).a) : _GLF_FUZZED(_injected_loop_counter))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))))), 1 * (_GLF_IDENTITY(1, 0 ^ (1)))) : _GLF_IDENTITY(_GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), (_GLF_IDENTITY(_GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), clamp(_GLF_FUZZED(ivec4(45243, -39128, _GLF_IDENTITY(-7053, max(-7053, -7053)), 59914).a), _GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), _GLF_FUZZED(ivec4(45243, _GLF_IDENTITY(-39128, int(ivec4(-39128, 1, 1, 1))), -7053, 59914).a)))) | (_GLF_IDENTITY(_GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a), (true ? _GLF_FUZZED(ivec4(45243, _GLF_IDENTITY(-39128, int(ivec3(-39128, 1, 0))), -7053, 59914).a) : _GLF_FUZZED(_injected_loop_counter)))))) + 0)), min(_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ _GLF_IDENTITY((1), ((1)) - 0)))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ _GLF_IDENTITY((1), ((1)) - 0)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ _GLF_IDENTITY((1), ((1)) - 0))))))))), (false ? _GLF_FUZZED(-41517) : ~ ((_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ _GLF_IDENTITY((1), ((1)) - 0))))))))))))) : _GLF_FUZZED(_injected_loop_counter)))), 1 * (1)) : _GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))))), 1 * (1)) : _GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a))) | ((_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), ~ (~ (~ (1))))))), (false ? _GLF_FUZZED(-57006) : _GLF_IDENTITY(~ _GLF_IDENTITY((1), ((1)) ^ 0), int(int(_GLF_IDENTITY(~ (1), ~ _GLF_IDENTITY((~ (~ (1))), (_GLF_IDENTITY((~ (~ _GLF_IDENTITY((1), ((1)) + 0))), 1 * ((~ (~ (1)))))) << (0 & -61074)))))))))), _GLF_IDENTITY(1, (1) - 0) * (1)) : _GLF_FUZZED(ivec4(45243, -39128, _GLF_IDENTITY(-7053, clamp(-7053, -7053, -7053)), 59914).a)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))))), 1 * (1)) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(45243, -39128, -7053, 59914), max(ivec4(45243, -39128, -7053, 59914), ivec4(45243, -39128, -7053, 59914))).a)), min((true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))))), 1 * (1)) : _GLF_FUZZED(ivec4(45243, _GLF_IDENTITY(-39128, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(-39128, max(-39128, -39128)))), -7053, 59914).a)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(~ (~ (~ (1))), clamp(_GLF_IDENTITY(~ (~ (~ (1))), (~ (~ (~ (1)))) << 0), ~ (~ (~ (1))), ~ (~ (~ (1))))))))))), 1 * (1)) : _GLF_FUZZED(ivec4(45243, -39128, -7053, 59914).a))))))), 1))) * _GLF_IDENTITY(1, clamp(1, 1, 1))) * (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1 * (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) | (0 << _GLF_IDENTITY(int(4), int(4)))), 0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0, ~ (~ (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(4))))), _GLF_IDENTITY((_GLF_IDENTITY(1 * _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0 << _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter))), clamp(1 * (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, 1 * (4))))), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(_GLF_IDENTITY(1, (1) | (1)) * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), int(ivec2((_GLF_IDENTITY(1 * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), 0))), min((_GLF_IDENTITY(1 * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) + 0), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), int(4))) * 1))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), int(4))) * 1))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), int(4))) * 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), int(4))) * 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) * (0 << _GLF_IDENTITY(int(4), int(4))), clamp(1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (0 << _GLF_IDENTITY(int(4), int(4))), 1 * (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), int(4))) * 1)))))))) - 0)))) * 1)) + 0) | 0))))))))) && true)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (0 << _GLF_IDENTITY(int(7), int(7)))), int(7))) ^ 0)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), (_GLF_IDENTITY(int(2), 0 | (int(2)))) | 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ _GLF_IDENTITY((~ (next_virtual_gid)), ((~ (next_virtual_gid))) - (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))], _GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(workgroup_size))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(64, _GLF_IDENTITY(1, (1) ^ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) / 1))) << _GLF_IDENTITY(int(1), int(1)))), 0, 1), _GLF_IDENTITY((ivec4(64, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) ^ (0 << _GLF_IDENTITY(int(1), int(1)))), 0, 1)), (_GLF_IDENTITY((ivec4(64, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) ^ (0 << _GLF_IDENTITY(int(1), int(1)))), 0, 1)), max((ivec4(64, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) ^ (0 << _GLF_IDENTITY(int(1), int(1)))), 0, 1)), _GLF_IDENTITY((ivec4(64, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) ^ (0 << _GLF_IDENTITY(int(1), int(1)))), 0, 1)), ~ (~ ((ivec4(64, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) ^ (0 << _GLF_IDENTITY(int(1), int(1)))), 0, 1)))))))) - ivec4(0, 0, 0, 0)) - ivec4(0, 0, 0, 0))), (int(ivec4(64, 1, 0, 1))) - 0)), 1, 1, 1)))) - 0), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(97214))))) ^ (~ (4))))));
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (! (! (_GLF_IDENTITY(false, false || (false)))))))), (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (! (! (_GLF_IDENTITY(false, false || (false))))))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
