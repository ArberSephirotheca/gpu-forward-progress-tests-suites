#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sqrt(sin(0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))).x) - 0.0) > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), false)))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))))), true)))))))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, (true) && true)), true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))), false, false, false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.7))), 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), (float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.7))), 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, length(0.0)))) : _GLF_FUZZED(-5.1)))))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(false, (false) || false), true)))), ! (! ((_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, (false) || false), true))))))))), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (((-20004 & 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(int(_GLF_IDENTITY(int(2), int(2)))))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))
        {
         barrier();
        }
       else
        {
        }
      }
     return;
    }
   return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0), mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, 1.0 * (1.0)) : _GLF_FUZZED(-9.2))), 1.0))) * (_GLF_IDENTITY((injectionSwitch), sqrt(exp(vec2(0.0, 0.0))) * (_GLF_IDENTITY((injectionSwitch), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch))))) * mat2(1.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 1 * (6))), _GLF_IDENTITY(int(6), (int(6)) + 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_injected_loop_counter != 1, false, true)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * (0 | 1)))
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), clamp(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), 0 ^ (1 << _GLF_IDENTITY(int(2), int(2)))), 1 << _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), clamp((1 << _GLF_IDENTITY(int(2), int(2))), (1 << _GLF_IDENTITY(int(2), int(2))), (1 << _GLF_IDENTITY(int(2), int(2)))))), (false ? _GLF_FUZZED(-95237) : int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), clamp((1 << _GLF_IDENTITY(int(2), int(2))), (1 << _GLF_IDENTITY(int(2), int(2))), (1 << _GLF_IDENTITY(int(2), int(2))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) | (2))), int(2))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true)))))))), true)))), ! (! (! (! (bool(bvec2(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true))))))))))), true)))))))), (bool(bvec2(true, true))) && true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0)))) - 0), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4((_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))), 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID, gl_WorkGroupID)), 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u + (~ (1u))))))), ~ (~ (uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u + (~ (1u)))))))))), 0u), (uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u)) | (uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u)))))), (false ? _GLF_FUZZED(uvec3(192273u, 155728u, 27429u)) : _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), uvec3(_GLF_IDENTITY(uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u), (uvec4(_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), uvec3(uvec3(uvec3(uvec4(gl_WorkGroupID, 1u))))), 0u)) | (uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u)))))), ~ (~ ((_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), uvec3(_GLF_IDENTITY(uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u), (uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u)) | (uvec4(uvec3(uvec4(gl_WorkGroupID, 1u)), 0u))))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 1u)))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 1u)))))), uvec3(uvec3((_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 1u)), ~ (~ (uvec3(uvec4(gl_WorkGroupID, 1u))))))))))))), (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(21484u, 2037u, 184597u)) : _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(21484u, (false ? _GLF_FUZZED(uint(bvec4(false, false, false, _GLF_IDENTITY(true, (true) || false)).w)) : _GLF_IDENTITY(21484u, 0u ^ (21484u)))), 2037u, _GLF_IDENTITY(184597u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), max(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), 0u | (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))))))))))), (uvec3(_GLF_IDENTITY(21484u, (false ? _GLF_FUZZED(uint(bvec4(false, false, false, true).w)) : _GLF_IDENTITY(21484u, 0u ^ (21484u)))), 2037u, _GLF_IDENTITY(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), min(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), clamp(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))))))))) | uvec3(0u, 0u, 0u))) : _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, 0u), min((gl_WorkGroupID) << uvec3(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))), 0u, 0u), (gl_WorkGroupID) << uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) << uvec3(0u, 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), (true ? _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), max(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(uvec3(148077u, 43319u, 194411u))))))))))), ((gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(21484u, (false ? _GLF_FUZZED(uint(bvec4(false, false, false, _GLF_IDENTITY(true, (true) || false)).w)) : _GLF_IDENTITY(21484u, 0u ^ (21484u)))), 2037u, _GLF_IDENTITY(184597u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), max(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), 0u | (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))))))))))), (uvec3(_GLF_IDENTITY(21484u, (false ? _GLF_FUZZED(uint(bvec4(false, false, false, true).w)) : _GLF_IDENTITY(21484u, 0u ^ (21484u)))), 2037u, _GLF_IDENTITY(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), min(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), clamp(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))))))))) | uvec3(0u, 0u, 0u))) : _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, 0u), min((gl_WorkGroupID) << uvec3(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))), 0u, 0u), (gl_WorkGroupID) << uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) << uvec3(0u, 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), (true ? _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), max(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(uvec3(148077u, 43319u, 194411u)))))))))))) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (((gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(21484u, (false ? _GLF_FUZZED(_GLF_IDENTITY(uint(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true))) && true)))).w), clamp(uint(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true))) && true)))).w), _GLF_IDENTITY(uint(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true))) && true)))).w), ~ (~ (uint(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true))) && true)))).w)))), uint(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) && true))) && true)))).w)))) : _GLF_IDENTITY(21484u, 0u ^ (21484u)))), 2037u, _GLF_IDENTITY(184597u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (_GLF_IDENTITY(true ? 184597u : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), min(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), clamp(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), ~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), ~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))))))))), (true ? 184597u : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), min(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), clamp(~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), ~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), ~ (_GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))))))))) >> 0u))), max(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id))))))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) * 1u)) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(uvec2(15671u, 0u)), (true ? uint(uvec2(15671u, _GLF_IDENTITY(0u, (0u) - 0u))) : _GLF_FUZZED(subgroup_local_id))))))), 0u | (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(15671u, 0u), uvec2(0u, 0u) ^ (uvec2(15671u, 0u)))), (true ? uint(uvec2(15671u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))))))))))), (uvec3(_GLF_IDENTITY(21484u, (false ? _GLF_FUZZED(uint(bvec4(false, false, false, true).w)) : _GLF_IDENTITY(21484u, 0u ^ (21484u)))), _GLF_IDENTITY(2037u, max(2037u, 2037u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(184597u, clamp(_GLF_IDENTITY(184597u, (184597u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 184597u, 184597u)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, _GLF_IDENTITY(0u, ((((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))))))))))))), min(_GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? _GLF_IDENTITY(184597u, ~ (~ (_GLF_IDENTITY(184597u, 0u ^ (_GLF_IDENTITY(184597u, clamp(184597u, 184597u, 184597u))))))) : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(184597u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u))))))) >> _GLF_IDENTITY(0u, 0u ^ (0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(184597u, min(184597u, _GLF_IDENTITY(184597u, (184597u) - 0u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))), _GLF_IDENTITY(184597u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(184597u, (true ? 184597u : _GLF_FUZZED(_GLF_IDENTITY(15671u, uint(uvec2(15671u, 0u)))))))))))))) | uvec3(0u, 0u, 0u))) : _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, 0u), min((gl_WorkGroupID) << uvec3(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))), 0u, 0u), (gl_WorkGroupID) << uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) << uvec3(0u, 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), (true ? _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), max(uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(uvec3(148077u, 43319u, 194411u)))))))))))))) - uvec3(0u, 0u, 0u))).x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) - _GLF_IDENTITY(0u, (0u) - 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), max(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), (workgroup_id) - 0u)))), ((_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u))) - 0u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u)))) / 1u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) && true)))), (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) && true)))), (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) && true)))), (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y)))), (true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false)))) && true), ! (! (((_GLF_IDENTITY(false, ! (! (false)))) && true))))) && true)))), (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))))) && true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || _GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true, false, false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, (false ? _GLF_FUZZED(-19971) : 1 ^ 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) | 0))), int(5)))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * subgroup_size, (true ? workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size : _GLF_FUZZED(subgroup_id))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false))))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false))))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), false, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), false, true)))), false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false))))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), false, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))), true, false)))))))), false, true)))), false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), (false || (false)) || false)) || false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 for(int _injected_loop_counter = (-67741 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(((_injected_loop_counter * -19098) / _injected_loop_counter)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))), subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) ^ 0), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) ^ 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) ^ 0))) | int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), ! (! ((false)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0)))))))))), true && (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((false), ! (! ((false)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0))))))))), (bool(bvec4(! _GLF_IDENTITY((false), ! (! ((false)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0)))))))))) || false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), clamp(_GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), _GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), _GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1))))))) | 0))) | (4))), ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), clamp(_GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), _GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1)))), _GLF_IDENTITY(int(ivec4(4, 1, (0 | 0), 1)), max(int(ivec4(4, 1, (0 | 0), 1)), int(ivec4(4, 1, (0 | 0), 1))))))) | 0))) | (4)))) << 0) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> 0), _GLF_IDENTITY((2), ((2)) | 0) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) * 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> 0), _GLF_IDENTITY((2), ((2)) | 0) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> 0), _GLF_IDENTITY((2), ((2)) | 0) >> 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> 0), _GLF_IDENTITY((2), ((2)) | 0) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> 0), _GLF_IDENTITY((2), ((2)) | 0) >> 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY((2), (_GLF_IDENTITY((2), (-61540 & 0) ^ ((2)))) | 0) >> 0)), 0 + (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(int(2)))) >> 0), _GLF_IDENTITY((2), ((2)) | _GLF_IDENTITY(0, (0) << 0)) >> 0))))) << (0 & 47354))))))), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, cos(0.0), 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, cos(0.0), 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), vec2(mat3x4(injectionSwitch, cos(0.0), 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))).y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(64.13)), bool(false)))))))
        return;
       break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
