#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x, min(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x, _GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x, (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x) | (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (~ (gl_WorkGroupID))))).x)))))), gl_WorkGroupID.x, gl_WorkGroupID.x), (clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)) + 0u))) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.6), _GLF_FUZZED(float(26118))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))], max((injectionSwitch)[1], (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, true && (true)))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY(true, true && (true)) && (true)))), (_GLF_IDENTITY((! (_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bvec4((true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), ((! (_GLF_IDENTITY(true, true && (true))))) || false)) && true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), min(1, 1)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), min(1, 1)), 0, 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))) - 0)) + 0) != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), 0))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)) : _GLF_FUZZED(_injected_loop_counter))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(! (! (false)))), bool(bvec3(bool(bool(! (! (false)))), false, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bool(! (! (false)))), bool(bvec3(bool(bool(! (! (false)))), false, false))), true, true)))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))), (bool(bool(bool(bool(! (_GLF_IDENTITY(! (false), false || (! (false))))))))) && true))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(8.5)), bool(false))))) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y))))))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), false || (bool(bvec2(true, false)))))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), determinant(mat2(1.0, log(1.0), 1.0, 1.0)), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, length(0.0), 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), determinant(mat2(1.0, log(1.0), 1.0, 1.0)), determinant(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), vec3(_GLF_IDENTITY(mat4(vec3(1.0, 1.0, 1.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0), (true ? mat4(vec3(1.0, 1.0, 1.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0) : _GLF_FUZZED(mat4(-66.25, 6.0, -2.0, 8744.0893, -233.833, -4.0, 7.5, 35.53, -28.54, -221.522, -726.260, -8.4, 847.095, 6.3, 75.20, -57.96))))))), (float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), vec3(_GLF_IDENTITY(mat4(vec3(1.0, 1.0, 1.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0), (true ? mat4(vec3(1.0, 1.0, 1.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0) : _GLF_FUZZED(mat4(-66.25, 6.0, -2.0, 8744.0893, -233.833, -4.0, 7.5, 35.53, -28.54, -221.522, -726.260, -8.4, 847.095, 6.3, 75.20, -57.96)))))))) - 0.0)), 0.0, 1.0, 0.0, length(0.0), 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(9.4)), bool(false)))) * 1.0))) > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))) & 64419); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(6), int(6))) | 1)); _injected_loop_counter ++)
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * exp(0.0)), ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), false)))))), true && ((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * exp(0.0)), ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), false))))))))), true, true)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y), false))))))), false, true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))), false, true, true))))) && true), (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), false))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))) && true));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(82.83))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))) && true))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0), (ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)))), min(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0), (ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0), (ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-29.42))))) < injectionSwitch.y)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(atomicOr(subgroup_id, workgroup_base), (true ? atomicOr(subgroup_id, workgroup_base) : _GLF_FUZZED(workgroup_base)))))) + subgroup_local_id, ~ (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size) >> 0u) : _GLF_FUZZED(atomicOr(subgroup_id, workgroup_base)))) + subgroup_local_id), (~ (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(atomicOr(subgroup_id, workgroup_base)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? subgroup_id * subgroup_size : _GLF_FUZZED(atomicOr(subgroup_id, workgroup_base)), (_GLF_IDENTITY(true ? subgroup_id * subgroup_size : _GLF_FUZZED(atomicOr(subgroup_id, workgroup_base)), (true ? subgroup_id * subgroup_size : _GLF_FUZZED(atomicOr(subgroup_id, workgroup_base))) << 0u)) ^ 0u)))) - 0u) + subgroup_local_id)) >> 0u)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), 0u), min(uvec2((subgroup_local_id + 1), 0u), _GLF_IDENTITY(uvec2((subgroup_local_id + 1), 0u), _GLF_IDENTITY((uvec2((subgroup_local_id + 1), 0u)) << uvec2(0u, 0u), max((uvec2((subgroup_local_id + 1), 0u)) << uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u), 0u)), 0u), (uvec2(_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), 1u, 0u, 1u))), 0u)) << _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) >> uvec2(0u, 0u)))))))), ~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))), 0u | (uint(min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1)))))), (uint(_GLF_IDENTITY(uint(min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))), 0u | (uint(min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))))))) | 0u))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 1u)))), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(virtual_gid)))) ^ 0u), min(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u)), max(~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u), (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u)) - 0u)), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u))), ((((subgroup_local_id + 1)))) >> 0u) + 0u))))), (subgroup_local_id + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))), uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))), 1u))), _GLF_IDENTITY((subgroup_local_id + 1), min(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) + 0u))), (subgroup_local_id + 1))))))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))), 0u), _GLF_IDENTITY(uvec2((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))), ~ (~ (uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), min(uvec2(subgroup_local_id, 1u), uvec2(subgroup_local_id, 1u))))))), uint(uvec2(subgroup_local_id, 1u)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) + (uint(subgroup_local_id))))), 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) / (0u ^ 1u)))), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))))))) << 0u, (true ? (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))))))) << 0u : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) >> 0u))), 1u))))), uint(uvec2(subgroup_local_id, 1u)))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))), (uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) | (uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))))), 1u)), (uint(uvec2(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))), (uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) | (uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))))), 1u))) | (uint(uvec2(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))), (uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) | (uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))))), 1u)))), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(~ (~ (uint(uvec2(subgroup_local_id, 1u)))), _GLF_IDENTITY(uint(uvec3(~ (~ (uint(uvec2(subgroup_local_id, 1u)))), 0u, 1u)), 0u | (_GLF_IDENTITY(uint(uvec3(~ (~ (uint(uvec2(subgroup_local_id, 1u)))), 0u, 1u)), min(uint(uvec3(~ (~ (uint(uvec2(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), (uvec4(1u, 1u, 1u, 0u)) / uvec4(1u, 1u, 1u, 1u))), uint(uvec4(uint(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), (uvec4(1u, 1u, 1u, 0u)) / uvec4(1u, 1u, 1u, 1u))), 1u, 1u, 0u)))))))))), 0u, 1u)), uint(uvec3(~ (~ (uint(uvec2(subgroup_local_id, 1u)))), 0u, 1u)))))))), uint(uvec2(subgroup_local_id, 1u)))))))))) << 0u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), 0u, 0u), (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), 0u, 0u)) | (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))))), 1u))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u))))))) : _GLF_FUZZED(subgroup_size)))))) << 0u)) << 0u)))) - 0u)), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), clamp(uint(uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), ~ (~ (uint(uvec2(subgroup_local_id, 1u))))), uint(uvec2(subgroup_local_id, 1u)))))))), uint(_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), 0u, 1u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), 0u, 1u, 0u)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), uint(uvec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, 0u ^ ((subgroup_local_id) / 1u))), uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))), 0u, 1u, 0u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) ^ 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) ^ 0u)) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) ^ 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) ^ 0u)) << 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) ^ 0u)))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (uvec2(subgroup_local_id, 1u)) + uvec2(0u, 0u))), min(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (uvec2(subgroup_local_id, 1u)) + uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (uvec2(subgroup_local_id, 1u)) + uvec2(0u, 0u)))))))) ^ 0u)), min(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), max(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), ((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))) << 0u), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))))) ^ 0u, min(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), (0u | 0u), 0u))), 1u))))), max(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), ((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))) << 0u), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))))) ^ 0u, _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), uint(uvec4(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 1u)))), ((~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))) << 0u), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), uint(uvec2(subgroup_local_id, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, (1u) | (1u)), 1u))))))))) ^ 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), 1u)))), _GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), max(_GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), (_GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))), (clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))) ^ 0u)) | (clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u)))))))))) ^ 0u))))))))))) + 1), 0u), (uvec2((subgroup_local_id + 1), 0u)) << uvec2(0u, 0u))))))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(2.3, 2.0)), (true ? injectionSwitch : _GLF_FUZZED(vec2(2.3, 2.0))) - vec2(0.0, 0.0)))), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.3, 2.0)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.3, 2.0)))))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.3, 2.0)))).y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.3, 2.0)))).y)))))))));
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED((-0.5 - 348.697)), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(5.1)), bvec2(true, false)))), injectionSwitch)).y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 1.0)), (vec2(mat2(injectionSwitch, tan(0.0), 1.0))) / vec2(1.0, 1.0))), vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.8)), float(1.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat4(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6927.9690) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.8)), float(1.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))))))), false || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), false))), false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), false))), false)))), false, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(bvec3((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, false), false))), false)))), false, false)))))))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, false))), bool(bvec4(! (bool(bvec3(true, false, false))), false, true, false))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid))], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), 1))), 0 ^ ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), 1))))) - 0)), 4, 64, _GLF_IDENTITY(4, int(ivec4(4, 0, 0, 1))));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), ! (! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), ! (! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), ! (! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (2) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(int(6), 0, 0, (-19499 & 0)))), int(6))))), 4, 64, 4);
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
