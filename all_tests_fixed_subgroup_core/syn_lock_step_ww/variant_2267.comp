#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat3 _f0;
 mat2x4 _f1;
 vec3 _f2;
 mat2x4 _f3;
 mat3x2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 mat2x3 _f1;
 bvec2 _f2;
 uvec3 _f3;
 mat3x4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 uint workgroup_size;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 ivec2 _f1;
 mat4x3 _f2;
 mat2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 ivec4 _f1;
 float _f2;
 bool _f3;
 uvec4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 bool _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 int _f4;
} ;

struct _GLF_struct_6 {
 uint _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 mat4x2 _f1;
 mat3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_1 {
 uint _f0;
 bool _f1;
 float _f2;
 uint _f3;
 float _f4;
 bool _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 vec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 mat2 _f3;
 _GLF_struct_2 _f4;
 int _f5;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 _GLF_struct_3 _f1;
 uint subgroup_local_id;
 _GLF_struct_6 _f2;
 vec2 _f3;
 vec4 _f4;
 _GLF_struct_8 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat4x2(1.0), _GLF_struct_3(_GLF_struct_0(ivec2(1), vec2(1.0), bvec3(true)), mat3(1.0), _GLF_struct_1(1u, true, 1.0, 1u, 1.0, true, bvec4(true)), mat2(1.0), _GLF_struct_2(mat2x4(1.0), mat4x2(1.0), mat3(1.0), mat2(1.0)), 1), gl_SubgroupInvocationID, _GLF_struct_6(1u, _GLF_struct_4(mat4x3(1.0), true, mat2x3(1.0), mat4x3(1.0), 1), _GLF_struct_5(bvec2(true), ivec4(1), 1.0, true, uvec4(1u), mat4x2(1.0)), mat2x3(1.0)), vec2(1.0), vec4(1.0), _GLF_struct_8(_GLF_struct_7(ivec3(1), ivec2(1), mat4x3(1.0), mat2(1.0), bvec4(true))));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.x = num_workgroup;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_12(_GLF_struct_10(ivec4(1), mat2x3(1.0), bvec2(true), uvec3(1u), mat3x4(1.0), ivec2(1)), gl_WorkGroupSize.x, _GLF_struct_11(mat3(1.0), mat2x4(1.0), vec3(1.0), mat2x4(1.0), mat3x2(1.0), mat4x2(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.z = workgroup_id;
 uint workgroup_base = _GLF_struct_replacement_13._f0.workgroup_size * GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.z;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
  {
   GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.y = workgroup_base;
  }
 else
  {
  }
 uint virtual_gid = GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.y + subgroup_id * subgroup_size + _GLF_struct_replacement_9.subgroup_local_id;
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_14_2_1_12num_workgroupworkgroup_baseworkgroup_id.y + subgroup_id * subgroup_size + ((_GLF_struct_replacement_9.subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
}
