#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) < injectionSwitch.y)) && (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      break;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 1, 0)), (int(ivec4(0, 0, 1, 0))) ^ 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            return;
          }
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))], gl_WorkGroupSize[2])).x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << (43578 & 0))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, 0 | (0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = ((-31845 & -51373) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
                  {
                   return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              {
                               do
                                {
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              return;
                            }
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               return;
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 continue;
                                }
                               break;
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_DEAD(false))
                                break;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               continue;
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      continue;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++))) >> 0), 0 + (_injected_loop_counter ++)))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                              return;
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                              return;
                            }
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))) * exp(vec2(0.0, 0.0))).y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false, true, true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))), (injectionSwitch.x > injectionSwitch.y)), false, true, true)))) && true)))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                        return;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)))) && true)))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (! (bool(_GLF_WRAPPED_IF_FALSE(false))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.1)), float(injectionSwitch.y), bool(true)))))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.3)))))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), false || ((false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))
                continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, max(6, 6)), 6, 6)), 6, 6))), _GLF_IDENTITY(int(6), min(int(6), int(6)))))); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               return;
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                      }
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), max((1 ^ 0), _GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0)))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) ^ 0u) * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)))) || false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
              {
               return;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 | 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(60638))), int(0))), _GLF_IDENTITY(int(0), (int(0)) - 0)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
  {
   do
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), ((0 >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(5), int(5))) | (int(5))), _GLF_IDENTITY(int(5), 0 | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, determinant(mat2(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0))))), (true ? injectionSwitch.y : _GLF_FUZZED(-5931.5597))))), injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.8) : injectionSwitch.x)) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(535.184)), float(0.0), bool(true))), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), true), bvec3(bvec4(bvec3(bvec2(true, false), true), true))))), bvec2(bvec2(bvec2(true, false))))), (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))) || false))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(true, false), true), bvec3(bvec3(bvec3(bvec2(true, false), true)))), bvec3(bvec4(bvec3(bvec2(true, false), true), true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false))))))), (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))) || false)))) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4216.4441))), injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            break;
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
        continue;
       continue;
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, injectionSwitch.x)) < injectionSwitch.y) && true)))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bool(! (bool(false)))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (bool(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))) || false)))) || false))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), min((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << 0)))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) || false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) / exp(vec2(0.0, 0.0))).y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))) ^ 0u, ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))) ^ 0u) << 0u)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 ^ (0)))) | 0) | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 + (int(0))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), 1)), (int(ivec2(int(0), 1))) * 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), int(ivec4(~ (int(0)), 0, 0, 0))))), int(0))) + 0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0)))))), max((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), 1)), (int(ivec2(int(0), 1))) * _GLF_IDENTITY(1, (1) ^ 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), int(ivec4(~ (int(0)), 0, 0, 0))))), int(0))) + 0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) - 0)), 1 * (int(0)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), 1)), (int(ivec2(int(0), 1))) * 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), int(ivec4(~ (int(0)), 0, 0, 0))))), int(0))) + 0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0)))))), 1 * ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), 1)), (int(ivec2(int(0), 1))) * 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), int(ivec4(~ (int(0)), 0, 0, 0))))), int(0))) + 0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))), ((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))) | 0) * 1), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))), ((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))) | 0) * 1), (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))), ((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))) | 0) * 1)) | 0))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 & (_GLF_IDENTITY(1 & 1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1 & 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), true, true))), (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))))
                continue;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
              break;
             continue;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, true, false))))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    break;
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(939.982)), bvec2(true, false))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) + 0.0), 0.0)), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.1))), 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(_GLF_IDENTITY(determinant(mat3(_GLF_IDENTITY(0.0, (0.0) * exp(0.0)), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat3x4(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0)))), _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (true ? mat4(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.8) : 0.0))), (mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(mat4(-5.1, -371.049, -2.3, 6.8, -240.576, 8178.8742, -5.5, 1203.2024, -4007.6590, 7487.9431, 6503.0805, 2229.9124, 6.7, -27.21, 763.252, 1.4))))))), (false ? _GLF_FUZZED(mat4x3(3637.5737, 5.1, -0.5, 6.9, 786.772, 72.56, -8.3, -4402.7250, 5535.7322, -997.999, 968.545, 4.4)) : mat4x3(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0))), (true ? mat4(_GLF_IDENTITY(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 1.0, cos(0.0), _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(mat4(-5.1, _GLF_IDENTITY(-371.049, mix(float(_GLF_IDENTITY(-371.049, mix(float(-371.049), float(_GLF_FUZZED(1292.1965)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-4.1)), bool(false))), -2.3, 6.8, -240.576, 8178.8742, -5.5, 1203.2024, -4007.6590, 7487.9431, 6503.0805, 2229.9124, 6.7, -27.21, 763.252, 1.4), (_GLF_IDENTITY(mat4(-5.1, _GLF_IDENTITY(-371.049, mix(float(_GLF_IDENTITY(-371.049, mix(float(-371.049), float(_GLF_FUZZED(1292.1965)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-4.1)), bool(false))), -2.3, 6.8, -240.576, 8178.8742, -5.5, 1203.2024, -4007.6590, 7487.9431, 6503.0805, 2229.9124, 6.7, -27.21, 763.252, 1.4), transpose(transpose(_GLF_IDENTITY(mat4(-5.1, _GLF_IDENTITY(-371.049, mix(float(_GLF_IDENTITY(-371.049, mix(float(-371.049), float(_GLF_FUZZED(1292.1965)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-4.1)), bool(false))), -2.3, 6.8, -240.576, 8178.8742, -5.5, 1203.2024, -4007.6590, 7487.9431, 6503.0805, 2229.9124, 6.7, -27.21, 763.252, 1.4), transpose(transpose(mat4(-5.1, _GLF_IDENTITY(-371.049, mix(float(_GLF_IDENTITY(-371.049, mix(float(-371.049), float(_GLF_FUZZED(1292.1965)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-4.1)), bool(false))), -2.3, 6.8, -240.576, 8178.8742, -5.5, 1203.2024, -4007.6590, 7487.9431, 6503.0805, 2229.9124, 6.7, -27.21, 763.252, 1.4)))))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))))))) + 0.0), _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-63.38)), bool(false))))), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * vec2(1.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), clamp(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)))))) - vec2(0.0, 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * vec2(1.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)) : _GLF_FUZZED(0.5))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), clamp(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)))))) - vec2(0.0, 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.5) : 0.0)), 0.0, 0.0)))[_GLF_IDENTITY(1, 0 ^ (1))]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))).y)))) && true))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * vec2(1.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), clamp(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)))))) - vec2(0.0, 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * vec2(1.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)) : _GLF_FUZZED(0.5))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), clamp(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)))))) - vec2(0.0, 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.5) : 0.0)), 0.0, 0.0)))[_GLF_IDENTITY(1, 0 ^ (1))]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))).y)))) && true))), false || (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * vec2(1.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), clamp(_GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), clamp(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)))))) - vec2(0.0, 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(966.775)), bool(false))), cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), true, false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), true, false)), true, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), true, false)), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), true, false)), true, true)), true, true))), false)))), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.8))) < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(468.766)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))) - 0.0))), true)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), (bool(bvec4(true, true, false, true))) || false)), false)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), min((_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))) * vec2(1.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), clamp(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)) : _GLF_FUZZED(0.5))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, length(0.0), 0.0))), 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), clamp(vec2(mat2x3(clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.2)), bool(false))), 0.0, 0.0)))))) - vec2(0.0, 0.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), min(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.1)), float(0.0), bool(true)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0)), 0.0))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))))), mix(vec2(_GLF_FUZZED(-95.97), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.5) : 0.0)), 0.0, 0.0)))[_GLF_IDENTITY(1, 0 ^ (1))]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))).y)))) && true)))))) || false))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                      }
                     break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(mix(float(_GLF_FUZZED((+ 198.299))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.733)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), vec2(_GLF_FUZZED(1112.6615), (injectionSwitch)[1]), bvec2(false, true))).x), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(mix(float(_GLF_FUZZED((+ 198.299))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.733)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x))), _GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (true ? float(injectionSwitch.x) : _GLF_FUZZED(-85.90))), float(injectionSwitch.x))), float(injectionSwitch.x))), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (mix(_GLF_IDENTITY(float(_GLF_FUZZED((+ 198.299))), (float(_GLF_FUZZED((+ 198.299)))) - _GLF_IDENTITY(log(1.0), clamp(_GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0), log(1.0), _GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0)))))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.733)), float(injectionSwitch.x), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) - 0.0)) * 1.0)) < injectionSwitch.y))))
                    {
                     atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, min(1, 1)))), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | 0))))) - 0)), 1)), 1))), clamp(_GLF_IDENTITY(uint(1), ~ (~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))), uint(1), uint(1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ (0u | 0u))) / 1u) | (_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))))), ~ (~ (uint(1)))), uint(1), uint(1))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) << 0u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), min(ivec3(1, 0, 1), ivec3(1, 0, 1))), (ivec3(1, 0, 1)) | _GLF_IDENTITY((ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1)), (_GLF_IDENTITY((ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1)), min(_GLF_IDENTITY((ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1)), ivec3(0, 0, 0) ^ ((ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1)))), (ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1))))) - ivec3(0, 0, 0))))), 1, 1))), ~ (~ (uint(1)))), uint(1), uint(1)))))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) << 0u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), min(ivec3(1, 0, 1), ivec3(1, 0, 1))), (ivec3(1, 0, 1)) | (ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1))))), 1, 1))), ~ (~ (uint(1)))), uint(1), uint(1))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : false ? _GLF_FUZZED(subgroup_size) : ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) << 0u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), min(ivec3(1, 0, 1), ivec3(1, 0, 1))), (ivec3(1, 0, 1)) | (ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1))))), 1, 1))), ~ (~ (uint(1)))), uint(1), uint(1))))))))) + 0u)))) / 1u), 4, 64, 4);
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.8, -2.1)))).y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.8, -2.1)))).y), float(_GLF_FUZZED(-64.64)), bool(false)), (mix(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.8, -2.1)))).y), _GLF_IDENTITY(float(_GLF_FUZZED(-64.64)), min(float(_GLF_FUZZED(-64.64)), _GLF_IDENTITY(float(_GLF_FUZZED(-64.64)), float(float(float(_GLF_FUZZED(-64.64))))))), bool(false))) - 0.0)), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), false || ((! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), 1.0))).y))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY((bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), bvec2(bvec2(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-73.58) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(refract(-3.6, -8.6, -325.951)) : injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(vec2(3.3, -304.093)))), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), injectionSwitch, injectionSwitch)).y, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)))), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5946.5377))), float(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0)), vec2(0.0, 0.0) + (vec2(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-36.46)), vec2(_GLF_FUZZED(-20.25), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))), mat2(1.0) * (injectionSwitch))))))), vec2(mat4x3(clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch), 1.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(0.2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-83.22), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) / 1.0))), clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(-83.22), mix(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-83.22)), (true ? float(_GLF_FUZZED(-83.22)) : _GLF_FUZZED(-61.55))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(-83.22)), (true ? float(_GLF_FUZZED(-83.22)) : _GLF_FUZZED(-61.55))) : _GLF_FUZZED(max(-896.564, 9819.4351)))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22))), (_GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22)))) / 1.0)))), vec2((clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-66.03)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(0.2), _GLF_IDENTITY(_GLF_FUZZED(-83.22), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(-83.22), mix(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), float(_GLF_FUZZED(-83.22)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22)))), (clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(-83.22), mix(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), float(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (false ? _GLF_FUZZED(-955.813) : _GLF_FUZZED(-83.22)))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_FUZZED(-83.22), _GLF_IDENTITY(_GLF_FUZZED(-83.22), mix(float(_GLF_FUZZED((vec2(-734.435, -45.56) * mat4x2(-96.86, 1.0, 66.94, -86.92, -701.051, 8981.3282, -335.158, -575.395)).x)), float(_GLF_FUZZED(-83.22)), bool(true))), _GLF_FUZZED(-83.22))))) - 0.0))), vec2((clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, cos(0.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, cos(0.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0)), (true ? vec2(mat4x2(injectionSwitch, cos(0.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(round(length(normalize(1.0))), max(round(length(normalize(1.0))), round(length(normalize(1.0))))), 0.0, 0.0)) : _GLF_FUZZED(vec2(-1362.8278, 1.8)))), vec2(mat4x2(injectionSwitch, cos(0.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0))))))), injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(true, true)), _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(0.2), clamp(_GLF_FUZZED(0.2), _GLF_FUZZED(0.2), _GLF_FUZZED(0.2))), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-83.22, _GLF_IDENTITY(float(vec3(-83.22, 1.0, 0.0)), mix(float(float(vec3(-83.22, 1.0, 0.0))), float(_GLF_FUZZED(-22.22)), bool(false))))), mix(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), float(_GLF_FUZZED(-83.22)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22)))))), vec2((clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), min(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(1630.1083), (mix(vec2(_GLF_FUZZED(0.2), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-83.22, _GLF_IDENTITY((-83.22), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.2) : (-83.22))) + 0.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), float(mat4x2(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), 1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-83.22, float(mat2x3(-83.22, 1.0, 0.0, 1.0, 0.0, 1.0))))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22)))))), vec2((clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.9), _GLF_IDENTITY(_GLF_FUZZED(0.7), clamp(_GLF_FUZZED(0.7), _GLF_FUZZED(0.7), _GLF_FUZZED(0.7)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * vec2(1.0, 1.0))))), _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(0.7)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), mix(vec2(_GLF_FUZZED(3.5), _GLF_FUZZED(-713.463)), vec2((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(0.7)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))))[0], (vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(0.7)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[_GLF_IDENTITY(1, (1) | 0)]), bvec2(true, true)))[1]), vec2((mix(vec2(_GLF_FUZZED(0.2), _GLF_IDENTITY(_GLF_FUZZED(-83.22), clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), (_GLF_FUZZED(-83.22)) * 1.0), _GLF_IDENTITY(_GLF_FUZZED(-83.22), mix(float(_GLF_FUZZED(vec2(6.9, -6998.9566).y)), float(_GLF_FUZZED(-83.22)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-83.22, min(-83.22, _GLF_IDENTITY(-83.22, (-83.22) - 0.0)))), clamp(_GLF_IDENTITY(_GLF_FUZZED(-83.22), max(_GLF_FUZZED(-83.22), _GLF_IDENTITY(_GLF_FUZZED(-83.22), min(_GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22))))), _GLF_FUZZED(-83.22), _GLF_FUZZED(-83.22)))))), vec2((clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0), vec2(1.0, 0.0)), dot(vec2(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0), vec2(1.0, 0.0))), 1.0, sqrt(1.0), 0.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, tan(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, tan(0.0), 0.0, 0.0))), 0.0, 0.0, exp(0.0)), (mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, tan(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, tan(0.0), 0.0, 0.0))), 0.0, 0.0, exp(0.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch))[1]), bvec2(true, true)))[0], _GLF_FUZZED(-1.5)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))).x) * _GLF_IDENTITY(1.0, (1.0) * 1.0))))) > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         continue;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       break;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))) || false)) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))) && true)))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             return;
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), clamp((0 ^ 1), (0 ^ 1), (0 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false))) && true))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))) && true)))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(79.88)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))
          return;
        }
      }
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << (0 | 0)) > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), false, false), bvec3(bvec4(bvec3(bool(bvec2(false, true)), false, _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))))))) || false), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec3(bvec3(bool(bvec2(false, true)), false, false)))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(false, (false) || false), false), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), false, false), bvec3(bvec4(bvec3(bool(bvec2(false, true)), false, _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))))))) || false), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), false, false), bvec3(bvec4(bvec3(bool(bvec2(false, true)), false, _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))))))) || false), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), false, false), bvec3(bvec4(bvec3(bool(bvec2(false, true)), false, _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))))))) || false), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true)))))), bvec3(bvec3(bvec3(bool(bvec2(false, true)), false, false)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9380.2385)))) - 0.0)))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-40.13)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(acosh(-488.904)) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y))) || false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), false, false, true))))))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0))), max(_GLF_IDENTITY(min(_GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0))), (true ? min(_GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0))) : _GLF_FUZZED(ivec4(-49484, -23998, 58530, -49514)[3]))), min(_GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))))), int(7)), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) | ((0))))) | (0), (_GLF_IDENTITY(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) | ((0))))), (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) | ((0)))))) >> _GLF_IDENTITY(0, clamp(0, 0, 0))) | _GLF_IDENTITY((0), ~ (~ ((0))))) << (0 ^ 0))) ^ (1)) << _GLF_IDENTITY(int(7), int(7))) << 0)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) ^ 0))
                                      {
                                       if(_GLF_DEAD(false))
                                        break;
                                       return;
                                      }
                                    }
                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(1.0))), (vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(1.0)))) * mat2(1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2715.5414), _GLF_FUZZED(7577.0999)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), false))));
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      break;
                                     break;
                                    }
                                   if(_GLF_DEAD(false))
                                    break;
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        break;
                                       if(_GLF_DEAD(false))
                                        break;
                                       return;
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec2(551.548, -482.363).t)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                                      {
                                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                                        break;
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                                        {
                                         return;
                                        }
                                       if(_GLF_DEAD(false))
                                        return;
                                      }
                                    }
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), max((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))); _injected_loop_counter ++)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
                      break;
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false, false, false)))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - 0.0), (true ? injectionSwitch.x : _GLF_FUZZED(-7239.5044))) > injectionSwitch.y))) || false)))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))), ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0)))))) | ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))))), 0, 0), (ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))), ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0)))))) | ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))))), 0, 0)) | ivec3(0, 0, 0))), 0 | (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))), ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0)))))) | ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))))), 0, 0), (ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))), ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0)))))) | ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> 0)) | (0))))))), 0, 0)) | ivec3(0, 0, 0)))))) * 1)); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))), false, false, false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))), false, false, false))))))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      return;
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (0 >> _GLF_IDENTITY(int(7), int(7))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(0), 0 | (int(0))), 0, 0), (ivec3(_GLF_IDENTITY(int(0), 0 | (int(0))), 0, 0)) - ivec3(0, 0, 0)))), int(0)))) < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), false, false)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, 0), (ivec3(0, 1, 0)) | (ivec3(0, 1, 0)))))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-867.481)), bvec2(false, false))), injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-867.481)), bvec2(false, false))), injectionSwitch, injectionSwitch), (clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(faceforward(vec2(-4.6, 1.8), (vec2(-3.0, -5.3) + vec2(-289.658, 7.2)), injectionSwitch)), max(_GLF_FUZZED(faceforward(vec2(-4.6, 1.8), (vec2(-3.0, -5.3) + vec2(-289.658, 7.2)), injectionSwitch)), _GLF_FUZZED(faceforward(vec2(-4.6, 1.8), (vec2(-3.0, -5.3) + vec2(-289.658, 7.2)), injectionSwitch)))) : (injectionSwitch)))[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-867.481)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))))))))), injectionSwitch, injectionSwitch)) + _GLF_IDENTITY(sqrt(vec2(0.0, 0.0)), max(sqrt(vec2(0.0, 0.0)), sqrt(vec2(0.0, 0.0))))))) / vec2(1.0, 1.0)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-867.481)), bvec2(false, _GLF_IDENTITY(false, (false) && true)))), injectionSwitch, injectionSwitch)).y))))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(int(0), int(0)))))) | (_GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))) && true))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false), false), false, false))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false), false), false, false))))), false)))), false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), true, false))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) | ((int(5)))) << 0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, exp(0.0), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat4(injectionSwitch, exp(0.0), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))).y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))));
}
