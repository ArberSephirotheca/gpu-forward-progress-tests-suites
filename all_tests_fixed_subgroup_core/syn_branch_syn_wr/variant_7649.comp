#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(8), int(8)))))
    {
     case 7:
     (-8.2 / mat3x4(829.659, 8851.5765, -4.2, 79.87, -656.044, -4500.5110, 74.79, -4.8, 4.6, 450.434, -1425.5847, -7780.1712));
     case 58:
     {
      ivec4 _GLF_SWITCH_0_0v[68], _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[37];
      mat2x3(-0.5, -2182.8021, -7.9, -8.1, -665.375, 217.015);
      ivec2 _GLF_SWITCH_0_3v;
      {
       do
        {
         uvec4 _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v;
         mat2x3(7.5, 2071.5705, -519.296, -4883.8198, 0.2, 1.3);
        }
       while(true);
       if(false)
        {
        }
       while((uvec3(145036u, 191851u, 162447u) != uvec3(188038u, 183223u, 152179u)))
        {
         bool _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
         mat2(665.575, -10.93, -7.5, 4.9);
         vec3(6.6, 8.1, 1.7);
         floatBitsToInt(vec3(461.719, 5.0, -88.96));
         bool _GLF_SWITCH_0_9v;
         vec3 _GLF_SWITCH_0_10v;
         ;
         bitfieldReverse(ivec4(15657, 42768, 62774, 57012));
        }
      }
      ivec2 _GLF_SWITCH_0_11v[15], _GLF_SWITCH_0_12v[73], _GLF_SWITCH_0_13v[45];
      while(true)
       {
        injectionSwitch;
        vec4 _GLF_SWITCH_0_14v[15], _GLF_SWITCH_0_15v[4];
        for(mat2x4 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v; true; false)
         {
          mod(vec4(-5.4, 723.993, 3.3, 3.1), 653.102);
          (-2894.7305 != -491.968);
          mat4 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v;
         }
        while(bvec3(false, false, false)[2])
         {
          99.39;
         }
        {
        }
       }
     }
     case 0:
     case 11:
     int i = 0;
     case 51:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     break;
     case 93:
     isinf(vec4(-4225.1584, 2869.8999, 9329.6872, -415.978));
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 13:
     uint _GLF_SWITCH_1_0v[50], _GLF_SWITCH_1_1v;
     case 0:
     case 54:
     case 47:
     case 26:
     case 52:
     case 17:
     case 89:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     break;
     default:
     1;
    }
  }
}
