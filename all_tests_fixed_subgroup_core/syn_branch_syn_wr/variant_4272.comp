#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), (bool(bvec3(_GLF_DEAD(false), false, true))) || false)))), (bool(bvec3(_GLF_DEAD(false), false, true))) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), true, false)), (bool(bvec3(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), true, false))) || false)))))), (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (! (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (! (! (false))), true && (! (! (! (false))))))))), ! (! ((! (_GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (! (! (false))), true && (! (! (! (false))))))))))))), true, false)), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), bool(bvec2(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), true))), true, false))), ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), bool(bvec2(_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))), true))), true, false)))) || false) || false))))))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, ! (! (true))) && ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false, false, true)))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.9), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY(((injectionSwitch)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-4974.3777, clamp(_GLF_IDENTITY(-4974.3777, mix(float(-4974.3777), float(_GLF_FUZZED((-9539.2278 / -6.0))), bool(false))), _GLF_IDENTITY(-4974.3777, clamp(-4974.3777, -4974.3777, -4974.3777)), -4974.3777))), (((injectionSwitch)))[1]), vec2((((injectionSwitch)))[0], _GLF_FUZZED(4.0)), bvec2(true, false))))[0], _GLF_FUZZED(6787.8119)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false) || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ldexp(injectionSwitch, ivec2(-81894, -54279))) : injectionSwitch), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ldexp(injectionSwitch, ivec2(-81894, -54279))) : injectionSwitch)) - tan(vec2(0.0, 0.0)))).y), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), true)), false)))) || ((injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
      {
      }
     else
      {
       do
        {
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0)), sin(0.0))), (vec2(mat2(injectionSwitch, determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0)), sin(0.0)))) * vec2(1.0, 1.0))).y))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((1 | _GLF_IDENTITY(0, (0) / (1 | 1))), min((1 | 0), (1 | 0))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) >> 0), 4))), _GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), max(int(4), int(4)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((1 | 0), min((1 | 0), (1 | 0))), (_GLF_IDENTITY((1 | 0), min((1 | 0), (1 | 0)))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (! (false))), false)))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), (_GLF_IDENTITY(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), true)))) || false))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false), false)))), bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, true))))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, true && (true))) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bool(true && (true)))))) && true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, true && (true))) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bool(true && (true)))))) && true))), bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, true && (true))) || false)) && true, false || ((_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bool(true && (true)))))) && true))), true)))))) && (false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0)))], injectionSwitch[1]), vec2(vec2(vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0)))], injectionSwitch[1]))))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0)))], injectionSwitch[1])).y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], injectionSwitch[1])).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter ++))) | _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))))))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) / 1.0))))), true, false, true))) || false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) || false, true && (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) || false, ((_GLF_WRAPPED_IF_FALSE(false)) || false) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED((87.87 - -882.302))), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-5937.2040)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-5937.2040)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_injected_loop_counter != _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-5937.2040)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))) && true)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_DEAD(false), true, false, false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), 0 | (int(_GLF_IDENTITY(3, (3) >> _GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(80672) : _GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))))) != (_GLF_IDENTITY(0, 0 ^ (0)) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | (int(8))), int(int(int(8))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) + 0)), min(~ (_GLF_IDENTITY(1, (1) + 0)), ~ (_GLF_IDENTITY(1, (1) + 0))))) << 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), min((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0), (_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), max((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), (_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), max((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), (_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), max((_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)), (_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, (1) + 0))) << 0)))))))) : _GLF_FUZZED(22328))))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * _GLF_IDENTITY((_injected_loop_counter ++), ~ (_GLF_IDENTITY(~ ((_injected_loop_counter ++)), (~ ((_injected_loop_counter ++))) ^ 0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(pow(vec2(-53.40, -894.425), vec2(9.0, -67.61))))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) << 0u, ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) << 0u) - 0u), ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) << 0u) ^ 0u))) ^ 0u), _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))) + 1) % subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(0u + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u)) ^ 0u)), min(0u + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u)) ^ 0u)), 0u + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u)) ^ 0u))))))), clamp(uint(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), max(uvec2(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u), min(uvec2(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u), _GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7695.8975) : 0.0)), injectionSwitch.x)) | (1)), 0u), (uvec2(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u)) | (uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u)))))) - (uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))), 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))), _GLF_IDENTITY(max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u)), ~ (_GLF_IDENTITY(~ (max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u))), clamp(~ (max(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))), 0u), uvec2(subgroup_local_id + 1, 0u))), ~ (max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u))), ~ (max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u))))))))))) % subgroup_size), 1u), uvec2(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-24141) : 1))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size))))) % subgroup_size)), (true ? ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size))))) % subgroup_size)) : _GLF_FUZZED(subgroup_size))) | 0u), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) << (0u << _GLF_IDENTITY(uint(3u), uint(3u))))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY(1u, 0u | (1u))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY(1u, 0u | (1u))))))) / uvec2(1u, _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) << 0u))))), (_GLF_IDENTITY(uvec2(0u, 0u) | _GLF_IDENTITY((uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), ((uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) >> uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) | (uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(1u, 0u | (1u))))) / uvec2(1u, _GLF_IDENTITY(1u, ~ (~ (1u)))))) | uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u)))))))), (uint(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), max(uvec2(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u), min(uvec2(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u), _GLF_IDENTITY(uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7695.8975) : 0.0)), injectionSwitch.x)) | (1)), 0u), (uvec2(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u)) | (uvec2(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)), 0u)))))) - (uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))), 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))), _GLF_IDENTITY(max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u)), ~ (_GLF_IDENTITY(~ (max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u))), clamp(~ (max(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))), 0u), uvec2(subgroup_local_id + 1, 0u))), ~ (max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u))), ~ (max(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), 0u), uvec2(subgroup_local_id + 1, 0u))))))))))) % subgroup_size), 1u), uvec2(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-24141) : 1))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size))))) % subgroup_size)), (true ? ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size))))) % subgroup_size)) : _GLF_FUZZED(subgroup_size))) | 0u), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) << (0u << _GLF_IDENTITY(uint(3u), uint(3u))))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY(1u, 0u | (1u))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY(1u, 0u | (1u))))))) / uvec2(1u, _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) << 0u))))), (_GLF_IDENTITY(uvec2(0u, 0u) | _GLF_IDENTITY((uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), ((uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) >> uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) | (uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(1u, 0u | (1u))))) / uvec2(1u, _GLF_IDENTITY(1u, ~ (~ (1u)))))) | uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u))))))))) >> (69974u & 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, (1u) | 0u)), uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u))), _GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) | (uvec2(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << (0u & 94270u))), _GLF_IDENTITY(1u, _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(1u, uint(uvec3(_GLF_IDENTITY(1u, (1u) | 0u), 1u, 1u)))))))) / uvec2(1u, 1u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), (true ? uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u) : _GLF_FUZZED(uvec2(125289u, 120793u)))), max(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) | (1u)) : _GLF_FUZZED(subgroup_size))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))) : _GLF_FUZZED(workgroup_id))), (subgroup_local_id + 1) << (0u | 0u))) % subgroup_size), max(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))) : _GLF_FUZZED(workgroup_id))), (subgroup_local_id + 1) << (0u | 0u))) % subgroup_size), 0u | (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))) : _GLF_FUZZED(workgroup_id))), (subgroup_local_id + 1) << (0u | 0u))) % subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))))) : _GLF_FUZZED(workgroup_id))), (subgroup_local_id + 1) << (0u | 0u))) % subgroup_size))), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), uvec2(uvec2(uvec2(0u, 0u) | (uvec2((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), 1u))))), _GLF_IDENTITY((uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))), uvec2(0u, 0u) ^ ((uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))))) / _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))))) : _GLF_FUZZED((uvec2(_GLF_IDENTITY(169097u, uint(uint(169097u))), 16206u) << _GLF_IDENTITY(num_workgroup, (num_workgroup) * 1u)))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_id))), workgroup_base))) : uint(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u + (((subgroup_local_id + 1) % subgroup_size))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u + (1u))))), max(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, _GLF_IDENTITY(0u, 0u | (0u))))), 0u, 0u)), 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) | (uvec2(0u, 0u))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))))))))), max(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)), (124608u & 0u)), uvec3(0u, 0u, 0u) | (uvec3(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)), (124608u & 0u))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size), 1u), uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))), _GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(workgroup_size)))) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), clamp(uvec2((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), uvec2((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), uvec2((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u))), max(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(atomicMin(subgroup_size, 145810u)) : 1u))))), (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)) / uvec2(1u, 1u)), uvec2(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ ((subgroup_local_id + 1) % subgroup_size)))) + 0u)), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), uvec2(uvec2(uvec2(0u, 0u) | (uvec2(((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) | 0u), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) | 0u) : _GLF_FUZZED(num_workgroup))), (0u ^ 0u), (0u | 0u), 0u)), min(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) | 0u), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) | 0u) : _GLF_FUZZED(num_workgroup))), (0u ^ 0u), (0u | 0u), 0u)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) | 0u), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) | 0u) : _GLF_FUZZED(num_workgroup))), (0u ^ 0u), (0u | 0u), 0u))))))) + 1) % subgroup_size), 1u))))), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))) : _GLF_FUZZED((uvec2(169097u, 16206u) << num_workgroup))))))), (false ? _GLF_FUZZED(workgroup_base) : uint(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(true, (true) && true) ? 1u : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) << uvec2(0u, 0u)), 0u, 1u))), (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) | (uvec2(0u, 0u))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size), 1u), uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED(workgroup_id)))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(true, (true) && true) ? 1u : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) + 0)) ^ 0)) % subgroup_size), 1u)), uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) << uvec2(0u, 0u)), 0u, 1u))), (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) | _GLF_IDENTITY((uvec2(0u, 0u)), ~ (~ ((uvec2(0u, 0u)))))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u)))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))), max(~ (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))), ~ (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u)))))))) << uvec2(0u, 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), max(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)) / uvec2(1u, 1u)), uvec2(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)))), uvec2(uvec2(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))))), (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), min(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))))) / uvec2(1u, 1u))) : _GLF_FUZZED((uvec2(169097u, 16206u) << num_workgroup)))))), ~ (~ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)), (subgroup_size) / 1u)), uint(_GLF_IDENTITY(uvec4(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)), (subgroup_size) / 1u)), 0u, 1u, 1u), min(uvec4(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)), (subgroup_size) / 1u)), 0u, 1u, 1u), uvec4(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)), (subgroup_size) / 1u)), 0u, 1u, 1u))))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))))), ((subgroup_local_id + 1) % subgroup_size))), 1u))) / _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) << 0u)) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(0u, 0u) | (uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((subgroup_local_id + 1) % subgroup_size))), 1u))) / uvec2(1u, 1u))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) * uvec2(1u, 1u))) | (uvec2(0u, 0u))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (uvec2(_GLF_IDENTITY(0u, (0u) - 0u), 0u) | (uvec2(((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)) % subgroup_size), 1u))) / uvec2(1u, 1u))), ~ (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))), 1u)), (uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_local_id)))), 1u))) / uvec2(1u, 1u)))))))) << uvec2(0u, 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), max(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)) / uvec2(1u, 1u)), uvec2(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), 1u))), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), 1u), max(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)) / uvec2(1u, 1u)), uvec2(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 0u, 1u), (uvec3(subgroup_local_id, 0u, 1u)) | uvec3(0u, 0u, 0u)))) + 1) % subgroup_size), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)))), uvec2(0u, 0u) ^ (uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)))))), uvec2(uvec2(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))))), (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), min(uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), 1u)), uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))))) / uvec2(1u, 1u))) : _GLF_FUZZED((uvec2(169097u, 16206u) << num_workgroup)))))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), min(_GLF_FUZZED(workgroup_base), _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), 0u + (_GLF_FUZZED(workgroup_base))))) : uint(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size), 1u), uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id)))))), (_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), max(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u), uvec2(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id))))))) ^ uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)), (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) | (uvec2(0u, 0u))) | (uvec2(((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))) % subgroup_size), 1u))) / uvec2(1u, 1u)), (_GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), 1u)), (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(160815u, 174504u))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(160815u, 174504u))))), uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(160815u, 174504u)))))))))))))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))) / uvec2(1u, 1u))) - uvec2(0u, 0u))))))))))))), uint((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, (true ? _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size : _GLF_FUZZED(virtual_gid)))))))), (uint(_GLF_IDENTITY(uint((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / (1u & 1u)))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1))), _GLF_IDENTITY(min((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-91414) : _GLF_IDENTITY(1, (1) | (1))))))), subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 1u, 0u))))))), (min((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-91414) : _GLF_IDENTITY(1, (1) | (1))))))), subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 1u, 0u)))))))) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), _GLF_IDENTITY(((1)), (((1))) - 0) - 0))))), subgroup_local_id + 1, subgroup_local_id + 1))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), max(subgroup_local_id, subgroup_local_id)) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (0u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(workgroup_base))))) ^ (subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), (clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)) / 1u), min(_GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), (clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)) / 1u), _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), (clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)) / 1u))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))) | _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), 1)))))) | 0u)), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), 1)))))) | 0u))) ^ 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))), subgroup_local_id + 1))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1))))))))) % subgroup_size)), clamp(uint((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : (subgroup_local_id + 1), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : (subgroup_local_id + 1), 0u | (false ? _GLF_FUZZED(subgroup_id) : (subgroup_local_id + 1)))) | (false ? _GLF_FUZZED(subgroup_id) : (subgroup_local_id + 1))))) % subgroup_size)), uint(((subgroup_local_id + 1) % subgroup_size)), uint(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)) + _GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) / 1)) | ((1))))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) / 1)) | ((1))))), (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) / 1)) | ((1))))) : _GLF_FUZZED(min(subgroup_size, virtual_gid))))) | (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), max(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) << 0)))), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), min(_GLF_IDENTITY(1, ~ (~ (1))), 1)), ~ (~ (1))))) : _GLF_FUZZED(workgroup_id)))) % subgroup_size)))))) | (uint(_GLF_IDENTITY(uint(((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY(clamp(uint((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec4(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size, uint(uint((subgroup_local_id + 1) % subgroup_size))), 0u, 0u, 1u))))), _GLF_IDENTITY(uint(((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((uint(((subgroup_local_id + 1) % subgroup_size))), (true ? (uint(((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), workgroup_base))))) | (uint(((subgroup_local_id + 1) % subgroup_size)))), uint(((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), (clamp(uint((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size, uint(uint((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size, uint(uint((subgroup_local_id + 1) % subgroup_size)))) | 0u), 0u, 0u, 1u))))), _GLF_IDENTITY(uint(((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((uint(((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))) ? (uint((_GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))))) | (~ (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))))))) % subgroup_size))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), workgroup_base))))) | (uint(((subgroup_local_id + 1) % subgroup_size)))), uint(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)), 0u ^ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)))) + 1) % subgroup_size)))) + 0u))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), ~ (~ (_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) << 0)) | (clamp(4, 4, 4))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) + 0))), (int(ivec2(0, 1))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), true, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x) - determinant(mat3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0)))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), min(_GLF_IDENTITY((injectionSwitch.x) - determinant(mat3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), min(normalize(vec3(1.0, 1.0, 1.0)), normalize(vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), min((injectionSwitch.x) - determinant(mat3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (injectionSwitch.x) - determinant(mat3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(817.900) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0)))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (injectionSwitch.x) - determinant(mat3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, log(1.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0)))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(8), int(8))))), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), (_injected_loop_counter != (1 ^ 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(subgroup_local_id, 0u, 0u, 0u)), ~ (~ (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), min(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))))))) + _GLF_IDENTITY(1, (1) / 1) < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | 0u, ~ (_GLF_IDENTITY(~ ((subgroup_size) | 0u), (~ ((subgroup_size) | 0u)) << 0u)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-242.525))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, (1 & 1) | (1 & 1))) | _GLF_IDENTITY((1 & 1), clamp((1 & 1), _GLF_IDENTITY((1 & 1), max((1 & 1), (1 & 1))), (1 & 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - 0)))), 0 + ((0 >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x < injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))))))), _GLF_IDENTITY(true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x < injectionSwitch.y)))))))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x < injectionSwitch.y))))))))))) && true)), true && (true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))) + _GLF_IDENTITY(dot(vec4(0.0, 1.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 1.0, 1.0)))))))))))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(bool(bool(injectionSwitch.x < injectionSwitch.y))))), ! (! (bool(bool(injectionSwitch.x < injectionSwitch.y))))))))))) && true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-965.904)), float(0.0), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | _GLF_IDENTITY(0, _GLF_IDENTITY(0, ~ (~ (0))) ^ (_GLF_IDENTITY(0, (0) << (0 >> _GLF_IDENTITY(int(0), int(0))))))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 ^ (_GLF_IDENTITY((0 & -54342), clamp((0 & -54342), (0 & -54342), _GLF_IDENTITY((0 & -54342), _GLF_IDENTITY(((0 & -54342)) - (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec2(4, _GLF_IDENTITY(0, (0) | (0)))))), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, int(ivec2(4, 0))), _GLF_IDENTITY(4, ~ (~ (4))), 4))))), clamp(((0 & -54342)) - (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec2(4, 0)))), int(4))), ((0 & -54342)) - (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec2(4, 0)))), int(4))), ((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) ^ 0)))) & -54342)) - (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec2(4, 0)))), int(4)))))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (int(3))), (int(3)) << 0)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))))));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(read) : virtual_gid))))), (true ? _GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(read) : _GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))))))) : _GLF_FUZZED(subgroup_id)))], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), clamp(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)))), _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (true ? float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) : _GLF_FUZZED(8.1))), float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), true))))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), true))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], _GLF_FUZZED(374.381)), vec2(_GLF_FUZZED(-98.75), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), true))))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), true))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], _GLF_FUZZED(374.381)), vec2(_GLF_FUZZED(-98.75), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).x > injectionSwitch.y)))))))) && true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> 0)))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-9673.9961) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.6), _GLF_FUZZED(2860.1482)), bvec2(false, false))).y))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0))) >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0))) >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0))) >> _GLF_IDENTITY(int(1), int(1))) | (0 << _GLF_IDENTITY(int(6), int(6))))) + 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < (((1 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false))))))))))))))));
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) * 1u), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, (0.0) + 0.0)), transpose(transpose(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, (false ? _GLF_FUZZED(-2.1) : (injectionSwitch.x) / 1.0)))), bool(true))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, true))))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
}
