#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (bool(bvec3(false, true, false))))), bool(bvec2(false, true)))))
    return;
  }
 _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = subgroup_id, 1u * (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = subgroup_id));
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957)), ((true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))) + 0)), 1)), max(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1)), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1)), min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1)))))), max(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(-86957, (true ? -86957 : _GLF_FUZZED(64551)))), min(true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(-86957, (true ? -86957 : _GLF_FUZZED(64551)))), true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(-86957, (true ? -86957 : _GLF_FUZZED(64551)))))))), 1)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-86957))), 1))))))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        return;
       return;
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(-72692) : 1 << _GLF_IDENTITY(int(0), int(0))))) + 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(int(0), int(0)))))) ^ 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), false || (_injected_loop_counter > (0 | 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)))), ! (! (bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))) | 0) != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, 0 + (1)), (0 ^ 0)))), 1)) | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = ((93952 - (-52251 | _GLF_IDENTITY(42127, 1 * (42127)))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) * 1), 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(false)), false, true, false)), ! _GLF_IDENTITY((! (bool(bvec4(bool(_GLF_DEAD(false)), false, true, false)))), ((! (bool(bvec4(bool(_GLF_DEAD(false)), false, true, false))))) && true))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(_GLF_IDENTITY(7, (7) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) - 0), (~ (~ (int(7)))) | 0)), int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | 0) + (int(7))), (_GLF_IDENTITY(int(7), (0 | 0) + (int(7)))) | (_GLF_IDENTITY(int(7), (0 | 0) + (int(7))))) : _GLF_FUZZED(74704))))))), ~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(_GLF_IDENTITY(7, (7) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) - 0), (~ (~ (int(7)))) | 0)), int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | 0) + (int(7))), (_GLF_IDENTITY(int(7), (0 | 0) + (int(7)))) | (_GLF_IDENTITY(int(7), (0 | 0) + (int(7))))) : _GLF_FUZZED(74704)))))))), (_GLF_IDENTITY(~ (((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(_GLF_IDENTITY(7, (7) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) - 0), (~ (~ (int(7)))) | 0)), int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | 0) + (int(7))), (_GLF_IDENTITY(int(7), (0 | 0) + (int(7)))) | (_GLF_IDENTITY(int(7), (0 | 0) + (int(7))))) : _GLF_FUZZED(74704)))))))), (~ (((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(_GLF_IDENTITY(7, (7) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) - 0), (~ (~ (int(7)))) | 0)), int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | 0) + (int(7))), (_GLF_IDENTITY(int(7), (0 | 0) + (int(7)))) | (_GLF_IDENTITY(int(7), (0 | 0) + (int(7))))) : _GLF_FUZZED(74704))))))))) / 1)) | (~ (((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(_GLF_IDENTITY(7, (7) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) - 0), (~ (~ (int(7)))) | 0)), int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | 0) + (int(7))), (_GLF_IDENTITY(int(7), (0 | 0) + (int(7)))) | (_GLF_IDENTITY(int(7), (0 | 0) + (int(7))))) : _GLF_FUZZED(74704)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, 1, 0), (ivec4(int(7), 1, _GLF_IDENTITY(1, (1) | (1)), 0)) / ivec4(1, 1, 1, 1)))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))), 0), (ivec4(int(7), 1, 1, 0)) / _GLF_IDENTITY(ivec4(1, 1, 1, 1), (ivec4(1, 1, 1, 1)) << (ivec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ ivec4(1, 1, 1, 1)))))))) : _GLF_FUZZED(-78911)), ~ (_GLF_IDENTITY(~ ((true ? _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))), 0), (ivec4(int(7), 1, 1, 0)) / _GLF_IDENTITY(ivec4(1, 1, 1, 1), (ivec4(1, 1, 1, 1)) << (ivec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ ivec4(1, 1, 1, 1)))))))) : _GLF_FUZZED(-78911))), 0 ^ (~ ((true ? _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))), 0), (ivec4(int(7), 1, 1, 0)) / _GLF_IDENTITY(ivec4(1, 1, 1, 1), (ivec4(1, 1, 1, 1)) << (ivec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ ivec4(1, 1, 1, 1)))))))) : _GLF_FUZZED(-78911)))))))))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (~ (7)) / 1)))), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (~ (7)) / 1)))), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1))))))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (~ (7)) / 1)))), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1)))))))) * 1)) >> 0)), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-20966))) | _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1))))))))), max(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1))))))), ~ (~ (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1)))))))))))), ((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findLSB(workgroup_size)) : _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, 1, 0), (ivec4(int(7), 1, 1, 0)) / ivec4(1, 1, 1, 1))))))))))))) + 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (injectionSwitch.x)), injectionSwitch.x)) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5541.1120) : float(mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch.y)), (injectionSwitch.y) - 0.0)))))))
              break;
             return;
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(65.37) : injectionSwitch.x)))) > injectionSwitch.y), false, false)), (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false, _GLF_IDENTITY(false, false || (false)))), bool(bvec4(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), true, true, false)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true))))))))))))) || false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(316.041)), bool(false)))) + (injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), false || (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), false || (_GLF_IDENTITY(true, ! (! (true)))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), false || (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), false || (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), false || (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), false || (_GLF_IDENTITY(true, ! (! (true)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), true && (bool(_GLF_IDENTITY(true, (true) || false))))))))) && ((injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, min(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, max(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))));
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(subgroup_local_id) : GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y));
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size + ((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid) << 0u), (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid) << uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, min(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x))], _GLF_IDENTITY(uint(1), min(uint(1), uint(1))), _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0 & 44636), (_GLF_IDENTITY((0 & 44636), 1 * ((0 & 44636)))) | ((0 & 44636))), _GLF_IDENTITY((0 & int(true)), ((0 & int(true))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) | ((0 & 44636))), min(_GLF_IDENTITY(_GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))), min(_GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))), _GLF_IDENTITY(_GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))), (false ? _GLF_FUZZED(54902) : _GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))))))), _GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))))) | (4), clamp(_GLF_IDENTITY((0 & _GLF_IDENTITY(44636, (_GLF_IDENTITY(44636, min(_GLF_IDENTITY(44636, (44636) | (44636)), 44636))) | (_GLF_IDENTITY(44636, (44636) + 0)))), (0 & int(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))) | ((0 & 44636))) | (4), _GLF_IDENTITY(_GLF_IDENTITY((0 & 44636), (0 & _GLF_IDENTITY(int(true), (int(true)) * 1)) | ((0 & 44636))) | (4), _GLF_IDENTITY((_GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))) | (4)), (_GLF_IDENTITY((_GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))) | (4)), max((_GLF_IDENTITY(_GLF_IDENTITY((0 & 44636), ((0 & 44636)) + 0), (0 & int(true)) | ((0 & 44636))) | (4)), (_GLF_IDENTITY((0 & 44636), (0 & int(true)) | ((0 & 44636))) | (4))))) << 0) + 0), _GLF_IDENTITY(_GLF_IDENTITY((0 & 44636), ((0 & 44636)) | (_GLF_IDENTITY((0 & 44636), int(ivec4((0 & 44636), 0, 1, 0))))), (0 & int(true)) | ((0 & 44636))) | (4)))), 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))), false, true))))))
          {
           do
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), false, true))), true, false)), (bool(bvec3(_GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), false, true))), true, false))) || false)))))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))) || false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + _GLF_IDENTITY(1, ~ (~ (1))) < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, max(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, (false ? _GLF_FUZZED(156692u) : GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1)))) < subgroup_size, ! (! (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1 < subgroup_size)))) || false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     int i = 0;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.3), _GLF_FUZZED(-3.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(exp(-775.530)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
        continue;
       atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) - 0))), _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), max(_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (_GLF_IDENTITY(4, 1 * (4))) | (_GLF_IDENTITY(4, 1 * (4)))), _GLF_IDENTITY(4, 1 * (4)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(read, min(read, read)))), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4) * 1, (false ? _GLF_FUZZED(45722) : (4) * 1))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((0 & -54602), _GLF_IDENTITY(int(ivec2((0 & -54602), 1)), min(int(ivec2((0 & -54602), 1)), int(ivec2((0 & -54602), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))) && true)))))
          break;
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (true ? clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(10.02)))) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), true && (false || (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), true && (false || (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), true && (false || (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), true && (false || (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
}
