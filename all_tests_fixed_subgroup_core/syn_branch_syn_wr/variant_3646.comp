#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4 _f0;
 uint _f1;
 mat2x4 _f2;
 mat2 _f3;
 mat3 _f4;
 ivec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_9 {
 float _f0;
 ivec3 _f1;
 vec3 _f2;
 bvec2 _f3;
 uvec3 _f4;
 mat2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_6 {
 ivec3 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 mat4x3 _f1;
 uvec4 _f2;
 mat3x4 _f3;
 uvec3 _f4;
 uint workgroup_base;
 ivec4 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 bvec3 _f1;
 uint _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 vec4 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_12 {
 int _f0;
 vec3 _f1;
 ivec3 _f2;
 _GLF_struct_8 _f3;
 ivec3 _f4;
 mat3x4 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 uvec4 _f1;
 uvec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2 _f1;
 mat4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 ivec3 _f2;
 mat4x3 _f3;
 uint subgroup_id;
 mat4x3 _f4;
 bool _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_1(_GLF_struct_0(mat4(1.0), uvec4(1u), uvec4(1u), mat4x2(1.0)), mat2(1.0), mat4(1.0), bvec2(true)), _GLF_struct_2(mat3x4(1.0)), ivec3(1), mat4x3(1.0), gl_SubgroupID, mat4x3(1.0), true);
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(1, vec3(1.0), ivec3(1), _GLF_struct_8(_GLF_struct_4(bvec3(true), mat4x3(1.0), uvec4(1u), mat3x4(1.0), uvec3(1u), workgroup_size * workgroup_id, ivec4(1)), bvec3(true), 1u, _GLF_struct_5(mat4(1.0), ivec3(1)), _GLF_struct_6(ivec3(1), mat2x4(1.0), mat3x2(1.0)), vec4(1.0), _GLF_struct_7(ivec2(1), mat3(1.0))), ivec3(1), mat3x4(1.0), _GLF_struct_11(_GLF_struct_9(1.0, ivec3(1), vec3(1.0), bvec2(true), uvec3(1u), mat2(1.0), mat3x4(1.0)), _GLF_struct_10(mat4(1.0), 1u, mat2x4(1.0), mat2(1.0), mat3(1.0), ivec4(1), mat3x2(1.0)), ivec3(1)));
 uint virtual_gid = _GLF_struct_replacement_12._f3._f0.workgroup_base + _GLF_struct_replacement_3.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_12._f3._f0.workgroup_base + _GLF_struct_replacement_3.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   int i = 0;
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
}
