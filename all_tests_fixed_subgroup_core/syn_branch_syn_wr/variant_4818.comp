#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 ^ 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 << _GLF_IDENTITY(int(8), int(8))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(80422) : _injected_loop_counter --))) / 1))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uvec2 GLF_merged2_0_1_4_1_1_14readworkgroup_base;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(tan(0.0)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)))
    {
     barrier();
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY((_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-44175) : _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | 0))))), int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 1, (0 | 1), 0)), (int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 1, (0 | 1), 0))) << _GLF_IDENTITY(0, (0) >> 0))))))) && true, ((_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) << 0))), 1, (0 | 1), 0)), (int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) << 0))), 1, (0 | 1), 0))) | (0 >> _GLF_IDENTITY(int(1), int(1)))), (int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 1, (0 | 1), 0))) << 0)))))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y = subgroup_id;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) + 0.0)) * (injectionSwitch)).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, false)))) && _GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = subgroup_size;
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)))), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0))))) << 0), ~ (~ (int(4)))))))))) | (_GLF_IDENTITY(int(4), max(int(4), int(4)))), 0 ^ ((_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((~ (int(4))), 0 | (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (_GLF_IDENTITY(0, 0 | (0))) - 0), 0, (0 >> _GLF_IDENTITY(int(0), int(0))), 0))), 0))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, min(4, 4)))))), max(int(4), int(4))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-16622) : int(4))))), (false ? _GLF_FUZZED(-23940) : ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0)))), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) ^ 0))))) << 0), ~ (~ (int(4)))))))))) | (_GLF_IDENTITY(int(4), max(int(4), int(4)))), 0 ^ ((_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((~ (int(4))), 0 | (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (_GLF_IDENTITY(0, 0 | (0))) - 0), 0, (0 >> _GLF_IDENTITY(int(0), int(0))), 0))), 0))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, min(4, 4)))))), max(int(4), int(4))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-16622) : int(4)))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / 1.0) > injectionSwitch.y), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / 1.0) > injectionSwitch.y)), true && (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / 1.0) > injectionSwitch.y)), bool(bvec3(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / 1.0) > injectionSwitch.y)), true, true))))))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0))).y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), true && (! (_GLF_IDENTITY(true, true && (true))))))))))))))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec2(int(6), int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x))), (true ? _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x))) : _GLF_FUZZED(asin(fract(8.7)))))))), (_GLF_IDENTITY(int(ivec2(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(_GLF_IDENTITY(ivec2(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(ivec2(82184, -30356)) : ivec2(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) : _GLF_FUZZED(_injected_loop_counter)))) << 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(6, ~ (~ (6))))), max(_GLF_IDENTITY((int(_GLF_IDENTITY(6, ~ (~ (6))))), ((int(_GLF_IDENTITY(6, ~ (~ (6)))))) / 1), _GLF_IDENTITY((int(_GLF_IDENTITY(6, ~ (~ (6))))), (false ? _GLF_FUZZED(32655) : (int(_GLF_IDENTITY(6, ~ (~ (6))))))))) << 0), int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) / 1, ((int(6)) / 1) | ((int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, int(int(6))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1) ^ (_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(int(6), min(int(6), int(6)))), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), min(int(6), int(6)))), max(int(_GLF_IDENTITY(int(6), min(int(6), int(6)))), int(_GLF_IDENTITY(int(6), min(int(6), int(6)))))), 1, 1)))))), 6, _GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), min(6, 6)))))) / 1)))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z = subgroup_local_id;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u + (_GLF_IDENTITY(gl_WorkGroupID, (uvec3(0u, 0u, 0u) & uvec3(46528u, 124454u, 123439u)) ^ (gl_WorkGroupID)).x));
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)), ! (! (bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, false))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), (_GLF_IDENTITY((int(1)), ((int(1))) + 0)) + 0) - (0 ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) - 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(158.125)), bool(false))) > injectionSwitch.y))))
            {
             do
              {
               barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))));
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(false || (false), false || (false || (false)))))), false))))))
      {
      }
     else
      {
       do
        {
         GLF_merged2_0_1_4_1_1_14readworkgroup_base.y = workgroup_base;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), (_GLF_WRAPPED_LOOP(false)) || false)) && true), false, false))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-0.9) : 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)) - 0), (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))) | _GLF_IDENTITY(0, 0 | (0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & 58722) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         do
          {
           GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.w = GLF_merged2_0_1_4_1_1_14readworkgroup_base.y;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (true) && true))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (true) && true)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) - uvec4(0u, 0u, 0u, 0u)).y, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, max(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y)))) * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, uint(uint(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), ~ (_GLF_IDENTITY(~ (0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)), (false ? _GLF_FUZZED(num_workgroup) : ~ (0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))))))), (_GLF_IDENTITY(clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))), (clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base)).z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))))) / 1u))), min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, uint(uint(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), (_GLF_IDENTITY(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), clamp(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))) | (_GLF_IDENTITY(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), 1u * (0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))))), (false ? _GLF_FUZZED(num_workgroup) : ~ (0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))))))), (_GLF_IDENTITY(clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))), (clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))))) / 1u))), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, uint(uint(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z), ~ (_GLF_IDENTITY(~ (0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)), (false ? _GLF_FUZZED(num_workgroup) : ~ (0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))))))), (_GLF_IDENTITY(clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))), (clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z))))) / 1u))))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | uvec4(0u, 0u, 0u, 0u))) - uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).z), max(_GLF_IDENTITY(0u | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base)), (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base))) >> (uvec4(0u, 0u, 0u, 0u) & uvec4(83u, 138610u, 151517u, 100847u)))) | uvec4(0u, 0u, 0u, 0u))) - uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(cosh(-1693.0797)) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), max((_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | uvec4(0u, 0u, 0u, 0u))) - uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | uvec4(0u, 0u, 0u, 0u))) - uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u) + ((_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | uvec4(0u, 0u, 0u, 0u))) - uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(1.7, 1.7, -9.4, 418.390, 87.31, 931.462, 9563.3183, -280.121, -79.38, 776.241, 6757.7754, 36.66)) : mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0))))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * exp(0.0), float(vec4(_GLF_IDENTITY((injectionSwitch.x) * exp(0.0), clamp((injectionSwitch.x) * exp(0.0), (injectionSwitch.x) * exp(0.0), _GLF_IDENTITY((injectionSwitch.x) * exp(0.0), max((injectionSwitch.x) * exp(0.0), (injectionSwitch.x) * exp(0.0))))), 0.0, abs(0.0), sqrt(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_ZERO(0.0, injectionSwitch.x))))))).z), (0u | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | uvec4(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(0u, (0u) << 0u))), 0u, 0u))) - uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(cos(vec2(143.475, 3384.7999))) : vec2(1.0, 1.0)))).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((vec4(3779.2275, -0.2, 4232.8056, 7.8).x))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_ZERO(0.0, injectionSwitch.x))).z)) / 1u), 0u | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base) | uvec4(0u, 0u, 0u, 0u))) - uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).z))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)))))))))
                        barrier();
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
                        }
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5477.5890), _GLF_FUZZED(9.7)), bvec2(false, false))), injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), max(0 << _GLF_IDENTITY(int(5), int(5)), 0 << _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false))))));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4.9)), bool(false)))))));
    }
  }
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, 0u ^ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, uint(uint(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y))))) * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y) / _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), uint(_GLF_IDENTITY(uvec2(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(min(subgroup_local_id, workgroup_size)) : 0u))), (uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(min(subgroup_local_id, workgroup_size)) : 0u)))) + uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), ~ (_GLF_IDENTITY(~ (uvec2(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), max((_GLF_IDENTITY(0u, max(0u, 0u))), (_GLF_IDENTITY(0u, max(0u, 0u))))) | (0u)), 0u)), (_GLF_IDENTITY(~ (uvec2(0u, 0u)), ~ (_GLF_IDENTITY(~ (~ (uvec2(0u, 0u))), uvec2(0u, 0u) + (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((uvec2(0u, 0u)), ((uvec2(0u, 0u))) >> uvec2(0u, 0u)), clamp(~ _GLF_IDENTITY((uvec2(0u, 0u)), ((uvec2(0u, 0u))) >> uvec2(0u, 0u)), ~ _GLF_IDENTITY((uvec2(0u, 0u)), ((uvec2(0u, 0u))) >> uvec2(0u, 0u)), ~ _GLF_IDENTITY((uvec2(0u, 0u)), ((uvec2(0u, 0u))) >> uvec2(0u, 0u)))))))))) ^ (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u)))))) + (uvec2(_GLF_IDENTITY(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), (~ (uint(_GLF_ONE(1.0, injectionSwitch.y)))) * _GLF_IDENTITY((1u & 1u), 0u ^ ((1u & 1u)))), 1u)))))), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(~ (uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(mat4x3(mat2(0.0, 0.0, 0.0, 0.0))))) * mat2(1.0)) + (mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)))))), _GLF_IDENTITY(float(mat3x2(float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.9), _GLF_FUZZED(-666.015)), bvec2(false, false))).y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0)))))), 1.0, 0.0, 0.0, exp(0.0), 0.0)), mix(float(_GLF_FUZZED(-8.1)), float(float(mat3x2(float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), mat2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(66.68))), 0.0, 0.0, 0.0) + (mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0)))))), 1.0, 0.0, 0.0, exp(0.0), 0.0))), bool(true)))))))), uint(_GLF_IDENTITY(uvec2(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u), _GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (uvec2(0u, 0u)))) + (uvec2(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u))))))), (uint(~ (_GLF_IDENTITY(~ (uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(float(true))), bool(false)))), sqrt(1.0), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0)))))), _GLF_IDENTITY(float(mat3x2(float(_GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), _GLF_IDENTITY((false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0)))), mat2(1.0) * ((false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0)))))))), 1.0, 0.0, 0.0, exp(0.0), 0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-8.1), min(_GLF_IDENTITY(_GLF_FUZZED(-8.1), clamp(_GLF_FUZZED(-8.1), _GLF_FUZZED(-8.1), _GLF_IDENTITY(_GLF_FUZZED(-8.1), min(_GLF_FUZZED(-8.1), _GLF_FUZZED(-8.1))))), _GLF_IDENTITY(_GLF_FUZZED(-8.1), 1.0 * (_GLF_FUZZED(-8.1)))))), float(float(mat3x2(float(_GLF_IDENTITY(mat2(injectionSwitch.y, _GLF_IDENTITY(sin(_GLF_ZERO(0.0, injectionSwitch.x)), mix(float(sin(_GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_FUZZED(float(5616u))), bool(false))), sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2(3.4, 9.3, 826.762, -48.78)) : _GLF_IDENTITY(mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(injectionSwitch.y, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0)))))), 1.0, 0.0, 0.0, exp(0.0), 0.0))), bool(true)))))))), uint(_GLF_IDENTITY(uvec2(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u), _GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (uvec2(0u, 0u)))) + (uvec2(~ (uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u)))))))) * (1u & 1u)))))) * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, uvec2(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) >> uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicAdd(subgroup_size, subgroup_size)) : _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) + 0u), 0u))))))[0], GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid[1])).x))), clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, clamp(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, max(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, uvec2(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid[0], _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid[1], (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid[1]) * 1u))).x, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), (true ? GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x : _GLF_FUZZED(177913u))), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y) | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, clamp(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, 0u ^ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y)), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y, (false ? _GLF_FUZZED(146573u) : GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.y)))))) * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)) + ((GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1) % GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x);
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(0 ^ (64), min(0 ^ (64), 0 ^ (64)))), 4);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(_GLF_IDENTITY(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], clamp(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y])), 4, 64, 0);
 GLF_merged2_0_1_4_1_1_14readworkgroup_base.x = read;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch)).y)))) && true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (_GLF_IDENTITY(0, (0) + 0)) | 0))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x = GLF_merged2_0_1_4_1_1_14readworkgroup_base.x;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(ivec2(0, 0))) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, min(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (1) << 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, max(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base, GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base)).z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)))), (~ (uint(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))))) | (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))), uint(uvec2(uint(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, 1u * (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))), 0u))))) : _GLF_FUZZED(atomicAnd(subgroup_id, workgroup_base)))))))))))) | (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1), max(_GLF_IDENTITY(~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1), uint(uvec3(~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1), 1u, 0u))), ~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)))))))), _GLF_IDENTITY(~ (~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)), (0u | 0u) | (_GLF_IDENTITY(~ (~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)), (~ (~ (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1))) + 0u)))), GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.z + 1)))) < _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))))) << uvec2(0u, 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, _GLF_IDENTITY((GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), clamp((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (false ? _GLF_FUZZED(uaddCarry(uaddCarry(uvec2(112855u, 30617u), GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid), uvec2(134623u, 37352u), GLF_merged2_0_1_4_1_1_14readworkgroup_base)) : GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, uvec2(uvec3(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, 1u)))) ^ uvec2(0u, 0u))) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(1u, uint(uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(_GLF_IDENTITY((GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), clamp((GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)), (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid) - (uvec2(0u, 0u) ^ uvec2(0u, 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, uint(uvec4(3u, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) - uvec4(0u, 0u, 0u, 0u)))))))) << uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) << uvec2(0u, 0u)), 0u, 0u)), clamp(uvec2(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid)), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))))) + uvec2(0u, 0u)), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))))) << uvec2(0u, 0u)), 0u, 0u)), uvec2(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) << uvec2(0u, 0u)), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))), (true ? (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) << uvec2(0u, 0u))) - (uvec2(87026u, 117515u) & uvec2(0u, 0u))), 0u, 0u)), uvec2(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) << uvec2(0u, 0u)), 0u, 0u))))))).x)
                  {
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                   int i = 0;
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           do
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, ~ (~ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y)))], _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x, _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x), clamp((GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x), (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x), (GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x))) << 0u), 4, 64, 4);
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(204.669) : injectionSwitch.y))))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), 0, 1, (1 & 1)))) < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 & 1))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 & -50862), ((0 & -50862)) / 1)); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) + (0 >> _GLF_IDENTITY(int(0), int(0))))) << _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(0), int(0)), int(ivec3(_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(0), int(0)), 0, 0)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), int(0)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       do
                        {
                         for(int _injected_loop_counter = ((_GLF_IDENTITY(0 & 64661, (0 & 64661) - (-45797 & 0))) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(0 + (int(5)), 0 ^ (0 + (int(5))))), int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))), int(int(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5))))))) | 0)) | (_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5)))))), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) >> (86883 & 0))))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       for(int _injected_loop_counter = (0 & -54620); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           barrier();
                                          }
                                         else
                                          {
                                          }
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                      barrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (int(3))), clamp(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), (int(3)) >> 0), 0 | (_GLF_IDENTITY(int(3), (int(3)) >> 0))), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       atomicStore(checker[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], GLF_merged4_0_1_4_1_1_11_2_1_17_3_1_14readsubgroup_idsubgroup_local_idworkgroup_base.x, 4, 64, 4);
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))); _injected_loop_counter --)
                        {
                         do
                          {
                           do
                            {
                             for(int _injected_loop_counter = (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 24076)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 24076))))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     do
                                      {
                                       do
                                        {
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                    }
                                  }
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 0.0)))))))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))))
                                  barrier();
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                                  barrier();
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false)), (injectionSwitch.x > injectionSwitch.y))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || false))));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0), (_GLF_IDENTITY(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0), (false ? _GLF_FUZZED(ivec4(-84152, 55400, -14499, -48712)) : ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | (ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(1), int(1))) ^ (4)), 4)))), (_GLF_IDENTITY(4, 0 | (4))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(1, int(int(1))))))))), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))))), true))))) && true))));
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
