#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-29.22), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-8568.1854, -3.2)) : (injectionSwitch)))[0], _GLF_FUZZED(3631.1567)), bvec2(true, false))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), min((0 >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), ((0 >> _GLF_IDENTITY(int(2), int(2)))) + 0)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (false)))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (gl_WorkGroupSize[0]) << _GLF_IDENTITY(0u, (0u) / 1u)), _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u))))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), clamp(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) << 0u), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1]), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) * 1u) | _GLF_IDENTITY((gl_WorkGroupSize[1]), ((gl_WorkGroupSize[1])) >> 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(num_workgroup))) / 1u) : gl_WorkGroupSize[1]))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)))), ~ (~ (~ (num_workgroup)))))))) : gl_WorkGroupSize[1]), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), min(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), _GLF_IDENTITY(max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u)), (max(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]), min(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u))) | ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) << 0u)))), (false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u)))))) : gl_WorkGroupSize[1]))), _GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1]), ((false ? _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))) : gl_WorkGroupSize[1])) >> 0u))) * 1u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))) ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) | 0u)), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), ((false ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), min(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))) : gl_WorkGroupSize[1])) / _GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (false ? _GLF_FUZZED(150671u) : _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1]), _GLF_IDENTITY(((false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), min(bitfieldReverse(num_workgroup), _GLF_IDENTITY(bitfieldReverse(num_workgroup), (_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) >> 0u)) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))) : gl_WorkGroupSize[1])), ~ (~ (((_GLF_IDENTITY(false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1], ~ (~ (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])))))))) / 1u), 1u * (_GLF_IDENTITY((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupSize[1], 0u + (gl_WorkGroupSize[1]))), ((false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : gl_WorkGroupSize[1])) / 1u)))))))) + 0u)), gl_WorkGroupSize[2])).x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))), false, true)))) && true))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(908.045)), vec2(_GLF_FUZZED(-3.4), (mat2(1.0) * (injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), true && ((injectionSwitch.x > injectionSwitch.y))), true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true), true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true), true)))), false, false, false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, exp(0.0), 1.0, tan(0.0), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(931.502) : 1.0))))) > injectionSwitch.y, true, true, true)))))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sinh(injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0)))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-17.17) : injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)) && true), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true), (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)) && true), false, false, false))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((vec3(9.0, 942.369, -639.861) * mat2x3(0.5, _GLF_IDENTITY(-5727.5197, float(_GLF_IDENTITY(vec4(-5727.5197, 1.0, 0.0, 0.0), (vec4(-5727.5197, 1.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), -58.32, -676.023, -66.25, 97.20))))).y, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((vec3(9.0, 942.369, -639.861) * mat2x3(0.5, -5727.5197, -58.32, -676.023, -66.25, 97.20))))).y, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((vec3(9.0, 942.369, -639.861) * mat2x3(_GLF_IDENTITY(0.5, (0.5) + 0.0), -5727.5197, -58.32, -676.023, -66.25, 97.20))))).y, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((vec3(-387.387, -959.881, -1.7) , -5.8)) : injectionSwitch.y)))) ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(vec3(9.0, 942.369, -639.861) * mat2x3(0.5, -5727.5197, -58.32, -676.023, -66.25, 97.20), sqrt(vec2(0.0, 0.0)) + (vec3(9.0, 942.369, -639.861) * mat2x3(0.5, -5727.5197, -58.32, -676.023, -66.25, 97.20))))), mat2(1.0) * (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((vec3(-387.387, -959.881, -1.7) , -5.8)) : injectionSwitch.y)))) ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(vec3(9.0, 942.369, -639.861) * mat2x3(0.5, -5727.5197, -58.32, -676.023, -66.25, 97.20), sqrt(vec2(0.0, 0.0)) + (vec3(9.0, 942.369, -639.861) * mat2x3(0.5, -5727.5197, -58.32, -676.023, -66.25, 97.20))))))))).y))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7121.6814)), bool(false)))))));
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))))))), ((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false)))))))))) && true)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))))))), ((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false)))))))))) && true)) || false)), bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))))))), ((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false)))))))))) && true)) || false)))))) || false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) || false))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0)), float(_GLF_IDENTITY(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0)), abs(0.0)), vec2(mat4(vec2(float(vec2(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0)), abs(0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))))) + 0.0))).y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(170152u)), _GLF_FUZZED(1.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))) * vec2(1.0, 1.0), vec2(mat4x3((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x3(_GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat4(vec2(1.0, 1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), mix(vec2((vec2(mat4(vec2(1.0, 1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))[0], (vec2(mat4(vec2(1.0, 1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))[1]), vec2(_GLF_FUZZED(8618.2435), _GLF_FUZZED(-785.461)), bvec2(false, false)))), sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 1.0))), abs(0.0), 1.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (mat2x3(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), mix(float(_GLF_IDENTITY(float(1.0), max(float(1.0), float(1.0)))), float(_GLF_FUZZED(67.86)), bool(false))), float(_GLF_FUZZED(-12.17)), bool(false))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), min(float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), min(float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))), 1.0, 1.0, 0.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-667.951) : injectionSwitch.y))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false, false, _GLF_IDENTITY(true, true && (true))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(float(mat4x2(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)), float(mat2x4(float(mat4x2(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(float(mat4x2(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0)))))), 0.0, 0.0)), float(mat2x4(float(mat4x2(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), workgroup_id, workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(false ? _GLF_FUZZED(37116) : int(7), (false ? _GLF_FUZZED(37116) : int(7)) | (false ? _GLF_FUZZED(37116) : int(7)))))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(int(1)))), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1))), 1, 0, 1))), _GLF_IDENTITY(int(1), int(1))))) * 1)) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0)) ^ 0))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_base, workgroup_base), min(min(workgroup_base, workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) + 0u), uint(uvec4(min(workgroup_base, workgroup_base), (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (7u))), uint(7u))), 1u, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), uint(8u))), max((0u >> _GLF_IDENTITY(uint(8u), uint(8u))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) ^ 0u)))))), 0u ^ (min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))), workgroup_base)))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base))), ~ (~ ((workgroup_base))))) >> 0u)))), min(min(workgroup_base, workgroup_base), _GLF_IDENTITY(min(workgroup_base, workgroup_base), uint(uvec4(min(workgroup_base, workgroup_base), (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), ~ (~ (uint(7u)))))), 1u, ((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, ~ (~ (8u)))), _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(uvec3(uint(8u), 0u, 0u), min(uvec3(uint(8u), 0u, 0u), _GLF_IDENTITY(uvec3(uint(8u), 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(uint(8u), 0u, 0u))))))))) ^ 0u)))))), 0u ^ (min(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), workgroup_base)))) + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && true, ! (! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(log(vec2(1.0, 1.0)))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)))) && true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-375.630), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4248.6451)), bvec2(true, false))).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, max(8, 8))), 0 ^ (_GLF_IDENTITY(int(8), ~ (~ (int(8)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(8) : _GLF_FUZZED(69140))), (int(8)) ^ 0))) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))));
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec3(false, false, false)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false)), true), bvec2(bvec3(bvec2(bool(bvec3(false, false, false)), true), true))), false))), bvec2(bvec4(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true)))))), false, false)), true), true, true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-83410 & 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false, false)))))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 4, _GLF_IDENTITY(64, (64) - 0), 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(degrees(2597.2725)))) < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true, ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(degrees(2597.2725)))) < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true, ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))), false, true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) * 1)), clamp((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) * 1)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))))) | (int(3)))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) * 1)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3)))), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) * 1))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, true && (subgroup_local_id + 1 < subgroup_size)))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       int i = 0;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) || false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != _GLF_IDENTITY(1, (1) + (0 ^ 0))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y))))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), false, true, true)))))))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, int(ivec2(0, 0))) : _GLF_FUZZED(i)))], (injectionSwitch)[1]), vec2(_GLF_FUZZED(7.9), _GLF_FUZZED(-892.821)), bvec2(false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true))))))).x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + log(vec2(1.0, 1.0))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + log(vec2(1.0, 1.0))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + _GLF_IDENTITY(log(vec2(1.0, 1.0)), max(log(vec2(1.0, 1.0)), log(vec2(1.0, 1.0))))).y)))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + log(vec2(1.0, 1.0))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + log(vec2(1.0, 1.0))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + _GLF_IDENTITY(log(vec2(1.0, 1.0)), max(log(vec2(1.0, 1.0)), log(vec2(1.0, 1.0))))).y)))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + log(vec2(1.0, 1.0))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + log(vec2(1.0, 1.0))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(2134.9199, 139.568)))))) + _GLF_IDENTITY(log(vec2(1.0, 1.0)), max(log(vec2(1.0, 1.0)), log(vec2(1.0, 1.0))))).y)))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))))), false, false, true))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false))) || false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, false)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false))) || false)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, sqrt(1.0)))), 1.0, 0.0))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (! ((_GLF_IDENTITY(false, (false) || false)) || false)))) || false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), uint(uint((virtual_gid)))), (false ? _GLF_FUZZED(virtual_gid) : (virtual_gid))) + _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * (1u | 1u), ~ (_GLF_IDENTITY(~ ((0u) * (1u | 1u)), max(~ (_GLF_IDENTITY(_GLF_IDENTITY((0u) * (1u | 1u), (true ? (_GLF_IDENTITY(0u, (0u) >> ((105398u * 139780u) & 0u))) * (1u | 1u) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u))) * (1u | 1u), ~ (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u))) * (1u | 1u)), (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u))) * (1u | 1u)), (~ (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u))) * (1u | 1u))) | 0u)) - 0u)))))), ~ ((0u) * (1u | 1u))))))))))) + 0u)], read, 4, 64, 4);
      }
     else
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & ivec3(33783, -29037, -7598).z); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((1 & 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (1 & 1))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != _GLF_IDENTITY((1 & 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (1 & 1)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-41010) : int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         for(int _injected_loop_counter = ((0 & 12270) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) >> 0)) << 0))), clamp(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) >> 0)) << 0))), clamp(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), (false ? _GLF_FUZZED(20098) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) >> 0)) << 0))), clamp(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(14588)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), ~ (~ (int(1))))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(1), (int(1)) + 0))), (~ (~ (_GLF_IDENTITY(int(1), (int(1)) + 0)))) | 0)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) + 0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) + 0))))))), ~ (~ (~ (_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) + 0)))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(991.568, clamp(991.568, 991.568, 991.568))))) : _GLF_IDENTITY(_GLF_FUZZED(-94.18), 0.0 + (_GLF_FUZZED(-94.18))))), injectionSwitch.x)) + 0.0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && _GLF_IDENTITY(true, (true) || false)))) && true), false), true, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), true, true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && _GLF_IDENTITY(true, (true) || false)))) && true), false), true, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), true, true)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && _GLF_IDENTITY(true, (true) || false)))) && true), false), true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), true, true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), false), true, true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), true, true))), true, true)))))))))))))) || false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, int(int(2))))) | (int(2)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), true)))));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, 1)), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(64, _GLF_IDENTITY((64), (_GLF_IDENTITY((64), (_GLF_IDENTITY((64), ((64)) | ((64)))) | ((64)))) | ((64))) * 1), 1)), max(_GLF_IDENTITY(int(ivec2(64, 1)), (int(ivec2(64, 1))) + 0), int(ivec2(64, 1))))) | (0 << _GLF_IDENTITY(int(2), int(2))))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1))))))) | (_GLF_IDENTITY(1, 0 | (1)))) * (_GLF_IDENTITY(64, int(ivec2(64, 1))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), int(ivec2(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1)))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(64, int(ivec2(64, 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(17085) : 64, (false ? _GLF_FUZZED(17085) : 64) | 0))))), int(ivec2(64, 1))), _GLF_IDENTITY(1 * (_GLF_IDENTITY(64, int(ivec2(64, 1)))), (1 * (_GLF_IDENTITY(64, int(ivec2(64, 1))))) ^ 0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) >> 0))), int(ivec2(64, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(64, int(ivec2(64, (0 ^ 1)))), 1, 0, 1), max(ivec4(_GLF_IDENTITY(64, int(ivec2(64, (0 ^ 1)))), 1, 0, 1), ivec4(_GLF_IDENTITY(64, int(ivec2(64, (0 ^ 1)))), 1, 0, 1)))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(64, int(ivec2(64, (0 ^ 1)))), 1, 0, 1), max(ivec4(_GLF_IDENTITY(64, int(ivec2(64, (0 ^ 1)))), 1, 0, 1), ivec4(_GLF_IDENTITY(64, int(ivec2(64, (0 ^ 1)))), 1, 0, 1))))) | 0)), int(ivec2(64, 1))))))), 4);
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, true))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, true))))))) && true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, true))))), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, true))))))) && true)))) && true), true, true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((735.246 * 642.902))), vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), bvec2(false, true))).y))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
}
