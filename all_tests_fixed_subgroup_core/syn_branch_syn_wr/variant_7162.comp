#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_4_1_1_14readworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.8), _GLF_FUZZED(vec3(5.5, 76.04, -8413.4092).r)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)))))));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0)), ! _GLF_IDENTITY((! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! ((! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), false || ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 ^ (0)) ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.3)), bool(false))))) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (((((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - 0)) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) - 0)) >> 0)) << 0)) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 ^ (3)), (_GLF_IDENTITY(3, (3) - (0 << _GLF_IDENTITY(int(1), int(1))))) | (3)), _GLF_IDENTITY(3, ~ (~ _GLF_IDENTITY((3), ((3)) | ((3))))), 3))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(int(int(_GLF_IDENTITY(3, (3) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), clamp((3), _GLF_IDENTITY((3), ((3)) | 0), (3))) - (0 << _GLF_IDENTITY(int(1), int(1))))) | (3)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3) - (0 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((_GLF_IDENTITY((3) - (0 << _GLF_IDENTITY(int(1), int(1))), 1 * ((3) - (0 << _GLF_IDENTITY(int(1), int(1)))))) | ((3) - (0 << _GLF_IDENTITY(int(1), int(1)))), int(ivec2((_GLF_IDENTITY((3) - (0 << _GLF_IDENTITY(int(1), int(1))), 1 * ((3) - (0 << _GLF_IDENTITY(int(1), int(1)))))) | ((3) - (0 << _GLF_IDENTITY(int(1), int(1)))), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) | (3)), (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(int(1)))))))) | (3))) + 0) : _GLF_FUZZED(ivec4(29178, 54502, 43093, -81684).s))), _GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, (3) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(_injected_loop_counter)))))), 3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(int(3), 0, (1 ^ 1)))), int(int(int(3)))))) << _GLF_IDENTITY(0, (0) ^ 0), ((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3)) : _GLF_FUZZED((_injected_loop_counter % -23321)))), clamp(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(1, min(1, 1))), 0), ivec2(ivec2(ivec2(int(1), 0)))))))))) | (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(((_injected_loop_counter & _injected_loop_counter) * (-- _injected_loop_counter))) : _GLF_IDENTITY(3, _GLF_IDENTITY((_GLF_IDENTITY(3, clamp(3, 3, 3))) | 0, int(ivec3((_GLF_IDENTITY(3, clamp(3, 3, 3))) | 0, 1, 1)))))))), _GLF_IDENTITY(3, ~ (~ (3))), 3))), _GLF_IDENTITY(int(3), int(int(int(3)))))) << 0) << 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        barrier();
      }
     else
      {
      }
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true)))))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), true && ((_GLF_IDENTITY(true, true && (true)))))))))))))))))
    {
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), 0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), int(0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)))) * (injectionSwitch)).x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)))) * (injectionSwitch)).x > injectionSwitch.y)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.3), _GLF_FUZZED(-249.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))).y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.3), _GLF_FUZZED(-249.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))).y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.3), _GLF_FUZZED(-249.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))).y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.3), _GLF_FUZZED(-249.588)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))).y)), true)))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(vec3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0))), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(78.50), (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(3727.2418)), bvec2(true, false))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)), true))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3015.9445)), float(injectionSwitch.y), bool(true)))) * 1.0))), _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, true, true)))))) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-8425.2733, 576.500)))).x > injectionSwitch.y) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) < injectionSwitch.y))))), true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)) ^ (((1 ^ 0) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), (true ? mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2x3(3.7, 3.4, 3029.0310, 3.4, 1.8, -101.601)))))))), clamp(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), (true ? mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2x3(3.7, 3.4, 3029.0310, 3.4, 1.8, -101.601)))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), (true ? mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2x3(3.7, 3.4, 3029.0310, 3.4, 1.8, -101.601)))))))), (true ? vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), (true ? mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2x3(3.7, 3.4, 3029.0310, 3.4, 1.8, -101.601)))))))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0), (true ? mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2x3(3.7, 3.4, 3029.0310, 3.4, 1.8, -101.601))))))))))).x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false))))))))))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_1_4_1_1_14readworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_4_1_1_14readworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, _GLF_IDENTITY(min(_GLF_IDENTITY(3u, max(3u, 3u)), _GLF_IDENTITY(3u, (3u) / 1u)), (_GLF_IDENTITY(min(_GLF_IDENTITY(3u, max(3u, 3u)), _GLF_IDENTITY(3u, (3u) / 1u)), (min(_GLF_IDENTITY(3u, max(3u, 3u)), _GLF_IDENTITY(3u, (3u) / 1u))) >> 0u)) | (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u))), (uint(2u)) >> 0u)))))) / (1u & (1u & 1u))))), _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)), 0u, 0u))) >> (93462u & 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), min(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u)))) >> 0u)) - 0u)))), ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)), 0u, 0u))) >> (93462u & 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), min(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u))), (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) >> 0u)))) >> 0u)) - 0u))))) + (0u ^ 0u)) << 0u)) ^ (subgroup_id)) * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, uint(uvec4(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0u), max(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, uint(uvec4(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0u), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, uint(uvec4(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0u))), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, uint(uvec4(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0u)) + 0u)) ^ (subgroup_id)) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(0u, (0u) | 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(3u), uint(3u)), 0u, 1u, 1u), (uvec4(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) / 1u))), 0u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) << _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))))))) ^ (subgroup_id)) * subgroup_size, _GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), min(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY((uint(3u)) ^ 0u, ~ (~ ((uint(3u)) ^ 0u)))))), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) << 0u)) ^ _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_id)), 0u ^ (_GLF_IDENTITY(((subgroup_id)), max(((subgroup_id)), ((subgroup_id))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_id)), 0u ^ (_GLF_IDENTITY(((subgroup_id)), max(((subgroup_id)), ((subgroup_id))))))), (~ (_GLF_IDENTITY(((subgroup_id)), 0u ^ (_GLF_IDENTITY(((subgroup_id)), max(((subgroup_id)), ((subgroup_id)))))))) ^ 0u)) | (~ (_GLF_IDENTITY(((subgroup_id)), 0u ^ (_GLF_IDENTITY(((subgroup_id)), max(((subgroup_id)), ((subgroup_id))))))))))) - 0u)) * subgroup_size : _GLF_FUZZED(workgroup_id)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u ^ (3u))), (uint(3u)) - 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))) ^ 0u), (uint(3u)) - 0u)), max((_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))) ^ 0u), (uint(3u)) - 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))) ^ 0u), (uint(3u)) - 0u)), 0u + ((_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))) ^ 0u), (uint(3u)) - 0u)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0u)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) << 0u)) ^ (subgroup_id)) * subgroup_size : _GLF_FUZZED(workgroup_id))) | 0u)))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))))))))), true, false, false)), true, false, true)), (bool(bvec4(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)), true, false, true))) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))))))))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4079.9844)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) : _GLF_FUZZED(-5058.9231))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))) > injectionSwitch.y))))))))), bool(bvec2(! (_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))), false, false))))))))))), false)))) && true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y))) && true)))))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(! (_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), true && (! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))))))))), false)))) && true))))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), bool(bvec3(_GLF_IDENTITY(! ((false) && true), ! (! (! ((false) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true && (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), bool(bvec3(_GLF_IDENTITY(! ((false) && true), ! (! (! ((false) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), bool(bvec4(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true, false, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))), (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), injectionSwitch[1])).y)))))))))), ! (! (! ((_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), bool(bvec2(! (_GLF_IDENTITY(! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)))))), true && (! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))))))))), _GLF_IDENTITY(false, (false) && true))))) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bool(_GLF_IDENTITY(bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), (bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && true)))))))), bool(bvec4(! (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3((! (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3((! (injectionSwitch.x > injectionSwitch.y)), false, true), true))))))) && true)), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bool(_GLF_IDENTITY(bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), _GLF_IDENTITY((bool(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false)))) && true, (_GLF_IDENTITY((bool(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false)))) && true, false || ((bool(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false)))) && true))) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), true && ((_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7160.0876)), float(injectionSwitch.y), bool(true)))))))), ! (! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bool(_GLF_IDENTITY(bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), (bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))))), bool(bvec4(! (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bool(_GLF_IDENTITY(bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), (bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && true)))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), false, true))))))))))), _GLF_IDENTITY(true, false || (true)), false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 1.0, sin(0.0), 1.0, 0.0)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, 0.0, log(1.0)))).y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2644.6174)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) && true), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-25394) : int(3)))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_1_4_1_1_14readworkgroup_size.x = read;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, (true) || false) && (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), (~ (_GLF_IDENTITY(int(0), int(0)))) | 0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), int(0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), int(0))) + 0))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))), false || (bool(bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))))))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (-89570 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) / 1)), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(ivec4(int(5), 1, 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -95921)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (76830 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1)) + 0))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), max(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(0 | (int(5)), (_GLF_IDENTITY(0 | (int(5)), 0 + (0 | (int(5))))) | (0 | (int(5))))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, min(0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y)), false, false, false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(subgroup_local_id + 1 < subgroup_size)
        {
         int i = 0;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ (~ (virtual_gid)), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (virtual_gid)))))], GLF_merged2_0_1_4_1_1_14readworkgroup_size.x, 4, 64, 4);
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && true)))) && true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), 0 | (int(7)))) | (int(7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), (true ? (int(7)) : _GLF_FUZZED((+ _injected_loop_counter)))) + 0), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), (true ? (int(7)) : _GLF_FUZZED((+ _injected_loop_counter)))) + 0)) << 0)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true)), false || (bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           atomicStore(checker[virtual_gid], GLF_merged2_0_1_4_1_1_14readworkgroup_size.x, 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.6)), vec2(_GLF_FUZZED(2606.6000), (injectionSwitch)[1]), bvec2(false, true))), 0.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0), vec2(0.0, 1.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), min(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0))))), 0.0, 0.0, 0.0, 1.0, log(1.0), 0.0))).y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))));
  }
 else
  {
  }
}
