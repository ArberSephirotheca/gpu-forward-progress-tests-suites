#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 vec2 _f0;
 mat3x4 _f1;
 float _f2;
 bool _f3;
 mat4x3 _f4;
 mat2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uvec3 _f1;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((-76400) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           barrier();
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), int(3))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ~ (~ ((1 << _GLF_IDENTITY(int(3), int(3)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, false), true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec3(bvec2(false, false), true))), true), bvec3(bvec4(bvec3(bvec2(bvec2(bvec3(bvec2(false, false), true))), true), true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))))), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))), false || (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))), ! (! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))), ! (! (! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(true, false, false))), false))))))))), false, true, false))))))))))))))))), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), true && (! (true)))))))), false)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, true, false)))), true && (! (! (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), bool(_GLF_IDENTITY(bvec3(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, false), bvec3(bvec3(bvec3(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, false))))))))), false, true, false))))))))), true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false))))))), true)), true))))))))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, false), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, false), true)))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec3(bvec2(false, false), true))), true), bvec3(bvec4(bvec3(bvec2(bvec2(bvec3(bvec2(false, false), true))), true), true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), _GLF_IDENTITY(false, ! (! (false))), true, false))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))))), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))), false || (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false)))))), false, true, false)))), ! (! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)))), ! (! (! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(true, false, false))), false))))))))), false, true, false))))))))))))))))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(false, false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), true && (! (true)))))))), false)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, true, false)))), true && (! (! (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))), false))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, false, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false)))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(true, false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))), bool(_GLF_IDENTITY(bvec3(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, ! (! (false))), false))))))))), false, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, ! (! (false))), false))))))))), false, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, ! (! (false))), false))))))))), false, false))))))))))))))), false, true, false))))))))), true)), _GLF_IDENTITY(true, (true) && true))), bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(false, false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false, true))) || false)), false))))))), bvec3(bvec3(bvec3(bvec2(false, false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false))))))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false, true))) || false)), false)))))))))), true)), true)))))))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   else
    {
    }
   return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size) >> 0u), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size) >> 0u)) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY(uint(3u), uint(3u)))))) / 1u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -44252)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))) || false), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, _GLF_IDENTITY(0.0, min(0.0, 0.0))))).y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x), (~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x)) | (~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))).y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (true))))))
      barrier();
    }
   GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.x = _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))) || false))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false))))))));
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(682.418, 3281.5429)))).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
              {
               for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0)), (vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0))) / vec2(1.0, 1.0))).y))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), false), bvec2(bvec4(bvec2(bool(bvec2(false, false)), false), true, true)))), false || (bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), false), bvec2(bvec4(bvec2(bool(bvec2(false, false)), false), true, true)))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(48185) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           barrier();
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(int(0)))); _injected_loop_counter --)
      {
       GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = workgroup_size;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, 0))), _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(359.287)), float(injectionSwitch.y), bool(true)))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, clamp(7, 7, _GLF_IDENTITY(7, (7) | (7)))), 7, 7)))))) | (int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 break;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.7) : injectionSwitch.x)) > injectionSwitch.y)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, uint(_GLF_IDENTITY(uvec3(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, 1u, 0u), ~ (~ (uvec3(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y, 1u, 0u))))))) | (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y)) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.z = virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(31214)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-29.17) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((93831 % 1000) & 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.2))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), _GLF_IDENTITY(0 | (int(3)), int(int(_GLF_IDENTITY(0 | (int(3)), clamp(0 | (int(3)), _GLF_IDENTITY(0 | (int(3)), ~ (~ (_GLF_IDENTITY(0 | (int(3)), clamp(0 | (int(3)), 0 | (int(3)), 0 | (int(3))))))), 0 | (int(3)))))))))) >> _GLF_IDENTITY(int(3), int(3))), int(ivec4(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), _GLF_IDENTITY(0 | (int(3)), int(int(0 | (int(3)))))))) >> _GLF_IDENTITY(int(3), int(3))), 1, 0, (((1 ^ 0) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), _GLF_IDENTITY(int(7), min(int(7), int(7))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(vec4(-3049.3662, -54.35, -5.2, 96.49)[1]) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(274.793)), float(injectionSwitch.y), bool(true)))))))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.7), (vec4(injectionSwitch, 1.0, 0.0))[1], _GLF_FUZZED(-456.960), (vec4(injectionSwitch, 1.0, 0.0))[3]), vec4((vec4(injectionSwitch, 1.0, 0.0))[0], _GLF_FUZZED(592.545), (vec4(injectionSwitch, 1.0, 0.0))[2], _GLF_FUZZED(1.9)), bvec4(true, false, true, false))))))).y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.7), (vec4(injectionSwitch, 1.0, 0.0))[1], _GLF_FUZZED(-456.960), (vec4(injectionSwitch, 1.0, 0.0))[3]), vec4((vec4(injectionSwitch, 1.0, 0.0))[0], _GLF_FUZZED(592.545), (vec4(injectionSwitch, 1.0, 0.0))[2], _GLF_FUZZED(1.9)), bvec4(true, false, true, false))))))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.7), (vec4(injectionSwitch, 1.0, 0.0))[1], _GLF_FUZZED(-456.960), (vec4(injectionSwitch, 1.0, 0.0))[3]), vec4((vec4(injectionSwitch, 1.0, 0.0))[0], _GLF_FUZZED(592.545), (vec4(injectionSwitch, 1.0, 0.0))[2], _GLF_FUZZED(1.9)), bvec4(true, false, true, false))))))).y))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
          barrier();
         return;
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))));
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(vec2(1.0), mat3x4(1.0), 1.0, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true)))))))))))), mat4x3(1.0), mat2(1.0), mat2x4(1.0)), bvec2(true)), uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid), clamp(uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid), uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid), uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid))), (false ? _GLF_FUZZED(uvec3(192727u, 177247u, 13317u)) : uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid)))), (true ? uvec3(_GLF_IDENTITY(uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid), (false ? _GLF_FUZZED(uvec3(192727u, 177247u, 13317u)) : uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid)))) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(136160u, 76630u, 94358u), (uvec3(136160u, 76630u, 94358u)) >> uvec3(0u, 0u, 0u))))))[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u | (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)) + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), ((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u | (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)) + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y))) >> 0u), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y) + 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, min(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)))))) + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2], (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2]) | (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])))).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), (true ? (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)) + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1), ~ (~ ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1)))) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)) : _GLF_FUZZED((workgroup_id << subgroup_id))))) | 0u), (~ (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(uaddCarry(workgroup_id, num_workgroup, workgroup_id)) : _GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u))) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid) >> (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))), uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + _GLF_IDENTITY(1, (1) >> (1 ^ 1))) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), (((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid)))[2])).x + _GLF_IDENTITY(1, (1) >> (1 ^ 1))) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), ~ (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], min(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0]) | 0u))), GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2], (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2], _GLF_IDENTITY((GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2]) - 0u, (_GLF_IDENTITY((GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2]) - 0u, ((GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2]) - 0u) / 1u)) | (_GLF_IDENTITY((GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2]) - 0u, ~ (~ ((GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2]) - 0u)))))))))).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), (~ (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y) / 1u))) + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), (_GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), (_GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (true ? GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid)))) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u))[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), 0u | (((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid) << uvec3(0u, 0u, 0u)).y)))) ^ 0u)) - 0u))) / 1u)))), 0u ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, max(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y))) >> 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], min(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0])), GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1), ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], min(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0])), GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1)) / 1u) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y), ~ (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, subgroup_id), (false ? _GLF_FUZZED((workgroup_base)) : max(subgroup_id, subgroup_id)))) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x) >> 0u) + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y))) / 1u)))), 1u * (uint(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[_GLF_IDENTITY(0, (0) / 1)], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(1u, 1u, 1u) * (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid)).y), ~ (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[2])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)), (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 ^ (1)), 1))], GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid[_GLF_IDENTITY(2, ~ (~ (2)))])).x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y))) / 1u)))))))))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 ^ 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
      barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) || false)) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(82694)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     atomicStore(buf[_GLF_struct_replacement_2.next_virtual_gid], _GLF_IDENTITY(uint(1), 0u ^ (uint(1))), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, int(ivec4(4, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0, 0))), 4)), 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), max((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-84558) : 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))))))
          break;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
        {
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.z], _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-71353))), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid) | uvec3(0u, 0u, 0u)).x + 1 < GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.y)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false)))))))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), clamp(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), mix(vec2(_GLF_FUZZED(-4.1), _GLF_FUZZED(620.114)), vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))[1]), bvec2(true, true))), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), min(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))))))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), clamp(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), mix(vec2(_GLF_FUZZED(-4.1), _GLF_FUZZED(620.114)), vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))[1]), bvec2(true, true))), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), min(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))))))).x), float(_GLF_FUZZED(-60.62)), bool(false))) > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), float(_GLF_FUZZED(500.128)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-0.7)), float((injectionSwitch)[0]), bool(true))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.1), _GLF_FUZZED(vec4(2.2, -3.0, -9.8, 856.137).g)), bvec2(false, false))).y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               return;
               if(_GLF_DEAD(false))
                break;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(roundEven(-57.17)) : injectionSwitch.x)) < injectionSwitch.y))), true))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false)), true), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true), true, false))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || _GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true), true, false))))), true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         int i = 0;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              continue;
             barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(1, 0 + (1)) * (int(3)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         atomicStore(checker[GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid.z], read, 4, 64, 4);
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0)))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) << 0)) | 0)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid) | uvec3(0u, _GLF_IDENTITY(0u, 1u * (0u)), 0u)).z], read, 4, _GLF_IDENTITY(64, (64) | (64)), 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))) && true))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6.9)), bool(false))) : _GLF_FUZZED(75.75)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
}
