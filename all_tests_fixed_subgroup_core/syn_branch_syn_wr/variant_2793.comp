#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z = subgroup_id;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
    {
     GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.x = next_virtual_gid;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 0);
 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y = read;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(int(int(5))))) / 1)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 51079)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(subgroup_local_id + 1 < subgroup_size)
          {
           int i = 0;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             atomicStore(checker[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y, 4, 64, 4);
            }
          }
         else
          {
           atomicStore(checker[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y, 4, 64, 4);
          }
        }
       else
        {
        }
      }
    }
  }
}
