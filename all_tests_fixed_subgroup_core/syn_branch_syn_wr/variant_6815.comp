#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))), (true) || false))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))), (true) || false)))) || false)), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 1.0))), injectionSwitch.y)) : _GLF_FUZZED(9.5)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && (! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(true && (! (injectionSwitch.x > injectionSwitch.y)), ! (! (true && (! (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), 0 | (1)), 1, 1)))))]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))).x)) > injectionSwitch.y))))) || false)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(log(vec2(-3542.5938, -7.3))) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y), true && _GLF_IDENTITY((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))), ! (! (! ((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))))).x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y)))).y)))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && (! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), bool(_GLF_IDENTITY(bvec2(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))), true, true)))))), ! (! (true && (! (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(318.677), _GLF_FUZZED(-9.9)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), float(_GLF_FUZZED(1.8)), bool(false)))), bvec2(true, true))).x)) < injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), clamp(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ((1) >> 0) + 0)), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec3(0, 1, 0))) | (1)), 1)))))]), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]))), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) | (_GLF_IDENTITY(clamp(0, 0, 0), min(clamp(0, 0, 0), clamp(0, 0, 0))))))) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))))]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(-17998) : _GLF_IDENTITY(1, (1) >> 0))), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-8.9, _GLF_IDENTITY(max(-8.9, -8.9), float(vec3(max(-8.9, -8.9), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))), _GLF_FUZZED(2.7)), bvec2(_GLF_IDENTITY(false, true && (false)), false))).x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.8)), bool(false)))))))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && (! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), bool(_GLF_IDENTITY(bvec2(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))), true, true)))))), ! (! (true && (! (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(318.677), _GLF_FUZZED(-9.9)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), float(_GLF_FUZZED(1.8)), bool(false)))), bvec2(true, true))).x)) < injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), clamp(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ((1) >> 0) + 0)), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec3(0, 1, 0))) | (1)), 1)))))]), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]))), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(false, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, 0)) | (_GLF_IDENTITY(clamp(0, 0, 0), min(clamp(0, 0, 0), clamp(0, 0, 0))))))) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))], (injectionSwitch)[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))))]), vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(2.7)), bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(-17998) : _GLF_IDENTITY(1, (1) >> 0))), _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-8.9, _GLF_IDENTITY(max(-8.9, -8.9), float(vec3(max(-8.9, -8.9), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))), _GLF_FUZZED(2.7)), bvec2(_GLF_IDENTITY(false, true && (false)), false))).x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.8)), bool(false)))))))))) || false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true))))) && _GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((75023 & 0) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))))) != 0), true, false)))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))))) != 0), true, false))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, false))) && true))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-60357 & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (false) || false), false, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(_GLF_IDENTITY((-7.8 / -5645.6705), (true ? (-7.8 / -5645.6705) : _GLF_FUZZED(step(534.754, reflect(5387.2537, 7.2))))))), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(_GLF_IDENTITY((-7.8 / -5645.6705), (true ? (-7.8 / -5645.6705) : _GLF_FUZZED(step(534.754, reflect(5387.2537, 7.2))))))), bool(false)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bvec3(bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false, true)))), false))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-706.035, -527.066).gg) : injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)))) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)))) && true)))))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))))))))))), ((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true), bvec3(bvec3(bvec3((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), false, false, true))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) && true), false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << (0 & -47853))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false))))), (true && (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec4((! (_GLF_DEAD(false))), true, true, false)))))) && true)), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true) && (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))))), false || ((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true && (! (_GLF_DEAD(false))), bool(bvec3(_GLF_IDENTITY(true && (! (_GLF_DEAD(false))), (true && (! (_GLF_DEAD(false)))) && true), true, false)))))))))) && true))) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), true, true, false)), bool(bvec3(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false)))) || false, true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false)))) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false)))) || false))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false)))) || false, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false)))) || false, false, false), false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), mix(vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], max((vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], (vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0])), _GLF_FUZZED(-7.4)), vec2(_GLF_FUZZED(-2527.5645), (vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1]), bvec2(false, true)))))[1])))).x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec3(~ (_injected_loop_counter), 0, 0))))) != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), 1, 0), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) * ivec4(1, 1, 1, 1)) + (ivec4(0, 0, 1, 0))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0))))) | (0)), int(_GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))) | 0)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))) | 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))) | 0))) << 0))))), 1, 0), ivec4(0, 0, 0, 0) + (ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) >> (-42809 & 0))) + 0), 0, 1, 0))))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), 1, 0), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(0, 0, 1, 0), ivec4(1, 1, 1, 1) * (ivec4(0, 0, 1, 0)))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter))), (0) << 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), mat4(1.0) * (mat4(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.9)), float(1.0), bool(true))), 1.0, 0.0)))), 1.0 * (float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), mat4(1.0) * (_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))) / vec3(1.0, 1.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3414.6049) : 0.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))) / vec3(1.0, 1.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3414.6049) : 0.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(injectionSwitch.y, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))) / vec3(1.0, 1.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3414.6049) : 0.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 0.0))))))))))))))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) - (0 >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> (0 ^ 0))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u), 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), _GLF_IDENTITY(clamp(uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))))), max(_GLF_IDENTITY(clamp(uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))))), uint(uvec2(_GLF_IDENTITY(clamp(uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))))), min(clamp(uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))))), clamp(uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))))))), 1u))), clamp(uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))))))))), _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) | (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)))))), (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), max(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), _GLF_IDENTITY(workgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u), 1u, 1u)))), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), (((_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))) | (_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))) : _GLF_FUZZED(workgroup_size)))))))))), workgroup_id)), ~ (~ (workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, _GLF_IDENTITY(1u, 0u | (1u)), 1u))), _GLF_IDENTITY((true ? _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 0u), uvec2(uvec3(uvec2(1u, 0u), 1u))))))), 1u))) : _GLF_FUZZED(num_workgroup)), (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u)))) | 0u))) ^ (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(false, false || (false)), false, false)), (bool(bvec4(true, _GLF_IDENTITY(false, false || (false)), false, false))) || false)) ? _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))) : _GLF_FUZZED(num_workgroup))) << 0u)))))), workgroup_id)))))) | (workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), workgroup_id))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), false || (! (_GLF_IDENTITY((false), ! (! ((false))))))), true))) || false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, sqrt(0.0)))).y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + subgroup_local_id, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) + subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(int(int(5)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(int(int(5))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(int(int(5)))))))), ((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(int(int(5)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(int(int(5))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(int(int(5))))))))) << 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false)))) ? _GLF_FUZZED(8474.6674) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(0.0), clamp(_GLF_FUZZED(0.0), _GLF_FUZZED(0.0), _GLF_FUZZED(0.0))), _GLF_FUZZED(-97.31)), bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false)))) ? _GLF_FUZZED(8474.6674) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(0.0), clamp(_GLF_FUZZED(0.0), _GLF_FUZZED(0.0), _GLF_FUZZED(0.0))), _GLF_FUZZED(-97.31)), bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false)))) ? _GLF_FUZZED(8474.6674) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(0.0), clamp(_GLF_FUZZED(0.0), _GLF_FUZZED(0.0), _GLF_FUZZED(0.0))), _GLF_FUZZED(-97.31)), bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false)))) ? _GLF_FUZZED(8474.6674) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(0.0), clamp(_GLF_FUZZED(0.0), _GLF_FUZZED(0.0), _GLF_FUZZED(0.0))), _GLF_FUZZED(-97.31)), bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false)))) ? _GLF_FUZZED(8474.6674) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.0), _GLF_IDENTITY(_GLF_FUZZED(-97.31), (_GLF_FUZZED(-97.31)) / 1.0)), bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) && true, false || (((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.1, -5.0)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false)))) ? _GLF_FUZZED(8474.6674) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], mix(float(((injectionSwitch))[0]), float(_GLF_FUZZED(5.5)), bool(false))), ((injectionSwitch))[1]), vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(-62.49)), bvec2(false, false)))[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(6309.4972))))), max(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch))), 1.0, length(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), (injectionSwitch)))[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-97.31)), bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) && true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.4) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(44.30) : injectionSwitch.y))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))), false, true, true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (~ (subgroup_id)))), ~ (~ (~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (_GLF_IDENTITY(~ (subgroup_id), (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) << 0u)) * 1u)))))))))), clamp((_GLF_IDENTITY(~ (subgroup_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (~ (subgroup_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), 0u ^ (~ (subgroup_id)))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), 0u ^ (~ (subgroup_id))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), 0u ^ (~ (subgroup_id))))))))), 0u + ((_GLF_IDENTITY(~ (subgroup_id), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), 0u ^ (~ (subgroup_id)))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), 0u ^ (~ (subgroup_id))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))), 0u ^ (~ (subgroup_id))))))))))), (_GLF_IDENTITY(~ (subgroup_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (~ (subgroup_id))))))))), uint(_GLF_IDENTITY(uvec4(~ (~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) ^ 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) ^ 0u))) | (0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) ^ 0u))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))))) ^ 0u)), (1u & 1u), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(false, bool(bvec2(false, false))) ? _GLF_FUZZED(uvec4(188770u, 189707u, 45326u, 67789u)) : uvec4(~ (~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) ^ 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) ^ 0u))) | (0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) ^ 0u))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))))) ^ 0u)), (1u & 1u), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(51315)))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), 0 | (max(1, 1)))), 1, 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (true), true && (! (true)))), true)), ! (! (bool(bvec2(! (! (true)), true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) - 0)) >> 0), 64)), 4);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, sqrt(0.0), tan(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, log(1.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, log(1.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))).y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), clamp(_GLF_IDENTITY(4, _GLF_IDENTITY((4) | 0, min((4) | 0, (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, (4) / 1)))) | 0))), _GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, (4) | 0)) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (0 + (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), ~ (~ (_GLF_IDENTITY(64, (64) | (64)))))) - 0))))))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1), (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1)) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0) + _GLF_IDENTITY((_GLF_IDENTITY(64, (64) | (64))), min((_GLF_IDENTITY(64, (64) | (64))), (_GLF_IDENTITY(64, (64) | (64))))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1))), (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(_GLF_IDENTITY(64, int(int(64))), _GLF_IDENTITY((64), ~ (~ ((64)))) | (64))), ~ (~ (0 + (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) | (64))) ^ 0)) | (64)))))))) / 1), (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(89430)))))) + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1)) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, min(0, 0))), (~ (_GLF_IDENTITY(0, min(0, 0)))) >> 0))) + (_GLF_IDENTITY(64, (64) | (64))))), ((~ (0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) * 1)))))) - (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))) / 1)))) - (0 >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (_GLF_IDENTITY(0 + (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), (0 ^ 0) + ((64) | (64))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(66586) : 0 + (_GLF_IDENTITY(64, (64) | (64))), min(false ? _GLF_FUZZED(66586) : 0 + (_GLF_IDENTITY(64, (64) | (64))), false ? _GLF_FUZZED(66586) : 0 + (_GLF_IDENTITY(64, (64) | (64)))))))))), ~ (_GLF_IDENTITY(~ (0 + (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), ((64) | (64)) | ((64) | (64)))))), clamp(~ (0 + (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((64), ~ (~ (_GLF_IDENTITY((64), (false ? _GLF_FUZZED(18619) : _GLF_IDENTITY((64), 0 ^ ((64)))))))) | (64), ((64) | (64)) | ((64) | (64)))))), ~ (0 + _GLF_IDENTITY((_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), ((64) | (64)) | ((64) | (64))))), (false ? _GLF_FUZZED(61642) : _GLF_IDENTITY((_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), ((64) | (64)) | ((64) | (64))))), (false ? _GLF_FUZZED((62496 * 47455)) : (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), ((64) | (64)) | ((64) | (64)))))))))), _GLF_IDENTITY(~ (0 + (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), ((64) | (64)) | ((64) | (64)))))), (~ (0 + (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), ((64) | (64)) | ((64) | (64))))))) + 0))))))) / 1), min(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64))))))), max(_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64))))))), _GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))))))) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1)), _GLF_IDENTITY(int(ivec2(~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 ^ (64))) | _GLF_IDENTITY((64), _GLF_IDENTITY(((64)), min(((64)), _GLF_IDENTITY(((64)), int(ivec4(((64)), 0, 0, 0))))) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), max(int(ivec2(~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), (int(0)) >> 0))), int(0))))), int(ivec2(~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) ^ 0))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1)), ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), int(0)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), int(_GLF_IDENTITY(ivec3(0 + (_GLF_IDENTITY(64, (64) | (64))), (0 ^ 0), 1), (ivec3(0 + (_GLF_IDENTITY(64, (64) | (64))), (0 ^ 0), 1)) - ivec3(0, 0, 0)))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1), 1 * (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(0 + (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), (64) | (_GLF_IDENTITY(64, ~ (~ (64)))))), ~ (~ (0 + (_GLF_IDENTITY(64, (64) | (64)))))))) / 1))), _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) + (_GLF_IDENTITY(64, (64) | (64))), ~ (~ (0 + (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-12020) : 64))) | (64)))))))) / 1)))))) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 + (_GLF_IDENTITY(64, (64) | (64))), (0 + (_GLF_IDENTITY(64, (64) | (64)))) / (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))), min(0 + (_GLF_IDENTITY(64, (64) | (64))), 0 + (_GLF_IDENTITY(64, (64) | (64))))), ~ (~ (0 + (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), _GLF_IDENTITY((_GLF_IDENTITY(64, (64) | (64))), (_GLF_IDENTITY((_GLF_IDENTITY(64, (64) | (64))), max((_GLF_IDENTITY(64, (64) | (64))), (_GLF_IDENTITY(64, (64) | (64)))))) >> (0 ^ (0 >> _GLF_IDENTITY(int(0), int(0))))) - 0)) >> (0 & 36588)))))))) / _GLF_IDENTITY(1, 0 | (1)))))) / 1), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))), (false ? _GLF_FUZZED(38707) : (1))))) / 1), 1), ~ (~ (min(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))), (false ? _GLF_FUZZED(38707) : (1))))) / 1), 1))))) < subgroup_size, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) || false))))
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       atomicStore(checker[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED((-- workgroup_base))))], read, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) << 0)) - 0))), _GLF_IDENTITY(64, (64) | (64)), 4);
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true))));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}
