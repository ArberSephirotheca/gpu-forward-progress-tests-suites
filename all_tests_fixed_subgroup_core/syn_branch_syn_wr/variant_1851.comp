#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 uvec3 _f0;
 uvec2 _f1;
 ivec4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_6 {
 bool _f0;
 _GLF_struct_5 _f1;
 uint workgroup_base;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 mat4x2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_0 {
 float _f0;
 mat3 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 vec2 _f3;
 mat3 _f4;
 vec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 uint read;
 bvec2 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(true, _GLF_struct_5(_GLF_struct_4(uvec3(1u), uvec2(1u), ivec4(1), bvec3(true)), mat4x2(1.0)), workgroup_size * workgroup_id);
 uint virtual_gid = _GLF_struct_replacement_6.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_6.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(bvec4(true), atomicLoad(buf[virtual_gid], 4, 64, 0), bvec2(true), _GLF_struct_2(mat4(1.0), _GLF_struct_0(1.0, mat3(1.0), uvec2(1u)), _GLF_struct_1(mat2(1.0), mat4x2(1.0), mat3x4(1.0), ivec2(1), mat4x2(1.0), uvec4(1u)), vec2(1.0), mat3(1.0), vec2(1.0), bvec2(true)));
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_3.read, 4, 64, 4);
  }
 else
  {
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_3.read, 4, 64, 4);
  }
}
