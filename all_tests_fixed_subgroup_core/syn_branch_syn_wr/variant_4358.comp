#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && (_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true, true))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6084.8089)), float(injectionSwitch.y), bool(true)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && _GLF_IDENTITY(true, false || (true)))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)), true, false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-154.267)), vec2(_GLF_FUZZED((8.0 + -1.0)), (injectionSwitch)[1]), bvec2(false, true))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-154.267)), vec2(_GLF_FUZZED((8.0 + -1.0)), (injectionSwitch)[1]), bvec2(false, true)), (false ? _GLF_FUZZED((mat3x2(3.7, -68.72, 7.0, 51.61, -733.817, 3.1) * vec3(-128.945, -2.4, -38.64))) : mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, max(0, 0))))], _GLF_FUZZED(-154.267)), _GLF_IDENTITY(vec2(_GLF_FUZZED((8.0 + -1.0)), (injectionSwitch)[1]), (vec2(_GLF_FUZZED((8.0 + -1.0)), (injectionSwitch)[1])) * vec2(1.0, 1.0)), bvec2(false, true))))).y))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ((! (false))) || false))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -28716)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0)), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0))) + vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0))))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true && (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))), true, true, true))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), (bool(bvec4(_GLF_DEAD(false), true, false, true))) && true)))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, false, true)), (bool(bvec4(_GLF_DEAD(false), true, false, true))) && true))))) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) && true)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 | 1), (_injected_loop_counter != (0 | 1)) && true)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid) * uvec3(1u, 1u, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid)) + (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) ^ uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) - (0u | (0u ^ 0u))) / 1u) | 0u)) - 0u), 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), clamp((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[_GLF_IDENTITY(0, 0 | (0))], (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[0]) - 0u), GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[2])), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid) + uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid)) + (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) ^ uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) - (0u | (0u ^ 0u))) / 1u) | 0u)) - 0u), 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), clamp((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[_GLF_IDENTITY(0, 0 | (0))], (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[0]) - 0u), GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[2])), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid) + uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid)))), uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid)) + (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))) ^ uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)), (((0u))) - (0u | (0u ^ 0u))) / 1u) | 0u)) - 0u), 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), clamp((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[_GLF_IDENTITY(0, 0 | (0))], (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[0]) - 0u), GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[2])), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid) + uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))) | (GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid))))))))))).y + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.z = virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), ((1u ^ 1u) | 0u) | (_GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) << 0u)))), clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, (_GLF_IDENTITY((workgroup_base) * 1u, clamp((workgroup_base) * 1u, _GLF_IDENTITY((workgroup_base) * 1u, (false ? _GLF_FUZZED(num_workgroup) : (workgroup_base) * 1u)), (workgroup_base) * 1u))) << 0u)))), 0u)))) << 0u) + _GLF_IDENTITY(subgroup_id, (subgroup_id) * (1u | 0u)) * GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(0u, 0u) ^ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)).x, 0u | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid, uvec3(GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[0], GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[1], GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid[2])).y, 0u | _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y), (_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y), ((GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y)) | ((GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y)))) >> (137240u & 0u))));
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u)) | 0u)], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((0 & int(true)), max((0 & int(true)), (0 & int(true)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))), false))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint read = atomicLoad(buf[GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.z], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(75333)), _GLF_IDENTITY((true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), _GLF_IDENTITY(~ (~ (true ? 0 : _GLF_FUZZED(75333))), max(_GLF_IDENTITY(~ (~ (true ? 0 : _GLF_FUZZED(75333))), _GLF_IDENTITY((~ (~ (true ? 0 : _GLF_FUZZED(75333)))) | 0, ((~ (~ (true ? 0 : _GLF_FUZZED(75333)))) | 0) >> 0)), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(-17059), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))))))), clamp(_GLF_IDENTITY((true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) << _GLF_IDENTITY(0, int(int(0)))) : _GLF_FUZZED(75333)))))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(75333, max(_GLF_IDENTITY(75333, (75333) >> 0), _GLF_IDENTITY(75333, 1 * (75333))))), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(75333)), max((true ? 0 : _GLF_FUZZED(75333)), _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(75333)), min((true ? 0 : _GLF_FUZZED(75333)), (true ? 0 : _GLF_FUZZED(75333))))))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_IDENTITY(0, ~ (~ (0))) : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(75333), (true ? _GLF_FUZZED(75333) : _GLF_FUZZED(96637))))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))))))) : _GLF_IDENTITY(_GLF_FUZZED(-17059), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))), (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059)))) | (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))), 0, 1, 1))) << 0)))))))), ((true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (_GLF_IDENTITY(~ (true ? 0 : _GLF_FUZZED(75333)), clamp(~ (true ? 0 : _GLF_FUZZED(75333)), ~ (true ? 0 : _GLF_FUZZED(75333)), ~ (true ? 0 : _GLF_FUZZED(75333))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), (true ? 0 : _GLF_FUZZED(75333)) - 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), (true ? 0 : _GLF_FUZZED(75333)) << (0 >> _GLF_IDENTITY(int(2), int(2)))), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(-17059), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059)))))))) - 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? _GLF_IDENTITY(0, (0) >> (0 << _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(-17059), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))))), 0 | (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ _GLF_IDENTITY((_GLF_FUZZED(-17059)), int(ivec2((_GLF_FUZZED(-17059)), 1)))))), ((~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059)))))) - 0))))), _GLF_IDENTITY((true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333)))))))))) : _GLF_IDENTITY(_GLF_FUZZED(-17059), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))))))), int(ivec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(75333), (false ? _GLF_FUZZED(13634) : _GLF_FUZZED(75333))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(true, (true) || false) ? 0 : _GLF_FUZZED(75333))), (~ (~ (true ? 0 : _GLF_FUZZED(75333)))) >> 0))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (~ (true ? 0 : _GLF_FUZZED(75333))))), min((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), _GLF_IDENTITY(~ (~ (true ? 0 : _GLF_FUZZED(75333))), (~ (~ (_GLF_IDENTITY(true, bool(bool(true))) ? 0 : _GLF_FUZZED(75333)))) - 0))), (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(75333), ~ (_GLF_IDENTITY(~ (true ? 0 : _GLF_FUZZED(75333)), (~ (true ? 0 : _GLF_FUZZED(75333))) | (~ (true ? 0 : _GLF_FUZZED(75333)))))))))))) : _GLF_IDENTITY(_GLF_FUZZED(-17059), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-17059), 0 ^ (_GLF_FUZZED(-17059))))))), 1))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y)
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), ! (! (false || (! (false)))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(int(int(ivec2(int(1), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)))) || false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(44303))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))), (_GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true)))))) || false)), (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = (0 ^ (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) + 0))
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > 0, true, true, false)), false || (bool(bvec4(_injected_loop_counter > 0, true, true, false))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > 0, true, true, false)), false || (bool(bvec4(_injected_loop_counter > 0, true, true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, 0 + (0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((-25748 & (19837 & 0)), ((-25748 & (19837 & 0))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0))))) / 1.0), injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, length(vec2(0.0, 0.0))), (mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-158.286)), bool(false)))), 0.0, length(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)))) * _GLF_IDENTITY(mat4(1.0), mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(9.2))), injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(82.71), _GLF_FUZZED(8.7)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(1.0)))))))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / cos(0.0))))), (mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, length(vec2(0.0, 0.0)))) * mat4(1.0)))), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, exp(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0)), (_GLF_IDENTITY(float(mat3x4(injectionSwitch.x, exp(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0)), float(vec4(float(mat3x4(injectionSwitch.x, exp(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_IDENTITY((vec2(1.0, 1.0))[0], max((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[0])), (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED((-8.2 - 6.6)), _GLF_FUZZED(-6.1)), bvec2(false, false)))))), 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0)))) * 1.0))), _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, length(vec2(0.0, 0.0))), (mat4x2(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) * 1.0), injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, length(vec2(0.0, 0.0)))) * mat4(1.0)))), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, length(vec2(0.0, 0.0))), (mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, length(vec2(0.0, 0.0)))) * mat4(1.0)))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(checker[GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.z], read, 4, _GLF_IDENTITY(64, (64) >> 0), _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | 0)), ((4)) >> 0))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY((4), ((4)) ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 0 ^ (4))), clamp(~ (_GLF_IDENTITY(4, 0 ^ (4))), ~ (_GLF_IDENTITY(4, 0 ^ (4))), ~ (_GLF_IDENTITY(4, 0 ^ (4))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), (0 ^ (4)) | (0 ^ (4))))), clamp(~ (_GLF_IDENTITY(4, 0 ^ (4))), ~ (_GLF_IDENTITY(4, 0 ^ (4))), ~ (_GLF_IDENTITY(4, 0 ^ (4))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, 0 ^ (4))), clamp(~ (_GLF_IDENTITY(4, 0 ^ (4))), ~ (_GLF_IDENTITY(4, 0 ^ (4))), ~ _GLF_IDENTITY((_GLF_IDENTITY(4, 0 ^ (4))), clamp((_GLF_IDENTITY(4, 0 ^ (4))), (_GLF_IDENTITY(4, 0 ^ (4))), (_GLF_IDENTITY(4, 0 ^ (4)))))))))))) + 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true))), bool(bool(! (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6415.1979)), bool(false)), mix(float(_GLF_FUZZED(-0.1)), float(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6415.1979)), bool(false))), bool(true)))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6415.1979)), bool(false))), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6415.1979)), bool(false))), false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6415.1979)), bool(false))), false), false))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))), true && (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED((6.7 + -162.991))), clamp(float(_GLF_FUZZED((6.7 + -162.991))), float(_GLF_FUZZED((6.7 + -162.991))), float(_GLF_FUZZED((6.7 + -162.991))))), bool(false))) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.6)), bool(false))), 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))) && true)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 ^ 0), 0 + (_GLF_IDENTITY((0 ^ 0), (true ? (0 ^ 0) : _GLF_FUZZED(-13495)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false))), (false) || false)), false)))), true && _GLF_IDENTITY((false), true && ((false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec2((_GLF_IDENTITY(false, (false) || false)), false)))), true && (false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(false, true))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(false, true))), false), true))))))))));
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), int(int(~ (int(1))))))))), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), (int(1)) | (int(1))), _GLF_IDENTITY(int(1), min(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) ^ 0))), _GLF_IDENTITY(~ (~ (int(1))), (~ (~ _GLF_IDENTITY((int(1)), min((int(1)), (int(1)))))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), (_GLF_IDENTITY(1, (1) * 1)) | (72297 & 0))), int(1)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) + 0)))))))) >> _GLF_IDENTITY(int(1), int(1))))) && true); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(6.5, 964.756)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(6.5, 964.756)), vec2(mat3(_GLF_FUZZED(vec2(6.5, 964.756)), 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0))), _GLF_IDENTITY(_GLF_FUZZED(vec2(6.5, 964.756)), (true ? _GLF_FUZZED(vec2(6.5, 964.756)) : _GLF_FUZZED(vec2(-2.9, -1293.2196)))), _GLF_FUZZED(vec2(6.5, 964.756)))) : injectionSwitch)).y))))
          barrier();
         atomicStore(checker[GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.z], read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))) && true))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), ! (! (false)))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(6.9, float(_GLF_IDENTITY(vec3(6.9, 1.0, 1.0), (true ? vec3(6.9, 1.0, 1.0) : _GLF_FUZZED(vec3(28.71, 5630.2696, 790.279)))))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(6.9, float(mat4x3(6.9, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(6.9, float(mat4x3(6.9, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat3(mat3(_GLF_IDENTITY(6.9, float(mat4x3(6.9, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (true ? mat3(mat3(mat3(_GLF_IDENTITY(6.9, float(mat4x3(6.9, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(mat3(-9707.6083, 2809.9908, -19.63, 7484.6754, 5.0, 8708.6147, 953.753, -8.8, -7.9))))))))))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) && true)) ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x : _GLF_FUZZED(_GLF_IDENTITY(6.9, float(mat3(6.9, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(0.8)), float((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_IDENTITY(false, bool(bool(false))))), (bool(bvec2(true, false))) && true)) ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x : _GLF_FUZZED(_GLF_IDENTITY(6.9, float(_GLF_IDENTITY(mat3(6.9, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(6.9, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(6.9, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(true)))) > injectionSwitch.y)) || false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec2(bool(_GLF_IDENTITY(true, (true) && true)), false))))) && (false))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
}
