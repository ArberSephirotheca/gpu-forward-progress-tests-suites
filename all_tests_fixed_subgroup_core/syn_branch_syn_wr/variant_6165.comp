#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 bvec4 _f0;
 int i;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 bool _f1;
 _GLF_struct_2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 mat3x2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_4 {
 bool _f0;
 bvec3 _f1;
 _GLF_struct_0 _f2;
 mat4 _f3;
 _GLF_struct_3 _f4;
 mat4x3 _f5;
 bvec3 _f6;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec3 GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.xy = GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.xy.x = subgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.z = GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.xy.x;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(true, bvec3(true), _GLF_struct_0(uvec3(1u), mat3x2(1.0), vec3(1.0)), mat4(1.0), _GLF_struct_3(_GLF_struct_1(vec4(1.0)), true, _GLF_struct_2(mat4x3(1.0), uvec3(1u)), uvec2(1u)), mat4x3(1.0), bvec3(true), gl_NumWorkGroups.x);
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.z = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 uint workgroup_base = GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.z * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.z * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.xy.y = virtual_gid;
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.w = GLF_merged2_0_2_47_2_1_14GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidworkgroup_size.xy.y;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.z * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.w], 4, 64, 0);
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.y = read;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(bvec4(true), 0);
   atomicStore(checker[GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.w], GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.y, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   atomicStore(checker[GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.w], GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_11next_virtual_gidreadsubgroup_idvirtual_gid.y, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}
