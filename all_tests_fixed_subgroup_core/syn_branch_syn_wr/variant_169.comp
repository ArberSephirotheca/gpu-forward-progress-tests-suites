#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2 _f0;
 bvec4 _f1;
 mat4 _f2;
 uvec2 _f3;
 ivec4 _f4;
 mat3x2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 ivec3 _f1;
 _GLF_struct_0 _f2;
 uint subgroup_local_id;
 vec4 _f3;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 uvec3 _f1;
 _GLF_struct_1 _f2;
 bvec4 _f3;
 vec4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec4(1u), uvec3(1u), _GLF_struct_1(bvec3(true), ivec3(1), _GLF_struct_0(mat2(1.0), bvec4(true), mat4(1.0), uvec2(1u), ivec4(1), mat3x2(1.0), bvec3(true)), gl_SubgroupInvocationID, vec4(1.0)), bvec4(true), vec4(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_2._f2.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_2._f2.subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_struct_replacement_2._f2.subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
  }
 else
  {
  }
}
