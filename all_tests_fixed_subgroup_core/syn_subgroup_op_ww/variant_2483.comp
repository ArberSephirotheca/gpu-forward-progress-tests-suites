#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))) || false)))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec4(bool(bvec3(false, false, true)), true, false, false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), injectionSwitch)), injectionSwitch)).y)))))))) && true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-58113) : 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))) > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7))), int(_GLF_IDENTITY(7, ~ (~ (7))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))), false)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) + ((gl_WorkGroupSize))) << uvec3(0u, 0u, 0u)))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(62.42))) > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sqrt(atanh(vec2(9673.3722, -3.5)))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8.5, 9802.4907)) : injectionSwitch)))).y))))))))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x > injectionSwitch.y))));
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) && true))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))));
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1)), _GLF_IDENTITY(1, min(1, 1))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1), (clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1)) | (clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1))))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-870.868)), float(injectionSwitch.y), bool(true)))))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))) || (false))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (0))), 1 * (~ (_GLF_IDENTITY(0, (0) | (0))))))), 0, 1), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 ^ (0)))), 0, 1))))) ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)) & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))))) || false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(false, (false) && true)) && true)))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1, false || (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)), (false ? _GLF_FUZZED(dot(vec3(2184.9531, -9.0, 745.318), vec3(-1.9, 1.5, -6.9))) : _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-57.30)), bool(false))), (injectionSwitch.y))) / 1.0), injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-159.714, 842.850)) : injectionSwitch)).x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))))));
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (false)), false, true)), bvec3(bvec4(bvec3(bvec3(! (! (false)), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, _GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))), bvec3(bvec3(bvec3(! (! (false)), false, true)))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((! (false)), true), false), bvec3(bvec3(bvec3(bvec2((! (false)), true), false))))))))))), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (! (false)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (! (false)), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (! (false)), false, true), true)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((_GLF_IDENTITY(! (false), bool(bool(! (false))))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))), false || ((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))))), false, true)), (bool(bvec3(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))), false || ((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))))), false, true))) && true)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec2((false), false)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false))))))), false, true)))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true))))))))) || false)) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec3(_GLF_IDENTITY((false), bool(bvec2((false), false))), true, true)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))), bool(bool(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))))))))), false, true)))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec3(_GLF_IDENTITY((false), bool(bvec2((false), false))), true, true)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))), bool(bool(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))))))))), false, true)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true)))), (bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true))))) && true)))))))) || false)) || false))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((! (false)), true), false), bvec3(bvec3(bvec3(bvec2((! (false)), true), false))))))))))), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (! (false)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (! (false)), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (! (false)), false, true), true)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((_GLF_IDENTITY(! (false), bool(bool(! (false))))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))), false || ((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))))), false, true)), (bool(bvec3(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))), false || ((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))))), false, true))) && true)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec2((false), false)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false))))))), false, true)))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true))))))))) || false)) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec3(_GLF_IDENTITY((false), bool(bvec2((false), false))), true, true)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))), bool(bool(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))))))))), false, true)))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec3(_GLF_IDENTITY((false), bool(bvec2((false), false))), true, true)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))), bool(bool(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))))))))), false, true)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true)))), (bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true))))) && true)))))))) || false)) || false))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((! (false)), true), false), bvec3(bvec3(bvec3(bvec2((! (false)), true), false))))))))))), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (! (false)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (! (false)), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (! (false)), false, true), true)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((_GLF_IDENTITY(! (false), bool(bool(! (false))))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))), false || ((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))))), false, true)), (bool(bvec3(! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))), false || ((! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), false || (((false))))))))), false, true))) && true)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec2((false), false)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false))))))), false, true)))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true))))))))) || false)) || false, ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec3(_GLF_IDENTITY((false), bool(bvec2((false), false))), true, true)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))), bool(bool(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))))))))), false, true)))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), bool(bvec3(_GLF_IDENTITY((false), bool(bvec2((false), false))), true, true)))), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))), bool(bool(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))) || false)))))))))), false, true)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true)))), (bool(bool(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), false, true)))), false, true))))) && true)))))))) || false)) || false))))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(0, 1)), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)) | (int(ivec2(0, 1))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), ((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0))) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), clamp((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), (_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), (_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)))))) | (int(ivec2(0, 1)))))), (_GLF_IDENTITY(int(ivec2(0, 1)), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)) | (int(ivec2(0, 1))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), ((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0))) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), clamp((_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), (_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)), (_GLF_IDENTITY(int(ivec2(0, 1)), (int(ivec2(0, 1))) - 0)))))) | (int(ivec2(0, 1))))))) << 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.3)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) + 0u) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))))))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(6831u) : subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))));
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.9)), float(injectionSwitch.y), bool(true)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), false, true), true))))))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2105.7120)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-48698 & 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)))) && true)) || false))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7052.4787), _GLF_IDENTITY(_GLF_FUZZED(vec2(39.81, 667.434).s), max(_GLF_IDENTITY(_GLF_FUZZED(vec2(39.81, 667.434).s), sqrt(0.0) + (_GLF_FUZZED(vec2(39.81, 667.434).s))), _GLF_FUZZED(vec2(39.81, 667.434).s)))), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) - 0)]), bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | (_GLF_IDENTITY(1, 0 | (1)))), (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2(mat2(1.0) * (injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 0.0)))) - log(vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), max(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))))).y, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch))))), _GLF_IDENTITY(mat2(1.0) * (mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))) * (injectionSwitch)), max(_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))) * (mat2(1.0) * (injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) * (injectionSwitch)))))).y, tan(0.0), 1.0, 1.0), (vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), max(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), mat2(1.0) * (mat2(1.0) * (injectionSwitch))))), vec2(mat3x4(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), max(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), mat2(1.0) * (mat2(1.0) * (injectionSwitch))))), 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), sin(0.0), 0.0, 1.0, 1.0)))).y, tan(0.0), 1.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))))), false, false, false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), (float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))) - 0.0)), injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))))) || false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         subgroupAll(true);
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((+ 39160)))))))), ! (! (_injected_loop_counter != _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((+ 39160)))))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)), mix(float(_GLF_FUZZED(-857.115)), float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y))), bool(true))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
