#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 1.0, 1.0, 0.0, 0.0)), vec2(vec4(vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0)), length(_GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.0) : 0.0)), 0.0, 0.0), cos(sin(vec4(0.0, 0.0, 0.0, 0.0))) * (vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.0) : 0.0)), 0.0, 0.0)))), 0.0)))).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 1.0, 1.0, 0.0, 0.0)), vec2(vec4(vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0)), length(_GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.0) : 0.0)), 0.0, 0.0), cos(sin(vec4(0.0, 0.0, 0.0, 0.0))) * (vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.0) : 0.0)), 0.0, 0.0)))), 0.0)))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 1.0, 1.0, 0.0, 0.0)), vec2(vec4(vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0)), length(_GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.0) : 0.0)), 0.0, 0.0), cos(sin(vec4(0.0, 0.0, 0.0, 0.0))) * (vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.0) : 0.0)), 0.0, 0.0)))), 0.0)))).y), true, true)))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)) * mat2(1.0), vec2(0.0, 0.0) + ((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)) * mat2(1.0)))))), injectionSwitch)).y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy = GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.xy;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    barrier();
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 0.0, log(1.0), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7384.4187)), float(1.0), bool(true))), 1.0, 1.0, abs(sin(0.0)), 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))) : _GLF_FUZZED(206.830))), 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0)), (float(mat4(injectionSwitch.y, 0.0, log(1.0), 1.0, 1.0, 1.0, 1.0, abs(sin(0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 0.0))) / 1.0))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z = subgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
uint subgroup_size = 16;
 GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.w = subgroup_size;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x = GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.w;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true))))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), true && (bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1066.5786)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.z = subgroup_local_id, (GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.z = subgroup_local_id) - 0u);
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.z, (true ? GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.z : _GLF_FUZZED(atomicOr(subgroup_id, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup[0]))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = (1 | (-3803 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, true, false, true)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3850.5221)), bool(false))), injectionSwitch.y))))))));
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (-82333 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), true, false))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.z = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.y = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.z;
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.y = workgroup_size, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.y = workgroup_size) >> 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), (gl_WorkGroupID.x) >> 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) > injectionSwitch.y)) && true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.y * workgroup_id;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y = workgroup_base;
 uint virtual_gid = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.w = virtual_gid;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, _GLF_IDENTITY(uvec2(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (37771u & 0u), 1u)), (uvec2(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (37771u & 0u), 1u))) | (uvec2(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (37771u & 0u), 1u))))).x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z)) : _GLF_FUZZED(subgroup_id))) * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, min(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy)).x)) + 0u), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), clamp((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), min(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)) | uvec3(0u, 0u, 0u)), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)))), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), max(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)))))) | 0u)) % _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, clamp(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy)).x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)), ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u))))) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)) + 0u), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), clamp((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), min(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)) | uvec3(0u, 0u, 0u)), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)))) : _GLF_FUZZED((~ virtual_gid)))))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, _GLF_IDENTITY(uvec2(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (37771u & 0u), 1u)), (uvec2(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (37771u & 0u), 1u))) | (uvec2(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (37771u & 0u), 1u))))).x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z)) : _GLF_FUZZED(subgroup_id))) * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z) - (0u | 0u)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z)) * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, min(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy)).x)) + 0u), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z : _GLF_FUZZED(subgroup_id))) * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), clamp((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), min(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)) | uvec3(0u, 0u, 0u)), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), clamp((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), min(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)) | uvec3(0u, 0u, 0u)), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)))) | (_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), clamp((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), min(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)) | uvec3(0u, 0u, 0u)), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))))) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)))), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), max(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)))))) | 0u)) % _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, clamp(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy)).x), (_GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), max(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)))))) | 0u)) % _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, clamp(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy)).x), (true ? ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), max(uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)), uint(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1)))))) | 0u)) % _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, clamp(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy)).x) : _GLF_FUZZED(subgroup_local_id)))) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + _GLF_IDENTITY(1, min(1, 1)), (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)), ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u))))) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)) + 0u), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, uvec2(0u, 0u) ^ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base)), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, ~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base))) << uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y, 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), clamp((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), _GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), min(_GLF_IDENTITY((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup), ((GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)) | uvec3(0u, 0u, 0u)), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))), (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup))) | uvec3(0u, 0u, 0u)).xy.x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) | 0u)) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)))) : _GLF_FUZZED((~ virtual_gid))))))) + 0u);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x = next_virtual_gid;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.w], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((928.681 * vec2(-1148.1673, 2438.3999).t))), bool(false)))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1 < _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x, (false ? _GLF_FUZZED((_GLF_IDENTITY(packUnorm2x16(injectionSwitch), min(packUnorm2x16(injectionSwitch), packUnorm2x16(injectionSwitch))) - GLF_merged3_0_2_52_2_1_17_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_local_idsubgroup_size.w)) : _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x, _GLF_IDENTITY(0u | (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), clamp(_GLF_IDENTITY(0u | (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), clamp(0u | (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), 0u | (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x), 0u | (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x))), 0u | (_GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, max(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, clamp(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, _GLF_IDENTITY(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, max(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup, GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)), GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup)))).xy.x), 0u | (GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenum_workgroup.xy.x)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true))))))))) && true)))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true))))))))) && true))))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x], uint(2), 4, _GLF_IDENTITY(64, (64) << (0 << _GLF_IDENTITY(int(5), int(5)))), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     subgroupAll(true);
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))) && true)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)).x > injectionSwitch.y))) && true)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (2) - (-45370 & 0)))) << 0))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
}
