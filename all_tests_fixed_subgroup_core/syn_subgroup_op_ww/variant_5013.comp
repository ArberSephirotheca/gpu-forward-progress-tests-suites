#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_24 {
 ivec4 _f0;
 mat3x4 _f1;
 vec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_23 {
 int _f0;
 ivec4 _f1;
 uint num_workgroup;
 mat3x2 _f2;
} ;

struct _GLF_struct_22 {
 uvec4 _f0;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 _GLF_struct_23 _f3;
 _GLF_struct_24 _f4;
 bvec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_21 {
 vec4 _f0;
} ;

struct _GLF_struct_19 {
 uvec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_26 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_25 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_16 {
 uint _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 mat3 _f1;
 vec4 _f2;
 vec4 _f3;
 uvec2 _f4;
 vec3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 mat4 _f1;
 mat2x3 _f2;
 ivec3 _f3;
 mat3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 vec3 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 float _f4;
 uint subgroup_size;
 _GLF_struct_15 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_11 {
 float _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 vec2 _f1;
 mat4x2 _f2;
 mat4x3 _f3;
 bvec2 _f4;
 mat3x2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 mat4 _f1;
 mat2x4 _f2;
 vec3 _f3;
 int _f4;
 ivec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 ivec2 _f2;
 vec4 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_11 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 mat4x3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 vec3 _f1;
 bvec3 _f2;
 mat3 _f3;
 mat2x3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 uvec2 _f1;
 vec2 _f2;
 int _f3;
 ivec2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 _GLF_struct_3 _f1;
 uvec4 _f2;
 vec4 _f3;
 _GLF_struct_4 _f4;
 vec3 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 uvec3 _f1;
 ivec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 float _f2;
 int _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 _GLF_struct_6 _f1;
 uint workgroup_id;
 uvec2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((int(2)), int(int((int(2)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(66.40) : injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), true), false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), true), false)))))), ! (! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) && true)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ((injectionSwitch.x > injectionSwitch.y) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true), false))))))))))))))))))), false || (false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, exp(0.0), 1.0))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, exp(0.0), 1.0))).x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, exp(0.0), 1.0))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, exp(0.0), 1.0))).x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true))))))))
    return;
  }
 else
  {
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(vec3(1.0), _GLF_struct_12(_GLF_struct_8(mat3x2(1.0), mat3x2(1.0), mat3x2(1.0), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2.1)), float(1.0), bool(true))))), _GLF_struct_9(ivec4(1), mat4(1.0), mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-110.245)))) - 0.0)), vec3(1.0), 1, ivec4(1), bvec2(true)), ivec2(1), vec4(1.0), _GLF_struct_10(mat4x2(1.0), vec2(1.0), mat4x2(1.0), mat4x3(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false))), mat3x2(1.0), mat2x3(1.0)), _GLF_struct_11(1.0, mat2x3(1.0)), mat2(1.0)), _GLF_struct_17(mat2(1.0), vec3(1.0), _GLF_struct_13(vec3(1.0), mat4(1.0), mat2x3(1.0), ivec3(1), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), transpose(transpose(mat3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))))), _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat4(mat3(1.0)), (mat4(mat3(1.0))) + mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((249.706)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat3(mat4(mat3(1.0)))))))), _GLF_struct_14(mat4(1.0), mat3(1.0), vec4(1.0), vec4(1.0), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))), (true ? _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)) : _GLF_FUZZED(uvec2(166444u, 190904u)))), vec3(1.0), mat4x2(1.0)), 1.0, gl_SubgroupSize, _GLF_struct_15(mat4x2(1.0)), _GLF_struct_16(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u ^ (1u), min(_GLF_IDENTITY(0u ^ (1u), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true) ? _GLF_IDENTITY(0u, (0u) | 0u) ^ (1u) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), uint(uint(_GLF_FUZZED(subgroup_id)))))), 0u ^ (1u)))), bvec4(true))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5827.1327) : 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      break;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 0.0), mat3x2(mat3(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 0.0, 0.0)))))))), injectionSwitch)).x, (false ? _GLF_FUZZED(-8183.9306) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x)))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     continue;
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) * 1)) | (int(6))), (int(6)) | 0), (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), 0, 1, 0), (ivec4(int(6), 0, 1, 0)) / ivec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))) | 0)) / (1 | 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), _GLF_IDENTITY(int(6), (int(6)) | 0)), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-73736))), (int(6)) | 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(ivec3(6, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))), 1)))) << (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, int(int(7))), 7))))))), _GLF_IDENTITY(int(6), (int(6)) | 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))))) * 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
       return;
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false))), false || (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, false)))))) || false))), false, true))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
    }
  }
 else
  {
  }
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_20(_GLF_struct_19(uvec2(1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), 1u * (_GLF_IDENTITY(1u, min(1u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), 1u * (_GLF_IDENTITY(1u, min(1u, 1u))))) ^ 0u)) | (1u)))), _GLF_struct_21(vec4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.5) : 1.0)), 1.0)))), _GLF_struct_25(_GLF_struct_22(uvec4(1u)), mat4x3(1.0), uvec2(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x)) ^ (1u))), _GLF_struct_23(1, ivec4(1), _GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups, gl_NumWorkGroups)).x, mat3x2(1.0)), _GLF_struct_24(ivec4(1), mat3x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(1.0), bool(true)))), vec4(1.0), mat4(1.0)), bvec2(true), mat4x3(1.0)), bvec4(true));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bool((false))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 ^ (_GLF_IDENTITY(int(8), int(8)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(1)))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(1)))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), max(int(int(1)), _GLF_IDENTITY(int(int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(int(1)), 0), ivec2(ivec3(ivec2(int(int(1)), 0), 0)))), 0 ^ (int(_GLF_IDENTITY(ivec2(int(int(1)), 0), ivec2(ivec3(ivec2(int(int(1)), 0), 0)))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) && true))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_2(_GLF_struct_0(vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) - 0u)), (uvec3(1u)) + _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec3(1u, 1u, 1u) * (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ ((uvec3(1u))), ~ (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ ((uvec3(1u))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ ((uvec3(1u))), (uvec3(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u) ^ ((uvec3(1u)))) >> uvec3(0u, 0u, 0u))) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u)))))))) + _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + sqrt(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + sqrt(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + sqrt(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x))) << uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1))), mat2x4(1.0)), _GLF_struct_1(uvec3(1u)), 1.0, 1, bvec3(true)), _GLF_struct_6(mat2x3(1.0), _GLF_struct_3(_GLF_IDENTITY(ivec3(1), ~ (~ (_GLF_IDENTITY(ivec3(1), ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), false)))))) ? 0 : _GLF_FUZZED(67645))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 + (0))), (false ? _GLF_FUZZED(-98897) : (0))) << 0)) / 1), 0) | (ivec3(1)))))), uvec2(1u), vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(vec3(-8509.7939, -60.64, -2450.2062), mix(vec3(_GLF_FUZZED(913.306), _GLF_FUZZED(7.1), (vec3(-8509.7939, -60.64, -2450.2062))[2]), vec3((vec3(-8509.7939, -60.64, -2450.2062))[0], (vec3(-8509.7939, -60.64, -2450.2062))[1], _GLF_FUZZED(-9.1)), bvec3(true, true, false))), 8.1).b)), float(1.0), bool(true))), 1.0, 1.0))), 1, ivec2(_GLF_IDENTITY(1, ~ (~ (1)))), mat4(1.0)), uvec4(1u), vec4(1.0), _GLF_struct_4(mat3x4(1.0), vec3(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), mat3(1.0), mat2x3(1.0), uvec3(1u)), vec3(1.0), _GLF_struct_5(uvec3(1u), mat4x3(1.0), ivec3(1))), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u)).x, uvec2(1u));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) * _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - _GLF_ZERO(0.0, injectionSwitch.x))), (vec2(1.0, 1.0)) - vec2(0.0, 0.0))).y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true)), true)), ! (! (bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))))), bool(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, abs(1.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 1.0, sqrt(1.0), 1.0, 0.0))))), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true)), true)), ! (! (bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))))), false)))), _GLF_IDENTITY(true, ! (! (true))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false))))) && (false)), (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))))))) || false), true, true), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), (bool(_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))) && true)))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), true, true), true)), _GLF_IDENTITY(false, false || (false)))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(19.90)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, false, true)), false || (_GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (bool(bvec3(true, false, true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec3(true, false, true)), false || (_GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (bool(bvec3(true, false, true))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec3(true, false, true)), false || (_GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (bool(bvec3(true, false, true))))))), true, false), true))))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.2, -778.093)) : injectionSwitch)), 1.0, 1.0))).y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), true, true), true)), false))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)))), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))), true, true), true)), false))))), true))))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_7.workgroup_id, uint(_GLF_IDENTITY(uint(workgroup_size * _GLF_struct_replacement_7.workgroup_id), (uint(workgroup_size * _GLF_struct_replacement_7.workgroup_id)) >> 0u)));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_18._f2.subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (injectionSwitch.y) / abs(1.0))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (injectionSwitch.y) / abs(1.0))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (injectionSwitch.y) / abs(1.0)))))), bool(bvec4(bool((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (injectionSwitch.y) / abs(1.0)))))), true, false, true)))))) || false)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id))));
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_18._f2.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_18._f2.subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(subgroup_local_id + 1 < _GLF_struct_replacement_18._f2.subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false))))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0)))))))
              continue;
             break;
            }
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))
              return;
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! (_GLF_IDENTITY((true) || false, true && ((true) || false))))))))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) * (_injected_loop_counter ++)))
                {
                 return;
                }
              }
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((bool(bvec3(true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), true))))))))))), true && ((bool(bvec3(true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), true)))))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               continue;
              }
             break;
            }
           return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), max((1) | (1), _GLF_IDENTITY((1) | (1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1) | (1))))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, false))), false, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, false))), false, false)), true, false)))))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true))))))
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true), false)))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, (false ? _GLF_FUZZED(-225.262) : injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0 * (injectionSwitch.y)), mix(float(_GLF_FUZZED(-5812.8922)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0 * (injectionSwitch.y))), bool(true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, (false ? _GLF_FUZZED(-225.262) : injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0 * (injectionSwitch.y)), mix(float(_GLF_FUZZED(-5812.8922)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 1.0 * (injectionSwitch.y))), bool(true)))))))))
      {
      }
     else
      {
       subgroupAll(false);
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))
      return;
    }
   else
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
            break;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              break;
             atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, min(4, 4)), 64, 4);
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(false))
          break;
         subgroupAll(true);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) || false)))), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false, true)))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
