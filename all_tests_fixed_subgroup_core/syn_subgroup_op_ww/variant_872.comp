#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u | _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), ~ (~ ((gl_WorkGroupSize.x))))) - 0u)) << 0u));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), workgroup_size)))), clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, 1u * (1u)))) * (workgroup_size)), _GLF_IDENTITY(workgroup_size, (workgroup_size) | _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), clamp(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) - 0u), _GLF_IDENTITY(max(_GLF_IDENTITY((0u), ((0u)) - 0u), _GLF_IDENTITY((0u), ((0u)) - 0u)), (max(_GLF_IDENTITY((0u), ((0u)) - 0u), _GLF_IDENTITY((0u), ((0u)) - 0u))) | (_GLF_IDENTITY(max(_GLF_IDENTITY((0u), ((0u)) - 0u), _GLF_IDENTITY((0u), ((0u)) - 0u)), ~ (~ (max(_GLF_IDENTITY((0u), ((0u)) - 0u), _GLF_IDENTITY((0u), ((0u)) - 0u)))))))) | 0u))))))) | (workgroup_size)) * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(133094u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) - 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(182664u), (_GLF_FUZZED(182664u)) | (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) : _GLF_IDENTITY(0u, ~ (~ (0u))))), _GLF_IDENTITY(0u, ~ (~ (0u))))) : _GLF_FUZZED(subgroup_size))) + (workgroup_base))) / 1u) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u))) >> 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u))))), (subgroup_local_id + 1) - 0u)), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1)) ^ 0u), ~ (~ ((subgroup_local_id + 1)))) % subgroup_size) ^ _GLF_IDENTITY(0u, (0u) / 1u), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ 0u), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0))))) % subgroup_size) ^ 0u)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 0.0, 1.0, 0.0)), max(float(mat2(injectionSwitch.y, 0.0, 1.0, 0.0)), float(mat2(injectionSwitch.y, 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))))), true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x < injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))) || (injectionSwitch.x < injectionSwitch.y)))))))))), true, true), false)), true))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(881.624, -9.1)))), (mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0))))).y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, abs(0.0), abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, cos(0.0)), (false ? _GLF_FUZZED(mat4(5463.1758, 4.2, 4830.6331, -6293.3849, 5.1, 70.01, 607.454, -506.939, -2267.7265, -1.1, -1.1, -5.0, 77.57, -2.3, -3.0, -0.8)) : mat4(injectionSwitch.x, abs(0.0), abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, cos(0.0)))))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, abs(0.0), abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, cos(0.0)), (false ? _GLF_FUZZED(mat4(5463.1758, 4.2, 4830.6331, -6293.3849, 5.1, 70.01, 607.454, -506.939, -2267.7265, -1.1, -1.1, -5.0, 77.57, -2.3, -3.0, -0.8)) : mat4(injectionSwitch.x, abs(0.0), abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, cos(0.0)))))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec2(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(tan(vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(tan(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, length(0.0) + (0.0))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) ? mat2x4(tan(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) + vec2(0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0) : _GLF_FUZZED(mat2x4(2.9, 3.9, -1.7, -74.37, 4.3, -7.8, -56.58, -11.05)))))) + (injectionSwitch)).y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))))))), injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))))))), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) < injectionSwitch.y)), true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))), float(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), (! ((! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(17.26)), bool(false)))) + 0.0)), float(_GLF_FUZZED(-8.3)), bool(false))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false)), true))))), true && (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), (_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))))))) || false))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))) || false, ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), ! (! (! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), false, false)))))), false, false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), (_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))))))) || false))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))) || false, ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), ! (! (! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), false, false)))))), false, false, false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), ! (! _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), (_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(441.773), _GLF_FUZZED(3803.6208)), bvec2(false, false))).y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(log(1.0), mix(float(_GLF_FUZZED(-5.3)), float(log(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))) || false))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))) || false, ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), (injectionSwitch.x < injectionSwitch.y))))) || false), ! (! (! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), false, false)))))), false, false, false))))))) && true), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), (_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))))))) || false))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))) || false, ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), ! (! (! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), bvec2(bvec2(bvec2(true, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), false, false)))))), false, false, false)))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec2(true, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))))), bool(bvec3(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))))), false, true)))))) || false))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && (true)), (true) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))) || false, ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), ! (! (! ((bool(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && true)), true && ((_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), false, false)))))), false, false, false)))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))), false))))))))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(subgroup_local_id + 1 < subgroup_size)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       do
                                                        {
                                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(true))) && _GLF_IDENTITY(((! (true))), ((_GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))), false || ((! (true)))))) && true)))))
                                                                {
                                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                  {
                                                                   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * 1.0), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * 1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * 1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * 1.0))), injectionSwitch.y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) - 0)), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) - 0), (_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) - 0)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-8.8)), max(float(_GLF_FUZZED(-8.8)), float(_GLF_FUZZED(-8.8)))), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)))))) + 0.0))))))); _injected_loop_counter --)
                                                                    {
                                                                     do
                                                                      {
                                                                       do
                                                                        {
                                                                         do
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                              {
                                                                              }
                                                                             else
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                {
                                                                                }
                                                                               else
                                                                                {
                                                                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), true && ((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), ! (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))))), false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))))))
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                                    {
                                                                                     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u)) | (uint(2))), 4, 64, 4);
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                    }
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                         while(_GLF_WRAPPED_LOOP(false));
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
                                                                      }
                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                    }
                                                                  }
                                                                }
                                                               else
                                                                {
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                            {
                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                              {
                                               do
                                                {
                                                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                  {
                                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false), true))))))))))))), true && (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))))
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true)))))), (injectionSwitch.x > injectionSwitch.y))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (min(injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(vec2(674.404, 8.3)) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6.0), float(_GLF_IDENTITY(vec2(_GLF_FUZZED(-6.0), 1.0), max(vec2(_GLF_FUZZED(-6.0), 1.0), vec2(_GLF_FUZZED(-6.0), 1.0)))))), float(1.0), bool(true))), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))))))), _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false))), true))))))))))))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false)))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false))))))))))))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)); _injected_loop_counter ++)
                                                              {
                                                               subgroupAll(false);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                              }
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   else
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0))), (_GLF_IDENTITY(int(6), int(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(0 | _GLF_IDENTITY((_GLF_IDENTITY(6, (6) >> 0)), int(int((_GLF_IDENTITY(6, (6) >> 0))))), 0 ^ (0 | _GLF_IDENTITY((_GLF_IDENTITY(6, (6) >> 0)), int(int(_GLF_IDENTITY((_GLF_IDENTITY(6, (6) >> 0)), ((_GLF_IDENTITY(6, (6) >> 0))) | (_GLF_IDENTITY((_GLF_IDENTITY(6, (6) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(6, (6) >> 0)), ((_GLF_IDENTITY(6, (6) >> 0))) << 0)) | ((_GLF_IDENTITY(6, (6) >> 0)))))))))))), max(6, 6))), 0)))) | (_GLF_IDENTITY(int(6), int(ivec2(int(6), 0))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(-95025)), 1 * ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))) ? _injected_loop_counter : _GLF_FUZZED(-95025))))) > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(22210) : 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_IDENTITY(_GLF_FUZZED(-95025), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)), clamp(ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)), ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)), ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0))))), ~ (~ (int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)), clamp(ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)), ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)), ivec3(_GLF_FUZZED(-95025), 0, (1 ^ 0)))))))))), 1 * ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(-95025))))) > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) ? _injected_loop_counter : _GLF_FUZZED(-95025)), 1 * ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(-95025))))) > 0)))) || false)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(-95025))) > 0)))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0), 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1)) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1)) - 0, int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, max(1, 1)))) - 0, 1, 0, 1), ivec4(0, 0, 0, 0) | (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1)), ~ (~ ((_GLF_IDENTITY(0, (0) / 1))))) - 0, 1, 0, 1)))))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1)) - 0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (0) / 1)) - 0, (_GLF_IDENTITY(0, (0) / 1)) - 0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1)) - 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) - 0))) - 0), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) | (_GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) / 1))))) - 0)), min((_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((0) / 1, clamp(_GLF_IDENTITY((0) / 1, ((0) / 1) - 0), (0) / 1, (0) / 1)), (_GLF_IDENTITY((0) / 1, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0)), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0))))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0)))) / 1)))) / 1))))) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((0) / 1, clamp(_GLF_IDENTITY((0) / 1, ((0) / 1) - 0), (0) / 1, (0) / 1)), (_GLF_IDENTITY((0) / _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(2), int(2))), 0, 1)), int(int(int(ivec4(1, (0 << _GLF_IDENTITY(int(2), int(2))), 0, 1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0), ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0))))), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-83329)))) - 0))))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(-83329, clamp(_GLF_IDENTITY(-83329, (-83329) >> 0), -83329, -83329)))))) - 0)))) / 1)))) / 1))))) - 0)))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) | _GLF_IDENTITY((_GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) / 1)), min((_GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) / 1)), (_GLF_IDENTITY((0) / 1, (_GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))) / 1))))))) - 0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))))))))
                                            {
                                             do
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (_GLF_IDENTITY(! (! ((false) || false)), false || (! (! ((false) || false))))))))), false)), (bool(bvec2(false, false))) && true)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)), (bool(bvec2(false, false))) && true))))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         do
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -3964)); _injected_loop_counter --)
                                                              {
                                                               do
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                  {
                                                                  }
                                                                 else
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     do
                                                                      {
                                                                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) / 1, 0 ^ (_GLF_IDENTITY((_injected_loop_counter ++) / 1, ((_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_GLF_IDENTITY(_injected_loop_counter ++, (0 | 0) | (_injected_loop_counter ++))))) / 1) - 0)))))
                                                                        {
                                                                         do
                                                                          {
                                                                           do
                                                                            {
                                                                             do
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                {
                                                                                }
                                                                               else
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                    {
                                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                      {
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                          {
                                                                                           for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(4)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), min(int(7), int(7))))), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                                                                                            {
                                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                              {
                                                                                              }
                                                                                             else
                                                                                              {
                                                                                               do
                                                                                                {
                                                                                                 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) * 1)), (_GLF_IDENTITY(uint(2), (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicOr(workgroup_base, subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(atomicOr(workgroup_base, subgroup_size))), (~ (_GLF_FUZZED(atomicOr(workgroup_base, subgroup_size)))) << 0u))) : _GLF_IDENTITY(uint(2), uint(uint(uint(_GLF_IDENTITY(2, 0 | (2))))))))) >> 0u), _GLF_IDENTITY(4, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED((ivec2(-17310, -63879))[0]) : 4)), 64, 4);
                                                                                                }
                                                                                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                    }
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                  }
                                                                                }
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                            }
                                                                           while(_GLF_WRAPPED_LOOP(false));
                                                                          }
                                                                         while(_GLF_WRAPPED_LOOP(false));
                                                                        }
                                                                      }
                                                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                    }
                                                                  }
                                                                }
                                                               while(_GLF_WRAPPED_LOOP(false));
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))), bool(bvec4((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), false, true, true))))) && true), true && (_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))))), true && (_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(false, (false) && true), false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, false))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, false))))))), (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                              }
                                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))))) && true));
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                              {
                                               subgroupAll(true);
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
