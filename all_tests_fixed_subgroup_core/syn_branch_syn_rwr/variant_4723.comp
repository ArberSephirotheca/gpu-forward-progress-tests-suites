#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
      }
    }
  }
 uvec4 GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
  }
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.z = subgroup_id;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED((- -18253)) : (_GLF_IDENTITY(0 | 0, ~ (~ (0 | 0)))) >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) + 0), _GLF_IDENTITY(1, 1 * (1)))) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.y = subgroup_size;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.x = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.w = num_workgroup;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(bool(bool(bvec4(false, false, false, false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.xy.y = GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.w;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), gl_WorkGroupID.x));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(70152) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.z = workgroup_id;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)) * GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.z;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.z * GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.y + GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), min(_GLF_IDENTITY(6, (6) | 0), _GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), (_GLF_IDENTITY(6, (6) | 0)) << 0))), max(_GLF_IDENTITY(6, _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) | (int(false) & 0))) | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), max(int(6), int(6))), clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(_GLF_IDENTITY(6, ~ (~ (6)))), int(6)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) | (_GLF_IDENTITY(6, min(6, 6))))) | 0))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (6) / 1), 6, 6)))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) >> 0)))), (int(6)) << 0), int(6), int(6))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) >> 0)))), (int(6)) << 0), int(6), int(6))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) >> 0)))), (int(6)) << 0), int(6), int(6)))))) >> 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) >> 0)))), (int(6)) << 0), int(6), int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) >> 0)))), (int(6)) << 0), int(6), int(6)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6), int(6)), 1 * (clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6), int(6)))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, (6) | (6))))), max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, int(int(_GLF_IDENTITY(6, min(6, 6))))), (6) | (_GLF_IDENTITY(6, int(ivec2(6, 0)))))), clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6), int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 0 | (_GLF_IDENTITY(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1), clamp(ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1), ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1), ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1)))), ~ (~ (int(_GLF_IDENTITY(ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1), clamp(ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1), ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1), ivec3(max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6))), 1, 1)))))))))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, min(6, 6)), 6, 6)))))), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? _GLF_IDENTITY(~ (int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, min(6, 6))) | (6)), min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6)))))), min(~ (int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6)))))), ~ (int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6)))), _GLF_IDENTITY(6, clamp(6, 6, 6)))))))) : _GLF_FUZZED(-91809))))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) << 0), clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) << 0), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(int(6), (int(6)) << 0))), _GLF_IDENTITY(int(6), (int(6)) << 0)))) | (_GLF_IDENTITY(int(6), (int(6)) << 0))), int(6), int(6))))) + 0)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(bitCount(-74775)))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.w = virtual_gid;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id, (false ? _GLF_FUZZED(GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id) : GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id)).y + ((GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.y);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(bitfieldInsert(-46330, 69455, bitfieldInsert(_injected_loop_counter, -42781, _injected_loop_counter, _injected_loop_counter), 43233)) : _GLF_IDENTITY(0, 0 | (0))))); _injected_loop_counter --)
      {
       do
        {
         do
          {
           GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.z = next_virtual_gid;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.xy.x = GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.z;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))) || false)))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))))
    {
     for(int _injected_loop_counter = ((64661 & 0) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != (1 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(_injected_loop_counter != (1 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))))) || false)))); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.w], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.4)), float(injectionSwitch.y), bool(true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 & -50862), 1 * ((0 & -50862))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
          barrier();
        }
       else
        {
         GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x = read_1;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.xy.x], uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x + 1), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.w], 4, _GLF_IDENTITY(64, ~ (~ (64))), 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(true && (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(-8.6) : injectionSwitch.y, mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-8.6) : injectionSwitch.y, (false ? _GLF_FUZZED(clamp(5.1, -318.633, -9238.3380)) : false ? _GLF_FUZZED(-8.6) : injectionSwitch.y))), float(_GLF_FUZZED(-3.1)), bool(false))))), injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(true && (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.6) : injectionSwitch.y)), injectionSwitch.y))))))), (true && (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.6) : injectionSwitch.y)), injectionSwitch.y)))))))) && true), false, false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y = _GLF_IDENTITY(read_2, min(read_2, read_2));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(1.3, 7401.2849)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(1.3, 7401.2849)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) + vec2(0.0, 0.0)))).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), true)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (! (_GLF_WRAPPED_IF_FALSE(false))))), _GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) && (_GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), (false || (! (! (_GLF_WRAPPED_IF_FALSE(false))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))), false)))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, true), true)))))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(_GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))), false, true))) && (_GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_IDENTITY((false || (! (! (_GLF_WRAPPED_IF_FALSE(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((false || (! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2((false || (! (! (_GLF_WRAPPED_IF_FALSE(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), true && (! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bool((_GLF_WRAPPED_IF_FALSE(false))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, false || (true))))) && (_GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), (false || (! (! (_GLF_WRAPPED_IF_FALSE(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) && (_GLF_IDENTITY(false || (! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)), true, true, true)))) || false))), (false || (! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.8))))), false, true))) && (_GLF_IDENTITY(false || (! (! (_GLF_WRAPPED_IF_FALSE(false)))), (false || (! (! (_GLF_WRAPPED_IF_FALSE(false))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y))))), true, false, true))))))))), false)))))), true, false, false))) && true))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
                {
                }
               else
                {
                 do
                  {
                   if(GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.x + 1 < GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.y)
                    {
                     int i = 0;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) ^ (1 ^ 1)) ^ 0)); _injected_loop_counter ++)
                            {
                             atomicStore(buf[GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.xy.x], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid)))).x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + _GLF_IDENTITY(1, clamp(1, 1, 1)), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid)).x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1, 1u), (uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid))), ~ (~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, max(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid, GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid))))))))))).x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1, 1u)) / uvec2(1u, 1u)))), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))));
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))) | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), 0 | (int(0))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), (1 ^ 1) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), (true ? (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))) : _GLF_FUZZED(_injected_loop_counter)))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), 1, 0, 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(ivec4(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), 1, 0, 1))))), int(0))), int(0)), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(0), ~ (~ (int(0)))) : _GLF_FUZZED(63073)))), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (~ (1 << _GLF_IDENTITY(int(0), int(0))))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 + (1 << _GLF_IDENTITY(int(0), int(0)))), 1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) | (_GLF_IDENTITY(int(0), 0 | (_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) - 0))))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 ^ (int(0))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)))), 0 | (_GLF_IDENTITY(int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)))), (int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0))))) / 1)))) : _GLF_FUZZED(3719), max(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)) << 0)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (0) * 1)) ^ 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)) << 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (0) * 1)) ^ 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)) << 0)))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, min(1, 1)))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)) << 0)) << 0)) << 0)) / 1)))), 0 | (int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0))))))) : _GLF_FUZZED(3719), _GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (0) * 1)) ^ 0)), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) * 1)) ^ 0, ((_GLF_IDENTITY(0, (0) * 1)) ^ 0) >> 0))))), 0 | _GLF_IDENTITY((int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0))))), clamp((int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0))))), _GLF_IDENTITY((int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, 1 * (1)))) ^ 0))))), ((int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, ((0) * 1) - (0 << _GLF_IDENTITY(int(3), int(3)))))) ^ _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) - 0))))))))) / 1), _GLF_IDENTITY((int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0))))), ((int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)))))) - _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0))))))))) : _GLF_FUZZED(3719), (0 & -45048) + (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), clamp(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY(0, (0) * 1)) | (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(0, (0) * 1)))) ^ 0)), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)))), 0 | (int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0)), (int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) ^ 0))) >> 0)) << 0)))))) : _GLF_FUZZED(3719)))))))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 + (_GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))))) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false)))))
                          {
                           for(int _injected_loop_counter = (0 & _GLF_IDENTITY(-3645, (-3645) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             do
                              {
                               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         atomicStore(buf[GLF_merged3_0_2_54_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnext_virtual_gidnum_workgroup.xy.x], _GLF_IDENTITY(uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(62581) : 1)) == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1, (_GLF_IDENTITY(uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(62581) : 1)) == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1, (uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(62581) : 1)) == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1) | (uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.x + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(62581) : 1)) == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_11read_1read_2subgroup_idvirtual_gid.y) + 1))) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 4, 64, 4);
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))) || false))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, true)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
