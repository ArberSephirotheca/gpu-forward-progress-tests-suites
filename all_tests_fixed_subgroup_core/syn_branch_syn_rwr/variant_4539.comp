#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))), true, false))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), true && (false))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), min((int(5)), (int(5)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), min((int(5)), (int(5)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), min((int(5)), (int(5)))))), clamp(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), min((int(5)), (int(5)))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), min((int(5)), (int(5)))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), min((int(5)), (int(5))))))))))) ^ (0 >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) * (1u & 1u)), gl_NumWorkGroups.x), _GLF_IDENTITY((clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, (gl_NumWorkGroups.x) * (1u & 1u)), gl_NumWorkGroups.x)) ^ 0u, 0u ^ ((clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, (gl_NumWorkGroups.x) * (1u & 1u)), gl_NumWorkGroups.x)) ^ 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, 0u))), min(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u)), (true ? _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | 0u))), 0u)) : _GLF_FUZZED(subgroup_id)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, 0u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u), 0u, 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, 0u)))))) ^ uvec3(0u, 0u, 0u))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec3(31013u, 11823u, 71623u), (_GLF_IDENTITY(uvec3(31013u, 11823u, 71623u), min(uvec3(31013u, 11823u, 71623u), uvec3(31013u, 11823u, 71623u)))) * ((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) & uvec3(1u, 1u, 1u)))), uvec3(uvec4(_GLF_IDENTITY(_GLF_FUZZED(uvec3(31013u, 11823u, 71623u)), (_GLF_FUZZED(uvec3(31013u, 11823u, 71623u))) | (_GLF_FUZZED(uvec3(31013u, 11823u, 71623u)))), 1u))) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, 0u))), min(~ (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID))) << uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(0u, 0u | (0u))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), _GLF_IDENTITY((true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)), min((true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), (true ? ~ _GLF_IDENTITY(_GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), min(_GLF_IDENTITY(_GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), min(_GLF_IDENTITY(_GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), uint(uvec2(_GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), 0u))), _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))))) : _GLF_FUZZED(packUnorm4x8(vec4(-5868.0317, -9937.0016, 2049.3468, -3.5)))))))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, min(0u, 0u))), _GLF_IDENTITY((true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)), (_GLF_IDENTITY((true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)), 0u | (_GLF_IDENTITY((true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)), ~ (~ ((true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))) * 1u))))))))))), (true ? (~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))))))) : _GLF_FUZZED(uvec3(36895u, 172497u, 74140u))))), clamp(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(0u, (0u) + 0u)))), (uint(uint((_GLF_IDENTITY(0u, (0u) + 0u))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(subgroup_size)))))))))))), (true ? (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), clamp(~ (gl_WorkGroupID), ~ (gl_WorkGroupID), ~ (gl_WorkGroupID))))), _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))), uvec3(uvec3((gl_WorkGroupID) << _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))), (uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))))))) >> uvec3(0u, 0u, 0u)))))))) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(36895u, 172497u, 74140u)), min(_GLF_FUZZED(uvec3(36895u, 172497u, 74140u)), _GLF_FUZZED(uvec3(36895u, 172497u, 74140u))))))), ~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))))))), (true ? (~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | 0u)), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) >> 0u) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))))))) : _GLF_FUZZED(uvec3(36895u, 172497u, 74140u))))), ~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u | (0u)), 0u)), ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u)))))))), _GLF_IDENTITY(uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), (_GLF_IDENTITY(uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), min(_GLF_IDENTITY(uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), (uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))))))))) | (uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))))), _GLF_IDENTITY(uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))))))), (uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) >> 0u)))), uint(uint((0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))))))))) / uvec3(1u, 1u, 1u))))) / (uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u))))))), (true ? (~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))), 0u ^ (~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))))))) << 0u))), uvec3(uvec3((gl_WorkGroupID) << uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), min(_GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), uint(uint((0u)))) : _GLF_FUZZED(subgroup_size)))))))))))))) : _GLF_FUZZED(uvec3(36895u, 172497u, 74140u))))))))) ^ uvec3(0u, 0u, 0u)))))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))) ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), ((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) * mat2(1.0))) : _GLF_FUZZED(vec2(-9.8, 9.9)))), vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   return;
  }
 for(int _injected_loop_counter = (((((1 | 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true, true, false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 0u, 1u)))) - 0u))), (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(108119u) : workgroup_base))) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id))) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), (subgroup_id) >> 0u) * subgroup_size))) / 1u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id)))) / 1u, _GLF_IDENTITY(min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u)), clamp(_GLF_IDENTITY(min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u)), (min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))) - 0u), _GLF_IDENTITY(min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u)), uint(uint(min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))))), _GLF_IDENTITY(min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u)), 0u | (min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), (subgroup_id) >> 0u) * subgroup_size))) / 1u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id)))) / 1u, min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), clamp(~ (~ (1u)), _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) | (~ (~ (1u)))), ~ (~ (1u)))))) << 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), (subgroup_id) >> 0u) * subgroup_size))) / 1u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)) + subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id)))) / 1u, min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), (subgroup_id) >> 0u) * subgroup_size))) / 1u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id)))) / 1u, min((workgroup_base + subgroup_id * subgroup_size) / 1u, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), (true ? (_GLF_IDENTITY(1u, ~ (~ (1u)))) : _GLF_FUZZED(workgroup_size))) << 0u)))))))) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec3(subgroup_local_id, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) | (1u)), 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u)), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))))), min(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec3(subgroup_local_id, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u)), 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), _GLF_IDENTITY((uvec3(subgroup_local_id, 1u, 0u)), clamp(_GLF_IDENTITY((uvec3(subgroup_local_id, 1u, 0u)), ((uvec3(subgroup_local_id, 1u, 0u))) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY((uvec3(subgroup_local_id, 1u, 0u)), ((uvec3(subgroup_local_id, 1u, 0u))) | ((uvec3(subgroup_local_id, 1u, 0u)))), (uvec3(subgroup_local_id, 1u, 0u)))) ^ uvec3(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)))), 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(93948u)))) | 0u), 0u), (uvec3(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> 0u), min(1u, 1u)), 0u)) ^ uvec3(0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, _GLF_IDENTITY(0u, (0u) * 1u)), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), (uvec3(subgroup_local_id, 1u, 0u)) ^ uvec3(0u, 0u, 0u)))))) ^ 0u)))) + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), (subgroup_size) - 0u), 1u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), float(0.0), bool(true))), injectionSwitch.x)), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, injectionSwitch.x)))) / 1.0))))));
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), _GLF_IDENTITY(int(ivec4(~ (64), 0, 0, 0)), (int(ivec4(_GLF_IDENTITY(~ (64), ~ (~ (~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-49828) : _GLF_IDENTITY(64, (64) << 0))))))), 0, 0, 0))) | (_GLF_IDENTITY(int(ivec4(~ (64), 0, 0, 0)), min(int(ivec4(~ (64), 0, 0, 0)), int(ivec4(~ (64), 0, 0, 0))))))))), 0);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.6) : injectionSwitch.x))), clamp(_GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.6) : injectionSwitch.x))), (max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.6) : injectionSwitch.x)))) - 0.0), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.6) : injectionSwitch.x))), _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.6) : injectionSwitch.x))), mix(float(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.6) : injectionSwitch.x)))), float(_GLF_FUZZED(-0.0)), bool(false))))))) - 0.0) > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, ~ (~ (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), true, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), true, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), (uint(read_1 + 1)) / 1u), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, ~ (~ (0))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-77222 & 0) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(bvec4(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))) || false), false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))) && true))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))) && true))), false))))))))) || false)))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false || (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))))), _GLF_IDENTITY((! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), true, true), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), true, true)))))))))), _GLF_IDENTITY(bool(bvec2((! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, true && (_GLF_IDENTITY((true) && true, bool(bvec4(_GLF_IDENTITY((true) && true, bool(bvec2((true) && true, false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_injected_loop_counter < 1)))) || false), false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))))))), true))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false || (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))) && true))), true, true)))))))))), false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))))))), true))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false || (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))) && true))), true, true)))))))))), false)), bool(bvec4(bool(bvec2((! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))))))), true))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false || (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))) && true))), true, true)))))))))), false)), true, true, true))), bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))))))), true))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false || (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))) && true))), true, true)))))))))), false)), bool(bvec4(bool(bvec2((! (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))))))), true))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false || (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))) && true))), true, true)))))))))), false)), true, true, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) || false))))))))); _injected_loop_counter ++)
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), false))))))) && true)))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     int i = 0;
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(read_1 + _GLF_IDENTITY(1, (1) + (0 ^ 0)) == read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 ^ 1) ^ 1)); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), 0 | (_GLF_IDENTITY((_injected_loop_counter ++), (true ? (_injected_loop_counter ++) : _GLF_FUZZED(i))))) << (1 ^ (0 ^ 1))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-31.58)), float(injectionSwitch.y), bool(true)))))))));
               return;
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), (int(5)) << 0))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))), int(5))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           barrier();
          }
         continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(read_1 + 1 == read_2), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(read_1 + 1 == read_2), max(uint(read_1 + 1 == read_2), _GLF_IDENTITY(uint(read_1 + 1 == read_2), ~ (~ (uint(read_1 + 1 == read_2)))))), 0u), (uvec2(_GLF_IDENTITY(uint(read_1 + 1 == read_2), max(uint(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, 0u | (read_1 + 1)), (_GLF_IDENTITY(read_1 + 1, 0u | (read_1 + 1))) >> 0u) == read_2), _GLF_IDENTITY(~ (~ (uint(read_1 + 1 == read_2))), min(~ (~ (uint(read_1 + 1 == read_2))), ~ (~ (uint(read_1 + 1 == read_2)))))))), 0u)) >> _GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) + (uvec2(0u, 0u)))))) + 1) | (_GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (_GLF_IDENTITY(0, 0 ^ (0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, int(ivec3(_GLF_IDENTITY(8, min(8, 8)), 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) ^ 0), clamp(_GLF_IDENTITY(int(8), (int(8)) ^ 0), _GLF_IDENTITY(int(8), (int(8)) ^ 0), _GLF_IDENTITY(int(8), (int(8)) ^ 0))))), 0, 1)), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), (_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1)))) | (_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1)))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(int(int(8)), (true ? int(int(8)) : _GLF_FUZZED(52818)))))), clamp(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8))))), 0, 1)), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), _GLF_IDENTITY((1 ^ 1) ^ (int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) - 0), (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1))), (_GLF_IDENTITY((1 ^ 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1)), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1))), (true ? ~ (~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1))) : _GLF_FUZZED(-94129))))))) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))) >> 0)), (true ? _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), (1 ^ 1) ^ (int(_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1), (ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)), 1)) | (_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1), (_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (_GLF_IDENTITY(int(8), max(int(8), int(8))))))), 0, 1), (false ? _GLF_FUZZED(ivec4(-38443, -15486, 89715, 48140)) : ivec4(1, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) >> 0)), int(8))), 0, 1)))) - ivec4(0, 0, 0, 0))))))) : _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter, 7678))))))) == read_2), min(uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (_GLF_IDENTITY(0, 0 ^ (0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, int(ivec3(_GLF_IDENTITY(8, min(8, 8)), 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) ^ 0), clamp(_GLF_IDENTITY(int(8), (int(8)) ^ 0), _GLF_IDENTITY(int(8), (int(8)) ^ 0), _GLF_IDENTITY(int(8), (int(8)) ^ 0))))), 0, 1)), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), (_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1)))) | (_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1)))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(int(int(8)), (true ? int(int(8)) : _GLF_FUZZED(52818)))))), clamp(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8))))), 0, 1)), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), _GLF_IDENTITY((1 ^ 1) ^ (int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) - 0), (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1))), (_GLF_IDENTITY((1 ^ 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1)), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1))), (true ? ~ (~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1))) : _GLF_FUZZED(-94129))))))) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))) >> 0)), (true ? _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), (1 ^ 1) ^ (int(_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1), (ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)), 1)) | (_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1), (_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (_GLF_IDENTITY(int(8), max(int(8), int(8))))))), 0, 1), (false ? _GLF_FUZZED(ivec4(-38443, -15486, 89715, 48140)) : ivec4(1, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) >> 0)), int(8))), 0, 1)))) - ivec4(0, 0, 0, 0))))))) : _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter, 7678))))))) == read_2), uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (_GLF_IDENTITY(0, 0 ^ (0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, int(ivec3(_GLF_IDENTITY(8, min(8, 8)), 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) ^ 0), clamp(_GLF_IDENTITY(int(8), (int(8)) ^ 0), _GLF_IDENTITY(int(8), (int(8)) ^ 0), _GLF_IDENTITY(int(8), (int(8)) ^ 0))))), 0, 1)), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1))), (_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1)))) | (_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), int(ivec4(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), 0, 0, 1)))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(int(int(8)), (true ? int(int(8)) : _GLF_FUZZED(52818)))))), clamp(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8))))), 0, 1)), (1 ^ 1) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), _GLF_IDENTITY((1 ^ 1) ^ (int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) - 0), (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1))), (_GLF_IDENTITY((1 ^ 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1)), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1))), (true ? ~ (~ (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) * 1))) : _GLF_FUZZED(-94129))))))) ^ (int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)))) >> 0)), (true ? _GLF_IDENTITY(int(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1)), (1 ^ 1) ^ (int(_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1), (ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)), 1)) | (_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), int(8))), 0, 1), (_GLF_IDENTITY(ivec4(1, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (_GLF_IDENTITY(int(8), max(int(8), int(8))))))), 0, 1), (false ? _GLF_FUZZED(ivec4(-38443, -15486, 89715, 48140)) : ivec4(1, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) >> 0)), int(8))), 0, 1)))) - ivec4(0, 0, 0, 0))))))) : _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter, 7678))))))) == read_2))) + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-56449))))), 4, _GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, (64) - 0))), 4);
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))))))))) || false)))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))))))), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), false)), false, false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), max(vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))) : _GLF_FUZZED(vec2(-3.6, -35.23)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1039.6577), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), _GLF_FUZZED(-80.01)), bvec2(true, false)))[1], injectionSwitch[1]))))) + vec2(0.0, 0.0)).x > injectionSwitch.y, false)), ! (_GLF_IDENTITY(! (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(58.90, 1.2, -8.5, 775.987).z)), float(_GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y))), bool(true)))), bool(true))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))))) ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))) : _GLF_FUZZED(8.4))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))))), injectionSwitch.y))) - 0.0)) + 0.0), false))), bool(bool(! (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), abs(0.0), 1.0, 0.0, 1.0, log(1.0), 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0), _GLF_IDENTITY(mat2x4(mat2x4(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0))), (true ? mat2x4(mat2x4(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0))) : _GLF_FUZZED(mat2x4(-5.8, 6.7, 9.7, 394.501, -4004.2824, 14.08, 431.527, 749.750)))))), (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0), _GLF_IDENTITY(mat2x4(mat2x4(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0))), (true ? mat2x4(mat2x4(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0))) : _GLF_FUZZED(mat2x4(-5.8, 6.7, 9.7, 394.501, -4004.2824, 14.08, 431.527, 749.750))))))) + vec2(0.0, 0.0))).y), bool(true))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(true))), injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.92)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))) - 0.0), false)))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) - 0)) | (~ (1)))))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 1.0, abs(0.0), 1.0, exp(0.0), 1.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))).x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4312.8397) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-59.84)))))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))) && true))
  return;
}
