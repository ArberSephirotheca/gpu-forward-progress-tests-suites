#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-0.6 * 2121.3031)), _GLF_FUZZED(-62.82)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-62.11, 6.3)) : injectionSwitch)).y, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-62.11, 6.3)) : injectionSwitch)).y, 1.0, determinant(mat3(length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, log(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0)), mix(float(_GLF_FUZZED(-9.3)), float(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-62.11, 6.3)) : injectionSwitch)).y, 1.0, determinant(mat3(length(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, log(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0))), bool(true)))))))))));
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) / _GLF_IDENTITY(1, 0 | (1)), ((0) / 1) ^ 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) & ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))), (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1443.7055) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y)), max(_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1443.7055) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1443.7055) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y))) - 0), _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1443.7055) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1443.7055) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y))) >> 0))) & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((true ? int(_GLF_IDENTITY(4, (4) << 0)) : _GLF_FUZZED(findLSB(subgroup_size))), (true ? (true ? int(_GLF_IDENTITY(4, (4) << 0)) : _GLF_FUZZED(findLSB(subgroup_size))) : _GLF_FUZZED(bitfieldReverse(_injected_loop_counter)))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0))))), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), int(ivec2((_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), 0))), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) * 1)))) ^ 0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(4), int(4)))), int(ivec2(int(int(_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED(_injected_loop_counter) : clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0))))), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), int(ivec2((_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), 0))), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) * 1)))) ^ 0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(4), int(4)))), int(ivec2(int(int(_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY(int(4), int(4))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-63010)))), 0 ^ (int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-63010)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(576.115)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _injected_loop_counter)))) != (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0)) * 1), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, min(4, 4))), (~ (_GLF_IDENTITY(4, min(4, 4)))) - (0 << _GLF_IDENTITY(int(6), int(6)))))), max(4, _GLF_IDENTITY(4, 1 * (4)))))), int(ivec4(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))), 1, 0, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (-76953 & 0) | (1)))))))) >> _GLF_IDENTITY(int(4), int(4)))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), ~ (~ (int(8))))))), max(int(8), int(8)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), false, true, true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.9), _GLF_FUZZED(0.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))).y))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))) && true))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5191.6417), _GLF_FUZZED(18.98)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bvec4(_GLF_DEAD(false), true, true, false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bvec4(_GLF_DEAD(false), true, true, false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), true && (_GLF_IDENTITY(false || (_GLF_DEAD(false)), (_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false)))))) && true))))))), false, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, true && (false)))) || false)))))
        {
         for(int _injected_loop_counter = ((19819 & 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) - 0)) >> 0)), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) ^ 0) : _GLF_FUZZED(19420)))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))), true, true, false))), false, false, false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))))) : _GLF_FUZZED(injectionSwitch), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))))) : _GLF_FUZZED(injectionSwitch)) - abs(vec2(0.0, 0.0))))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))))) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / exp(vec2(0.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(-37.71)), bool(false)))), float(mat3x2(float(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(-37.71)), bool(false)))), 1.0, 0.0, 1.0, 0.0, 1.0)))))))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(-5216.8502)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))))) : _GLF_FUZZED(injectionSwitch)) - abs(vec2(0.0, 0.0))))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0)))) / exp(vec2(0.0, 0.0))).y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), ((1 & 1)) | ((1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * (injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), true, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), true, false)))))));
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(1727.7861))) > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))
          barrier();
         for(int _injected_loop_counter = ((_GLF_IDENTITY(0 & 25056, (0 & 25056) | (0 & 25056))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 | 0) | 1)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y)))))), true, true))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true)) || false); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(refract(5242.0043, 44.15, -84.92)) : injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(0.0) : dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))))) + (false ? _GLF_FUZZED(refract(5242.0043, 44.15, -84.92)) : injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       for(int _injected_loop_counter = (0 | int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 | 0), true && (_injected_loop_counter > (0 | 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((0 & -28088) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(1), (int(1)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) | 0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(5)) | 0, ((int(5)) | 0) ^ 0), 1, 1), (ivec3(_GLF_IDENTITY((int(5)) | 0, ((int(5)) | 0) ^ 0), 1, 1)) << ivec3(0, 0, 0)))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec3(_injected_loop_counter != 0, false, false)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), false, true, true))))))) || false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(bitCount(subgroup_local_id)))) != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (0 & -22164); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_local_id : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, _GLF_IDENTITY(uint(uint(num_workgroup)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(uint(num_workgroup)), (uint(uint(num_workgroup))) + 0u)))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(radians(log2(421.546))))), injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)))))))))) ^ 0u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)))))))))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)))))))))) ^ 0u)))) | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)))))))))) ^ 0u))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)))))))))) ^ 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)))))))))) ^ 0u))))) - 0u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | 0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))), _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(87848u))) * subgroup_size : _GLF_FUZZED(virtual_gid))))))))), 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(34493u) : 1u)), 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (0u ^ 1u), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) << 0u)))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))))))), 0u, 1u, 1u))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))), 1u * ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) - 0u))))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(_GLF_IDENTITY(uvec3(subgroup_id * subgroup_size, 1u, 0u), (_GLF_IDENTITY(uvec3(subgroup_id * subgroup_size, 1u, 0u), uvec3(uvec4(uvec3(subgroup_id * subgroup_size, 1u, 0u), 1u)))) | (_GLF_IDENTITY(uvec3(subgroup_id * subgroup_size, 1u, 0u), ~ (~ (uvec3(subgroup_id * subgroup_size, 1u, 0u)))))))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 1u), max(uvec2(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 1u), uvec2(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 1u)))), ~ (~ (uint(_GLF_IDENTITY(uvec2(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 1u), max(uvec2(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 1u), uvec2(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), 1u)))))))), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))))) | (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), max(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))))))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / _GLF_IDENTITY(1u, (1u) | (1u)))), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(_GLF_IDENTITY(uvec3(subgroup_id * subgroup_size, 1u, 0u), ~ (~ (uvec3(subgroup_id * subgroup_size, 1u, 0u)))))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | _GLF_IDENTITY(0u, (0u) / (1u | 0u))) / 1u))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(num_workgroup)))))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(_GLF_IDENTITY(uvec3(~ (subgroup_size), 0u, 0u), max(uvec3(~ (subgroup_size), 0u, 0u), uvec3(~ (subgroup_size), 0u, 0u)))))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), min(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))), uint(4u)))), 0u)))))))))), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(num_workgroup)))))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(_GLF_IDENTITY(uvec3(~ (subgroup_size), 0u, 0u), max(uvec3(~ (subgroup_size), 0u, 0u), uvec3(~ (subgroup_size), 0u, 0u)))))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), min(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))), uint(4u)))), 0u))))))))))) | ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(num_workgroup)))))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(_GLF_IDENTITY(uvec3(~ (subgroup_size), 0u, 0u), max(uvec3(~ (subgroup_size), 0u, 0u), uvec3(~ (subgroup_size), 0u, 0u)))))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), min(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))), uint(4u)))), 0u)))))))))))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size)), subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size)), _GLF_IDENTITY(uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size)))), (uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))))) + 0u))) | (subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, min(0u, 0u))))) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, ~ (~ (0u))), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)))) ^ (1u ^ 1u)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 0u, 1u, (1u & 1u)))) + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : subgroup_size)), subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u, (0u) | (0u))) << 0u) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u | (workgroup_base + subgroup_id * subgroup_size), 0u | (0u | (workgroup_base + subgroup_id * subgroup_size)))))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size))))), ~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size))))))))), 0u, 1u, 1u))))), 0u ^ ((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : subgroup_size)), subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u, (0u) | (0u))) << 0u) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u | (workgroup_base + subgroup_id * subgroup_size), 0u | (0u | (workgroup_base + subgroup_id * subgroup_size)))))))), 0u, 1u, 1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size))))), ~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size))))))))), 0u, 1u, 1u))))))) | (uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u, (0u) | (0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), clamp(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u)))))), 1u, 1u))) : _GLF_FUZZED(workgroup_base))), subgroup_size, subgroup_size))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)))))), 0u, 1u, 1u)))))) | 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u, (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), ((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))) ^ 0u), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) ^ 0u), 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, _GLF_IDENTITY(0u, (0u) | (0u))))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), 1u, 0u))), max((uint(_GLF_IDENTITY(uvec3(subgroup_id * subgroup_size, 1u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(subgroup_id * subgroup_size, 1u, 0u) : _GLF_FUZZED(uvec3(156268u, 175417u, 67580u)))))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u)), uint(uvec3(~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), ~ (~ (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size)))) / 1u)), 0u, 1u))), ~ (_GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u, min(_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u, _GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (_GLF_IDENTITY((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), max((uint(uvec3(subgroup_id * subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_id * subgroup_size, 1u, 0u)))))) | 0u) / 1u))))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (0u) / 1u)))), ~ (~ (_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))) / 1u) + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) - 0u), 0u, 0u)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)) | ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) : _GLF_FUZZED(subgroup_id))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)))) | 0u)))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), max(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size), ((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size)) | ((_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)) + subgroup_id * subgroup_size))) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size) | 0u), _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED((uvec3(161618u, 8089u, 55254u) , virtual_gid)))), workgroup_base)) + subgroup_id * subgroup_size))) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 1u), (true ? uvec3(0u, 1u, 1u) : _GLF_FUZZED(uvec3(122620u, 28920u, 52963u)))))))))))))))))) ^ 0u)))) | 0u))))) / 1u) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))) : _GLF_FUZZED(subgroup_local_id))), min((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_size)))) : subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(uvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), min((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(uvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(uvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), max((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(uvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(uvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), max((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size) * 1u), _GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size)), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : subgroup_size))) / 1u))), max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(num_workgroup) : subgroup_size)))), max(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))), clamp((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))), (subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size)))), max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uint((subgroup_local_id + 1))), max(uint(uint((subgroup_local_id + 1))), uint(uint((subgroup_local_id + 1)))))), 0u | ((subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : subgroup_size)))), _GLF_IDENTITY(max((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), 0u | (_GLF_IDENTITY(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), ~ (~ (max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, (0u) * 1u), 0u))), 0u, 1u))) + 1) % subgroup_size, min((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), (uint(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> (1u ^ 1u)) + 1), (subgroup_local_id + 1))))) ^ 0u)) | (_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))), _GLF_IDENTITY(0u, 0u ^ (0u)) ^ (uint(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))))))))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(70121u))), vec2(_GLF_FUZZED(55.63), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, (0u | 0u) + (subgroup_size)))), (_GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(float(70121u))), _GLF_IDENTITY(vec2(_GLF_FUZZED(55.63), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(55.63), (injectionSwitch)[1]), vec2(_GLF_FUZZED(55.63), (injectionSwitch)[1]))), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, (0u | 0u) + (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id)))))))))) / 1u))), max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))) / 1u);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (true)), true))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), mix(float(_GLF_FUZZED(0.6)), float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(5583.7619, 1.5, -9.2, -6912.7442).b), _GLF_FUZZED(41.73)), bvec2(false, false))).y, injectionSwitch.y))))), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((mat3x2(-0.6, -94.24, 0.0, 542.203, -2.4, 63.74) * vec3(-9.3, -7.5, 2.9))) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9473.3767, 3.3)) : injectionSwitch)).y, injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(281.678)), vec2(_GLF_FUZZED(-2.4), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(_GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), max(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))), min(injectionSwitch.y, injectionSwitch.y))))))))), (false ? _GLF_FUZZED(987.047) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), clamp((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), 0.0 + ((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (false ? _GLF_FUZZED(determinant(mat3(3.4, -6.6, -997.449, -77.41, -3.0, -0.2, -474.407, 89.56, 3.3))) : (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))))), bool(true))) - 0.0))))), bool(bvec4((_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), mix(float(_GLF_FUZZED(0.6)), float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), max((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (false ? _GLF_FUZZED(987.047) : (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))), bool(true))) - 0.0), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), mix(float(_GLF_FUZZED(0.6)), float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-3876.3971))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), max((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (false ? _GLF_FUZZED(987.047) : (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))), bool(true))) - 0.0)))))))), false, false, false)))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), 0 | (_GLF_IDENTITY(1, (1) / 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), 0 ^ (~ (_injected_loop_counter ++))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), bool(bvec4(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), false, false, false)))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), bool(bvec4(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), false, false, false)))), true, false))))))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true), false, true)))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(97.87))))))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch)))), max(vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch))))))))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, true))))), false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, true))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, true))))), false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, true))))))), true, true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), (_GLF_IDENTITY(int(2), (int(2)) | 0)) / 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))), true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))), true))))))))))))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
   int i = 0;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1773.7835), _GLF_FUZZED(8.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))) / 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(i))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, _GLF_IDENTITY(4, (4) >> 0));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (_GLF_IDENTITY(read_2, (read_2) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), (false ? _GLF_FUZZED(read_2) : _GLF_IDENTITY(read_2, ~ (~ _GLF_IDENTITY((read_2), 0u | ((read_2))))))), _GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (_GLF_IDENTITY(read_2, (read_2) | (read_2))))), max(_GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_2, ~ (~ (read_2))), 0u, 1u), (uvec3(_GLF_IDENTITY(read_2, ~ (~ (read_2))), 0u, 1u)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u))))), 0u ^ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_2, ~ _GLF_IDENTITY((~ (read_2)), ((~ (read_2))) >> 0u)), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 1u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 1u * (0u)))), 1u), min(uvec4(0u, 1u, 0u, 1u), uvec4(0u, 1u, 0u, 1u))))), 0u)), 1u), (uvec3(_GLF_IDENTITY(read_2, ~ _GLF_IDENTITY((~ (read_2)), ((~ (read_2))) | ((~ (read_2))))), 0u, 1u)) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) | (~ ((uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u)))))))))), ((uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_2, ~ _GLF_IDENTITY((~ (read_2)), ((~ (_GLF_IDENTITY(read_2, 0u | (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))) / 1u)))))) >> 0u)), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 1u, 0u, 1u), min(uvec4(0u, _GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(0u, (0u) ^ (0u | 0u)), _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(num_workgroup) : ~ (1u)))))), uvec4(0u, 1u, 0u, 1u))))), 0u)), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), (true ? _GLF_IDENTITY(read_2, ~ (~ (read_2))) : _GLF_FUZZED((subgroup_size / workgroup_size)))), 0u, 1u), uvec3(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_2, ~ (~ (read_2))), 0u, 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), min(_GLF_IDENTITY(read_2, ~ (~ (read_2))), _GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), clamp(_GLF_IDENTITY(read_2, ~ (~ (read_2))), _GLF_IDENTITY(read_2, ~ (~ (read_2))), _GLF_IDENTITY(read_2, ~ (~ (read_2))))))), 0u, 1u)) << uvec3(0u, 0u, 0u)))))) >> uvec3(0u, 0u, 0u))))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), uint(uvec4(_GLF_IDENTITY(read_2, ~ (~ (read_2))), 1u, 1u, 1u))))))), read_2))) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3352.7795), _GLF_FUZZED(-3.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0)))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.1)), bool(false)))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5991.4317) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 1.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 1.0))))) > injectionSwitch.y)))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))), false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), false || (! (_GLF_IDENTITY(true, (true) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bool(! _GLF_IDENTITY(((true) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec4(bvec3(bvec3(true, false, false)), false)))))))), (((true) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec4(bvec3(bvec3(true, false, false)), false))))))))) || false)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), false || (! (_GLF_IDENTITY(true, (true) && true))))))))))))))) && true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), bool(bool(bool((false))))))))))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))), (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
}
