#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid;
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z = subgroup_id;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
 uint workgroup_base = GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.w * GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.z;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * subgroup_size + subgroup_local_id;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.w = virtual_gid;
 GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.y = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.w;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.y], 4, 64, 0);
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.y], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.x = read_2;
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x], uint(read_1 + 1 == GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.x) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x], uint(read_1 + 1 == GLF_merged4_0_1_6_1_1_11_2_1_12_3_1_14read_2virtual_gidworkgroup_idworkgroup_size.x) + 1, 4, 64, 4);
  }
}
