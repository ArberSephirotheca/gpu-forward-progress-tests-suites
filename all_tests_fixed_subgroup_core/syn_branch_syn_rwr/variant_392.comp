#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.8, 5238.2883)) : injectionSwitch)))).y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(7844.1630)), bool(false)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-68016) : 0))], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(7844.1630)), bool(false))))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), true))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), sqrt(abs(1.0)), 0.0)), min(vec2(mat2(injectionSwitch, sqrt(abs(1.0)), 0.0)), vec2(mat2(injectionSwitch, sqrt(abs(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-2084.4497, 910.241, -7.6, -3.7, 269.255, -7.0)) : mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0)))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-2084.4497, 910.241, -7.6, -3.7, 269.255, -7.0)) : mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0)))), clamp(float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-2084.4497, 910.241, -7.6, -3.7, 269.255, -7.0)) : mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-2084.4497, 910.241, -7.6, -3.7, 269.255, -7.0)) : mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-2084.4497, 910.241, -7.6, -3.7, 269.255, -7.0)) : mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0)))))), float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-2084.4497, 910.241, -7.6, -3.7, 269.255, -7.0)) : mat2x3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0))))))))), 0.0))))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false), true), true, false)))))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), false || ((! (_GLF_IDENTITY(false, true && (false))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(701.186))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), min(vec3(injectionSwitch.x, 0.0, 0.0), vec3(injectionSwitch.x, 0.0, 0.0)))), max(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), min(vec3(injectionSwitch.x, 0.0, 0.0), vec3(injectionSwitch.x, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), min(vec3(injectionSwitch.x, 0.0, 0.0), vec3(injectionSwitch.x, 0.0, 0.0)))), (float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), min(vec3(injectionSwitch.x, 0.0, 0.0), vec3(injectionSwitch.x, 0.0, 0.0))))) - 0.0)))) > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), sqrt(abs(0.0)) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.01), _GLF_FUZZED(float(25438u))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), abs(0.0), 0.0))).x, (injectionSwitch.x) - 0.0)), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.01), _GLF_FUZZED(float(25438u))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), abs(0.0), 0.0))).x, (injectionSwitch.x) - 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.01), _GLF_FUZZED(float(25438u))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), abs(0.0), 0.0))).x, (injectionSwitch.x) - 0.0))))) > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))) || false)))))), ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))) && true)))))), ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-63.61, -3.0)))).y))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(-41.02)), float((injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) + 0.0) > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))))), false || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))) && true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((691.150 * -6462.6311))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))))))) || false))))) && true)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
      return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
           return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y))) || false)));
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false, true, false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, abs(abs(1.0)), 1.0, sqrt(1.0), 0.0, 1.0, 0.0)), mix(vec2(_GLF_FUZZED(3.0), _GLF_FUZZED(-9778.7007)), vec2(_GLF_IDENTITY((vec2(mat2x4(injectionSwitch, abs(abs(1.0)), 1.0, sqrt(1.0), 0.0, 1.0, 0.0)))[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.0) : (vec2(mat2x4(injectionSwitch, abs(abs(1.0)), 1.0, sqrt(1.0), 0.0, 1.0, 0.0)))[0])), (vec2(mat2x4(injectionSwitch, abs(abs(1.0)), 1.0, sqrt(1.0), 0.0, 1.0, 0.0)))[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))), true)))).y))))
        barrier();
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, tan(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(false))), float(1.0), bool(true))), abs(1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0))))).y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1, max(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1, ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1))), int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true))))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), false || (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u))) | (subgroup_local_id)) + 1, (subgroup_local_id + 1) ^ 0u)) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) >> _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) | (0u)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), min(uvec4(_GLF_IDENTITY(0u, (0u) | (0u)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), uvec4(_GLF_IDENTITY(0u, (0u) | (0u)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))))))), 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) / 1));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   int i = 0;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, sin(_GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * mat2(1.0))) + (injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                  continue;
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (1 ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))), ~ (~ (1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), int(int(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))), int(1)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec4(int(1), 1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) / 1)) | 0)))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1, 0, 0))) + (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))))), _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))), 0u), _GLF_IDENTITY(clamp(uvec2(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + 1 == read_2) && true)) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) * 1)), 0u)), max(clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((1)) * 1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | 0))), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)), clamp(uvec2(uint(_GLF_IDENTITY(read_1 + 1, 0u ^ (_GLF_IDENTITY(read_1 + 1, 0u | (read_1 + 1)))) == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (read_1 + 1)) == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(read_2) : read_2))) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, true, true, false)))) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (1) | (1)), 0u))))))), _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, ~ (~ (uint(read_1 + 1 == read_2) + 1))), _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (uint(read_1 + 1 == read_2) + 1) << 0u))), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, _GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(read_1), min(_GLF_IDENTITY(uint(read_1), min(uint(read_1), uint(read_1))), uint(read_1)))), clamp(uint(_GLF_IDENTITY(uint(read_1), min(_GLF_IDENTITY(uint(read_1), min(uint(read_1), uint(read_1))), uint(read_1)))), uint(_GLF_IDENTITY(uint(read_1), min(_GLF_IDENTITY(uint(read_1), min(uint(read_1), uint(read_1))), uint(read_1)))), uint(_GLF_IDENTITY(uint(read_1), min(_GLF_IDENTITY(uint(read_1), min(uint(read_1), uint(read_1))), uint(read_1))))))) + 1, read_1 + 1)))) == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), 0 | ((1))))) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, min(uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)), min(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)), _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 0)))) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (read_1 + 1 == read_2)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec3((1), 1, 1)), (int(ivec3((1), 1, 1))) + 0)) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1))))), (max(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x)) + (_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)))) == read_2) + 1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), max((1) | (1), (1) | (1)))), 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(3u), uvec2(3u))) + (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), max((1) | (1), (1) | (1)))), 0u))), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | 0) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, min(uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) | (1)), 0u), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)), min(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (89181 & 0) ^ ((1) | (1)))), 0u))))), uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)), _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(_GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(0u, 0u ^ (0u))), clamp(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), _GLF_IDENTITY(uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u), (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 0)), max(int(ivec3(1, 1, 0)), int(ivec3(1, 1, 0))))), (1) | (1)), 0u)) | (uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))), uvec2(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, (1) | (1)), 0u))))), uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1)))))) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), 0u ^ (uint(read_1 + 1 == read_2))) + 1, (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, true && (read_1 + 1 == read_2))) + 1, min(uint(read_1 + 1 == read_2) + 1, uint(read_1 + 1 == read_2) + 1))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, max(uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (uint(read_1 + 1 == read_2) + 1) | 0u))), (uint(read_1 + 1 == read_2) + 1) >> 0u))), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           break;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), true, true)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true)), bool(bvec3(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true)), false, false))))) && true)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              barrier();
             return;
            }
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, sin(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (true ? dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)) : _GLF_FUZZED(709.137))))))) > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (false ? _GLF_FUZZED(workgroup_size) : uint(read_1 + 1 == read_2))), 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(uvec4(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (false ? _GLF_FUZZED(workgroup_size) : uint(read_1 + 1 == read_2))), 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec4(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (false ? _GLF_FUZZED(workgroup_size) : uint(read_1 + 1 == read_2))), 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), (uint(read_1 + 1 == read_2)) ^ 0u), uint(uvec2(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) ^ 0u), (1u ^ 0u))))) | (0u | (0u ^ 0u))) + 1, 4, 64, 4);
  }
}
