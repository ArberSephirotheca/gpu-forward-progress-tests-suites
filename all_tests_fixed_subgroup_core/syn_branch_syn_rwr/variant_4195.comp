#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 uint num_workgroup;
 uvec2 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_0 {
 uint subgroup_local_id;
 bvec4 _f0;
 mat3x4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))) || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(65.18))))) > injectionSwitch.y))))) || false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(28439))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupInvocationID, bvec4(true), mat3x4(1.0));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           return;
          }
        }
       barrier();
      }
     return;
    }
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x, uvec2(_GLF_IDENTITY(1u, 0u ^ (1u))), mat2x3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat2x3(712.446, -1.4, -902.877, 350.373, -58.74, 3625.8861)) : mat2x3(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0))))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         return;
        }
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size, _GLF_IDENTITY((true ? workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size : _GLF_FUZZED(166575u)), (_GLF_IDENTITY((true ? workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size : _GLF_FUZZED(166575u)), ((true ? workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size : _GLF_FUZZED(166575u))) + 0u)) + 0u)) + ((_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, min(_GLF_struct_replacement_0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, clamp(_GLF_struct_replacement_0.subgroup_local_id, _GLF_struct_replacement_0.subgroup_local_id, _GLF_struct_replacement_0.subgroup_local_id)))) + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, cos(0.0), 1.0, 0.0, 0.0)), (float(mat2x3(injectionSwitch.x, 1.0, cos(0.0), 1.0, 0.0, 0.0))) * 1.0)) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, 0u | (read_1)) + 1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(839.119) : 0.0)))), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(float(determinant(mat3(0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec2(8255.4609, 2272.4944).s)), bool(false))), 0.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.4) : 0.0)), injectionSwitch.x), 0.0, 0.0))), (true ? float(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) : _GLF_FUZZED(-1.1)))), max(float(_GLF_IDENTITY(float(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.4) : 0.0)), injectionSwitch.x), _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0))), (true ? float(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) : _GLF_FUZZED(-1.1)))), float(_GLF_IDENTITY(float(determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0)))) - 0.0), 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.4) : 0.0)), injectionSwitch.x), 0.0, 0.0))), (true ? float(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) : _GLF_FUZZED(-1.1)))))), (float(_GLF_IDENTITY(float(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))), (true ? float(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) : _GLF_FUZZED(-1.1))))) / 1.0)), 1.0), vec4(0.0, 0.0, 0.0, 0.0) + _GLF_IDENTITY(_GLF_IDENTITY((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)), mix(vec4(((_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0) : _GLF_FUZZED(vec4(-2.8, 1879.7700, -0.0, -5.3))))))[0], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[1], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[2], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[3]), vec4(_GLF_FUZZED(-46.94), _GLF_FUZZED(-23.99), _GLF_FUZZED(-6216.6836), _GLF_FUZZED(-70.13)), bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), false, false, false))), vec4(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)), _GLF_IDENTITY(mix(vec4(((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[0], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[1], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[2], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[3]), vec4(_GLF_FUZZED(-46.94), _GLF_FUZZED(-23.99), _GLF_FUZZED(-6216.6836), _GLF_FUZZED(-70.13)), bvec4(false, false, false, false)), (false ? _GLF_FUZZED((+ vec4(-8.0, -7224.7695, 14.63, 0.2))) : mix(vec4(((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[0], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[1], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[2], ((vec4(injectionSwitch.x, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), float(mat4x3(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 0.0, 1.0)))) - 0.0), 1.0)))[3]), vec4(_GLF_FUZZED(-46.94), _GLF_FUZZED(-23.99), _GLF_FUZZED(-6216.6836), _GLF_FUZZED(-70.13)), bvec4(false, false, false, false))))), 0.0, 0.0, abs(cos(0.0)), 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(_GLF_IDENTITY((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)), mix(vec4(((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[0], ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))[1], _GLF_IDENTITY(_GLF_IDENTITY(((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0))), (((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))) + vec4(0.0, 0.0, 0.0, 0.0))[2], (_GLF_IDENTITY(((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0))), (((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0)))) + vec4(0.0, 0.0, 0.0, 0.0))[2]) - 0.0), ((vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), 0.0, 0.0)), 1.0)))[3]), vec4(_GLF_FUZZED(-46.94), _GLF_IDENTITY(_GLF_FUZZED(-23.99), min(_GLF_IDENTITY(_GLF_FUZZED(-23.99), (_GLF_FUZZED(-23.99)) / 1.0), _GLF_FUZZED(-23.99))), _GLF_FUZZED(-6216.6836), _GLF_FUZZED(-70.13)), bvec4(false, false, false, false))), 0.0, 0.0, abs(cos(0.0)), 1.0, 0.0, 0.0, 1.0, 0.0)) - mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0), vec4(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0), max(vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(827.073)), bool(false))), 0.0, 0.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))), vec4(injectionSwitch.x, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), 1.0))))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, ((1 ^ 1) | 0) ^ (1)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(360.681)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), bool(bvec3(_GLF_IDENTITY(bool(true), (bool(true)) && true), false, true))))) > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   for(int _injected_loop_counter = (0 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), 0 | (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(_injected_loop_counter)))))) / 1))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) << (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).x) / 1.0))) | 0u))], 4, 64, 0);
 if(_GLF_struct_replacement_0.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(55191)))) << 0) < _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))) | ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), 0u ^ (_GLF_IDENTITY(uint(5u), uint(5u))))))) * _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))), clamp(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))), (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))) / 1u), _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ! (! ((! (! (false)))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
      }
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))) / 1) > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) + 0u)) - 0u)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (_GLF_IDENTITY(read_1 + 1, 0u | (read_1 + 1)))))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, (1) | (1))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ _GLF_IDENTITY((read_1 + 1), ~ (~ (_GLF_IDENTITY((read_1 + 1), ~ (_GLF_IDENTITY(~ ((read_1 + 1)), (~ ((read_1 + 1))) ^ 0u)))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, clamp(1, 1, 1))), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))), 0u + ((_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ _GLF_IDENTITY((read_1 + 1), ((read_1 + 1)) >> 0u)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))) == read_2, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, _GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)), (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))), ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)))))) | ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) << uvec2(0u, 0u)) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1))) * 1u))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (_GLF_IDENTITY(43925u, (43925u) | 0u) & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(uint(5u), uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) + 0u))), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))) == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))), ((0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))) ^ 0u)) >> 0u))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))), (1u ^ 0u) * (~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))), (true ? ~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))) : _GLF_FUZZED(virtual_gid)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (_GLF_IDENTITY(~ (read_1 + 1), min(~ (read_1 + 1), ~ (read_1 + 1))))), uint(uvec2(~ (read_1 + 1), 0u))))))))) == read_2, bool(bvec4(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | _GLF_IDENTITY((~ (read_1 + 1)), ((~ (read_1 + 1))) / ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), uint(uvec2(uint(7u), 0u))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, uint(uint(read_1))))))) + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, 1u * (read_1 + 1))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(5u), uint(5u)), max(0u << _GLF_IDENTITY(uint(5u), uint(5u)), 0u << _GLF_IDENTITY(uint(5u), uint(5u))))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))), clamp(_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))), max(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))), uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))), 0u | (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1))))))))))), uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))) + 0u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1)) : _GLF_FUZZED(uint(4.7))))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(next_virtual_gid)))) | (_GLF_IDENTITY(read_1, clamp(read_1, read_1, read_1)))), max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((read_1 + 1), ((read_1 + 1)) | 0u), uint(uvec2(~ (read_1 + 1), 0u))))))))) == read_2, true, false, false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))), clamp(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))), _GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))), 1u * (_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))))))) == read_2, bool(bvec4(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ (read_1 + 1)), ~ (~ ((_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (~ (read_1 + 1)))) | (~ _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u))))), max(~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u))))), ~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), (read_1 + 1) + (43925u & 0u)))))))), ((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), ((~ (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | 0), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(read_1 + 1, 0u), uvec2(0u, 0u) | (uvec2(read_1 + 1, 0u)))))) + (43925u & 0u))))))) >> 0u) | (~ (read_1 + 1)))))), (uint(uint((_GLF_IDENTITY(~ (read_1 + 1), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(read_1, read_1)) + 1, (0u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (0u | 0u) ^ (uint(5u))))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u)))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(5u), uint(5u)), 0u | (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))), max(((~ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(5u), uint(5u)), 0u | (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))), ((~ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(5u), uint(5u)), 0u | (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) ^ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + (43925u & 0u))))))))) >> 0u) | (~ (read_1 + _GLF_IDENTITY(1, ~ (~ (1)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (~ (read_1 + 1))) | ((_GLF_IDENTITY(~ (read_1 + 1), (_GLF_IDENTITY(~ (read_1 + 1), ~ (~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(1, (1) | (1))))))) | (~ (read_1 + 1)))) | (_GLF_IDENTITY(~ (read_1 + 1), uint(uvec2(~ (read_1 + 1), 0u))))))))) == read_2, true, false, false)))), true, false))))))))) + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) * 1))))), min(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, 0 ^ (1)))), (true ? (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (1))), clamp((_GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY(1, 0 ^ (1))), _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (1))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1, 0 ^ (1)))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ ((_GLF_IDENTITY(1, 0 ^ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter))), (~ (_GLF_IDENTITY(1, 0 ^ (1)))))), ((~ (_GLF_IDENTITY(1, 0 ^ (1))))) / 1))) << _GLF_IDENTITY(0, (0) + 0), 0 ^ ((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))), min(~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))), ~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))))))) << _GLF_IDENTITY(0, (0) + 0)))), 4, 64, 4);
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), min(int(8), int(8))))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8)))))) && true)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(132.953)), float(injectionSwitch.y), bool(true)))) || false))))))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == _GLF_IDENTITY(read_2, max(read_2, read_2))) + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), 1)), 1)), 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, min(64, 64)))), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))), ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) / 1.0)))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, false)))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), true))), bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), true)))))))))), true, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), _GLF_IDENTITY(false, false || (false))), bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(456.709)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(456.709)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(false, false || (false))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))), true), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))), true), false, true)), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), _GLF_IDENTITY(true, ! (! (true))))), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), true), false), true))))))), true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
}
