#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.y = subgroup_id;
uint subgroup_size = 16;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.w = workgroup_size;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.w;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y * workgroup_id;
 GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.z = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.z + GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.y * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.z + GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.y * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.x = read_2;
 if(subgroup_local_id + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.x) + 1, 4, 64, 4);
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 73:
     mat4x3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[47];
     case 7:
     while((inverse(mat2(3.4, -0.7, -920.706, -5.0)) == mat2(mat4x2(7.5, -730.525, 921.773, 9016.2413, -4633.9946, -8272.6471, -1297.7996, 0.0))))
      {
       {
       }
       (next_virtual_gid , (uvec4(36074u, 106979u, 58104u, 197090u) << GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.y));
       uint _GLF_SWITCH_0_3v[59], _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
       mat2x4(-4.3, 11.62, -593.167, -5.1, -2.0, -84.32, -3.4, 9081.1452);
      }
     case 0:
     case 75:
     case 8:
     case 78:
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == GLF_merged4_0_1_6_1_1_11_2_1_14_3_1_14read_2subgroup_idworkgroup_baseworkgroup_size.x) + 1, 4, 64, 4);
     break;
     default:
     1;
    }
  }
}
