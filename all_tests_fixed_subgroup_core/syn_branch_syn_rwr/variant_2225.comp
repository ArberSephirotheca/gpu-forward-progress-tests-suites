#version 460
struct _GLF_struct_47 {
 vec2 _f0;
} ;

struct _GLF_struct_46 {
 mat4x2 _f0;
 vec3 _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 bvec2 _f4;
 int _f5;
} ;

struct _GLF_struct_45 {
 mat3x4 _f0;
 mat4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_44 {
 uint _f0;
} ;

struct _GLF_struct_43 {
 mat3x2 _f0;
 bvec3 _f1;
 mat3x2 _f2;
 uint _f3;
} ;

struct _GLF_struct_48 {
 _GLF_struct_43 _f0;
 _GLF_struct_44 _f1;
 ivec2 _f2;
 _GLF_struct_45 _f3;
 bvec4 _f4;
 _GLF_struct_46 _f5;
 int i;
 _GLF_struct_47 _f6;
} ;

struct _GLF_struct_41 {
 mat3x2 _f0;
 uint _f1;
 ivec4 _f2;
 bvec3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_40 {
 uvec2 _f0;
 vec3 _f1;
 bvec2 _f2;
 int _f3;
 int _f4;
 mat2x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_42 {
 mat3x2 _f0;
 mat2 _f1;
 _GLF_struct_40 _f2;
 _GLF_struct_41 _f3;
 ivec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_49 {
 bvec4 _f0;
 _GLF_struct_42 _f1;
 _GLF_struct_48 _f2;
} ;

struct _GLF_struct_37 {
 bool _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_36 {
 mat4x3 _f0;
} ;

struct _GLF_struct_35 {
 mat4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_38 {
 bvec3 _f0;
 _GLF_struct_35 _f1;
 _GLF_struct_36 _f2;
 _GLF_struct_37 _f3;
} ;

struct _GLF_struct_33 {
 bvec4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_32 {
 ivec3 _f0;
 uvec4 _f1;
 mat2x4 _f2;
 ivec2 _f3;
 bvec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_31 {
 mat3 _f0;
} ;

struct _GLF_struct_34 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
 _GLF_struct_33 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_39 {
 _GLF_struct_34 _f0;
 int _f1;
 _GLF_struct_38 _f2;
 uint virtual_gid;
} ;

struct _GLF_struct_29 {
 bvec2 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 ivec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_27 {
 mat4x2 _f0;
 float _f1;
} ;

struct _GLF_struct_26 {
 mat3x4 _f0;
 bvec2 _f1;
 mat2x3 _f2;
 uvec3 _f3;
 mat2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_25 {
 mat3x2 _f0;
 vec4 _f1;
 vec4 _f2;
 bvec4 _f3;
 bvec2 _f4;
 mat3 _f5;
 bool _f6;
} ;

struct _GLF_struct_28 {
 bool _f0;
 _GLF_struct_25 _f1;
 ivec3 _f2;
 ivec2 _f3;
 _GLF_struct_26 _f4;
 _GLF_struct_27 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_23 {
 bvec4 _f0;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_24 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 float _f2;
} ;

struct _GLF_struct_20 {
 float _f0;
 bvec2 _f1;
 int _f2;
 vec3 _f3;
 uvec2 _f4;
 mat3x2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_21 {
 mat2 _f0;
 _GLF_struct_20 _f1;
} ;

struct _GLF_struct_18 {
 uint _f0;
 vec4 _f1;
 float _f2;
 uvec4 _f3;
 uvec3 _f4;
 ivec3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_18 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_30 {
 _GLF_struct_19 _f0;
 bvec2 _f1;
 uint workgroup_size;
 _GLF_struct_21 _f2;
 _GLF_struct_24 _f3;
 _GLF_struct_28 _f4;
 _GLF_struct_29 _f5;
} ;

struct _GLF_struct_15 {
 mat2 _f0;
 uvec3 _f1;
 int _f2;
 mat3 _f3;
 mat4x3 _f4;
 ivec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_14 {
 ivec4 _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 mat2 _f1;
 uvec4 _f2;
 uvec4 _f3;
 _GLF_struct_15 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 ivec2 _f1;
 bool _f2;
 vec4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_17 {
 _GLF_struct_13 _f0;
 uint subgroup_size;
 _GLF_struct_16 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 uint workgroup_base;
 mat2 _f1;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 bool _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 vec2 _f1;
 mat4 _f2;
 mat4x2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 ivec3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 mat3x2 _f1;
 bool _f2;
 mat4x3 _f3;
 uvec4 _f4;
 ivec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 bool _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_4 _f0;
 mat3x4 _f1;
 _GLF_struct_5 _f2;
 uint _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_9 _f5;
 uint workgroup_id;
 ivec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_13(_GLF_struct_12(vec2(1.0), ivec2(1), true, vec4(1.0), mat2(1.0))), gl_SubgroupSize, _GLF_struct_16(_GLF_struct_14(ivec4(1)), mat2(1.0), uvec4(1u), uvec4(1u), _GLF_struct_15(mat2(1.0), uvec3(1u), 1, mat3(1.0), mat4x3(1.0), ivec3(1), uvec3(1u)), vec2(1.0)), mat4x2(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(_GLF_struct_19(_GLF_struct_18(1u, vec4(1.0), 1.0, uvec4(1u), uvec3(1u), ivec3(1), vec4(1.0)), ivec3(1)), bvec2(true), gl_WorkGroupSize.x, _GLF_struct_21(mat2(1.0), _GLF_struct_20(1.0, bvec2(true), 1, vec3(1.0), uvec2(1u), mat3x2(1.0), bvec2(true))), _GLF_struct_24(_GLF_struct_22(bvec4(true), mat3x4(1.0)), _GLF_struct_23(bvec4(true)), 1.0), _GLF_struct_28(true, _GLF_struct_25(mat3x2(1.0), vec4(1.0), vec4(1.0), bvec4(true), bvec2(true), mat3(1.0), true), ivec3(1), ivec2(1), _GLF_struct_26(mat3x4(1.0), bvec2(true), mat2x3(1.0), uvec3(1u), mat2(1.0), uvec3(1u)), _GLF_struct_27(mat4x2(1.0), 1.0), mat4(1.0)), _GLF_struct_29(bvec2(true), mat2x3(1.0), uvec3(1u), ivec3(1), mat4x3(1.0)));
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_4(uvec4(1u), _GLF_struct_0(uvec3(1u), mat3x2(1.0), true, mat4x3(1.0), uvec4(1u), ivec2(1), ivec4(1)), _GLF_struct_1(ivec2(1), ivec2(1), mat4x2(1.0), ivec3(1), bvec3(true)), _GLF_struct_2(mat3x2(1.0), bvec4(true)), _GLF_struct_3(mat2(1.0)), true), mat3x4(1.0), _GLF_struct_5(mat4(1.0)), 1u, _GLF_struct_7(_GLF_struct_6(mat3x4(1.0), vec2(1.0), mat4(1.0), mat4x2(1.0), mat2(1.0))), _GLF_struct_9(ivec4(1), _GLF_struct_8(vec3(1.0), bvec4(true), mat2x4(1.0), true, mat2x4(1.0))), gl_WorkGroupID.x, ivec2(1));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat3x4(1.0), _GLF_struct_replacement_30.workgroup_size * _GLF_struct_replacement_10.workgroup_id, mat2(1.0));
 _GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(_GLF_struct_34(_GLF_struct_31(mat3(1.0)), _GLF_struct_32(ivec3(1), uvec4(1u), mat2x4(1.0), ivec2(1), bvec2(true), uvec3(1u)), _GLF_struct_33(bvec4(true), mat4x3(1.0)), mat4x2(1.0)), 1, _GLF_struct_38(bvec3(true), _GLF_struct_35(mat4(1.0), ivec4(1)), _GLF_struct_36(mat4x3(1.0)), _GLF_struct_37(true, mat4x2(1.0))), _GLF_struct_replacement_11.workgroup_base + subgroup_id * _GLF_struct_replacement_17.subgroup_size + subgroup_local_id);
 uint next_virtual_gid = _GLF_struct_replacement_11.workgroup_base + subgroup_id * _GLF_struct_replacement_17.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_17.subgroup_size);
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_39.virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_39.virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_17.subgroup_size)
  {
   _GLF_struct_49 _GLF_struct_replacement_49 = _GLF_struct_49(bvec4(true), _GLF_struct_42(mat3x2(1.0), mat2(1.0), _GLF_struct_40(uvec2(1u), vec3(1.0), bvec2(true), 1, 1, mat2x4(1.0), mat3x2(1.0)), _GLF_struct_41(mat3x2(1.0), 1u, ivec4(1), bvec3(true), bvec3(true)), ivec3(1), bvec3(true)), _GLF_struct_48(_GLF_struct_43(mat3x2(1.0), bvec3(true), mat3x2(1.0), 1u), _GLF_struct_44(1u), ivec2(1), _GLF_struct_45(mat3x4(1.0), mat4(1.0), mat2x4(1.0)), bvec4(true), _GLF_struct_46(mat4x2(1.0), vec3(1.0), mat2x3(1.0), mat4x3(1.0), bvec2(true), 1), 0, _GLF_struct_47(vec2(1.0))));
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
}
