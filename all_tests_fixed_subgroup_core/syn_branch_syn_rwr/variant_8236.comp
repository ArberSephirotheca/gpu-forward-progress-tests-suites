#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 uvec4 _f0;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 bvec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 ivec3 _f1;
 bvec4 _f2;
 _GLF_struct_1 _f3;
 bvec2 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(_GLF_struct_0(ivec4(1), bvec3(true), mat2(1.0)), ivec3(1), bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))), (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))))), ((! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))) || false))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))), false || (true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))), bool(bvec2((bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))), _GLF_IDENTITY(bool(bool((bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))))), bool(bool(bool(bool((bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))))))))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), true, false, true)))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(93.61)), float(injectionSwitch.x), bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(93.61)), float(injectionSwitch.x), bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true))), _GLF_IDENTITY(false, (false) || false), false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true))), false, false, true))), bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true))), false, false, true))), true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))))))) || false), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true)))))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true)))))))), ((! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)) || false))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true))), false, false, true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-406.721)), bool(false))) < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))))))))))), ! (! (! ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true), false || (_GLF_IDENTITY(true, bool(bool(true)))))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (true)), ! (! (true))), false, false, true))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)))))) && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))))))))), false, false, true))))))))))))))))) || false)), _GLF_struct_1(uvec2(1u)), bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (true)), ((! (true))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY((! (true)), ((! (true))) || false), true)))))), _GLF_IDENTITY(((! (true))), bool(bvec2(_GLF_IDENTITY(((! (true))), bool(bvec2(((! (true))), true))), false))) && true), (! (! (true))) || false)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ((! (true))) && true), (! (! (true))) || false)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ((! (true))) && true), (! (! (true))) || false)))))))), (bool(bool(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ((! (true))) && true), (! (! (true))) || false))))))))) && true), bool(bool(_GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ((! (true))) && true), (! (! (true))) || false)))))))), (bool(bool(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ((! (true))) && true), (! (! (true))) || false))))))))) && true))))))))))), _GLF_struct_2(uvec4(1u))), gl_SubgroupInvocationID);
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) - uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) - uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), clamp(_GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ ((gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))), (gl_NumWorkGroups) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), (true ? (gl_NumWorkGroups) / uvec3(1u, 1u, 1u) : _GLF_FUZZED((uvec3(113657u, 193269u, 140173u) ^ uvec3(15345u, 150522u, 35933u)))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) - uvec3(0u, 0u, 0u)))))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5790.6510), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], sin(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, cos(0.0))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-769.936)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true)))))
              continue;
             if(_GLF_DEAD(false))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_4.subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (18945 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_struct_replacement_4.subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_struct_replacement_4.subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(22004))))))))) % subgroup_size)) ^ 0u, (false ? _GLF_FUZZED((76105u >> atomicMin(workgroup_id, workgroup_id))) : (((_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, (_GLF_struct_replacement_4.subgroup_local_id + 1) * 1u)) | (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_struct_replacement_4.subgroup_local_id + 1))))))))) % subgroup_size)) ^ 0u))), (_GLF_IDENTITY(((_GLF_struct_replacement_4.subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_struct_replacement_4.subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(22004))))))))) % subgroup_size)) ^ 0u, _GLF_IDENTITY((false ? _GLF_FUZZED((76105u >> atomicMin(workgroup_id, workgroup_id))) : (((_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, (_GLF_struct_replacement_4.subgroup_local_id + 1) * 1u)) | (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_struct_replacement_4.subgroup_local_id + 1))))))))) % subgroup_size)) ^ 0u), ((false ? _GLF_FUZZED((76105u >> atomicMin(workgroup_id, workgroup_id))) : (((_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, (_GLF_struct_replacement_4.subgroup_local_id + 1) * 1u)) | (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_4.subgroup_local_id + 1, ~ (~ (_GLF_struct_replacement_4.subgroup_local_id + 1))))))))) % subgroup_size)) ^ 0u)) / 1u)))) / 1u);
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))) || false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(82487))));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (0 << _GLF_IDENTITY(int(8), int(8))) | (64)), _GLF_IDENTITY(0, (0) | 0));
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(8), int(8))) & 7470); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_struct_replacement_4.subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(50.99)), _GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))) && true)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(read_1 + 1 == read_2)), (_GLF_IDENTITY((uint(read_1 + 1 == read_2)), ~ (~ ((uint(read_1 + 1 == read_2)))))) << 0u) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(read_1 + 1 == read_2)), clamp(_GLF_IDENTITY((uint(read_1 + 1 == read_2)), ((uint(read_1 + 1 == read_2))) >> 0u), (uint(read_1 + 1 == read_2)), (uint(read_1 + 1 == read_2)))) + 0u), max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == _GLF_IDENTITY(read_2, min(read_2, read_2)))) + 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u)))), (_GLF_IDENTITY(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec3(read_1 + 1 == read_2, true, true))))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u), max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u)))), uint(uvec4(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + 0u), max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) + _GLF_IDENTITY(0u, 0u + (0u))), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (read_1 + 1 == read_2))))) + 0u)))), 0u, 0u, 1u)))) >> 0u)) + 1, 4, 64, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, _GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(4, 0, 0, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0) ^ 0), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), clamp(_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) ^ 0), (1 ^ 0), (1 ^ 0))), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), _GLF_IDENTITY(ivec2(1, 1), (false ? _GLF_FUZZED(ivec2(13342, -10071)) : ivec2(1, 1))), ivec2(1, 1))))) ^ 0), ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), _GLF_IDENTITY(ivec2(1, 1), (false ? _GLF_FUZZED(ivec2(13342, -10071)) : ivec2(1, 1))), ivec2(1, 1))))) ^ 0)) >> 0), ((1 ^ 0)) | ((1 ^ 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) ^ 0, (1 ^ 0) + 0)), ((1 ^ 0)) | ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) ^ 0))), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | ((1 ^ 0))))))))) * 1), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)), 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1)), min(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1)), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1)), (ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1))) >> ivec3(0, 0, 0)))), clamp(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0) ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) ^ 0)), (true ? (~ _GLF_IDENTITY((1), ((1)) ^ 0)) : _GLF_FUZZED((_injected_loop_counter & _injected_loop_counter))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * (1 & 1))) * 1))) ^ 0)))), _GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (_GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (((1 ^ 0)) | ((1 ^ 0))) | 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), (((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), max(((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, min(0, 0)))), (1 ^ 0) - _GLF_IDENTITY(0, (0) >> 0)), ~ (~ (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 1, 1), (ivec4(0, 0, 1, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0))) - _GLF_IDENTITY(0, (0) >> 0))))))), ((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1, (1) | 0) ^ 0) - 0))))))) | _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) ^ 0)))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, _GLF_IDENTITY(1, max(1, 1)))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), max((_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))) * 1))) ^ 0)))), _GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (_GLF_IDENTITY(((1 ^ 0)) | ((_GLF_IDENTITY(1, min(1, 1)) ^ 0)), (((1 ^ 0)) | ((1 ^ 0))) | 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), (((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), max(((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, min(0, 0)))), (1 ^ 0) - _GLF_IDENTITY(0, (0) >> 0)))), ((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1, (1) | 0) ^ _GLF_IDENTITY(0, (0) >> 0)) - 0))))))) | _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ (_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY(max(1 ^ 1, 1 ^ 1), 0 | (_GLF_IDENTITY(max(1 ^ 1, 1 ^ 1), clamp(_GLF_IDENTITY(max(1 ^ 1, 1 ^ 1), (max(1 ^ 1, 1 ^ 1)) - 0), max(1 ^ 1, 1 ^ 1), max(1 ^ 1, 1 ^ 1))))))) ^ 0)))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1))) ^ 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1))) ^ 0)))))), _GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (_GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (((1 ^ 0)) | ((1 ^ 0))) | 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) << 0)) - 0))), (((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0)), (1 ^ 0) - 0)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), max(((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, min(0, 0)))), (1 ^ 0) - _GLF_IDENTITY(0, (0) >> 0)))), ((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1, (1) | 0) ^ 0) - 0))))))) | _GLF_IDENTITY((_GLF_IDENTITY((1 ^ 0), clamp(_GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0))), (1 ^ 0), (1 ^ 0)))), (((1 ^ 0))) ^ (_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) ^ 0))))))))))) * 1), 0, 1)), ivec3(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, (0) << 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1 ^ 0), (~ (1 ^ 0)) - 0)), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ 0))), min(_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ 0)), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ 0))), 0 ^ ((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ 0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(i), int(ivec3(_GLF_IDENTITY(_GLF_FUZZED(i), ~ (~ (_GLF_FUZZED(i)))), 0, 0))) : (~ (1 ^ 0))))), 1 ^ 0))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)) ^ 0, max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), clamp(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))))), 1 ^ 0))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), 0, _GLF_IDENTITY(0, int(int(0))))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0))))), ((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), 0, _GLF_IDENTITY(0, int(int(0))))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))) << (0 << _GLF_IDENTITY(int(2), int(2)))), 1))))), (1 ^ 0))), (_GLF_IDENTITY((1 ^ 0), clamp((1 ^ _GLF_IDENTITY(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)))) | (0))), (1 ^ 0), _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, clamp(_GLF_IDENTITY((0) << 0, max((0) << 0, (0) << 0)), (0) << 0, (0) << 0)))) / 1)), 0 | ((1 ^ 0)))))) | ((_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, 1 ^ 0, 1 ^ 0)))))) * 1), 0, 1)), ivec3(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) * 1))), 0 + (int(ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1))))) ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) ^ 0), ((_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0) - 0))) | (_GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)))) / _GLF_IDENTITY(1, (1) ^ 0), ~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), (_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0))) / 1)) | 0)) | (_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)))))) / _GLF_IDENTITY(1, (1) ^ 0)))))))) * _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY((1), ((1)) | ((1))) + (0 | 0))), 0, 1), (ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 0, 1)), ~ (~ (int(ivec3(1, 0, _GLF_IDENTITY(1, min(1, 1))))))), 0 + (int(ivec3(1, 0, 1))))) ^ 0), (_GLF_IDENTITY((1 ^ 0), ((1 ^ _GLF_IDENTITY(0, min(0, 0)))) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) / 1)))) * _GLF_IDENTITY(1, (1) + (0 | _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) >> 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) | (0))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0))), ((_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0)))) << 0) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))))) - 0) - 0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0))) / 1)) ^ 0))))))))), 0, 1)) | ivec3(0, 0, 0)))))))))), (ivec4(4, 0, 0, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0) ^ 0), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), clamp(_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) ^ 0), (1 ^ 0), (1 ^ 0))), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), _GLF_IDENTITY(ivec2(1, 1), (false ? _GLF_FUZZED(ivec2(13342, -10071)) : ivec2(1, 1))), ivec2(1, 1))))) ^ 0), ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), _GLF_IDENTITY(ivec2(1, 1), (false ? _GLF_FUZZED(ivec2(13342, -10071)) : ivec2(1, 1))), ivec2(1, 1))))) ^ 0)) >> 0), ((1 ^ 0)) | ((1 ^ 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) ^ 0, (1 ^ 0) + 0)), ((1 ^ 0)) | ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) ^ 0))), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | ((1 ^ 0))))))))) * 1), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)), 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1)), min(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1)), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1)), (ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) ^ 0), ((1 ^ 0)) | ((1 ^ 0)))) * 1), 0, 1))) >> ivec3(0, 0, 0)))), clamp(ivec3(ivec3(_GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0) ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1), ((1)) ^ 0)), (true ? (~ _GLF_IDENTITY((1), ((1)) ^ 0)) : _GLF_FUZZED((_injected_loop_counter & _injected_loop_counter))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * (1 & 1))) * 1))) ^ 0)))), _GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (_GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (((1 ^ 0)) | ((1 ^ 0))) | 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), (((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), max(((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, min(0, 0)))), (1 ^ 0) - _GLF_IDENTITY(0, (0) >> 0)), ~ (~ (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 1, 1), (ivec4(0, 0, 1, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0))) - _GLF_IDENTITY(0, (0) >> 0))))))), ((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1, (1) | 0) ^ 0) - 0))))))) | _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) ^ 0)))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, _GLF_IDENTITY(1, max(1, 1)))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), max((_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))), (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))) | (int((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))) * 1))) ^ 0)))), _GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (_GLF_IDENTITY(((1 ^ 0)) | ((_GLF_IDENTITY(1, min(1, 1)) ^ 0)), (((1 ^ 0)) | ((1 ^ 0))) | 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), (((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), max(((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, min(0, 0)))), (1 ^ 0) - _GLF_IDENTITY(0, (0) >> 0)))), ((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1, (1) | 0) ^ _GLF_IDENTITY(0, (0) >> 0)) - 0))))))) | _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ (_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY(max(1 ^ 1, 1 ^ 1), 0 | (_GLF_IDENTITY(max(1 ^ 1, 1 ^ 1), clamp(_GLF_IDENTITY(max(1 ^ 1, 1 ^ 1), (max(1 ^ 1, 1 ^ 1)) - 0), max(1 ^ 1, 1 ^ 1), max(1 ^ 1, 1 ^ 1))))))) ^ 0)))))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1))) ^ 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, int(int(_GLF_IDENTITY(1 ^ 0, int(ivec3(1 ^ 0, 0, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), clamp(0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1))) ^ 0)))))), _GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (_GLF_IDENTITY(((1 ^ 0)) | ((1 ^ 0)), (((1 ^ 0)) | ((1 ^ 0))) | 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) << 0)) - 0))), (((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0)), (1 ^ 0) - 0)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) - 0))), max(((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, min(0, 0)))), (1 ^ 0) - _GLF_IDENTITY(0, (0) >> 0)))), ((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1, (1) | 0) ^ 0) - 0))))))) | _GLF_IDENTITY((_GLF_IDENTITY((1 ^ 0), clamp(_GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0))), (1 ^ 0), (1 ^ 0)))), (((1 ^ 0))) ^ (_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) ^ 0))))))))))) * 1), 0, 1)), ivec3(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, ~ (~ (1))))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, (0) << 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1 ^ 0), (~ (1 ^ 0)) - 0)), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ 0))), min(_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ 0)), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ 0))), 0 ^ ((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ 0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(i), int(ivec3(_GLF_IDENTITY(_GLF_FUZZED(i), ~ (~ (_GLF_FUZZED(i)))), 0, 0))) : (~ (1 ^ 0))))), 1 ^ 0))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)) ^ 0, max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), clamp(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))))), 1 ^ 0))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), 0, _GLF_IDENTITY(0, int(int(0))))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0))))), ((_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, ~ _GLF_IDENTITY((~ (1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), 0, _GLF_IDENTITY(0, int(int(0))))))), (false ? _GLF_FUZZED(i) : (~ (1 ^ 0))))), 1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))) << (0 << _GLF_IDENTITY(int(2), int(2)))), 1))))), (1 ^ 0))), (_GLF_IDENTITY((1 ^ 0), clamp((1 ^ _GLF_IDENTITY(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)))) | (0))), (1 ^ 0), _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, clamp(_GLF_IDENTITY((0) << 0, max((0) << 0, (0) << 0)), (0) << 0, (0) << 0)))) / 1)), 0 | ((1 ^ 0)))))) | ((_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, 1 ^ 0, 1 ^ 0)))))) * 1), 0, 1)), ivec3(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) * 1))), 0 + (int(ivec3(1, _GLF_IDENTITY(0, (0) >> 0), 1))))) ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) ^ 0), ((_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0) - 0))) | (_GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(((_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)))) / _GLF_IDENTITY(1, (1) ^ 0), ~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), (_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0))) / 1)) | 0)) | (_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)))))) / _GLF_IDENTITY(1, (1) ^ 0)))))))) * _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY((1), ((1)) | ((1))) + (0 | 0))), 0, 1), (ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 0, 1)), ~ (~ (int(ivec3(1, 0, _GLF_IDENTITY(1, min(1, 1))))))), 0 + (int(ivec3(1, 0, 1))))) ^ 0), (_GLF_IDENTITY((1 ^ 0), ((1 ^ _GLF_IDENTITY(0, min(0, 0)))) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) / 1)))) * _GLF_IDENTITY(1, (1) + (0 | _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) >> 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) | (0))))), _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0))), ((_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0)))) << 0) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))))) - 0) - 0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) - 0))) / 1)) ^ 0))))))))), 0, 1)) | ivec3(0, 0, 0))))))))))) / ivec4(1, 1, 1, 1))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((int(ivec4(4, 0, 0, _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), (true ? (_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, 1 ^ 0, 1 ^ 0))) : _GLF_FUZZED(bitfieldExtract(mix(_GLF_IDENTITY(18251, clamp(_GLF_IDENTITY(18251, (18251) - 0), 18251, 18251)), _injected_loop_counter, false), i, 3167)))), ((1 ^ 0)) ^ 0)))), (false ? _GLF_FUZZED(i) : (int(ivec4(4, 0, 0, _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), (true ? (_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, 1 ^ 0, 1 ^ 0))) : _GLF_FUZZED(bitfieldExtract(mix(_GLF_IDENTITY(18251, clamp(_GLF_IDENTITY(18251, (18251) - 0), 18251, 18251)), _injected_loop_counter, false), i, 3167)))), ((1 ^ 0)) ^ 0)))))), (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) + 0, ((0) + 0) >> 0)))) ^ (int(ivec4(4, 0, 0, _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 1)), (int(ivec3(0, 0, _GLF_IDENTITY(1, (1) - 0)))) * 1))), ((1 ^ 0)) ^ 0))))) + 0))))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(6.8)), bool(false))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) / 1.0)), 1.0, 1.0, cos(0.0), 0.0, sqrt(1.0), 0.0))).y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))))));
       for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                      return;
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
                      return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), true && ((! (false)))))))) || false) && true))))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))) && true)))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))) && true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(injectionSwitch)) : injectionSwitch.y)))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), true, true)), false))))))))))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))), true, true, false))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-539.140 + 51.51))), bool(false)))))))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), true && (_GLF_IDENTITY(! (true && (false)), ! (! (! (true && (false))))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))))))).y))))
        break;
       continue;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.3)), bool(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
}
