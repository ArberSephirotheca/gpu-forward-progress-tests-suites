#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, sin(0.0) + (injectionSwitch.y)), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)))), 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-0.3)), float(0.0), bool(true))), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, length(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-481.081)), bool(false))), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, log(1.0) + (1.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2455.4201) : _GLF_IDENTITY(1.0, 0.0 + (1.0)))), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (true ? mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat4(-237.918, 482.671, -48.68, 2.3, 286.979, -104.016, -1.1, 43.66, 115.238, 916.807, 8322.0245, 50.47, 6.3, 565.688, 7.6, -5976.4557))))))), (_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) / abs(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), mix(vec3(_GLF_FUZZED(8.2), (vec3(0.0, 0.0, 0.0))[1], _GLF_FUZZED(4.8)), vec3(_GLF_IDENTITY((vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, log(1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))), determinant(mat2(1.0, sqrt(0.0), 1.0, 1.0)))))))[0], mix(float(_GLF_IDENTITY((vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, log(1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))), determinant(mat2(1.0, sqrt(0.0), 1.0, 1.0)))))))[0], max(_GLF_IDENTITY((vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, log(1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))), determinant(mat2(1.0, sqrt(0.0), 1.0, 1.0)))))))[0], 1.0 * ((vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))) : _GLF_FUZZED(5.3))), 1.0, log(1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))), determinant(mat2(1.0, sqrt(0.0), 1.0, 1.0)))))))[0])), (vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(reflect(4032.0314, -30.14)))), 1.0))), 1.0, log(1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))), determinant(mat2(1.0, sqrt(0.0), 1.0, 1.0)))))))[0]))), float(_GLF_FUZZED(3.8)), bool(false))), _GLF_FUZZED(-182.426), (vec3(0.0, 0.0, 0.0))[2]), bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))) * mat4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))) + mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), (_GLF_IDENTITY(max(0.0, 0.0), (max(0.0, 0.0)) + 0.0)) / 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), false, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.0)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true && (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))), true, false), false))))) && true))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (max(injectionSwitch.x, injectionSwitch.x)) - 0.0)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) / determinant(mat2(1.0, 0.0, 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED(3.4)), float(float(injectionSwitch.y)), bool(true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false)))))))))))))))), false, false)), (bool(bvec3(_GLF_DEAD(false), false, false))) && true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) && true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id, _GLF_IDENTITY(0u, (0u) - (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), 0u | ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size), uint(uvec4((subgroup_id * subgroup_size), 1u, 0u, (139945u & 0u)))) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (((subgroup_local_id + 1) % subgroup_size))), 0u + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), min((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 1u * (((subgroup_local_id + 1) % subgroup_size))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 1u * (((subgroup_local_id + 1) % subgroup_size)))) | (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 1u * (((subgroup_local_id + 1) % subgroup_size)))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u), 1u))), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u), 1u)))) - 0u)) - 0u)) - 0u) : _GLF_FUZZED(subgroup_local_id))))));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49170))), 4, _GLF_IDENTITY(4, ~ (~ (4))))), 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(false, true, false)))), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))) && true, ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))) && true) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), false, true, true))), ! (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), false, true, true))), ! (! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), false, true, true))))))))), false || (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, true)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0))) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(-37.21) : injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(-37.21) : injectionSwitch.y))))))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(_GLF_IDENTITY(read_1 + 1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? read_1 + 1 : _GLF_FUZZED(uint(true)))) == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, cos(0.0)), (vec3(injectionSwitch.y, 0.0, cos(0.0))) * vec3(1.0, 1.0, 1.0))))), max((_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, cos(0.0)), (vec3(injectionSwitch.y, 0.0, cos(0.0))) * vec3(1.0, 1.0, 1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, cos(0.0)), (vec3(injectionSwitch.y, 0.0, cos(0.0))) * vec3(1.0, 1.0, 1.0))))))) + _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec2(sin(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(sin(0.0), 1.0)), min(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), 1.0)), dot(vec2(1.0, 0.0), vec2(sin(0.0), 1.0))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (1) ^ 0) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))))))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (1) ^ 0) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))))))))) + _GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.9), length(0.0) + (_GLF_IDENTITY(_GLF_FUZZED(4.9), mix(float(_GLF_FUZZED(-74.13)), float(_GLF_FUZZED(4.9)), bool(true))))) : injectionSwitch.x)))))) + (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))), ! (! (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false)))))), false, false, true))))))))) + _GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, _GLF_IDENTITY(read_1, 1u * (_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false))))))))) + _GLF_IDENTITY(1, (1) | 0)) * 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1 == read_2, (read_1 + 1 == read_2) && true), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : read_2))) || _GLF_IDENTITY(false, false || (false)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + _GLF_IDENTITY(1, (1) | (1)))) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), _GLF_IDENTITY(clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1)))), max(_GLF_IDENTITY(clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1)))), min(clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1)))), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1)))))), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : read_2))) || _GLF_IDENTITY(false, false || (false)))))), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) - (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | 0u), (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : read_2))) || _GLF_IDENTITY(false, false || (false)))), true && ((_GLF_IDENTITY(read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) - (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | 0u), (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : read_2))) || _GLF_IDENTITY(false, false || (false)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : read_2))) || _GLF_IDENTITY(false, false || (false)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(read_2, (true ? read_2 : _GLF_FUZZED(subgroup_size)))))) || _GLF_IDENTITY(false, false || (false)))))), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)) == read_2, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) ^ 0u, (_GLF_IDENTITY((read_1) ^ 0u, (true ? (read_1) ^ 0u : _GLF_FUZZED(subgroup_size)))) | ((read_1) ^ 0u))), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(subgroup_id) : read_2))) || _GLF_IDENTITY(false, false || (false)))))))))))) >> 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) + 0u), true && (read_1 + 1 == read_2))) && true), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false, ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u), clamp(read_1, read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1 == read_2) || false) || false)))))))))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)) | (0)), ((1) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)) | (0))) | ((1) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)) | (0))))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, true, true))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(((false) && true) || false, _GLF_IDENTITY(bool(bvec4(((false) && true) || false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(((false) && true) || false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false)), true && (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || false))), false)), ! (! (bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || false))), false)))))))) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
