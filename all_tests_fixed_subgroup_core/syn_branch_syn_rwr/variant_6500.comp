#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 ivec2 _f0;
 uint read_2;
 mat3x2 _f1;
 ivec4 _f2;
 bvec3 _f3;
 uvec2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_1 {
 bool _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 bvec4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(6360.4289), _GLF_FUZZED(-5.3)), bvec2(false, false))).x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))), _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))), bool(bvec4((! (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))), _GLF_IDENTITY(true, (true) && true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y))))))), false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))), true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))), false)))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)).x < injectionSwitch.y)))))) && _GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))) && true)))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec4(gl_NumWorkGroups.x, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), ~ (~ (_GLF_IDENTITY(1u, (1u) - 0u))))) << 0u), max(_GLF_IDENTITY(1u, (1u) - _GLF_IDENTITY(0u, min(0u, 0u))), _GLF_IDENTITY(1u, (1u) - 0u))), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, min(1u, 1u)))))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u, min(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u, clamp(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u, (true ? _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(subgroup_id) : 0u : _GLF_FUZZED(155649u))), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u)), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u)), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u, (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u) << 0u)))))), 1u, 1u)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 6982)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | int(_GLF_ZERO(0.0, injectionSwitch.x))))
        {
         return;
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         return;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-59003 & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)), (uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | _GLF_IDENTITY(0u, (0u) + (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))) | (uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) + 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u)), 0u ^ ((subgroup_local_id + 1))))), _GLF_IDENTITY(((subgroup_local_id + 1)) << 0u, _GLF_IDENTITY(uint(uint(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 61334)))), 0 | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((+ 61334)))))))) << 0u)), clamp(_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ (uint(uint(_GLF_IDENTITY(((subgroup_local_id + 1)), 0u + (_GLF_IDENTITY(((subgroup_local_id + 1)), max(((subgroup_local_id + 1)), ((subgroup_local_id + 1)))))) << 0u)))), _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ (_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), (uint(uint(((subgroup_local_id + 1)) << 0u))) - 0u))), uint(uint(((subgroup_local_id + 1)) << 0u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), min(_GLF_IDENTITY(float(injectionSwitch.y), 1.0 * (float(injectionSwitch.y))), float(injectionSwitch.y))), float(_GLF_FUZZED(-7.0)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false))))))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 0 | (1))))) % subgroup_size), ~ (~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) * 1))), 1))) % subgroup_size)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) ^ 0u)) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(uvec4(uint(6u), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, 0u ^ (2u))) / 1u))))), 0u ^ (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, ~ (~ (_GLF_IDENTITY(2u, 1u * (2u)))))), (uint(2u)) | (uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, 0u ^ (2u))) / 1u)))))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u ^ (_GLF_IDENTITY(uint(uvec4(uint(6u), 1u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(_GLF_IDENTITY(2u, _GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (2u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), ~ (~ (2u)), ~ (~ (2u)))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), ~ (~ (2u)), ~ (~ (2u)))), 1u, 1u, 0u))) - 0u)), (~ (~ (2u))) + 0u), ~ (~ (2u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(1u, 1u))), uint(1u)), clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))) : _GLF_FUZZED(subgroup_size)))) + 0u)), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))), (uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (false ? _GLF_FUZZED(packSnorm4x8(vec4(271.282, -5.0, -8930.3227, -6.9))) : ~ (2u))))))) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), (((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(_GLF_IDENTITY(2u, _GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (2u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), ~ (~ (2u)), ~ (~ (2u)))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), ~ (~ (2u)), ~ (~ (2u)))), 1u, 1u, 0u))) - 0u)), (~ (~ (2u))) + 0u), ~ (~ (2u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(1u, 1u))), uint(1u)), clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))) : _GLF_FUZZED(subgroup_size)))) + 0u)), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))), (uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (false ? _GLF_FUZZED(packSnorm4x8(vec4(271.282, -5.0, -8930.3227, -6.9))) : ~ (2u))))))) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) | (((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(_GLF_IDENTITY(2u, _GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (2u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), ~ (~ (2u)), ~ (~ (2u)))), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), ~ (~ (2u)), ~ (~ (2u)))), 1u, 1u, 0u))) - 0u)), (~ (~ (2u))) + 0u), ~ (~ (2u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(1u, 1u))), uint(1u)), clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))) : _GLF_FUZZED(subgroup_size)))) + 0u)), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))), (uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (false ? _GLF_FUZZED(packSnorm4x8(vec4(271.282, -5.0, -8930.3227, -6.9))) : ~ (2u))))))) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))))), 0u)), _GLF_IDENTITY(0u + (uint(uvec4(uint(6u), 1u, ((_GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), 0u))), max(0u + (uint(uvec4(uint(6u), 1u, ((_GLF_IDENTITY(1u, (1u) - _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, 1u), uvec2(0u, 0u) + (uvec2(0u, 1u)))), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_IDENTITY(uvec2(0u, 1u), uvec2(0u, 0u) + (uvec2(0u, 1u)))))))) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, 0u | (_GLF_IDENTITY(2u, max(2u, 2u))))))), 0u))), 0u + (uint(uvec4(uint(6u), 1u, ((_GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(atomicAnd(num_workgroup, atomicMin(subgroup_id, num_workgroup))) : uint(2u))), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))))), uint(6u)))), ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (0u | 1u), 1u, 1u))))))) / 1u))), (subgroup_local_id + 1) % subgroup_size))), max(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)), clamp(uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)), uvec4(subgroup_id * subgroup_size, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), _GLF_IDENTITY(1u, uint(uint(1u))))), 0u, (1u | 0u)), uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)))), (uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id)))))), 1u, 0u, _GLF_IDENTITY((1u | _GLF_IDENTITY(0u, (0u) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) | 0u))))), 0u ^ ((1u | _GLF_IDENTITY(0u, (0u) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) | 0u))))))))) | (uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) + 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) ^ ((subgroup_local_id + 1))))), _GLF_IDENTITY(((subgroup_local_id + 1)) << 0u, _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), clamp(_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ (uint(uint(((subgroup_local_id + 1)) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), (uint(uint(((subgroup_local_id + 1)) << 0u))) | (uint(uint(((subgroup_local_id + 1)) << 0u)))), 0u ^ (uint(uint(((subgroup_local_id + 1)) << 0u)))), uint(uint(((subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(84003)))) / 1))))) << 0u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))))) | (_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))))))) | (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), _GLF_IDENTITY(((subgroup_local_id + 1)) << 0u, _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), clamp(_GLF_IDENTITY(uint(uint(((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_id) : subgroup_local_id + 1)))) << _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (0u))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (0u))), clamp((_GLF_IDENTITY(0u, 1u * (0u))), (_GLF_IDENTITY(0u, 1u * (0u))), (_GLF_IDENTITY(0u, 1u * (0u))))), _GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (0u))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, 1u * (0u))), ~ (~ ((_GLF_IDENTITY(0u, 1u * (0u))))))))), (_GLF_IDENTITY(0u, 1u * (0u))))) >> _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u ^ (uint(uint(((subgroup_local_id + 1)) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), ~ (~ (uint(uint(((subgroup_local_id + 1)) << 0u))))), 0u ^ (uint(uint(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(33034))))) << 0u)))), uint(uint(((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1)))) << 0u))))))) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u)) % subgroup_size) / 1u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 1u * (((subgroup_local_id + 1) % subgroup_size))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.0)), bool(false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.0)), bool(false))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.0)), bool(false))), true, false)))))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))) % subgroup_size), ~ (~ (~ ((subgroup_local_id + 1) % subgroup_size)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) / 1), ~ (1)))))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) << (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))))) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(uvec4(uint(6u), 1u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(_GLF_IDENTITY(2u, (2u) | (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u ^ (2u))) / 1u)))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u ^ (_GLF_IDENTITY(uint(uvec4(uint(_GLF_IDENTITY(6u, (true ? _GLF_IDENTITY(6u, (6u) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))) : _GLF_FUZZED(num_workgroup)))), 1u, ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(_GLF_IDENTITY(2u, _GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), _GLF_IDENTITY(~ (~ (2u)), (_GLF_IDENTITY(~ (~ (2u)), (true ? ~ (~ (2u)) : _GLF_FUZZED(workgroup_id)))) + 0u), ~ (~ (2u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) + 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u ^ (_GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))) : _GLF_FUZZED(subgroup_size)))) + 0u)), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), (uint(2u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (uint(2u))))), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u + (uint(uvec4(uint(6u), 1u, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u)))), min(_GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u)))), _GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))), uint(6u)))), ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)))) / 1u))), (subgroup_local_id + 1) % subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)), (uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | _GLF_IDENTITY(0u, (0u) + (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))) | (uvec4(subgroup_id * subgroup_size, 1u, 0u, (1u | 0u)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)) + 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))))), _GLF_IDENTITY(((subgroup_local_id + 1)) << 0u, _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), clamp(_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ (uint(uint(((subgroup_local_id + 1)) << 0u)))), _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ _GLF_IDENTITY((uint(uint(((subgroup_local_id + 1)) << 0u))), max((uint(uint(((subgroup_local_id + 1)) << 0u))), (uint(uint(((subgroup_local_id + 1)) << 0u)))))), uint(uint(((subgroup_local_id + 1)) << 0u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.0)), bool(false))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))) % subgroup_size), ~ (~ (~ ((subgroup_local_id + 1) % subgroup_size)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) ^ _GLF_IDENTITY(0u, (0u) - (24571u & 0u)))) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(uvec4(uint(6u), 1u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, 0u ^ (2u))) / 1u)))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u ^ (_GLF_IDENTITY(uint(uvec4(uint(6u), 1u, ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(_GLF_IDENTITY(2u, _GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), _GLF_IDENTITY(~ (~ (2u)), (~ (~ (2u))) + 0u), ~ (~ (2u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))), max(clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))), clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))))) : _GLF_FUZZED(subgroup_size)))) + 0u)), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u + (uint(uvec4(uint(6u), 1u, ((_GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))), uint(6u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) ^ (1u ^ 1u))) % subgroup_size)))) / 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))))), _GLF_IDENTITY(((subgroup_local_id + 1)) << 0u, _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), clamp(_GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ (uint(uint(((subgroup_local_id + 1)) << 0u)))), _GLF_IDENTITY(uint(uint(((subgroup_local_id + 1)) << 0u)), 0u ^ _GLF_IDENTITY((uint(uint(((subgroup_local_id + 1)) << 0u))), max((uint(uint(((subgroup_local_id + 1)) << 0u))), (uint(uint(((subgroup_local_id + 1)) << 0u)))))), uint(uint(((subgroup_local_id + 1)) << 0u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.0)), bool(false))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))) % subgroup_size), ~ (~ (~ ((subgroup_local_id + 1) % subgroup_size)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) ^ _GLF_IDENTITY(0u, (0u) - (24571u & 0u)))) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(uvec4(uint(6u), 1u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, 0u ^ (2u))) / 1u)))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u ^ (_GLF_IDENTITY(uint(uvec4(uint(6u), 1u, ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(_GLF_IDENTITY(2u, _GLF_IDENTITY(~ (~ (2u)), clamp(~ (~ (2u)), _GLF_IDENTITY(~ (~ (2u)), (~ (~ (2u))) + 0u), ~ (~ (2u))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))), max(clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))), clamp(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u)))))) : _GLF_FUZZED(subgroup_size)))) + 0u)), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), 0u + (uint(uvec4(uint(6u), 1u, ((_GLF_IDENTITY(1u, (1u) - 0u) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))), uint(6u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) ^ (1u ^ 1u))) % subgroup_size)))) / 1u))))), (subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       do
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, max(0u, 0u)))), 0u)))) >> 0u)], uint(_GLF_IDENTITY(read_1 + 1, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) : _GLF_IDENTITY(read_1 + 1, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (~ (read_1)))) - 0u) + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1))))))), 4, _GLF_IDENTITY(64, (64) / (0 ^ 1)), 4);
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(true, _GLF_struct_0(ivec2(1), atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) / 1), clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) ^ 0))) / 1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) / 1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) / 1)))) * int(_GLF_ONE(1.0, injectionSwitch.y))), 64, 0), mat3x2(1.0), ivec4(1), bvec3(true), uvec2(1u), bvec4(true))), bvec4(true));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), true, false), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), false)), true))), true))))), true && (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    continue;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.x)) < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.x)) < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.x)) < injectionSwitch.y)))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.x)) < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.x)) < injectionSwitch.y)))))), true))) && true)))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, ~ (~ (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), 1)), 0 + (int(ivec2(int(1), 1))))), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) | 0)); _injected_loop_counter ++)
                {
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
            {
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (next_virtual_gid))], uint(read_1 + 1 == _GLF_struct_replacement_2._f0._f1.read_2) + 1, 4, 64, _GLF_IDENTITY(4, max(4, 4)));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          break;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec2((_GLF_IDENTITY(false, bool(bool(false)))), false))))))))), (false) && true))))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))) && true), bool(bvec3(true, true, false))), false, false)))))))), bool(bvec2((! (true)), false))))))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (bool(bvec3(false, true, false)))))))
        continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false || (_GLF_WRAPPED_LOOP(false)))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false || (_GLF_WRAPPED_LOOP(false)))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) > injectionSwitch.y))))))))))));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 0), min(ivec3(0, 0, 0), ivec3(0, 0, 0))))) | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      continue;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))))))), false, true)))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == _GLF_struct_replacement_2._f0._f1.read_2) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) | (1)), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) | (7u))), (uint(7u)) - 0u))) ^ _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), uint(uvec2(_GLF_IDENTITY(~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), clamp(~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), ~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), ~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))))), 0u)))))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), 0u ^ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 + (1))) - 0, ~ (~ ((_GLF_IDENTITY(1, 0 + (1))) - 0)))))))) == _GLF_struct_replacement_2._f0._f1.read_2) + 1), clamp((uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), ~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))))))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), 0u ^ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))) == _GLF_struct_replacement_2._f0._f1.read_2) + 1), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), 0u | (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 + (1))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 + (1))) - 0, max((_GLF_IDENTITY(1, 0 + (1))) - 0, (_GLF_IDENTITY(1, 0 + (1))) - 0))) / (1 & 1))))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) | (1))))) - 0))), ~ (~ (_GLF_IDENTITY(read_1, (read_1) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))))))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), 0u ^ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))) == _GLF_struct_replacement_2._f0._f1.read_2) + 1), 0u + ((uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), ~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))))), (clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), ~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))))))) | (clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), ~ (~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))))))))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) + 0u) ^ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))) == _GLF_struct_replacement_2._f0._f1.read_2) + 1))), (uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), clamp(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))) | 0) : _GLF_FUZZED(abs(-25201))))), clamp(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(96613)))))) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), ((1)) + (0 >> _GLF_IDENTITY(int(2), int(2)))))) - 0))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), ~ (_GLF_IDENTITY(~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))), min(~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))), _GLF_IDENTITY(~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))), min(~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))), ~ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0)))))))))))), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))), 0u ^ (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))), read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - 0))))) == _GLF_struct_replacement_2._f0._f1.read_2) + 1)))), _GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) ^ 0) : _GLF_FUZZED(17415))))), 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)))))))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), false || ((false))), true, true, true)))))))))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
}
