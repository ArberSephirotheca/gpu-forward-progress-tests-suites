#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 mat2 _f0;
 mat2x3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
} ;

struct _GLF_struct_26 {
 _GLF_struct_24 _f0;
 _GLF_struct_25 _f1;
} ;

struct _GLF_struct_22 {
 ivec4 _f0;
 float _f1;
 vec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_21 {
 mat2x4 _f0;
 mat3x2 _f1;
 mat2x4 _f2;
 mat3x2 _f3;
 ivec4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_23 {
 bvec3 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
} ;

struct _GLF_struct_27 {
 _GLF_struct_23 _f0;
 uint subgroup_id;
 float _f1;
 _GLF_struct_26 _f2;
} ;

struct _GLF_struct_18 {
 mat2x4 _f0;
 float _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_17 {
 ivec2 _f0;
 uvec4 _f1;
 mat3 _f2;
 uvec4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_17 _f0;
 bvec2 _f1;
 mat4 _f2;
 _GLF_struct_18 _f3;
 int _f4;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
 uvec2 _f1;
 mat2 _f2;
 ivec3 _f3;
 ivec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_14 {
 mat3x4 _f0;
 bvec2 _f1;
 vec2 _f2;
 bvec3 _f3;
 mat4x2 _f4;
 vec2 _f5;
 mat2 _f6;
 uint virtual_gid;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
 float _f5;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 uvec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 _GLF_struct_9 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_10 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_19 _f2;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 uvec4 _f1;
 int _f2;
 mat2 _f3;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 int _f1;
 bvec4 _f2;
 ivec4 _f3;
 vec2 _f4;
 mat4x2 _f5;
 bool _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 vec3 _f1;
 vec2 _f2;
 ivec3 _f3;
 mat3x4 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 mat3 _f3;
 uvec4 _f4;
 bvec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 mat3 _f1;
 bvec3 _f2;
 ivec4 _f3;
 mat3x2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 uvec2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 ivec4 _f4;
 ivec4 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 uint workgroup_base;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 vec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((5.4))), bool(false))))) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_23(bvec3(true), _GLF_struct_21(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(640.463, -7.6).s)), mix(float(_GLF_FUZZED(7.2)), float(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(640.463, -7.6).s)), 1.0 * (float(_GLF_FUZZED(_GLF_IDENTITY(vec2(640.463, _GLF_IDENTITY(-7.6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -7.6 : _GLF_FUZZED(-670.535)))).s, (false ? _GLF_FUZZED(-1489.5884) : vec2(640.463, -7.6).s))))))), bool(true))), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), bool(true)))) - 0.0)), mat3x2(1.0), mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 0.0, sqrt(1.0), cos(0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), _GLF_IDENTITY(float(mat2x3(float(mat4x3(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 0.0, sqrt(1.0), cos(0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2(_GLF_IDENTITY((vec2(1.0, 0.0))[0], (true ? (vec2(1.0, 0.0))[0] : _GLF_FUZZED(-7.6))), _GLF_FUZZED((false ? 9851.8541 : 5.1))), vec2(_GLF_FUZZED(-490.914), (vec2(1.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), (float(mat2x3(float(mat4x3(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 0.0, sqrt(1.0), cos(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(7640.0359)), bool(false)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))) + 0.0))), mix(_GLF_IDENTITY(float(_GLF_FUZZED((true ? -9.0 : 0.6))), max(float(_GLF_FUZZED((true ? -9.0 : 0.6))), float(_GLF_FUZZED((true ? -9.0 : 0.6))))), _GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED(7.3)), bool(false))), bool(true)))), mat3x2(_GLF_IDENTITY(1.0, (1.0) - length(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x2(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), 0.0, abs(1.0), 0.0, 1.0)))))), ivec4(1), mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(atan(-56.17, 674.241)) : 1.0)), 0.0), max(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2(_GLF_FUZZED(-261.623), _GLF_IDENTITY((vec2(1.0, 0.0))[1], min(_GLF_IDENTITY((vec2(1.0, 0.0))[1], clamp((vec2(1.0, 0.0))[1], _GLF_IDENTITY((vec2(1.0, 0.0))[1], (_GLF_IDENTITY((vec2(1.0, 0.0))[1], float(mat4x3((vec2(1.0, 0.0))[1], 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 0.0)))) - 0.0), (vec2(1.0, 0.0))[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(4523) : 1)), 1))])), (vec2(1.0, 0.0))[1]))), vec2((vec2(1.0, 0.0))[0], _GLF_FUZZED(-93.17)), bvec2(true, false))), vec2(1.0, 0.0))))), float(mat2x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(atan(-56.17, 674.241)) : 1.0)), 0.0), max(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2(_GLF_FUZZED(-261.623), _GLF_IDENTITY((vec2(1.0, 0.0))[1], min(_GLF_IDENTITY((vec2(1.0, 0.0))[1], clamp((vec2(1.0, 0.0))[1], (vec2(1.0, 0.0))[1], (vec2(1.0, 0.0))[1])), (vec2(1.0, 0.0))[1]))), vec2((vec2(1.0, 0.0))[0], _GLF_FUZZED(-93.17)), bvec2(true, false))), vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * _GLF_ONE(1.0, injectionSwitch.y))))))), 1.0, 0.0, 1.0, 1.0, 1.0))), 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.0) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec2(-733.653, -95.72).r)), bool(false))))), 1.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec3(-5.1, 56.12, -2.9)), clamp(_GLF_FUZZED(vec3(-5.1, 56.12, -2.9)), _GLF_IDENTITY(_GLF_FUZZED(vec3(-5.1, 56.12, -2.9)), min(_GLF_FUZZED(vec3(-5.1, 56.12, -2.9)), _GLF_FUZZED(vec3(-5.1, 56.12, -2.9)))), _GLF_FUZZED(vec3(-5.1, 56.12, -2.9)))) : vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.0) : 0.0)), 1.0, 0.0))))), max(0.0, 0.0)), 0.0, 0.0)) : _GLF_FUZZED(mix(1078.1300, -41.87, -9617.8912))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), (true ? _GLF_IDENTITY(1.0, (1.0) - 0.0) : _GLF_FUZZED(73.25))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - 0.0)), max((_GLF_IDENTITY(1.0, (1.0) - 0.0)), (_GLF_IDENTITY(1.0, (1.0) - 0.0)))), (_GLF_IDENTITY(1.0, (1.0) - 0.0)), (_GLF_IDENTITY(1.0, (1.0) - 0.0)))) / 1.0)))) * 1.0, ((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.0) : _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-836.782)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(vec2(-733.653, -95.72).r)), bool(false))))), 1.0, 0.0), (false ? _GLF_FUZZED(vec3(-5.1, 56.12, -2.9)) : _GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.0) : 0.0)), 1.0, 0.0), max(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.0) : 0.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.0) : 0.0)), 1.0, 0.0))))))), max(0.0, 0.0)), 0.0, 0.0)) : _GLF_FUZZED(mix(1078.1300, -41.87, -9617.8912))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), (_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-69.21)), float(0.0), bool(true))), 0.0)))) / 1.0)))) * 1.0) - tan(0.0))))), _GLF_struct_22(ivec4(1), 1.0, vec2(1.0), uvec2(1u))), gl_SubgroupID, 1.0, _GLF_struct_26(_GLF_struct_24(_GLF_IDENTITY(vec2(1.0), mix(vec2(_GLF_FUZZED(float(131491u)), (_GLF_IDENTITY(vec2(1.0), min(_GLF_IDENTITY(vec2(1.0), (vec2(1.0)) - vec2(0.0, 0.0)), vec2(1.0))))[1]), vec2((vec2(1.0))[0], _GLF_FUZZED(-9.0)), bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), _GLF_struct_25(mat2(1.0), mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0, 1.0)), 0.0 + (float(mat3(1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, mix(float((0.0) - 0.0), float(_GLF_FUZZED(7.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0)))))), ivec3(1))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true, false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))) || false)) && true), true, false), true))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false), false))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(26.85, 1770.5190, 307.125, 899.164).a)), vec2(_GLF_FUZZED(-672.784), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch), _GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)) * vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-924.509)))), (false ? _GLF_FUZZED(vec2(5.5, 2652.1354)) : _GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)), min(((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)), _GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)), clamp(((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)), ((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)), ((false ? _GLF_FUZZED(vec2(-7245.6093, -479.456)) : injectionSwitch)))))) * vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-924.509)))))))))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || _GLF_IDENTITY(false, bool(bvec2(false, true))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), false || (! (! (_GLF_IDENTITY(false, (false) || false))))), false)), (bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(false || (! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bool(false || (! (! (_GLF_IDENTITY(false, (false) || false)))))))), false))) || false)))) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, ((false) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY((! ((false) || false)), ! (_GLF_IDENTITY(! ((! ((false) || false))), true && (! ((! ((false) || false))))))) && true)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-241.724))) > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_3(mat4x3(1.0), uvec2(1u), _GLF_struct_0(ivec2(1), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-0.3), mix(float(_GLF_FUZZED(-0.3)), float(_GLF_FUZZED(-7.2)), bool(false)))), min(float(_GLF_IDENTITY(_GLF_FUZZED(-0.3), mix(float(_GLF_FUZZED(-0.3)), float(_GLF_FUZZED(-7.2)), bool(false)))), float(_GLF_IDENTITY(_GLF_FUZZED(-0.3), mix(float(_GLF_FUZZED(-0.3)), float(_GLF_FUZZED(-7.2)), bool(false)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), bool(true)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-6.2) : mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-0.3), length(vec3(0.0, 0.0, 0.0)) + (_GLF_FUZZED(-0.3))), mix(float(_GLF_FUZZED(-0.3)), float(_GLF_IDENTITY(_GLF_FUZZED(-7.2), _GLF_IDENTITY((_GLF_FUZZED(-7.2)) / 1.0, min((_GLF_FUZZED(-7.2)) / 1.0, (_GLF_FUZZED(-7.2)) / 1.0)))), bool(false)))), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-6.2) : mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-0.3), length(vec3(0.0, 0.0, 0.0)) + (_GLF_FUZZED(-0.3))), mix(float(_GLF_FUZZED(-0.3)), float(_GLF_IDENTITY(_GLF_FUZZED(-7.2), _GLF_IDENTITY((_GLF_FUZZED(-7.2)) / 1.0, min((_GLF_FUZZED(-7.2)) / 1.0, (_GLF_FUZZED(-7.2)) / 1.0)))), bool(false)))), float(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), bool(true)), (false ? _GLF_FUZZED(35.19) : false ? _GLF_FUZZED(-6.2) : mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-0.3), length(vec3(0.0, 0.0, 0.0)) + (_GLF_FUZZED(-0.3))), mix(float(_GLF_FUZZED(-0.3)), float(_GLF_IDENTITY(_GLF_FUZZED(-7.2), _GLF_IDENTITY((_GLF_FUZZED(-7.2)) / 1.0, min((_GLF_FUZZED(-7.2)) / 1.0, (_GLF_FUZZED(-7.2)) / 1.0)))), bool(false)))), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))))) * 1.0))))), bvec3(true), ivec4(1), mat3x2(1.0), mat2(1.0)), _GLF_struct_1(uvec3(_GLF_IDENTITY(1u, uint(uvec3(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(uvec3(_GLF_IDENTITY(uint(2u), 0u + (uint(2u))), ((0u >> _GLF_IDENTITY(uint(0u), uint(0u))) << _GLF_IDENTITY(uint(1u), uint(1u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(2u))), 1u)))), ivec3(1), mat3x2(1.0), mat3(1.0), uvec4(1u), bvec4(true), vec3(1.0)), ivec4(1), ivec4(1), _GLF_struct_2(ivec4(1), vec3(1.0), vec2(1.0), _GLF_IDENTITY(ivec3(1), (ivec3(1)) << ivec3(0, 0, 0)), mat3x4(1.0), bvec3(true))), mat2x3(1.0), bvec4(true), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_size : _GLF_FUZZED(num_workgroup), max(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_size : _GLF_FUZZED(num_workgroup), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_size : _GLF_FUZZED(num_workgroup))))) * workgroup_id, _GLF_struct_6(_GLF_struct_4(bvec3(true), 1, bvec4(true), ivec4(1), vec2(1.0), mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(8853.7092), (_GLF_FUZZED(8853.7092)) - _GLF_ZERO(0.0, injectionSwitch.x))), bool(false)))), true), _GLF_struct_5(vec2(1.0), uvec4(1u), _GLF_IDENTITY(1, ~ (~ (1))), mat2(1.0))), _GLF_struct_7(mat3x2(1.0)), _GLF_IDENTITY(vec2(1.0), max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) / vec2(1.0, 1.0)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_10(ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_struct_9(uvec2(_GLF_IDENTITY(1u, min(1u, 1u))), uvec3(1u), mat2(1.0)), bvec4(true)), _GLF_struct_16(_GLF_struct_11(uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(uvec4(1u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), 1u, 1u)) : _GLF_FUZZED(atomicXor(workgroup_id, 191919u))))))), _GLF_struct_12(ivec3(1), ivec4(1)), _GLF_struct_13(mat2(1.0)), _GLF_struct_14(mat3x4(1.0), bvec2(_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, determinant(mat4(0.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.4)), bool(false))))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat4x3(0.0, determinant(mat2(0.0, 0.0, 0.0, abs(0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), min(0.0, 0.0)))), 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0))) > injectionSwitch.y)) || (true))), _GLF_IDENTITY(vec2(1.0), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), injectionSwitch))) + vec2(0.0, 0.0))) : vec2(1.0), _GLF_IDENTITY(vec2(mat4x2(false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), injectionSwitch))) + vec2(0.0, 0.0))) : vec2(1.0), 1.0, exp(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))), min(_GLF_IDENTITY(vec2(mat4x2(false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), injectionSwitch))) + vec2(0.0, 0.0))) : vec2(1.0), 1.0, exp(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))), (vec2(mat4x2(false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), injectionSwitch))) + vec2(0.0, 0.0))) : vec2(1.0), 1.0, exp(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))))) - vec2(0.0, 0.0)), vec2(mat4x2(false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), injectionSwitch))) + vec2(0.0, 0.0))) : vec2(1.0), 1.0, exp(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec2(abs(0.0), 1.0), vec2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))))))))), bvec3(true), mat4x2(1.0), vec2(1.0), mat2(1.0), _GLF_struct_replacement_8.workgroup_base + _GLF_struct_replacement_27.subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)) + subgroup_local_id), _GLF_struct_15(bvec3(_GLF_IDENTITY(true, bool(bvec2(true, false)))), uvec2(1u), mat2(1.0), ivec3(1), ivec4(1), vec3(1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5.0)), bool(false)))), _GLF_struct_19(_GLF_struct_17(ivec2(1), uvec4(1u), _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY((mat3(1.0)) * mat3(1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + ((mat3(1.0)) * mat3(1.0)))), uvec4(1u), mat4x3(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), bvec2(true), mat4(1.0), _GLF_struct_18(mat2x4(1.0), 1.0, mat2x3(1.0)), 1));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_struct_replacement_8.workgroup_base + _GLF_struct_replacement_27.subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))) / 1), 1, 1)), min(1, 1))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_20._f1._f3.virtual_gid], 4, 64, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) >> 0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(91.36) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(false, true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, sqrt(exp(0.0)), sqrt(0.0), cos(0.0), 0.0, 0.0, 0.0, exp(0.0)))) < injectionSwitch.y))))), true, false))))))), false, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), bool(bvec4(bool(bvec4(_GLF_DEAD(false), false, true, false)), false, false, true))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false)))), ! (! (_GLF_IDENTITY(false, true && (false)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), ! _GLF_IDENTITY((! ((_GLF_DEAD(false)))), true && (_GLF_IDENTITY((! ((_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! ((_GLF_DEAD(false)))), ! (! ((! ((_GLF_DEAD(false))))))), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_IDENTITY((! ((_GLF_DEAD(false)))), ! (! ((! ((_GLF_DEAD(false)))))))))))))))) || false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))), false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_20._f1._f3.virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id))), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(read_1) : (subgroup_local_id)))))), (subgroup_local_id) | (subgroup_local_id)) + 1 < subgroup_size)
  {
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(15.44, 8.8)))) : _GLF_FUZZED(vec2(3.4, -3.7)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0)), (clamp(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))) / determinant(mat4(1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 1.0)))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0)), (clamp(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))) / determinant(mat4(1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])) : _GLF_FUZZED(-26.14))))))))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false)), bvec3(bvec4(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false)), true)))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == _GLF_IDENTITY(read_2, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_2, uint(uvec3(read_2, 1u, 1u))), (_GLF_IDENTITY(read_2, uint(uvec3(read_2, 1u, 1u)))) << 0u)))), uint(uvec4(uint(read_1 + 1 == _GLF_IDENTITY(read_2, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_2, uint(_GLF_IDENTITY(uvec3(read_2, 1u, 1u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(read_2, 1u, 1u), max(uvec3(read_2, 1u, 1u), uvec3(read_2, 1u, 1u))))))), (_GLF_IDENTITY(read_2, uint(uvec3(read_2, 1u, 1u)))) << 0u)))), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), injectionSwitch.x)), 1u, 1u))), uint(uvec4(uint(read_1 + 1 == _GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (~ (read_2))), 0u ^ (_GLF_IDENTITY(read_2, uint(uvec3(read_2, 1u, 1u)))))), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-4.9)), _GLF_IDENTITY(bool(false), (bool(false)) || false)), (false ? _GLF_FUZZED(-2.7) : mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-4.9)), bool(false)))))), _GLF_IDENTITY(0u, (0u) >> (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ 1u, (false ? _GLF_FUZZED(next_virtual_gid) : ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), clamp(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u ^ (_GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ 1u)))), (1u & ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), uint(6u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, max(6u, 6u))), max(uint(6u), uint(6u))), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), uint(6u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), uint(6u)))))))) >> _GLF_IDENTITY(uint(6u), uint(6u))))))) + 1, 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), ! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), ((bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))) || false))))))))))), true, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, true)), false)))) || false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
}
