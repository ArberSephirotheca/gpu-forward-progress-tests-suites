#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_29 {
 uint workgroup_base;
 vec2 _f0;
} ;

struct _GLF_struct_26 {
 ivec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_25 {
 mat2x4 _f0;
 vec3 _f1;
 mat2x3 _f2;
 mat2 _f3;
 mat4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_27 {
 uvec3 _f0;
 mat4x2 _f1;
 _GLF_struct_25 _f2;
 uint workgroup_id;
 _GLF_struct_26 _f3;
 uvec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_23 {
 bool _f0;
 bool _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_22 {
 mat4x2 _f0;
} ;

struct _GLF_struct_21 {
 mat3x2 _f0;
 uvec3 _f1;
 mat2x3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_20 {
 uint _f0;
 vec3 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 bvec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
 vec4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_28 {
 _GLF_struct_24 _f0;
 vec4 _f1;
 vec3 _f2;
 _GLF_struct_27 _f3;
} ;

struct _GLF_struct_19 {
 uint num_workgroup;
 int _f0;
} ;

struct _GLF_struct_16 {
 int _f0;
 mat4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 bvec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 uint _f3;
 mat4x3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
} ;

struct _GLF_struct_17 {
 uint _f0;
 mat3x2 _f1;
 bool _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 uint _f1;
 mat2x3 _f2;
 uint _f3;
 vec2 _f4;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 ivec4 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_18 {
 mat2 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_17 _f4;
} ;

struct _GLF_struct_8 {
 int _f0;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 ivec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_5 {
 int _f0;
 vec4 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_4 {
 float _f0;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_1 {
 uint _f0;
 int _f1;
 mat4x3 _f2;
 int _f3;
 ivec4 _f4;
 vec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat4x3 _f1;
 mat2 _f2;
 mat4x2 _f3;
 mat3x2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 vec4 _f3;
 mat2x3 _f4;
 uint virtual_gid;
 ivec3 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_2 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_9 _f2;
 bool _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(mat2(1.0), mat4x3(1.0), mat3x2(1.0), _GLF_struct_12(_GLF_struct_11(mat4(1.0), 1u, mat2x3(1.0), 1u, vec2(1.0)), ivec4(1), gl_SubgroupInvocationID), _GLF_struct_17(1u, mat3x2(1.0), true, _GLF_struct_13(uvec3(1u)), _GLF_struct_14(mat2(1.0), bvec3(true), bvec4(true), 1u, mat4x3(1.0), vec4(1.0)), _GLF_struct_15(mat3x4(1.0), bvec2(true), mat3x4(1.0)), _GLF_struct_16(1, mat4(1.0), mat3x4(1.0))));
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(gl_NumWorkGroups.x, 1);
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_24(_GLF_struct_20(1u, vec3(1.0), ivec4(1), mat4x3(1.0), bvec4(true), bvec4(true)), _GLF_struct_21(mat3x2(1.0), uvec3(1u), mat2x3(1.0), ivec4(1)), _GLF_struct_22(mat4x2(1.0)), _GLF_struct_23(true, true, mat4x3(1.0), mat4x2(1.0), mat2x3(1.0)), vec4(1.0), ivec3(1)), vec4(1.0), vec3(1.0), _GLF_struct_27(uvec3(1u), mat4x2(1.0), _GLF_struct_25(mat2x4(1.0), vec3(1.0), mat2x3(1.0), mat2(1.0), mat4(1.0), ivec3(1)), gl_WorkGroupID.x, _GLF_struct_26(ivec2(1), ivec3(1)), uvec3(1u), mat2x3(1.0)));
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(workgroup_size * _GLF_struct_replacement_28._f3.workgroup_id, vec2(1.0));
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_2(_GLF_struct_0(mat3x4(1.0), mat4x3(1.0), mat2(1.0), mat4x2(1.0), mat3x2(1.0), ivec4(1)), mat3(1.0), _GLF_struct_1(1u, 1, mat4x3(1.0), 1, ivec4(1), vec3(1.0), vec3(1.0)), vec4(1.0), mat2x3(1.0), _GLF_struct_replacement_29.workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_18._f3.subgroup_local_id, ivec3(1)), _GLF_struct_6(uvec2(1u), _GLF_struct_3(mat2x4(1.0)), _GLF_struct_4(1.0), _GLF_struct_5(1, vec4(1.0), mat4x3(1.0), mat4x2(1.0), uvec3(1u))), _GLF_struct_9(_GLF_struct_7(mat2x4(1.0), ivec4(1), bvec2(true)), _GLF_struct_8(1), uvec2(1u)), true);
 uint next_virtual_gid = _GLF_struct_replacement_29.workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_18._f3.subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[_GLF_struct_replacement_10._f0.virtual_gid], 4, 64, 0);
 if(_GLF_struct_replacement_18._f3.subgroup_local_id + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     atomicStore(checker[_GLF_struct_replacement_10._f0.virtual_gid], read, 4, 64, 4);
    }
   subgroupAll(false);
  }
 else
  {
   atomicStore(checker[_GLF_struct_replacement_10._f0.virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
