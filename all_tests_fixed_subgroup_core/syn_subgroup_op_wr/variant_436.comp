#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_89 {
 int _f0;
 uvec3 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 bvec3 _f4;
 bvec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_88 {
 bvec3 _f0;
 float _f1;
 bvec2 _f2;
 int _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_90 {
 _GLF_struct_88 _f0;
 _GLF_struct_89 _f1;
} ;

struct _GLF_struct_86 {
 vec3 _f0;
 uvec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_85 {
 mat2x4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_87 {
 bool _f0;
 float _f1;
 _GLF_struct_85 _f2;
 bvec2 _f3;
 _GLF_struct_86 _f4;
 mat4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_83 {
 uvec4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_82 {
 vec3 _f0;
 mat2x4 _f1;
 mat3 _f2;
 mat4x2 _f3;
 ivec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_84 {
 _GLF_struct_82 _f0;
 _GLF_struct_83 _f1;
} ;

struct _GLF_struct_80 {
 uint _f0;
 mat3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_79 {
 mat4x3 _f0;
} ;

struct _GLF_struct_78 {
 bool _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_81 {
 mat3 _f0;
 int _f1;
 _GLF_struct_78 _f2;
 uvec4 _f3;
 _GLF_struct_79 _f4;
 _GLF_struct_80 _f5;
} ;

struct _GLF_struct_91 {
 _GLF_struct_81 _f0;
 mat3x2 _f1;
 ivec2 _f2;
 int _injected_loop_counter;
 _GLF_struct_84 _f3;
 _GLF_struct_87 _f4;
 _GLF_struct_90 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_75 {
 ivec3 _f0;
 uint _f1;
 ivec2 _f2;
 mat3x4 _f3;
 float _f4;
} ;

struct _GLF_struct_74 {
 ivec3 _f0;
 vec3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_73 {
 ivec3 _f0;
 uvec2 _f1;
 uint _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_72 {
 uvec4 _f0;
} ;

struct _GLF_struct_76 {
 _GLF_struct_72 _f0;
 uvec4 _f1;
 _GLF_struct_73 _f2;
 _GLF_struct_74 _f3;
 float _f4;
 _GLF_struct_75 _f5;
} ;

struct _GLF_struct_70 {
 mat3 _f0;
 float _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_69 {
 ivec2 _f0;
} ;

struct _GLF_struct_71 {
 uvec2 _f0;
 _GLF_struct_69 _f1;
 bool _GLF_SWITCH_0_23v;
 _GLF_struct_70 _f2;
} ;

struct _GLF_struct_77 {
 float _f0;
 mat4 _f1;
 _GLF_struct_71 _f2;
 _GLF_struct_76 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_66 {
 bvec2 _f0;
 bvec2 _f1;
 int _f2;
} ;

struct _GLF_struct_65 {
 mat2x4 _f0;
 mat4 _f1;
 int _f2;
 vec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_67 {
 _GLF_struct_65 _f0;
 _GLF_struct_66 _f1;
} ;

struct _GLF_struct_63 {
 vec2 _f0;
 mat3 _f1;
 int _f2;
 bvec2 _f3;
 bvec4 _f4;
 int _injected_loop_counter;
 vec4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_64 {
 _GLF_struct_63 _f0;
 mat4 _f1;
 float _f2;
} ;

struct _GLF_struct_61 {
 mat4 _f0;
 uvec4 _f1;
 float _f2;
 uvec2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_60 {
 mat4x3 _f0;
 bvec4 _f1;
 bvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_59 {
 ivec2 _f0;
 bvec4 _f1;
 ivec4 _f2;
 float _f3;
 bool _f4;
 mat2 _f5;
} ;

struct _GLF_struct_62 {
 _GLF_struct_59 _f0;
 _GLF_struct_60 _f1;
 int _f2;
 _GLF_struct_61 _f3;
} ;

struct _GLF_struct_68 {
 _GLF_struct_62 _f0;
 _GLF_struct_64 _f1;
 ivec3 _f2;
 _GLF_struct_67 _f3;
 mat4x3 _f4;
 bvec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_57 {
 int _f0;
} ;

struct _GLF_struct_55 {
 uvec3 _f0;
 mat3 _f1;
 ivec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_54 {
 uvec3 _f0;
} ;

struct _GLF_struct_56 {
 _GLF_struct_54 _f0;
 _GLF_struct_55 _f1;
} ;

struct _GLF_struct_53 {
 mat4x2 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_58 {
 mat2x3 _f0;
 int _injected_loop_counter;
 bvec2 _f1;
 _GLF_struct_53 _f2;
 bvec3 _f3;
 mat2x4 _f4;
 _GLF_struct_56 _f5;
 _GLF_struct_57 _f6;
} ;

struct _GLF_struct_51 {
 mat4x3 _f0;
} ;

struct _GLF_struct_49 {
 mat4x3 _f0;
 uint _f1;
 mat4x3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_48 {
 vec4 _f0;
 bvec4 _f1;
 vec3 _f2;
 mat3 _f3;
 mat2x4 _f4;
 mat3x4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_47 {
 ivec2 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_46 {
 uvec4 _f0;
 mat4x3 _f1;
 ivec3 _f2;
 uvec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_45 {
 bool _f0;
 mat3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_50 {
 _GLF_struct_45 _f0;
 _GLF_struct_46 _f1;
 _GLF_struct_47 _f2;
 _GLF_struct_48 _f3;
 _GLF_struct_49 _f4;
} ;

struct _GLF_struct_43 {
 uint _f0;
 mat3x2 _f1;
 vec2 _f2;
 vec2 _f3;
 vec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_42 {
 mat3x2 _f0;
 float _f1;
 mat4x3 _f2;
 ivec3 _f3;
 ivec4 _f4;
 mat4x2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_44 {
 bvec2 _f0;
 _GLF_struct_42 _f1;
 mat2 _f2;
 int _f3;
 _GLF_struct_43 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_40 {
 bool _f0;
 mat2 _f1;
 uvec3 _f2;
 mat4 _f3;
 ivec4 _f4;
 uvec4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_39 {
 mat3x2 _f0;
 uint _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_38 {
 uvec2 _f0;
} ;

struct _GLF_struct_41 {
 _GLF_struct_38 _f0;
 mat2x4 _f1;
 uint _f2;
 _GLF_struct_39 _f3;
 mat3x2 _f4;
 bvec3 _f5;
 _GLF_struct_40 _f6;
} ;

struct _GLF_struct_52 {
 _GLF_struct_41 _f0;
 _GLF_struct_44 _f1;
 mat2 _f2;
 _GLF_struct_50 _f3;
 uint read;
 _GLF_struct_51 _f4;
} ;

struct _GLF_struct_35 {
 bvec2 _f0;
 vec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_34 {
 ivec4 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 ivec2 _f4;
 int _f5;
 uint _f6;
} ;

struct _GLF_struct_33 {
 mat4x3 _f0;
 uint _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_36 {
 ivec2 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_34 _f2;
 mat2 _f3;
 _GLF_struct_35 _f4;
} ;

struct _GLF_struct_32 {
 uvec2 _f0;
} ;

struct _GLF_struct_37 {
 mat4x2 _f0;
 _GLF_struct_32 _f1;
 mat2x4 _GLF_SWITCH_1_20v;
 _GLF_struct_36 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_29 {
 int _injected_loop_counter;
 bvec2 _f0;
 uvec3 _f1;
 mat2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_30 {
 _GLF_struct_29 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_27 {
 mat4x3 _f0;
 int _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_26 {
 bvec4 _f0;
 int _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_28 {
 _GLF_struct_26 _f0;
 _GLF_struct_27 _f1;
} ;

struct _GLF_struct_24 {
 bvec4 _f0;
 mat3 _f1;
 vec4 _f2;
 mat3x2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_23 {
 mat3 _f0;
 int _f1;
 ivec4 _f2;
 mat3 _f3;
 mat4 _f4;
 mat4x3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_25 {
 _GLF_struct_23 _f0;
 _GLF_struct_24 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_31 {
 _GLF_struct_25 _f0;
 _GLF_struct_28 _f1;
 float _f2;
 _GLF_struct_30 _f3;
 float _f4;
 bvec2 _f5;
 int _f6;
} ;

struct _GLF_struct_22 {
 uint workgroup_base;
 bvec4 _f0;
} ;

struct _GLF_struct_19 {
 mat4x3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_18 {
 bvec2 _f0;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
 _GLF_struct_17 _f1;
 bvec4 _f2;
 _GLF_struct_18 _f3;
 bvec4 _f4;
 _GLF_struct_19 _f5;
} ;

struct _GLF_struct_21 {
 bool _f0;
 mat2 _f1;
 int _f2;
 _GLF_struct_20 _f3;
 uint workgroup_id;
} ;

struct _GLF_struct_14 {
 uint _f0;
 ivec2 _f1;
 mat3 _f2;
 bvec3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
 uvec3 _f3;
 mat2 _f4;
 bvec4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_15 {
 mat3x2 _f0;
 vec3 _f1;
 _GLF_struct_13 _f2;
 ivec3 _f3;
 mat3x4 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_16 {
 int _injected_loop_counter;
 mat2x3 _f0;
 _GLF_struct_15 _f1;
 ivec3 _f2;
 uvec3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 bvec3 _f1;
 mat2x3 _f2;
 mat2 _f3;
 float _f4;
 ivec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 uint _f1;
 mat2 _f2;
 float _f3;
 vec4 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 mat2 _f1;
 ivec4 _f2;
 bvec4 _f3;
 _GLF_struct_10 _f4;
 mat2x3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 uvec2 _f1;
 uvec3 _f2;
 bvec2 _f3;
 mat3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 bvec2 _f1;
 mat3x4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 vec3 _f1;
 mat4 _f2;
 mat2x3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 bool _f1;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 bool _f1;
 mat4x2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat3x4 _f1;
 uint _f2;
 ivec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat3x4 _f2;
 _GLF_struct_2 _f3;
 vec4 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_12 {
 float _f0;
 int _injected_loop_counter;
 bvec2 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_8 _f4;
 mat4x3 _f5;
 _GLF_struct_11 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     break;
                    }
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(_GLF_struct_68 _GLF_struct_replacement_68 = _GLF_struct_68(_GLF_struct_62(_GLF_struct_59(ivec2(1), bvec4(true), ivec4(1), 1.0, true, mat2(1.0)), _GLF_struct_60(mat4x3(1.0), bvec4(true), bvec3(true), 1u), 1, _GLF_struct_61(mat4(1.0), uvec4(1u), 1.0, uvec2(1u), ivec4(1))), _GLF_struct_64(_GLF_struct_63(vec2(1.0), mat3(1.0), 1, bvec2(true), bvec4(true), (97561 & 0), vec4(1.0), mat3(1.0)), mat4(1.0), 1.0), ivec3(1), _GLF_struct_67(_GLF_struct_65(mat2x4(1.0), mat4(1.0), 1, vec3(1.0), vec3(1.0)), _GLF_struct_66(bvec2(true), bvec2(true), 1)), mat4x3(1.0), bvec4(true), vec3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_68._f1._f0._injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))); _GLF_struct_replacement_68._f1._f0._injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(true, mat2(1.0), 1, _GLF_struct_20(mat2x4(1.0), _GLF_struct_17(mat2(1.0)), bvec4(true), _GLF_struct_18(bvec2(true)), bvec4(true), _GLF_struct_19(mat4x3(1.0), ivec4(1))), gl_WorkGroupID.x);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(workgroup_size * _GLF_struct_replacement_21.workgroup_id, bvec4(true));
 uint virtual_gid = _GLF_struct_replacement_22.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_struct_replacement_22.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_52 _GLF_struct_replacement_52 = _GLF_struct_52(_GLF_struct_41(_GLF_struct_38(uvec2(1u)), mat2x4(1.0), 1u, _GLF_struct_39(mat3x2(1.0), 1u, uvec3(1u)), mat3x2(1.0), bvec3(true), _GLF_struct_40(true, mat2(1.0), uvec3(1u), mat4(1.0), ivec4(1), uvec4(1u), vec4(1.0))), _GLF_struct_44(bvec2(true), _GLF_struct_42(mat3x2(1.0), 1.0, mat4x3(1.0), ivec3(1), ivec4(1), mat4x2(1.0), bvec2(true)), mat2(1.0), 1, _GLF_struct_43(1u, mat3x2(1.0), vec2(1.0), vec2(1.0), vec2(1.0), bvec3(true)), mat4x2(1.0)), mat2(1.0), _GLF_struct_50(_GLF_struct_45(true, mat3(1.0), mat2(1.0)), _GLF_struct_46(uvec4(1u), mat4x3(1.0), ivec3(1), uvec2(1u), bvec2(true)), _GLF_struct_47(ivec2(1), mat3x4(1.0), mat4x3(1.0), uvec3(1u)), _GLF_struct_48(vec4(1.0), bvec4(true), vec3(1.0), mat3(1.0), mat2x4(1.0), mat3x4(1.0), uvec2(1u)), _GLF_struct_49(mat4x3(1.0), 1u, mat4x3(1.0), mat3(1.0))), atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_struct_51(mat4x3(1.0)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      continue;
    }
   else
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))))
          {
           case 28:
           while(false)
            {
             bvec2 _GLF_SWITCH_0_0v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(ivec4 _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[30]; (mix(subgroup_size, virtual_gid, true) >= atomicAdd(_GLF_struct_replacement_52.read, 172344u)); fma(injectionSwitch.grg, vec3(-727.473, 6.9, 7.5), vec3(-691.383, 6414.1618, -24.89)))
              {
               if(_GLF_DEAD(false))
                continue;
               while((mat4x2(966.036, 74.60, -104.185, 91.18, 8.7, 6946.4376, -7132.9485, 69.15) != mat4x2(8.5, 115.400, -8.5, 9890.4321, -687.079, -128.974, 7.3, -0.6)))
                {
                 uvec4 _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[22];
                 -49889;
                 do
                  {
                   mat2x4(1375.7078, 8.9, 112.776, 220.821, 4.7, -2288.6470, 4095.8799, -512.337)[1];
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                  }
                 uint _GLF_SWITCH_0_6v[3], _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-30944 & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   _GLF_SWITCH_0_1v;
                  }
                 else
                  {
                  }
                 uvec2(105861u, 198721u);
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   ;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          return;
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               if((mat3(0.7, -3923.2540, 26.30, -7.9, -2.1, 4.5, 2.7, -5.6, -8168.3440) == mat3(-568.598, -4.6, 35.77, 6.0, 1.6, 87.97, -867.473, -96.08, 1.7)))
                {
                 if(_GLF_DEAD(false))
                  break;
                 bvec4(false, true, true, false);
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 mat2(9.8, -0.0, 601.403, 519.019);
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                    }
                  }
                 mat2x3 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 float _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v[8], _GLF_SWITCH_0_14v;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   mat4(-959.894, 8.1, -7.8, -2.3, -6.9, 227.664, -2.6, 112.304, -5.5, -4.1, -6.1, -2339.3244, -758.965, -64.84, 94.34, -1.5);
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 do
                  {
                   mat2x3(mat3x4(mat2(9394.4749, -1.2, 87.83, 20.32)));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  break;
                 mat3x2 _GLF_SWITCH_0_15v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   subgroup_local_id;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  break;
                 mat2x4 _GLF_SWITCH_0_16v[9], _GLF_SWITCH_0_17v;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                 (9328 >> 98216);
                 bvec3 _GLF_SWITCH_0_18v[81], _GLF_SWITCH_0_19v[25], _GLF_SWITCH_0_20v;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              break;
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                break;
               }
              if(_GLF_DEAD(false))
               return;
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                 }
               }
              else
               {
                if(_GLF_DEAD(false))
                 return;
                while(((false ? mat4(-0.9, 7577.8541, 57.61, -0.2, -8.1, 49.32, -7.2, -3371.0230, -8.5, 1.0, -7.7, 4.1, -10.57, -6.7, 5.3, -7.9) : mat4(15.75, 4.6, -89.02, -4.3, -5496.5237, -11.96, 190.967, -52.12, 2.3, 819.203, -8963.8931, -6.9, -594.714, -35.79, 6.2, 77.96)) == (false ? mat4(82.03, 6.8, 9651.5661, -4.1, 8091.1470, -87.98, 1.0, -80.94, -70.10, 756.325, -52.16, 7.0, -9.0, -3000.0565, 58.71, 6630.2366) : mat4(8.6, 1.3, -36.56, 5898.0736, 94.94, -9.5, 1.4, -10.36, -838.153, 66.09, -937.328, 6.3, 39.87, -4.3, -3.4, 0.0))))
                 {
                  ivec3(54582, 67549, -41140);
                  (uvec4(161228u, 142604u, 16635u, 163025u) >> num_workgroup);
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                       {
                        barrier();
                       }
                     }
                    if(_GLF_DEAD(false))
                     barrier();
                    if(_GLF_DEAD(false))
                     continue;
                    do
                     {
                      barrier();
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  ;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   barrier();
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -33573)); _injected_loop_counter --)
                   {
                    (91.60 + mat4x3(mat3(853.254, 54.83, -4212.1723, -220.981, 1709.6632, -6.5, 1887.0249, 4.3, -575.730)));
                   }
                  if(_GLF_DEAD(false))
                   break;
                  bvec3 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v[46];
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  for(_GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(_GLF_struct_25(_GLF_struct_23(mat3(1.0), 1, ivec4(1), mat3(1.0), mat4(1.0), mat4x3(1.0), uvec4(1u)), _GLF_struct_24(bvec4(true), mat3(1.0), vec4(1.0), mat3x2(1.0), mat4x2(1.0)), mat2(1.0)), _GLF_struct_28(_GLF_struct_26(bvec4(true), 1, uvec3(1u)), _GLF_struct_27(mat4x3(1.0), 1, mat3x2(1.0))), 1.0, _GLF_struct_30(_GLF_struct_29(1, bvec2(true), uvec3(1u), mat2(1.0), bvec4(true)), uvec3(1u)), 1.0, bvec2(true), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_31._f3._f0._injected_loop_counter > 0); _GLF_struct_replacement_31._f3._f0._injected_loop_counter --)
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                     }
                    if(_GLF_DEAD(false))
                     barrier();
                    (-5.1 / vec3(8.2, -5183.3109, 72.70));
                   }
                  if(_GLF_DEAD(false))
                   continue;
                  _GLF_struct_77 _GLF_struct_replacement_77;
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                    if(_GLF_DEAD(false))
                     break;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                  mat2x3 _GLF_SWITCH_0_24v[22], _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
                  do
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      (mat3(mat4x2(9.9, 0.3, -26.45, -3.9, 38.18, -0.9, -5522.5381, 28.80)) / -31.69);
                      if(_GLF_DEAD(false))
                       barrier();
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      if(_GLF_DEAD(false))
                       barrier();
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                 }
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               vec3(-9.6, -0.4, 3047.0721);
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
              }
             for(mat4 _GLF_SWITCH_0_27v[73], _GLF_SWITCH_0_28v; false; ((true ? mat4x2(-34.27, 7388.8700, -2.5, 1782.8796, -6.3, -10.35, -1.3, -43.17) : mat4x2(27.06, -1.0, -2177.0205, -318.906, 7584.5846, -698.304, 26.99, -85.56)) * mat2x4(244.451, -170.415, -5.0, 4.8, -83.32, 55.58, -24.60, -5820.9874)))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                break;
               int _GLF_SWITCH_0_29v;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               mat2x4(mat3(-948.431, 3.1, -7.2, -1.0, 9.5, 8.5, -0.4, 4.5, 394.531));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                }
               else
                {
                }
               mat3(42.18, 9.7, 8.7, 3395.1184, -671.701, 4.3, -121.572, 8.0, 9.2);
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           case 0:
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           case 63:
           case 52:
           case 97:
           if(_GLF_DEAD(false))
            barrier();
           case 54:
           case 5:
           atomicStore(checker[virtual_gid], _GLF_struct_replacement_52.read, 4, 64, 4);
           case 29:
           case 71:
           do
            {
             subgroupAll(false);
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           case 16:
           for(float _GLF_SWITCH_0_30v; true; matrixCompMult(mat4x2(5697.0034, -1152.9849, 0.4, -84.60, -1.1, -4.4, -8.0, 3.8), mat4x2(-96.88, -3.3, -26.30, -46.83, -6.6, 5747.6410, 3.7, 6797.5309)))
            {
             vec3(0.5, -3.8, 4598.6572);
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(false))
                 break;
                barrier();
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 break;
                return;
               }
              for(_GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(1.0, (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1), bvec2(true), _GLF_struct_4(_GLF_struct_0(bvec2(true), mat3x4(1.0), 1u, ivec2(1), bvec2(true)), _GLF_struct_1(uvec2(1u)), mat3x4(1.0), _GLF_struct_2(vec3(1.0), true, mat4x2(1.0), uvec2(1u)), vec4(1.0), _GLF_struct_3(ivec4(1))), _GLF_struct_6(_GLF_struct_5(mat3x2(1.0), vec3(1.0), mat4(1.0), mat2x3(1.0), mat2x4(1.0)), true), _GLF_struct_8(_GLF_struct_7(mat4x3(1.0), uvec2(1u), uvec3(1u), bvec2(true), mat3(1.0), mat3(1.0)), bvec2(true), mat3x4(1.0), uvec4(1u)), mat4x3(1.0), _GLF_struct_11(_GLF_struct_9(vec2(1.0), 1u, mat2(1.0), 1.0, vec4(1.0)), mat2(1.0), ivec4(1), bvec4(true), _GLF_struct_10(mat3(1.0), bvec3(true), mat2x3(1.0), mat2(1.0), 1.0, ivec2(1), ivec3(1)), mat2x3(1.0), mat3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_12._injected_loop_counter > 0); _GLF_struct_replacement_12._injected_loop_counter --)
               {
                ;
                if(_GLF_DEAD(false))
                 barrier();
               }
              do
               {
                while((false != false))
                 {
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              {
               int _GLF_SWITCH_0_31v;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       (bvec3(true, false, true) , mat4x2(-9.2, 6.2, 6930.7572, -3.8, -3562.0455, -120.304, -879.707, -4615.3148));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               (+ mat3(mat4x3(6839.9097, -6.7, 6975.4099, -35.63, 5.3, -0.9, 168.278, 3.9, -1.8, 4158.2361, -3214.1783, 301.176)));
               if(_GLF_DEAD(false))
                break;
              }
              if(_GLF_DEAD(false))
               break;
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
                   {
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      barrier();
                     }
                   }
                 }
               }
              else
               {
               }
              if(_GLF_DEAD(false))
               break;
              for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
               {
                for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                 {
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     return;
                    return;
                   }
                 }
               }
              float _GLF_SWITCH_0_32v, _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v[11];
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                 continue;
                do
                 {
                  if(_GLF_DEAD(false))
                   {
                    do
                     {
                      barrier();
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                break;
               }
              float _GLF_SWITCH_0_35v, _GLF_SWITCH_0_36v[45];
              for(              (mat2x4(7597.7043, 8.0, -2.7, 43.43, -6361.5924, -6.2, 9.3, -2.4) + -53.37);
 false; vec3(36.59, -17.45, -1.8))
               {
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                 }
                mat2(-5196.0260, 3.3, 4.8, -3.0);
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                   {
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         barrier();
                        break;
                       }
                     }
                    else
                     {
                      ;
                     }
                   }
                 }
                else
                 {
                 }
                uvec4(141056u, 51719u, 162039u, 194065u);
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  mat4x3(-954.594, -272.180, 9.5, 704.687, 9.2, 85.74, -207.189, -90.67, 7.9, -0.5, 74.74, -1.2);
                 }
                else
                 {
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                mat4 _GLF_SWITCH_0_37v[36];
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    continue;
                   }
                  break;
                  if(_GLF_DEAD(false))
                   continue;
                 }
                if(_GLF_DEAD(false))
                 barrier();
                uvec3 _GLF_SWITCH_0_38v[99], _GLF_SWITCH_0_39v[69], _GLF_SWITCH_0_40v;
                uvec2 _GLF_SWITCH_0_41v, _GLF_SWITCH_0_42v;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    barrier();
                   }
                  break;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
               }
              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
               {
                for(_GLF_struct_91 _GLF_struct_replacement_91 = _GLF_struct_91(_GLF_struct_81(mat3(1.0), 1, _GLF_struct_78(true, ivec2(1)), uvec4(1u), _GLF_struct_79(mat4x3(1.0)), _GLF_struct_80(1u, mat3(1.0), vec4(1.0))), mat3x2(1.0), ivec2(1), 1, _GLF_struct_84(_GLF_struct_82(vec3(1.0), mat2x4(1.0), mat3(1.0), mat4x2(1.0), ivec4(1), bvec2(true)), _GLF_struct_83(uvec4(1u), bvec2(true))), _GLF_struct_87(true, 1.0, _GLF_struct_85(mat2x4(1.0), uvec4(1u)), bvec2(true), _GLF_struct_86(vec3(1.0), uvec3(1u), mat2x4(1.0)), mat4(1.0), uvec4(1u)), _GLF_struct_90(_GLF_struct_88(bvec3(true), 1.0, bvec2(true), 1, mat4x2(1.0)), _GLF_struct_89(1, uvec3(1u), bvec4(true), mat4x3(1.0), bvec3(true), bvec2(true), vec2(1.0))), ivec4(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_91._injected_loop_counter != 0); _GLF_struct_replacement_91._injected_loop_counter --)
                 {
                  subgroup_local_id;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    do
                     {
                      for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(4), int(4))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                       {
                        barrier();
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  if(_GLF_DEAD(false))
                   continue;
                 }
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               continue;
              do
               {
                while((uvec4(72826u, 77719u, 11286u, 56062u) != ((13762u % uvec4(190191u, 98331u, 197453u, 79994u)) >> _GLF_struct_replacement_52.read)))
                 {
                  ivec4 _GLF_SWITCH_0_43v[23];
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  if(_GLF_DEAD(false))
                   continue;
                  do
                   {
                    ;
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))));
                 }
                if(_GLF_DEAD(false))
                 break;
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               virtual_gid;
              }
             sin(injectionSwitch);
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               while(true)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   injectionSwitch;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 (vec3(5.0, 12.17, -35.14) + 11.74);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     break;
                    }
                   break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  break;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 do
                  {
                   ivec2 _GLF_SWITCH_0_44v, _GLF_SWITCH_0_45v[70], _GLF_SWITCH_0_46v[58];
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         bvec4(true, true, true, true);
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   int _GLF_SWITCH_0_47v[82], _GLF_SWITCH_0_48v, _GLF_SWITCH_0_49v;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     mat3x2(-95.32, -155.028, -787.936, 88.01, -449.729, 86.18);
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))))))
                    barrier();
                   mat2x4(490.783, -8952.5126, -9716.2712, 262.663, -467.143, -96.84, 527.655, 228.828);
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                  }
                 while((true == true));
                }
              }
             else
              {
              }
             {
              if(_GLF_DEAD(false))
               {
                do
                 {
                  return;
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               }
              if(_GLF_DEAD(false))
               {
                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                 {
                 }
                else
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         break;
                        return;
                       }
                      barrier();
                      if(_GLF_DEAD(false))
                       return;
                     }
                    if(_GLF_DEAD(false))
                     barrier();
                   }
                 }
                continue;
               }
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                continue;
               }
              for(              mat3x2(40.13, 0.8, -7.0, -58.77, 0.9, 70.86);
 false; bvec4(false, true, true, false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                mat2(outerProduct(vec3(-8654.8279, 0.3, -0.5), vec4(-3.2, 4612.6284, -961.919, 72.31)));
                for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 0) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                       {
                       }
                      else
                       {
                        if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                         break;
                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           barrier();
                         }
                        else
                         {
                          if(_GLF_DEAD(false))
                           break;
                          do
                           {
                            barrier();
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                        if(_GLF_DEAD(false))
                         continue;
                       }
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))
                     {
                     }
                    else
                     {
                      barrier();
                     }
                    if(_GLF_DEAD(false))
                     barrier();
                   }
                 }
                if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                 return;
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  do
                   {
                    if(_GLF_DEAD(false))
                     return;
                    for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                     {
                      outerProduct(vec4(-31.43, 5.3, 830.818, -7.4), mod(vec3(-352.255, 99.39, -6.2), sqrt(-9.2)));
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      barrier();
                      if(_GLF_DEAD(false))
                       barrier();
                     }
                    else
                     {
                     }
                   }
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       continue;
                      continue;
                     }
                    continue;
                   }
                  if(_GLF_DEAD(false))
                   break;
                 }
                if(_GLF_DEAD(false))
                 barrier();
               }
              if(_GLF_DEAD(false))
               break;
              if(_GLF_DEAD(false))
               return;
              ((uvec2(131764u, 135268u) >> uvec2(159009u, 194064u)) ^ uvec2(56197u, 52737u));
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 (++ workgroup_size);
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               ;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
              bvec2(false, false);
              bvec3 _GLF_SWITCH_0_50v, _GLF_SWITCH_0_51v, _GLF_SWITCH_0_52v[12];
              mat2x3 _GLF_SWITCH_0_53v, _GLF_SWITCH_0_54v;
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 mat3x2(-3.2, 8136.4480, -1882.6636, 6.1, 684.557, 6288.3346);
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
                  barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
              if(_GLF_DEAD(false))
               continue;
              do
               {
                while(true)
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    break;
                   }
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    for(_GLF_struct_58 _GLF_struct_replacement_58 = _GLF_struct_58(mat2x3(1.0), int(_GLF_ONE(1.0, injectionSwitch.y)), bvec2(true), _GLF_struct_53(mat4x2(1.0), mat3(1.0)), bvec3(true), mat2x4(1.0), _GLF_struct_56(_GLF_struct_54(uvec3(1u)), _GLF_struct_55(uvec3(1u), mat3(1.0), ivec2(1), ivec2(1))), _GLF_struct_57(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_58._injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | 0), 0))); _GLF_struct_replacement_58._injected_loop_counter --)
                     {
                      do
                       {
                        do
                         {
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                           {
                            for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                             {
                              if(_GLF_DEAD(false))
                               barrier();
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   return;
                                  barrier();
                                 }
                                return;
                               }
                             }
                            ;
                           }
                          if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                           barrier();
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      if(_GLF_DEAD(false))
                       barrier();
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 break;
                break;
               }
              if(_GLF_DEAD(false))
               barrier();
              do
               {
                do
                 {
                  do
                   {
                    if(_GLF_DEAD(false))
                     return;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              while(_GLF_WRAPPED_LOOP(false));
              do
               {
                for(                bvec4(false, true, false, false);
 mix(true, false, isinf(8.5)); mat4x2(-73.41, -7421.0439, -49.38, 865.287, -4617.0503, -472.303, 35.66, 72.27))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                   barrier();
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        return;
                       }
                      else
                       {
                       }
                     }
                   }
                  if(_GLF_DEAD(false))
                   return;
                 }
               }
              while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  return;
                 }
               }
              else
               {
               }
             }
             mat4x3 _GLF_SWITCH_0_55v, _GLF_SWITCH_0_56v[85];
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           default:
           1;
          }
         if(_GLF_DEAD(false))
          break;
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 else
                  {
                  }
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       switch(_GLF_SWITCH(0))
        {
         case 99:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         ;
         case 0:
         case 29:
         case 51:
         if(_GLF_DEAD(false))
          return;
         case 39:
         case 86:
         case 33:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         case 15:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(checker[virtual_gid], _GLF_struct_replacement_52.read, 4, 64, 4);
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         case 85:
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
          }
         else
          {
          }
         break;
         if(_GLF_DEAD(false))
          return;
         case 64:
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(           bvec4(true, true, false, false);
 true; all(bvec3(true, false, false)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               mat3(98.31, -437.141, 78.57, -3.1, 23.33, 7.4, -4322.7753, -905.589, -484.685);
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 do
                  {
                   for(_GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(1, mat2x3(1.0), _GLF_struct_15(mat3x2(1.0), vec3(1.0), _GLF_struct_13(vec3(1.0), mat4x2(1.0), mat3x4(1.0), uvec3(1u), mat2(1.0), bvec4(true), mat4x2(1.0)), ivec3(1), mat3x4(1.0), _GLF_struct_14(1u, ivec2(1), mat3(1.0), bvec3(true), uvec3(1u))), ivec3(1), uvec3(1u), mat4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_16._injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_16._injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(((bitfieldExtract(workgroup_size, 5005, -1921) & uvec2(167345u, 188802u)) == uvec2(154086u, 134583u)))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                         for(ivec2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v; (true ? false : true); (431.440 , bvec3(true, false, true)))
                          {
                           mat2 _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             break;
                            }
                           if(_GLF_DEAD(false))
                            break;
                           ivec4 _GLF_SWITCH_1_6v[81];
                           vec4(-427.221, 7371.4628, -417.857, -21.99);
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       while(true)
                        {
                         vec3 _GLF_SWITCH_1_7v[21], _GLF_SWITCH_1_8v[60];
                         mat4x2 _GLF_SWITCH_1_9v, _GLF_SWITCH_1_10v[23];
                         mat4x3 _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v[19];
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                              return;
                             barrier();
                            }
                          }
                         ivec4 _GLF_SWITCH_1_14v;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            continue;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              barrier();
                             break;
                            }
                           ;
                          }
                         else
                          {
                          }
                         do
                          {
                           _GLF_SWITCH_1_9v;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         (floatBitsToInt(vec4(-5.2, 6.9, -4.7, -6.2)) ^ 86258);
                        }
                       do
                        {
                         bvec4(true, bvec2(false, false), true);
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if((vec3(-90.72, 143.573, 5375.2474) == vec3(2550.3871, 8803.8458, -0.9)))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          barrier();
                         uvec2 _GLF_SWITCH_1_15v, _GLF_SWITCH_1_16v;
                         vec3(-404.204, 7073.9192, -7.0);
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         mat2 _GLF_SWITCH_1_17v, _GLF_SWITCH_1_18v[47], _GLF_SWITCH_1_19v;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       _GLF_struct_37 _GLF_struct_replacement_37;
                       uint _GLF_SWITCH_1_21v, _GLF_SWITCH_1_22v[17], _GLF_SWITCH_1_23v[51];
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                            return;
                          }
                         else
                          {
                           for(                           bvec2(true, false);
 (workgroup_size == 198788u); (_GLF_struct_replacement_37._GLF_SWITCH_1_20v == (2328.2880 / mat2x4(-886.644, 122.671, -2032.5064, 7.6, 1.2, 3163.5694, 21.53, 51.63))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                  }
                                 ;
                                }
                              }
                             uvec2 _GLF_SWITCH_1_24v, _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v[77];
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                             else
                              {
                              }
                             bvec4(false, false, false, true);
                             mat2(-5.4, -8.2, 14.23, 5.9);
                             vec3 _GLF_SWITCH_1_27v, _GLF_SWITCH_1_28v, _GLF_SWITCH_1_29v;
                             if(_GLF_DEAD(false))
                              return;
                             (mat4(3.2, -842.323, -8157.9285, 46.11, 35.04, -3342.8307, -923.299, -5.2, -4.0, 69.99, 7.3, -51.86, 56.30, 9.7, -44.27, -6.5) * (_GLF_struct_replacement_37._GLF_SWITCH_1_20v ++));
                             mat2 _GLF_SWITCH_1_30v, _GLF_SWITCH_1_31v;
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             ;
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                       do
                        {
                         (-9742.1878 , (ivec3(20493, -89813, 87797) % ivec3(-17203, -67617, 90409)));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))));
                       int _GLF_SWITCH_1_32v, _GLF_SWITCH_1_33v, _GLF_SWITCH_1_34v;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                continue;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         default:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
            barrier();
           return;
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           1;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
  }
}
