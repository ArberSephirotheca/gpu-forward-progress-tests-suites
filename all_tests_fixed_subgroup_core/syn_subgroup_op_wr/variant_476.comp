#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> (124030u & 0u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) + uvec3(0u, 0u, 0u)).x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))))), ~ _GLF_IDENTITY((~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u))), _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u))))), ((~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u)))))) | (_GLF_IDENTITY((~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(160904u, 24618u, 19967u)))).x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(160904u, 24618u, 19967u)))).x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(160904u, 24618u, 19967u)))).x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u))) : _GLF_FUZZED(subgroup_size))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(192707u) : (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) ^ 0u), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) ^ 0u), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u))))))))), uint(uvec4(_GLF_IDENTITY((false ? _GLF_FUZZED(192707u) : (~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) ^ 0u), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u)))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(192707u) : (~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) ^ 0u), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u)))))), uint(uvec2((false ? _GLF_FUZZED(192707u) : (~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uint(gl_NumWorkGroups.x)), (uint(uint(gl_NumWorkGroups.x))) | 0u)), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) ^ 0u), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) << 0u)))))), 0u))), (false ? _GLF_FUZZED(192707u) : (~ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) ^ 0u), gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))))) << 0u)))))))), 1u, 1u, 0u))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(90936) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
                      {
                      }
                     else
                      {
                       return;
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0)))); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
              break;
             return;
            }
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id + 1))) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) << 0u) ^ 0u))), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) << 0u) ^ 0u)))))) % subgroup_size)) - 0u))), (((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id + 1))) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) << 0u) ^ 0u))), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) << 0u) ^ 0u)))))) % subgroup_size)) - 0u))), (((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size))), 0u)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
    }
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(4), int(4))) | (4)))), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ 0u, 0u ^ ((subgroup_local_id) ^ 0u))) + 1 < subgroup_size)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), false || (bool(false)))), ! (! (! (_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), ((bool(false))) && true)))), (_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), ((bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true))))) || false)))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), false || (bool(false))))))) && true))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3((false), true, true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((false), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3((false), true, true))), true))), true)))))), _GLF_IDENTITY((! (false)) || false, bool(bvec2((_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (false), false, true), bvec3(bvec4(bvec3(! (false), false, true), true)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))), bvec3(bvec3(bvec3(! (false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))), true))), bvec3(bvec4(bvec3(! (false), false, true), true)))), true, true))))), bool(bvec2(bool(_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.6), _GLF_FUZZED(-7.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false || ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.6), _GLF_FUZZED(-7.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)))))), true)), bool(bvec2(bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), false, true), true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(! (false), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (false), false, true), true)), false)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(! (false), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (false), false, true), true)), false)))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(! (false), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (false), false, true)), bvec3(bvec3(bvec3(bvec3(! (false), false, true))))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(! (false), false, true), true)), false)))), true)), false)))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(! (false), _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true), true && ((true))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), bvec3(bvec4(bvec3(! (false), false, true), true)))), true, true))))), false)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)), true))))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, true), true)), false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec3(bvec3(bvec3(false, false, true))))))))) && true)), false))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0)))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0 ^ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) >> 0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 0)))) | (1))), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), int(int(int(0)))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / ((1 | 1) & 1))), min(int(0), _GLF_IDENTITY(int(0), (0 | 0) + (int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), min(int(0), int(0))))), max((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))), int(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 ^ (int(0)))) << 0), min(int(0), int(0)))), (0 << _GLF_IDENTITY(int(8), int(8))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(ivec2(1 << _GLF_IDENTITY(int(6), int(6)), 0)), (int(ivec2(1 << _GLF_IDENTITY(int(6), int(6)), 0))) - 0))) >> _GLF_IDENTITY(int(6), int(6)))))))) - 0) >> 0))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), 0, 1)))) | (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), clamp(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0)))) - (0 & -56356)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), 0 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))))))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), int(int(int(0)))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), 0 ^ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), min(int(0), int(0)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0)), clamp((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), min(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) | 0)))), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(0) : _GLF_FUZZED(18059))), min(int(0), int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) - 0))))))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, 1 * (0)))))))) - 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), max(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (0) >> 0))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), (true ? min(_GLF_IDENTITY(int(0), (int(0)) / 1), int(0)) : _GLF_FUZZED(80113))))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0))))))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), 0, 1)))) | (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), clamp(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0)))) - (0 & -56356)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), 0 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))))))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), int(int(int(0)))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), 0 ^ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), min(int(0), int(0)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0)), clamp((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), min(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) | 0)))), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(0) : _GLF_FUZZED(18059))), min(int(0), int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) - 0))))))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, 1 * (0)))))))) - 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), max(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (0) >> 0))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), (true ? min(_GLF_IDENTITY(int(0), (int(0)) / 1), int(0)) : _GLF_FUZZED(80113))))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0))))))))), true)), (bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), 0, 1)))) | (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), clamp(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0)))) - (0 & -56356)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))), 0 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) + 0)) / 1)))), int(0))))))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), int(int(int(0)))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), 0 ^ (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), ((_GLF_IDENTITY(int(0), min(int(0), int(0))))) ^ 0))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), min(int(0), int(0)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0)), clamp((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), min(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) | 0)))), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(0) : _GLF_FUZZED(18059))), min(int(0), int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) - 0))))))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, 1 * (0)))))))) - 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), max(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), min(int(0), int(0)))), max((_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, (0) >> 0))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2377) : 0))), int(0))), int(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))), ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(0), int(0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))))), 0, (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), min(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))), (int(_GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) | (int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), (true ? min(_GLF_IDENTITY(int(0), (int(0)) / 1), int(0)) : _GLF_FUZZED(80113))))), max((_GLF_IDENTITY(int(0), min(int(0), int(0)))), (_GLF_IDENTITY(int(0), min(int(0), int(0))))))) ^ 0) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))) - 0) >> 0))))))))), true))) || false)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5194.0641))) > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.8), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED((81.09 + 960.646))), float((injectionSwitch)[1]), bool(true)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.2)), bvec2(true, false))).x > injectionSwitch.y))))))), (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
          return;
         do
          {
           subgroupAll(_GLF_IDENTITY(false, true && (false)));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             atomicStore(checker[virtual_gid], read, 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch)))).y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) + 0)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             subgroupAll(true);
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, false, true)), (bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, false, true))) && true)))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0 >> _GLF_IDENTITY(int(1), int(1))))) | 0)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false)) || false))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))))))), true, false)))))) || false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true)))) || false), ! (! (! (! (false)))))))))))))))), true, false)))))) || false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))))), bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))))), true, true, false)))))), true, false)))))) || false))) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), false, false)), ! (! (bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))) || false)) || false)) || false))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))), true, false)))))) || false))) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), false, false)), ! (! (bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))))))))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true, true, false)))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (0 | 0)), clamp(_GLF_IDENTITY(int(5), (int(5)) | (0 | 0)), _GLF_IDENTITY(int(5), (int(5)) | (0 | 0)), _GLF_IDENTITY(int(5), (int(5)) | (0 | 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
  }
}
