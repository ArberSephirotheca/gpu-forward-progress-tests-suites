#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  return;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), true && ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true))))))), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true && ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true && ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))), true && (_GLF_IDENTITY(bool((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true && ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))), bool(bvec2(bool((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true && ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))), false)))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))))))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / 1u) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u)), 1u * (uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 1u))))), workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / 1u) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u)), 1u * (uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 1u))))), workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u)))))) | 0u))) | 0u, min((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / 1u) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, _GLF_IDENTITY(1u, (1u) - 0u), 1u)), 1u * (uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 1u))))), workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u))))))) | 0u, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / 1u) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (0u) ^ 0u), 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id))))))))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))) ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u)), 1u * (uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 1u))))), workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u))))))) | _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : 0u)), ((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), _GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), min((0u) | (0u), (0u) | (0u)))), _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicOr(workgroup_size, 17334u)))))))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), _GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), min((0u) | (0u), (0u) | (0u)))), _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicOr(workgroup_size, 17334u)))))))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, max(1u, 1u))))) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u)), _GLF_IDENTITY(uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u)), 1u * (uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 1u))))), workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u))))))) | 0u) | ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 1u, 1u, (137781u & 0u))))) << (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) >> 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), uint(uvec3(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), uint(uvec3(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u, 0u)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), (true ? _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(subgroup_size, bitfieldReverse(129259u), false)) : 0u)) ^ (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / 1u) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id)))))), uint(uvec2(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id))) ^ subgroup_local_id)), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), clamp(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ 0u)) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)))), _GLF_IDENTITY(true ? _GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED((subgroup_id ^ subgroup_local_id)), 1u * (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, max(0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u, max(0u ^ 0u, 0u ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))), ((_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u)))) / 1u) | (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))))) << 0u) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))) ^ subgroup_local_id)))))), 1u)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u)), 1u * (uint(uvec4(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 1u))))), workgroup_size, workgroup_size))), 1u * ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))), 1u, 1u, 1u))))))) | 0u))))) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size)))))) - (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | (uint(6u)))))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), ((subgroup_local_id + 1) % subgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : (subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : (subgroup_local_id + 1) % subgroup_size), ~ (~ ((false ? _GLF_FUZZED(workgroup_size) : (subgroup_local_id + 1) % subgroup_size))))) - 0u))) | ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 1u), uvec3(uvec3(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 1u)))))), ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(162352u) : (subgroup_local_id + 1))) % subgroup_size) | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(uint(true)) : _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_size)), (subgroup_local_id + 1) % subgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))))) * 1u), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), 1u, 0u))))), ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))), (((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) >> (0u | 0u))), 0u, 0u)))), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)))) * 1u)) << 0u) | ((subgroup_local_id + 1) % subgroup_size)));
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(38.52) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))) * abs(1.0)), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))) * abs(1.0)), injectionSwitch.y)) - 0.0)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))) * abs(1.0)), injectionSwitch.y))) ^ (0 & _GLF_IDENTITY((- 51366), min((- 51366), (- 51366))))), true && (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))) && true)))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(24622) : int(_GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))) && true)) || false))))) || false); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))))))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (4) * 1));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) - 0)])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (true ? buf[virtual_gid] : _GLF_FUZZED(atomicMin(subgroup_size, workgroup_id)))))), (buf[virtual_gid]) << 0u), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, (4) + 0)))) | (4)), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(2.9), (_GLF_FUZZED(2.9)) / 1.0)), vec2(_GLF_FUZZED(-377.530), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), true))))).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) / 1.0)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.1)), vec2(_GLF_FUZZED(2762.6026), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), bvec2(false, true))).x > injectionSwitch.y))))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u))))), max(~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u))))), _GLF_IDENTITY(uint(uvec3(~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u))))), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), (uint(uvec3(~ (~ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u))))), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> 0u)))))], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.0, 47.54)) : injectionSwitch))) / vec2(1.0, 1.0)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(75.01) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.0, 47.54)) : injectionSwitch))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(vec2(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), 1.0))))) / 1.0))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-966.864, (-966.864) * 1.0))), float(injectionSwitch.y), bool(true)))) * _GLF_IDENTITY(cos(0.0), max(cos(0.0), _GLF_IDENTITY(cos(0.0), (true ? cos(0.0) : _GLF_FUZZED(-463.706))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (false))) || false)))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))), ! (! ((false)))) && true)))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))) || false)))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (false)), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, true, true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, (64) / (1 & 1)) : _GLF_FUZZED(31971))), (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(31971)))) ^ 0), 4);
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (false ? _GLF_FUZZED(ldexp(1400.1181, (_injected_loop_counter + _injected_loop_counter))) : _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), clamp(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
  }
}
