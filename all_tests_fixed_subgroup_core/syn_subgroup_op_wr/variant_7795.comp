#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = subgroup_id;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     do
                                      {
                                       return;
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                         GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y = subgroup_size;
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, (0) + 0))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(51498) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = subgroup_local_id;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 0))), int(6)))))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 & -37458); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.z = virtual_gid;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y + ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1) % GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           return;
          }
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) & 1)); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(1), 4, 64, 4);
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.z], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.x = read;
            }
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1 < GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y)
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 83:
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(5), int(5))) & -5495)); _injected_loop_counter --)
                              {
                               do
                                {
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = (int(129284u) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 & ivec4(-82782, -81438, -84180, -41754).w))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                      {
                                       atomicStore(checker[GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.z], GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.x, 4, 64, 4);
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             else
              {
              }
             case 1:
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             subgroupAll(false);
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                }
              }
             break;
             case 78:
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             {
              if((bvec4(false, false, false, false) != bvec4(false, false, true, true)))
               {
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    do
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          if(_GLF_WRAPPED_IF_FALSE(false))
                           {
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          else
                           {
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                               }
                              else
                               {
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 46158)); _injected_loop_counter --)
                                   {
                                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                     {
                                      while(true)
                                       {
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                           }
                         }
                        else
                         {
                         }
                       }
                      else
                       {
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  else
                   {
                   }
                 }
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    do
                     {
                      bvec2(false, false);
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                 }
                for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -19837); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                 {
                  do
                   {
                    for(int _injected_loop_counter = (1 ^ (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          mat4x3(8533.0813, 330.910, 1753.6924, -3.9, -9348.0824, -470.673, -9.6, -503.975, 7.6, -2145.2383, 62.39, 61.14);
                         }
                       }
                     }
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  do
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                     {
                      do
                       {
                        return;
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     }
                    do
                     {
                      return;
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 }
                do
                 {
                  bvec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[52];
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                       }
                      else
                       {
                        mat4x2(49.24, -743.932, -5.4, -259.880, -558.512, 8.5, 4812.0967, 9084.1633);
                       }
                     }
                    else
                     {
                     }
                   }
                  else
                   {
                   }
                  for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                   {
                    do
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      do
                                       {
                                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                         {
                                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                           return;
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                     }
                                   }
                                 }
                                else
                                 {
                                 }
                                for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                 {
                                  do
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      if(_GLF_WRAPPED_IF_FALSE(false))
                                       {
                                       }
                                      else
                                       {
                                        for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                         {
                                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                           {
                                            do
                                             {
                                              if(_GLF_WRAPPED_IF_TRUE(true))
                                               {
                                                for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                 {
                                                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                   {
                                                    do
                                                     {
                                                      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                                                       {
                                                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                         {
                                                          return;
                                                         }
                                                       }
                                                      else
                                                       {
                                                       }
                                                     }
                                                    while(_GLF_WRAPPED_LOOP(false));
                                                   }
                                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                   break;
                                                 }
                                               }
                                              else
                                               {
                                               }
                                             }
                                            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                           }
                                         }
                                       }
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                 }
                               }
                             }
                            else
                             {
                             }
                           }
                         }
                       }
                      else
                       {
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  ivec4 _GLF_SWITCH_0_3v;
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                   }
                  else
                   {
                    for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                     {
                      if(_GLF_WRAPPED_IF_FALSE(false))
                       {
                       }
                      else
                       {
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                         {
                          if(_GLF_WRAPPED_IF_FALSE(false))
                           {
                           }
                          else
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                               {
                                findMSB(uvec3(128901u, 124224u, 87863u));
                               }
                             }
                            else
                             {
                             }
                            if(_GLF_DEAD(false))
                             break;
                           }
                         }
                       }
                     }
                   }
                  mat4x3 _GLF_SWITCH_0_4v;
                  ;
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                         {
                          uvec2(100510u, 48489u).r;
                         }
                        do
                         {
                          if(_GLF_DEAD(false))
                           return;
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                     }
                    else
                     {
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                   {
                   }
                  else
                   {
                    do
                     {
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                       }
                      else
                       {
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                         {
                          ;
                         }
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -88789)); _injected_loop_counter --)
                       {
                        if(_GLF_DEAD(false))
                         return;
                       }
                     }
                    else
                     {
                     }
                   }
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    do
                     {
                      mat4x3(1.0, 20.21, -7581.1466, -70.13, -99.82, 3.6, -85.74, -9719.1786, -2.0, -0.3, -722.231, -1.1);
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                           {
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              return;
                             }
                           }
                         }
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  else
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(false))
                       return;
                     }
                    else
                     {
                     }
                   }
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))));
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    return;
                   }
                  else
                   {
                   }
                 }
                for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(_injected_loop_counter) : int(8)))))); _injected_loop_counter --)
                 {
                  while((GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.x > workgroup_size))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          return;
                         }
                        else
                         {
                         }
                       }
                     }
                    else
                     {
                     }
                    do
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          do
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             return;
                            if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                             {
                              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                               {
                                if(_GLF_DEAD(false))
                                 break;
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))))); _injected_loop_counter ++)
                                   {
                                    do
                                     {
                                      do
                                       {
                                        if(_GLF_DEAD(false))
                                         {
                                          if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                           return;
                                          if(_GLF_DEAD(false))
                                           break;
                                          if(_GLF_DEAD(false))
                                           break;
                                          if(_GLF_WRAPPED_IF_TRUE(true))
                                           {
                                            if(_GLF_WRAPPED_IF_TRUE(true))
                                             {
                                              if(_GLF_WRAPPED_IF_FALSE(false))
                                               {
                                               }
                                              else
                                               {
                                                if(_GLF_WRAPPED_IF_TRUE(true))
                                                 {
                                                  for(int _injected_loop_counter = (0 & -12652); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                   {
                                                    return;
                                                   }
                                                 }
                                                else
                                                 {
                                                 }
                                               }
                                             }
                                            else
                                             {
                                             }
                                           }
                                          else
                                           {
                                           }
                                          if(_GLF_DEAD(false))
                                           continue;
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(false));
                                     }
                                    while(_GLF_WRAPPED_LOOP(false));
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  do
                                   {
                                    mat4(-891.493, 361.455, 769.918, -506.940, -6.6, 1144.1049, 45.02, -7.2, 9.5, 95.70, -147.531, 89.25, -4.3, -268.416, -9.5, -414.756);
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                                else
                                 {
                                 }
                               }
                             }
                            else
                             {
                             }
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                        else
                         {
                         }
                       }
                      else
                       {
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                     }
                    else
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          max(-41465, 40673);
                         }
                       }
                     }
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                     {
                      for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))); _injected_loop_counter --)
                       {
                        do
                         {
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                             {
                              return;
                             }
                            else
                             {
                             }
                           }
                         }
                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                           {
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                do
                                 {
                                  if(_GLF_DEAD(false))
                                   {
                                    do
                                     {
                                      return;
                                     }
                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   }
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                             }
                           }
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                         }
                        else
                         {
                         }
                       }
                     }
                    greaterThan(vec3(2.9, -4.3, -8.2), (vec3(368.413, 9.1, -1.2) + vec3(-5.2, 365.003, -80.88)));
                    do
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          ;
                         }
                       }
                      else
                       {
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   }
                 }
                for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 0)); _injected_loop_counter --)
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_DEAD(false))
                     {
                      for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        return;
                       }
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                           {
                            return;
                           }
                         }
                        else
                         {
                         }
                       }
                      do
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                           }
                          else
                           {
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              while(false)
                               {
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                                 {
                                 }
                                else
                                 {
                                  do
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      do
                                       {
                                        for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                         {
                                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                           {
                                            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                             {
                                              do
                                               {
                                                ivec4(-60295, 37807, 59300, -38447);
                                                if(_GLF_DEAD(false))
                                                 {
                                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                   continue;
                                                  break;
                                                 }
                                               }
                                              while(_GLF_WRAPPED_LOOP(false));
                                             }
                                            if(_GLF_WRAPPED_IF_TRUE(true))
                                             {
                                              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                               {
                                                if(_GLF_DEAD(false))
                                                 {
                                                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | ((0 << _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter --)
                                                   {
                                                    return;
                                                   }
                                                 }
                                               }
                                             }
                                            else
                                             {
                                             }
                                           }
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(false));
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                                for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                 {
                                  mat2(423.974, 6.3, 7.2, 534.021);
                                 }
                                if(_GLF_DEAD(false))
                                 continue;
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                   {
                                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                     {
                                      for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                       {
                                        return;
                                       }
                                     }
                                    else
                                     {
                                     }
                                   }
                                  else
                                   {
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                 }
                                else
                                 {
                                  do
                                   {
                                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                     break;
                                    if(_GLF_DEAD(false))
                                     {
                                      if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                       return;
                                      continue;
                                     }
                                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                     {
                                     }
                                    else
                                     {
                                      if(_GLF_WRAPPED_IF_FALSE(false))
                                       {
                                       }
                                      else
                                       {
                                        do
                                         {
                                          for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                           {
                                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                             {
                                              if(_GLF_WRAPPED_IF_TRUE(true))
                                               {
                                                return;
                                               }
                                              else
                                               {
                                               }
                                             }
                                            if(_GLF_DEAD(false))
                                             {
                                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                               {
                                                return;
                                               }
                                             }
                                            do
                                             {
                                              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                               {
                                                do
                                                 {
                                                  for(int _injected_loop_counter = ((-81079 & 0) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                   {
                                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                     {
                                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                                       {
                                                        mat2x3(48.10, 0.5, 3.4, -22.22, -7.1, 1.6);
                                                       }
                                                      else
                                                       {
                                                       }
                                                     }
                                                   }
                                                 }
                                                while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                                                if(_GLF_DEAD(false))
                                                 return;
                                                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                                 break;
                                               }
                                              else
                                               {
                                               }
                                             }
                                            while(_GLF_WRAPPED_LOOP(false));
                                           }
                                         }
                                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                       }
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 break;
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                  if(_GLF_DEAD(false))
                                   continue;
                                  break;
                                  if(_GLF_DEAD(false))
                                   break;
                                 }
                                mat2x3 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v[56];
                                mat3x2 _GLF_SWITCH_0_7v[4], _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  do
                                   {
                                    do
                                     {
                                      for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                       {
                                        bvec4(true, true, true, false);
                                       }
                                     }
                                    while(_GLF_WRAPPED_LOOP(false));
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                                   {
                                    for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                     {
                                      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                                       {
                                        do
                                         {
                                          return;
                                         }
                                        while(_GLF_WRAPPED_LOOP(false));
                                       }
                                      if(_GLF_DEAD(false))
                                       continue;
                                     }
                                   }
                                  if(_GLF_DEAD(false))
                                   {
                                    if(_GLF_DEAD(false))
                                     continue;
                                    if(_GLF_DEAD(false))
                                     continue;
                                    break;
                                   }
                                 }
                                mat3x2(9522.7672, 34.63, 6.0, -1.9, -58.18, -45.17);
                                if(_GLF_DEAD(false))
                                 continue;
                                float _GLF_SWITCH_0_10v[32], _GLF_SWITCH_0_11v[51], _GLF_SWITCH_0_12v[21];
                                ;
                               }
                             }
                           }
                         }
                        else
                         {
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                         }
                        else
                         {
                          return;
                         }
                       }
                     }
                   }
                  else
                   {
                   }
                 }
               }
              else
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                vec2 _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v;
                for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                 {
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                   {
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                     {
                     }
                    else
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         return;
                        return;
                       }
                     }
                   }
                 }
                if(_GLF_DEAD(false))
                 return;
                mat2x4(1.9, 3319.9707, -72.16, -23.95, 3.9, -6358.0493, -8346.4278, -393.013);
                uvec4 _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v;
                ;
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      return;
                     }
                    else
                     {
                     }
                   }
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                         }
                        else
                         {
                          do
                           {
                            for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                             {
                              if(_GLF_DEAD(false))
                               return;
                             }
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             break;
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                       }
                      else
                       {
                       }
                     }
                   }
                  else
                   {
                   }
                 }
                else
                 {
                 }
                ivec4 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v;
               }
              do
               {
                for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      outerProduct(vec3(-21.52, 0.9, -2495.6288), injectionSwitch);
                     }
                    else
                     {
                     }
                   }
                  else
                   {
                   }
                 }
               }
              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              do
               {
                for(int _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v[26]; ((-6.2 < -88.82) || true); ivec3(36303, 45412, 19283))
                 {
                  uvec4 _GLF_SWITCH_0_23v;
                  do
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                     {
                      if(_GLF_DEAD(false))
                       break;
                      do
                       {
                        for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                         {
                          do
                           {
                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                             {
                              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                               {
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                   {
                                   }
                                  else
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      do
                                       {
                                        do
                                         {
                                          for(int _injected_loop_counter = (0 & 48952); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                           {
                                            uvec3(48418u, 184057u, 132215u);
                                           }
                                         }
                                        while(_GLF_WRAPPED_LOOP(false));
                                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                         break;
                                        if(_GLF_DEAD(false))
                                         continue;
                                       }
                                      while(_GLF_WRAPPED_LOOP(false));
                                      if(_GLF_DEAD(false))
                                       break;
                                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       {
                                        for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                         {
                                          return;
                                         }
                                       }
                                     }
                                   }
                                 }
                                if(_GLF_DEAD(false))
                                 break;
                               }
                             }
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                               return;
                             }
                            else
                             {
                             }
                           }
                          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         }
                        vec2 _GLF_SWITCH_0_24v, _GLF_SWITCH_0_25v[80], _GLF_SWITCH_0_26v[74];
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            do
                             {
                              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) | 0)); _injected_loop_counter --)
                               {
                                do
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    if(_GLF_WRAPPED_IF_TRUE(true))
                                     {
                                      89605;
                                     }
                                    else
                                     {
                                     }
                                   }
                                  else
                                   {
                                   }
                                  if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                   break;
                                 }
                                while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                          else
                           {
                            if(_GLF_DEAD(false))
                             break;
                           }
                         }
                        else
                         {
                         }
                        do
                         {
                          mix(uvec2(86816u, 121770u), uvec2(63416u, 46719u), bvec2(false, false));
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                        bvec4 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v;
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     }
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        do
                         {
                          do
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                               {
                                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    do
                                     {
                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                       {
                                        if(_GLF_WRAPPED_IF_TRUE(true))
                                         {
                                          while(false)
                                           {
                                            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                             {
                                              do
                                               {
                                                for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    if(_GLF_DEAD(false))
                                                     {
                                                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                       {
                                                        return;
                                                       }
                                                     }
                                                    do
                                                     {
                                                      -4.7;
                                                     }
                                                    while(_GLF_WRAPPED_LOOP(false));
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                               }
                                              while(_GLF_WRAPPED_LOOP(false));
                                             }
                                            else
                                             {
                                             }
                                            if(_GLF_WRAPPED_IF_FALSE(false))
                                             {
                                             }
                                            else
                                             {
                                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                               {
                                                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                                 {
                                                 }
                                                else
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                     {
                                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                                       {
                                                        if(_GLF_WRAPPED_IF_FALSE(false))
                                                         {
                                                         }
                                                        else
                                                         {
                                                          for(int _injected_loop_counter = _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(6), int(6))), max(((0 | 0) >> _GLF_IDENTITY(int(6), int(6))), ((0 | 0) >> _GLF_IDENTITY(int(6), int(6))))), ((0 | 0) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                           {
                                                            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                             {
                                                             }
                                                            else
                                                             {
                                                              bvec4(true, false, true, true);
                                                             }
                                                           }
                                                         }
                                                       }
                                                      else
                                                       {
                                                       }
                                                      if(_GLF_DEAD(false))
                                                       {
                                                        if(_GLF_WRAPPED_IF_FALSE(false))
                                                         {
                                                         }
                                                        else
                                                         {
                                                          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                           {
                                                            return;
                                                           }
                                                          else
                                                           {
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                               }
                                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                               {
                                                for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                                 {
                                                  do
                                                   {
                                                    do
                                                     {
                                                      if(_GLF_DEAD(false))
                                                       {
                                                        do
                                                         {
                                                          return;
                                                         }
                                                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                       }
                                                     }
                                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                   }
                                                  while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                                                 }
                                               }
                                             }
                                            ivec3 _GLF_SWITCH_0_30v[15], _GLF_SWITCH_0_31v, _GLF_SWITCH_0_32v;
                                            if(_GLF_WRAPPED_IF_FALSE(false))
                                             {
                                             }
                                            else
                                             {
                                              if(_GLF_DEAD(false))
                                               continue;
                                              if(_GLF_WRAPPED_IF_TRUE(true))
                                               {
                                                do
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                     {
                                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                                       {
                                                        (-78066 * ivec4(36953, -98797, -76932, -99303)).xxw;
                                                       }
                                                      else
                                                       {
                                                       }
                                                     }
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                                while(_GLF_WRAPPED_LOOP(false));
                                               }
                                              else
                                               {
                                               }
                                             }
                                           }
                                         }
                                        else
                                         {
                                         }
                                       }
                                      else
                                       {
                                       }
                                     }
                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   }
                                  else
                                   {
                                   }
                                 }
                                else
                                 {
                                 }
                                if(_GLF_DEAD(false))
                                 return;
                               }
                             }
                            else
                             {
                             }
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       }
                      else
                       {
                       }
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                   }
                  else
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))))); _injected_loop_counter --)
                       {
                        do
                         {
                          ivec3(32021, -14901, 5311);
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                     }
                    else
                     {
                     }
                   }
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        break;
                       }
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        do
                         {
                          do
                           {
                            if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                             {
                              do
                               {
                                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   {
                                   }
                                  else
                                   {
                                    do
                                     {
                                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                       {
                                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                         {
                                          for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                           {
                                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                             {
                                              do
                                               {
                                                if(_GLF_WRAPPED_IF_FALSE(false))
                                                 {
                                                 }
                                                else
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
                                                     {
                                                     }
                                                    else
                                                     {
                                                      if(_GLF_WRAPPED_IF_FALSE(false))
                                                       {
                                                       }
                                                      else
                                                       {
                                                        do
                                                         {
                                                          for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                           {
                                                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                             {
                                                              do
                                                               {
                                                                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                 {
                                                                 }
                                                                else
                                                                 {
                                                                  do
                                                                   {
                                                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                                                     {
                                                                     }
                                                                    else
                                                                     {
                                                                      for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                       {
                                                                        if(_GLF_WRAPPED_IF_TRUE(true))
                                                                         {
                                                                          for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                           {
                                                                            if(_GLF_WRAPPED_IF_FALSE(false))
                                                                             {
                                                                             }
                                                                            else
                                                                             {
                                                                              for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                               {
                                                                                if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                                                                 {
                                                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                   {
                                                                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 1) | 1)); _injected_loop_counter ++)
                                                                                     {
                                                                                      bvec2(false, true);
                                                                                     }
                                                                                   }
                                                                                  else
                                                                                   {
                                                                                   }
                                                                                 }
                                                                                else
                                                                                 {
                                                                                 }
                                                                               }
                                                                             }
                                                                           }
                                                                         }
                                                                        else
                                                                         {
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                  while(_GLF_WRAPPED_LOOP(false));
                                                                 }
                                                               }
                                                              while(_GLF_WRAPPED_LOOP(false));
                                                             }
                                                           }
                                                         }
                                                        while(_GLF_WRAPPED_LOOP(false));
                                                       }
                                                     }
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                                if(_GLF_DEAD(false))
                                                 continue;
                                               }
                                              while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))));
                                             }
                                           }
                                         }
                                       }
                                     }
                                    while(_GLF_WRAPPED_LOOP(false));
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  if(_GLF_DEAD(false))
                                   {
                                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                     continue;
                                    break;
                                   }
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    do
                                     {
                                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       {
                                        if(_GLF_DEAD(false))
                                         continue;
                                       }
                                      else
                                       {
                                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                                         {
                                          if(_GLF_WRAPPED_IF_FALSE(false))
                                           {
                                           }
                                          else
                                           {
                                            do
                                             {
                                              if(_GLF_WRAPPED_IF_FALSE(false))
                                               {
                                                if(_GLF_DEAD(false))
                                                 break;
                                               }
                                              else
                                               {
                                                transpose(mat4(-6.3, 5.5, 3.5, 4560.8273, -310.953, 7.8, -40.43, -6032.6717, -500.060, -5.4, 48.41, 3.3, -283.302, -7.5, 7.4, 28.27));
                                               }
                                             }
                                            while(_GLF_WRAPPED_LOOP(false));
                                           }
                                         }
                                       }
                                     }
                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   }
                                  else
                                   {
                                   }
                                 }
                                else
                                 {
                                 }
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                   continue;
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    do
                                     {
                                      return;
                                     }
                                    while(_GLF_WRAPPED_LOOP(false));
                                   }
                                  else
                                   {
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                                   {
                                    do
                                     {
                                      if(_GLF_DEAD(false))
                                       break;
                                      do
                                       {
                                        for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                         {
                                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-83586 & 0)); _injected_loop_counter --)
                                           {
                                            if(_GLF_WRAPPED_IF_FALSE(false))
                                             {
                                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                               {
                                                if(_GLF_WRAPPED_IF_FALSE(false))
                                                 {
                                                 }
                                                else
                                                 {
                                                  return;
                                                 }
                                               }
                                             }
                                            else
                                             {
                                              if(_GLF_WRAPPED_IF_TRUE(true))
                                               {
                                                if(_GLF_WRAPPED_IF_FALSE(false))
                                                 {
                                                 }
                                                else
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                     {
                                                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                       {
                                                        mat3(-2372.9106, 1.7, 0.6, -4.9, 25.23, 24.28, 2.5, 9.9, -8.4);
                                                       }
                                                     }
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                               }
                                              else
                                               {
                                               }
                                              if(_GLF_WRAPPED_IF_TRUE(true))
                                               {
                                                if(_GLF_DEAD(false))
                                                 {
                                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                   {
                                                   }
                                                  else
                                                   {
                                                    if(_GLF_DEAD(false))
                                                     break;
                                                    if(_GLF_WRAPPED_IF_TRUE(true))
                                                     {
                                                      return;
                                                     }
                                                    else
                                                     {
                                                     }
                                                   }
                                                 }
                                               }
                                              else
                                               {
                                               }
                                             }
                                            if(_GLF_DEAD(false))
                                             return;
                                           }
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                     }
                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   }
                                  else
                                   {
                                   }
                                 }
                                else
                                 {
                                 }
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   {
                                   }
                                  else
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                     {
                                     }
                                    else
                                     {
                                      do
                                       {
                                        do
                                         {
                                          if(_GLF_WRAPPED_IF_TRUE(true))
                                           {
                                            max(uvec3(81387u, 118748u, 3787u), uvec3(129306u, 180365u, 177286u));
                                           }
                                          else
                                           {
                                           }
                                         }
                                        while(_GLF_WRAPPED_LOOP(false));
                                       }
                                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                     }
                                   }
                                 }
                                mat4 _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v;
                                ivec3 _GLF_SWITCH_0_36v[62], _GLF_SWITCH_0_37v;
                                bvec2 _GLF_SWITCH_0_38v, _GLF_SWITCH_0_39v;
                                if(_GLF_DEAD(false))
                                 break;
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   {
                                   }
                                  else
                                   {
                                    do
                                     {
                                      if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                                       {
                                        if(_GLF_WRAPPED_IF_FALSE(false))
                                         {
                                         }
                                        else
                                         {
                                          for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                           {
                                            if(_GLF_WRAPPED_IF_TRUE(true))
                                             {
                                              do
                                               {
                                                do
                                                 {
                                                  if(_GLF_DEAD(false))
                                                   return;
                                                 }
                                                while(_GLF_WRAPPED_LOOP(false));
                                               }
                                              while(_GLF_WRAPPED_LOOP(false));
                                             }
                                            else
                                             {
                                             }
                                           }
                                         }
                                        if(_GLF_DEAD(false))
                                         return;
                                       }
                                      else
                                       {
                                        if(_GLF_DEAD(false))
                                         break;
                                        if(_GLF_WRAPPED_IF_TRUE(true))
                                         {
                                          for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                           {
                                            do
                                             {
                                              for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                               {
                                                if(_GLF_DEAD(false))
                                                 return;
                                                do
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    do
                                                     {
                                                      for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                                                       {
                                                        do
                                                         {
                                                          do
                                                           {
                                                            do
                                                             {
                                                              mat2x3(4233.4518, -7824.5058, 729.458, 951.386, 2.4, -18.27);
                                                             }
                                                            while(_GLF_WRAPPED_LOOP(false));
                                                           }
                                                          while(_GLF_WRAPPED_LOOP(false));
                                                         }
                                                        while(_GLF_WRAPPED_LOOP(false));
                                                       }
                                                     }
                                                    while(_GLF_WRAPPED_LOOP(false));
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                                while(_GLF_WRAPPED_LOOP(false));
                                                if(_GLF_DEAD(false))
                                                 continue;
                                                if(_GLF_DEAD(false))
                                                 continue;
                                                if(_GLF_DEAD(false))
                                                 return;
                                               }
                                             }
                                            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                           }
                                         }
                                        else
                                         {
                                          if(_GLF_DEAD(false))
                                           break;
                                         }
                                       }
                                      if(_GLF_DEAD(false))
                                       break;
                                     }
                                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                 {
                                 }
                                else
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    for(int _injected_loop_counter = (1 ^ (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                     {
                                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                       {
                                        for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
                                         {
                                          if(_GLF_DEAD(false))
                                           {
                                            if(_GLF_DEAD(false))
                                             {
                                              if(_GLF_DEAD(false))
                                               break;
                                              break;
                                             }
                                            return;
                                           }
                                         }
                                       }
                                     }
                                   }
                                  else
                                   {
                                   }
                                 }
                                vec4 _GLF_SWITCH_0_40v[83], _GLF_SWITCH_0_41v[89], _GLF_SWITCH_0_42v[97];
                               }
                              while((uvec3(43459u, 50227u, 55451u) == ((GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y + uvec3(102781u, 161633u, 29889u)) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x)));
                             }
                            else
                             {
                             }
                            if(_GLF_DEAD(false))
                             break;
                           }
                          while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      else
                       {
                       }
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                         {
                          for(int _injected_loop_counter = (0 ^ (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                           {
                            do
                             {
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   {
                                   }
                                  else
                                   {
                                    (mat3(-77.31, 3.9, -56.34, -75.35, 1193.3036, -27.42, -0.0, 7325.6249, -0.4) - 7.5);
                                   }
                                 }
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                         }
                       }
                      else
                       {
                       }
                     }
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      break;
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                   {
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      mat2x3(mat2(-7.5, 111.558, -46.05, 392.193));
                     }
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                     {
                      mat2x4(58.20, 8.8, -5.1, 667.651, 2.2, -94.80, 3799.5851, 0.5);
                     }
                   }
                  else
                   {
                   }
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(_GLF_DEAD(false))
               continue;
              do
               {
                if(_GLF_DEAD(false))
                 break;
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                     }
                    else
                     {
                      if(_GLF_DEAD(false))
                       return;
                     }
                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                       {
                        ;
                       }
                     }
                   }
                  else
                   {
                   }
                 }
                else
                 {
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              do
               {
                do
                 {
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(false))
                       {
                        do
                         {
                          if(_GLF_WRAPPED_IF_FALSE(false))
                           {
                           }
                          else
                           {
                            do
                             {
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                do
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(false))
                                   {
                                   }
                                  else
                                   {
                                    for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                     {
                                      for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                       {
                                        if(_GLF_WRAPPED_IF_TRUE(true))
                                         {
                                          do
                                           {
                                            return;
                                           }
                                          while(_GLF_WRAPPED_LOOP(false));
                                         }
                                        else
                                         {
                                         }
                                       }
                                      if(_GLF_DEAD(false))
                                       break;
                                     }
                                   }
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           }
                         }
                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       }
                     }
                    else
                     {
                     }
                   }
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              while(_GLF_WRAPPED_LOOP(false));
              bool _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v[25], _GLF_SWITCH_0_45v;
              do
               {
                do
                 {
                  for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                   {
                    do
                     {
                      do
                       {
                        for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                         {
                          for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                           {
                            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                             }
                            else
                             {
                              if(_GLF_DEAD(false))
                               break;
                              for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                               {
                                do
                                 {
                                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       break;
                                      for(int _injected_loop_counter = (0 & (-52536 << 61454)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                       {
                                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                         {
                                          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                           {
                                            do
                                             {
                                              if(_GLF_SWITCH_0_45v)
                                               {
                                                bvec2 _GLF_SWITCH_0_46v;
                                               }
                                              else
                                               {
                                                if(_GLF_WRAPPED_IF_TRUE(true))
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                                   {
                                                    45072;
                                                   }
                                                  else
                                                   {
                                                   }
                                                  if(_GLF_DEAD(false))
                                                   continue;
                                                 }
                                                else
                                                 {
                                                  if(_GLF_DEAD(false))
                                                   continue;
                                                 }
                                                if(_GLF_WRAPPED_IF_FALSE(false))
                                                 {
                                                 }
                                                else
                                                 {
                                                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                   {
                                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                                     {
                                                     }
                                                    else
                                                     {
                                                      bvec3(true, false, false);
                                                     }
                                                   }
                                                  else
                                                   {
                                                   }
                                                 }
                                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                 {
                                                  do
                                                   {
                                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                     {
                                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                                       {
                                                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                         {
                                                          return;
                                                         }
                                                        else
                                                         {
                                                         }
                                                       }
                                                      else
                                                       {
                                                       }
                                                     }
                                                   }
                                                  while(_GLF_WRAPPED_LOOP(false));
                                                 }
                                               }
                                             }
                                            while(_GLF_WRAPPED_LOOP(false));
                                           }
                                          else
                                           {
                                           }
                                         }
                                       }
                                     }
                                   }
                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   continue;
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              if(_GLF_DEAD(false))
                               break;
                             }
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              if(_GLF_DEAD(false))
                               break;
                              do
                               {
                                if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
                                 {
                                  for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                   {
                                    return;
                                   }
                                 }
                               }
                              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             }
                            else
                             {
                             }
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      if(_GLF_DEAD(false))
                       break;
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   }
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              while((mat2x3(828.906, 6.5, 4.5, 6900.7709, -9.5, 3.7) , (ivec4(-26793, 11451, 89068, -52075) != ivec4(-20406, 33377, 23669, -95653))));
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
               }
              else
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                   {
                    bvec2 _GLF_SWITCH_0_47v[54], _GLF_SWITCH_0_48v;
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                     }
                    else
                     {
                      for(int _injected_loop_counter = (82588 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-93176))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                         {
                          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                           }
                          else
                           {
                            for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                             {
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               break;
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   {
                                   }
                                  else
                                   {
                                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                     {
                                      if(_GLF_WRAPPED_IF_FALSE(false))
                                       {
                                       }
                                      else
                                       {
                                        if(_GLF_WRAPPED_IF_TRUE(true))
                                         {
                                          mat4(-3.6, -6.4, 97.23, -386.788, -9713.7119, -5.0, 4782.5593, -3120.2282, 22.19, 4085.7867, -1828.6500, -8211.0214, -21.97, 16.19, 4340.3080, 52.91);
                                          do
                                           {
                                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                             return;
                                           }
                                          while(_GLF_WRAPPED_LOOP(false));
                                         }
                                        else
                                         {
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                              else
                               {
                               }
                             }
                           }
                         }
                        if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(bvec3(bool(bvec4(false, false, false, false)), true, false))))))
                         {
                          if(_GLF_DEAD(false))
                           break;
                          continue;
                         }
                       }
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         {
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                           {
                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                             {
                              return;
                             }
                           }
                         }
                       }
                      else
                       {
                       }
                     }
                    while((GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.y != uvec3(172399u, 17384u, 44549u)[2]))
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          do
                           {
                            if(_GLF_DEAD(false))
                             return;
                            bvec3(true, true, false);
                           }
                          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         }
                        else
                         {
                         }
                       }
                     }
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          return;
                         }
                       }
                     }
                    else
                     {
                      if(true)
                       {
                        do
                         {
                          do
                           {
                            if(_GLF_DEAD(false))
                             return;
                            do
                             {
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                uvec3(24865u, 125452u, 86115u);
                               }
                              else
                               {
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(false))
                           break;
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0)))) * 1))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                do
                                 {
                                  return;
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              else
                               {
                               }
                             }
                            else
                             {
                             }
                           }
                         }
                        int _GLF_SWITCH_0_49v[57], _GLF_SWITCH_0_50v;
                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                         }
                        else
                         {
                          do
                           {
                            do
                             {
                              do
                               {
                                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                 {
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 1)))))); _injected_loop_counter --)
                                     {
                                      ;
                                     }
                                   }
                                  else
                                   {
                                   }
                                 }
                                else
                                 {
                                 }
                               }
                              while(_GLF_WRAPPED_LOOP(false));
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                                   {
                                    do
                                     {
                                      uvec3(GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.z);
                                     }
                                    while(_GLF_WRAPPED_LOOP(false));
                                   }
                                 }
                                else
                                 {
                                 }
                               }
                              else
                               {
                                if(_GLF_DEAD(false))
                                 return;
                               }
                              if(_GLF_DEAD(false))
                               break;
                             }
                            else
                             {
                             }
                           }
                         }
                       }
                     }
                    mat3x2 _GLF_SWITCH_0_51v, _GLF_SWITCH_0_52v[5], _GLF_SWITCH_0_53v;
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          _GLF_SWITCH_0_45v;
                         }
                        else
                         {
                         }
                       }
                      else
                       {
                       }
                     }
                    if(_GLF_DEAD(false))
                     break;
                    mat3x4 _GLF_SWITCH_0_54v[83];
                   }
                 }
               }
              mat4 _GLF_SWITCH_0_55v;
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
               }
              else
               {
                for(mat2x4 _GLF_SWITCH_0_56v, _GLF_SWITCH_0_57v; (bvec2(false, true) == not(bvec2(true, true))); vec4(716.212, 9.0, -7754.3640, 494.861))
                 {
                  do
                   {
                    if(_GLF_DEAD(false))
                     return;
                    uvec2(99892u, 7956u);
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  do
                   {
                    do
                     {
                      do
                       {
                        for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                         {
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            do
                             {
                              do
                               {
                                do
                                 {
                                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   {
                                   }
                                  else
                                   {
                                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                     {
                                      mat3(_GLF_SWITCH_0_56v);
                                      if(_GLF_DEAD(false))
                                       break;
                                     }
                                   }
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                              if(_GLF_DEAD(false))
                               break;
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                          else
                           {
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               do
                                {
                                 (workgroup_id * uvec4(146814u, 26121u, 107149u, 158676u));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       vec4(-84.88, -167.386, -58.32, -9.8);
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   vec3 _GLF_SWITCH_0_58v;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))
                      break;
                     break;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))
                    return;
                   ((any(bvec2(true, false)) ? mat3x4(-4.8, -3.7, -67.22, 5031.2464, -66.54, -7.8, 7.5, -7281.0725, 754.953, 2.5, -5996.2334, -57.67) : mat3x4(3813.4404, -6.5, 11.11, -6.3, 3.7, 256.831, 31.38, 3.8, -4.7, 1.9, 6376.2280, 3.2)) * mat2x3(6.4, 8.4, -6344.8020, -92.00, -4141.1257, -8.7));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       mat2(692.842);
                      }
                    }
                   ;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   int _GLF_SWITCH_0_59v, _GLF_SWITCH_0_60v;
                  }
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     break;
                    do
                     {
                      do
                       {
                        while(false)
                         {
                          bvec4 _GLF_SWITCH_0_61v;
                          uint _GLF_SWITCH_0_62v;
                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                           {
                            do
                             {
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  mat2x3(3.1, 106.430, 228.226, 494.747, -52.93, -4638.4765);
                                 }
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                          ivec3 _GLF_SWITCH_0_63v;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             return;
                            continue;
                           }
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                           {
                            do
                             {
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                do
                                 {
                                  do
                                   {
                                    if(_GLF_WRAPPED_IF_FALSE(false))
                                     {
                                     }
                                    else
                                     {
                                      ivec4(-22968, -25204, 2043, -75601);
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              if(_GLF_DEAD(false))
                               break;
                             }
                            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           }
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                             }
                            else
                             {
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                do
                                 {
                                  GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.z;
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              else
                               {
                               }
                             }
                           }
                          for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                           {
                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                             {
                              ((uvec3(47300u, 55075u, 35154u) * uvec3(14763u, 47317u, 119491u)) == uvec3(60878u, 39113u, 92620u));
                             }
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             break;
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   }
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                   }
                  else
                   {
                    _GLF_SWITCH_0_55v;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(false))
                     continue;
                   }
                  else
                   {
                    do
                     {
                      for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                       {
                        for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                         {
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            do
                             {
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                do
                                 {
                                  do
                                   {
                                    if(_GLF_DEAD(false))
                                     continue;
                                    for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                     {
                                      if(_GLF_WRAPPED_IF_TRUE(true))
                                       {
                                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                         {
                                          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                           {
                                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                             continue;
                                           }
                                          else
                                           {
                                            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                             {
                                              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                               {
                                                ;
                                               }
                                              if(_GLF_DEAD(false))
                                               return;
                                             }
                                            else
                                             {
                                             }
                                           }
                                         }
                                        else
                                         {
                                         }
                                       }
                                      else
                                       {
                                       }
                                     }
                                   }
                                  while(_GLF_WRAPPED_LOOP(false));
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              else
                               {
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                          else
                           {
                           }
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                          if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                           continue;
                         }
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   }
                  bvec4 _GLF_SWITCH_0_64v, _GLF_SWITCH_0_65v;
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                     break;
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      do
                       {
                        do
                         {
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              ivec2(75596, 83093);
                             }
                            else
                             {
                             }
                           }
                          else
                           {
                           }
                         }
                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                   }
                 }
               }
             }
             case 18:
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               greaterThanEqual(vec4(-4576.6903, -5.5, -4824.3518, 3908.0580), (0.9 / vec4(-1.6, -1838.9411, -1.2, -6.9)));
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              break;
             default:
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               1;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (0 & 13852); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                      {
                       case 15:
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               uvec3(186144u, 92554u, 47297u);
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                          }
                         else
                          {
                          }
                        }
                       case 0:
                       case 91:
                       case 54:
                       case 63:
                       if(_GLF_DEAD(false))
                        break;
                       case 42:
                       atomicStore(checker[GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.z], GLF_merged3_0_1_4_1_1_13_2_1_11readsubgroup_sizevirtual_gid.x, 4, 64, 4);
                       case 26:
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                                      {
                                      }
                                     else
                                      {
                                       return;
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       case 94:
                       case 27:
                       case 12:
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                          {
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                                        {
                                         subgroupAll(true);
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        continue;
                                      }
                                     if(_GLF_DEAD(false))
                                      break;
                                     if(_GLF_DEAD(false))
                                      break;
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), 0 | (int(2)))))))); _injected_loop_counter ++)
                                      {
                                       return;
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       break;
                       default:
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) - 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       1;
                                      }
                                     else
                                      {
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     for(int _injected_loop_counter = ((1 ^ 1) & 34991); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
