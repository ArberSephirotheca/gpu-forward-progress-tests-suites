#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))), min((_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))), (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9))))))), false || (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))), min((_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))), (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), (0.0) - _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))), (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))))))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u)), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u))) | (~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true, true && (true)) ? int(3) : _GLF_FUZZED(99814)))), int(_GLF_IDENTITY(ivec4(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814)))), 0, 1, 0), (_GLF_IDENTITY(ivec4(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814)))), 0, 1, 0), (ivec4(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814)))), 0, 1, 0)) >> ivec4(0, 0, 0, 0))) >> ivec4(0, 0, 0, 0))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | _GLF_IDENTITY((_GLF_IDENTITY(3, (3) - 0)), ((_GLF_IDENTITY(3, _GLF_IDENTITY((3) - 0, min((3) - 0, (3) - 0))))) + 0))))), min(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(99814, (99814) | _GLF_IDENTITY(0, clamp(0, 0, 0))))))), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(99814, (99814) | 0))))), ~ (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(99814, (99814) | 0))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(99814, (99814) | 0)))))) | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(99814, (99814) | 0)))))))))), 1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(99814, _GLF_IDENTITY((99814) | 0, ((99814) | 0) << 0))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) / 1), (3) | _GLF_IDENTITY((_GLF_IDENTITY(3, (3) - 0)), ((_GLF_IDENTITY(3, _GLF_IDENTITY((3) - 0, (_GLF_IDENTITY((3) - 0, max((3) - 0, (3) - 0))) + 0)))) + 0))))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814)))), 0 ^ (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814))))))) | (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(49630) : _GLF_IDENTITY((3), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((3), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((3)), ~ (_GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), _GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), ~ (~ ((3)))))))))), 0 + (_GLF_IDENTITY((~ ((3))), ((~ ((3)))) | ((~ ((3)))))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY((3), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((3)), ~ (_GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), _GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), ~ (~ ((3)))))))))), 0 + (_GLF_IDENTITY((~ ((3))), ((~ ((3)))) | ((~ ((3)))))))))), ((~ (_GLF_IDENTITY((3), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((3)), ~ (_GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), _GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), ~ (~ ((3)))))))))), 0 + (_GLF_IDENTITY((~ ((3))), ((~ ((3)))) | ((~ ((3))))))))))) | ((~ (_GLF_IDENTITY((3), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((3)), ~ (_GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), _GLF_IDENTITY(~ (~ ((3))), min(~ (~ ((3))), ~ (~ ((3)))))))))), 0 + (_GLF_IDENTITY((~ ((3))), ((~ ((3)))) | ((~ ((3))))))))))))) | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((0 << _GLF_IDENTITY(int(6), int(6)))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(3, (3) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(3, _GLF_IDENTITY((3), ((3)) - 0) - 0))), (((_GLF_IDENTITY(3, _GLF_IDENTITY((3), ((3)) - 0) - 0)))) | (((_GLF_IDENTITY(3, _GLF_IDENTITY((3), _GLF_IDENTITY(((3)) - 0, clamp(((3)) - 0, ((3)) - 0, _GLF_IDENTITY(((3)) - 0, (((3)) - 0) | 0)))) - 0))))) + 0, (((_GLF_IDENTITY(3, (3) - 0))) + _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(0, 0))) + 0)))))), max((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))), _GLF_IDENTITY(min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0)))))), min(min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0)))))), _GLF_IDENTITY(min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0)))))), ~ (~ (min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(99814), (true ? int(3) : _GLF_FUZZED(99814)) | 0))))))))))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY((3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(49630) : _GLF_IDENTITY(_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), ~ (~ ((3))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), ~ (~ ((3))))))), ~ (~ (_GLF_IDENTITY((3), ~ (~ (_GLF_IDENTITY((3), _GLF_IDENTITY(~ (~ ((3))), (~ (~ ((3)))) >> 0)))))))) : _GLF_FUZZED(35137))))) | _GLF_IDENTITY((_GLF_IDENTITY(3, (3) - 0)), _GLF_IDENTITY(((_GLF_IDENTITY(3, (3) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-90778) : 0))))) + 0, (((_GLF_IDENTITY(3, (3) - 0))) + _GLF_IDENTITY(0, max(0, 0))) + 0))), (_GLF_IDENTITY(3, _GLF_IDENTITY((3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(49630) : _GLF_IDENTITY((3), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((3), ~ (~ _GLF_IDENTITY(((3)), (((3))) ^ 0))))), max(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), (~ (_GLF_IDENTITY((3), ~ (~ ((3)))))) - 0)) ^ 0)) >> 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), 0 + (_GLF_IDENTITY(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), min(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), _GLF_IDENTITY(~ (_GLF_IDENTITY((3), ~ (~ ((3))))), (false ? _GLF_FUZZED(52729) : ~ (_GLF_IDENTITY((3), ~ (~ ((3))))))))))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) - 0)), _GLF_IDENTITY(((_GLF_IDENTITY(3, (3) - 0))) + 0, (((_GLF_IDENTITY(3, (3) - 0))) + _GLF_IDENTITY(0, max(0, 0))) + 0)))) + (0 ^ 0))))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(99814))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y))) || false), false, true, true))))) ? _GLF_FUZZED(49630) : _GLF_IDENTITY(_GLF_IDENTITY((3), 0 | ((3))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((3), ~ (~ ((3)))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY((3), ~ (~ ((3)))))), ((~ (_GLF_IDENTITY((3), ~ (~ ((3))))))) | ((~ (_GLF_IDENTITY((3), ~ (~ ((3)))))))), (~ (_GLF_IDENTITY((3), ~ (~ ((3)))))), _GLF_IDENTITY((~ (_GLF_IDENTITY((3), ~ (~ ((3)))))), ~ (~ ((~ (_GLF_IDENTITY((3), ~ (~ ((3)))))))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(3, (3) - _GLF_IDENTITY(0, (0) | (0)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - 0), (_GLF_IDENTITY(3, (3) - 0)) - 0))))) + 0, (((_GLF_IDENTITY(3, (_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, _GLF_IDENTITY((3), min((3), _GLF_IDENTITY((3), (false ? _GLF_FUZZED(52792) : (3))))) >> (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, 0 + (2))), (true ? ~ (_GLF_IDENTITY(2, 0 + (2))) : _GLF_FUZZED(58987)))))), int(2)))), 3))) - 0))) + _GLF_IDENTITY(0, max(0, 0))) + _GLF_IDENTITY(0, clamp(0, 0, 0)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-50642) : 0, (false ? _GLF_FUZZED(-50642) : 0) / 1)))) / 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((vec2(-68.71, 0.2) * mat4x2(3.8, -71.60, 3.2, 634.277, -3.7, -3840.2232, -6.7, -3.5)).s)), bool(_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((vec2(-68.71, 0.2) * mat4x2(3.8, -71.60, 3.2, 634.277, -3.7, -3840.2232, -6.7, -3.5)).s)), bool(_GLF_IDENTITY(false, (false) || false)))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((vec2(-68.71, 0.2) * mat4x2(3.8, -71.60, 3.2, 634.277, -3.7, -3840.2232, -6.7, -3.5)).s)), bool(_GLF_IDENTITY(false, (false) || false)))), false, true, true))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       do
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 & (-44213 | 69915)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))) || false))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(-63888) : _injected_loop_counter ++)))))
    {
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), uint(uvec2(_GLF_IDENTITY((0u), ((0u)) | ((0u))), 1u))) / 1u)) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_id * subgroup_size, 0u, 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(61406u, 46887u, 46641u)) : uvec3(subgroup_id * subgroup_size, 0u, 0u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), min(_GLF_IDENTITY(~ (~ (0u)), (_GLF_IDENTITY(~ (~ (0u)), ~ (~ (~ (~ (0u)))))) ^ 0u), _GLF_IDENTITY(~ (~ (0u)), 0u | (~ (~ (0u)))))))), uint(_GLF_IDENTITY(uvec3(~ (0u), 0u, 1u), max(_GLF_IDENTITY(uvec3(~ (0u), 0u, 1u), (uvec3(~ (0u), 0u, 1u)) ^ uvec3(0u, 0u, 0u)), uvec3(~ (0u), 0u, 1u)))))))), clamp(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)), clamp(vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)), vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)), vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))).x)), _GLF_IDENTITY(1u, (1u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u), (false ? _GLF_FUZZED(uvec4(51490u, 100638u, 69309u, 71645u)) : uvec4(_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY((~ _GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))), min((~ _GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))), _GLF_IDENTITY((~ _GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))), uint(uint((~ _GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))))))))) : subgroup_id)) * subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-1.2)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), mix(float(_GLF_FUZZED(4.4)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))), 1u, 0u))), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - sin(sin(0.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), 1u, 0u), uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u, 0u)))), (false ? _GLF_FUZZED(12018u) : uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), clamp(_GLF_IDENTITY(uvec4(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1u, 0u + (1u)), 0u), (false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(51490u, (51490u) | 0u), 100638u, 69309u, 71645u)) : uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1u, (1u) >> 0u), 0u))), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), clamp(_GLF_IDENTITY(uvec4(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), (false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(51490u, (51490u) | 0u), 100638u, 69309u, 71645u)) : uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1u, (1u) >> 0u), 0u))), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), (uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)) + uvec4(0u, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(uvec4(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))), 1u, 0u), (false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(51490u, (51490u) | 0u), 100638u, 69309u, 71645u)) : uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1u, (1u) >> 0u), 0u))), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, 0u + (0u))))), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)))), ~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 1u), (uvec2(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 1u)) ^ uvec2(0u, 0u)))) * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), clamp(_GLF_IDENTITY(uvec4(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, min(0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), (false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(51490u, (_GLF_IDENTITY(51490u, (51490u) - 0u)) | 0u), 100638u, 69309u, 71645u)) : uvec4(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec4(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u), 1u, 1u, 1u))), _GLF_IDENTITY(1u, (1u) >> 0u), 0u))), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)))))))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(13.17), _GLF_FUZZED(-52.52)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0), (true ? mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(13.17), _GLF_FUZZED(-52.52)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0) : _GLF_FUZZED(mat4(86.05, 27.89, -0.2, -4942.2930, -232.920, -561.125, 6388.8057, 1681.3773, 64.82, -405.678, 2.6, -5204.8369, 5.8, -0.6, 7.4, 9472.7845)))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(uvec3(next_virtual_gid, 0u, 1u)))], _GLF_IDENTITY(uint(1), (uint(1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (29374 & 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((mat2x3(-1.0, -2483.6766, 2.9, -744.827, -42.03, -571.186) , workgroup_size)) : virtual_gid))))], _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) / 1u) ^ (buf[virtual_gid]))) - 0u), (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -96.31))), float(injectionSwitch.y), bool(true))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((mat2x3(-1.0, -2483.6766, 2.9, -744.827, -42.03, -571.186) , workgroup_size)) : virtual_gid))))], (_GLF_IDENTITY(1u ^ 1u, 1u * (1u ^ 1u))) ^ (buf[virtual_gid]))) - 0u)) | 0u), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (_GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))) || false))) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false || (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat2(1.0, 0.0, 0.0, 1.0)))))))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x < injectionSwitch.y)), ! (! (true && ((injectionSwitch.x < injectionSwitch.y)))))), false, true)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true)))))), ! (! (bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true)))) || false))))))))))))))), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.6)), bvec2(true, false))))).y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(1624.0484)), bvec2(false, false))).x < injectionSwitch.y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))), false, true), true)))))))), ! (! (bool(bool(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true)))))))))))))))))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))), true)))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 24740)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_id))) < subgroup_size, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_id))) < subgroup_size, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)))) < subgroup_size)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), (false ? _GLF_FUZZED(dot(vec2(-844.249, -9.3), (injectionSwitch + -9.4))) : _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (-78254 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
              {
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
            }
          }
         subgroupAll(false);
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], read, 4, 64, 4);
          }
         else
          {
          }
         subgroupAll(true);
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat4(1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0))))).y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false))), true && (! (_GLF_IDENTITY(false, true && (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))), true && (! (_GLF_IDENTITY(false, true && (false)))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false)))))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false))))))), _GLF_IDENTITY(false || (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false)))))))), ! (! (false || (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false))))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
}
