#version 460
struct _GLF_struct_4 {
 uvec3 _f0;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 bvec2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 mat3 _f1;
 mat2x4 _f2;
 vec2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 mat2x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 ivec3 _f1;
 int _f2;
 _GLF_struct_1 _f3;
 mat3x2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 vec3 _f1;
 ivec4 _f2;
 _GLF_struct_5 _f3;
 uint read;
 bvec4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(_GLF_struct_0(mat3x2(1.0), mat2x4(1.0), ivec4(1)), ivec3(1), 1, _GLF_struct_1(bvec2(true), mat3(1.0), mat2x4(1.0), vec2(1.0), vec4(1.0)), mat3x2(1.0), vec4(1.0)), vec3(1.0), ivec4(1), _GLF_struct_5(vec3(1.0), _GLF_struct_3(ivec4(1), bvec2(true), vec4(1.0)), _GLF_struct_4(uvec3(1u))), atomicLoad(buf[virtual_gid], 4, 64, 0), bvec4(true));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_6.read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_6.read, 4, 64, 4);
   subgroupAll(true);
  }
}
