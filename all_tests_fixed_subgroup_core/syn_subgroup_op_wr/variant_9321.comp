#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-8.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), clamp(float(mat4(injectionSwitch.y, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), float(mat4(injectionSwitch.y, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), float(mat4(injectionSwitch.y, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(determinant(mat2(1.0, 0.0, 0.0, 1.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(determinant(mat2(1.0, 0.0, 0.0, 1.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0))))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
        }
       else
        {
        }
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false) || false, true && ((false) || false))), (injectionSwitch.x > injectionSwitch.y)), true, false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-550.796, -161.505)))).x > injectionSwitch.y)), true, false, false))), ! (! (_GLF_IDENTITY((bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-550.796, -161.505)))).x > injectionSwitch.y)), true, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-550.796, -161.505)))).x > injectionSwitch.y)), true, false, false)))))))) && true))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(179.647)), bool(false))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, cos(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, cos(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y))))))) > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), (max(int(4), int(4))) | (max(int(4), int(4)))))), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), (max(int(4), int(4))) | (max(int(4), int(4)))))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), (max(int(4), int(4))) | (max(int(4), int(4))))))) / 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) << 0, ((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) << 0) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec3(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))), 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y = _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y = _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) + (0u << _GLF_IDENTITY(uint(4u), uint(4u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)) && true))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (true ? vec2(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(6.0)) : 1.0)), 0.0, 0.0)) : _GLF_FUZZED(vec2(-15.46, -7.6))))), injectionSwitch)).x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))), true, false))), true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) && true))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, false))), bvec2(bvec3(bvec2((true), false), false))))))) || false), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false)), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false))))))) || false), false, true, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), ! (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY((! (! (false))), ((! (! (false)))) && true)) || false), (! (! (! (false)))) || false))))), bool(bvec2(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (! (false))), (_GLF_IDENTITY((! (! (false))), ((! (! (false)))) && true)) || false), _GLF_IDENTITY((! (! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (! (! (false)))))) || false))))), true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), bool(bool(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec2(bool(bvec4(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false))))))))))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), ! (! (bool(bvec4(bool(bvec4((false) && true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))) || false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))), false, false, false))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true)))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) & 95802); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (0 & 39664); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), 0u + (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) / 1u)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_DEAD(false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))) ^ (((_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & 94974) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))) || false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) * mat2(1.0)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - 0.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != (0 << _GLF_IDENTITY(int(4), int(4)))) || false)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true))), bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0))))), (_GLF_IDENTITY(mat4(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-84.15)), float(0.0), bool(true))), 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-89.39))), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0), (mat4(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-84.15)), float(0.0), bool(true))), 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-89.39))), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(25.54) : 1.0)), 1.0)), 1.0)), 1.0, 1.0, 1.0)))))).y, mix(float(_GLF_FUZZED(-839.471)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0), _GLF_IDENTITY((mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY((mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0)), (_GLF_IDENTITY((mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0)), ((mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0))) * mat4(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0), (mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(vec4(1.0, determinant(mat2(log(1.0), 1.0, 0.0, 0.0)), 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0), (mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), _GLF_IDENTITY(min(1.0, 1.0), float(mat4x2(min(1.0, 1.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, log(1.0), 1.0)))))), 0.0, tan(0.0), 0.0, 1.0)) / mat4(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 0.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(1.0, 1.0, 1.0, 0.0)))), (true ? float(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 0.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(1.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(-51.86)))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))).y))), _GLF_IDENTITY(bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec4(bvec2(bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))), true), false, true))))))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) | (int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 + (int(0)))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ _GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u))) - uvec3(0u, 0u, 0u)).x, (gl_NumWorkGroups.x) / 1u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), true, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (0) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(94937) : int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) << 0)))))))), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), 0 ^ (int(5))))))))))))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0) | (1 & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(94937) : int(5))), int(ivec3(_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(94937) : int(5))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7)))))), 1))))) >> _GLF_IDENTITY(int(5), int(5))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false), _GLF_IDENTITY((bool(bool(true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((bool(bool(true))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))) || false)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), float(_GLF_FUZZED(-44.67)), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[0], float(mat3x2((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))) * (mat2(1.0) * (injectionSwitch))))[0], 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_FUZZED(64.34)), vec2(_GLF_FUZZED(625.995), (mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1075.5563)))))) * (injectionSwitch))[1]), bvec2(false, true)))).y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))) > injectionSwitch.y)))))))))))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))), false, true))) && true))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0))) > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-65739)))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-65739)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-65739)))), ~ (~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-65739)))))))))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec4(int(6), 1, (0 & 52108), 0)), max(_GLF_IDENTITY(int(ivec4(int(6), 1, (0 & 52108), 0)), clamp(int(ivec4(int(6), 1, (0 & 52108), 0)), _GLF_IDENTITY(int(ivec4(int(6), 1, (0 & 52108), 0)), ~ (~ (int(ivec4(int(6), 1, (0 & 52108), 0))))), int(ivec4(int(6), 1, (0 & 52108), 0)))), _GLF_IDENTITY(int(ivec4(int(6), 1, _GLF_IDENTITY((_GLF_IDENTITY(0 & 52108, max(0 & 52108, _GLF_IDENTITY(0 & 52108, 0 ^ (0 & 52108))))), clamp((_GLF_IDENTITY(0 & 52108, max(0 & 52108, _GLF_IDENTITY(0 & 52108, 0 ^ (0 & 52108))))), (_GLF_IDENTITY(0 & 52108, max(0 & 52108, _GLF_IDENTITY(0 & 52108, 0 ^ (0 & 52108))))), (_GLF_IDENTITY(0 & 52108, max(0 & 52108, _GLF_IDENTITY(0 & 52108, 0 ^ (0 & 52108))))))), 0)), (true ? int(ivec4(int(6), 1, (0 & 52108), 0)) : _GLF_FUZZED(-34052))))))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), clamp(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))).x;
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 ^ (0)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _injected_loop_counter)) != (0 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2373.5583)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sign(vec2(686.162, -56.00))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0))))).x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(1.0)))), 1.0, abs(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(142.030) : 0.0)), 0.0))))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(1571.0306))), injectionSwitch[1])).y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))))))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))))) * mat2(1.0)))).x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), true)))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))))))), ! (! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y)))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))), min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))))))) > injectionSwitch.y)))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sin(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-666.945) : injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true, ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true), (! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)))))), true)), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sin(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-666.945) : injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true, ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true), (! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)))))), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))))))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))))) * mat2(1.0)))).x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), true)))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))))))), ! (! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y)))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))), min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))))))) > injectionSwitch.y)))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), true)))), false || (bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sin(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-666.945) : injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true, ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true), (! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)))))), true)), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sin(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-666.945) : injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true, ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true), (! ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)))))), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size + _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id), ((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)) * uvec3(1u, 1u, 1u)), (~ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)) / uvec3(1u, 1u, 1u)))).z;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 0, 0, 1)))))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), ((0 << _GLF_IDENTITY(int(7), int(7)))) - 0), ~ (~ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), ((0 << _GLF_IDENTITY(int(7), int(7)))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, ~ (~ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id))).y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ (num_workgroup * 16334u)), (false ? _GLF_FUZZED(81122u) : (+ (num_workgroup * 16334u))))) : _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, uint(uvec3(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, 1u, 0u))))), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ (num_workgroup * 16334u)), (false ? _GLF_FUZZED(81122u) : (+ (num_workgroup * 16334u))))) : _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, uint(uvec3(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, 1u, 0u))))), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ (num_workgroup * 16334u)), (false ? _GLF_FUZZED(81122u) : (+ (num_workgroup * 16334u))))) : _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, uint(uvec3(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, 1u, 0u))))), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ (num_workgroup * 16334u)), (false ? _GLF_FUZZED(81122u) : (+ (num_workgroup * 16334u))))) : _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, uint(uvec3(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, 1u, 0u))))), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))))) | (1u ^ 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size), (1640u & 0u) | (~ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))))), _GLF_IDENTITY(min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size), (true ? min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) : _GLF_FUZZED(workgroup_id)))), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))), 1u * (max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id) * uvec3(1u, 1u, 1u)).y * subgroup_size))) - 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, max(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)) * subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id) * ((uvec3(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u) << _GLF_IDENTITY(uvec3(2u), _GLF_IDENTITY(uvec3(2u), (uvec3(2u)) | uvec3(0u, 0u, 0u)))) >> _GLF_IDENTITY(uvec3(_GLF_IDENTITY(2u, clamp(2u, 2u, 2u))), _GLF_IDENTITY(uvec3(2u), ~ (~ (uvec3(2u))))))).y * subgroup_size))), 1u * (max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, 0u + (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y))) * 1u) * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))), 1u * (max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y) >> 0u))) * subgroup_size)))))))))), 0u | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(81850u) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)))) : _GLF_FUZZED(workgroup_base)))) << 0u) * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) * 1u), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size), (false ? _GLF_FUZZED(23362u) : min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, 0u | (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, uvec3(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[0], GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[1], GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[2])).y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), (0u | 0u), 0u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y) >> 0u))), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y) >> 0u)))) ^ 0u), (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y)), (0u | 0u), 0u, 1u)))))) * subgroup_size))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), max(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).y * subgroup_size, 0u | (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, clamp(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) | (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) << 0u), GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)), 0u | (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) >> 0u, (_GLF_IDENTITY((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) >> _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)), uint(uvec4((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) >> 0u, 0u, 1u, 1u)))) - 0u)), min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)))))))), _GLF_IDENTITY((workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) | (workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size), ((workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size) | (workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size)) - 0u)) + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, uvec3(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[0], GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[1], GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[2]))) | uvec3(0u, 0u, 0u)).z + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))), min(_GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(17436)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))), uint(_GLF_IDENTITY(uint(((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size)))), ~ (_GLF_IDENTITY(~ (uint(((_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1, 0u ^ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))))), ~ (~ (~ (uint(((_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1, 0u ^ (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size)))))))))))), ((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, false)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, false))))))) && true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0)), (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(27.60)), bool(false))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))), bvec2(bvec2(bvec2(bvec2(false, true)))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) * mat2(1.0))).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)), true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7))) & (-64904 << 2953)), 1 * (((0 << _GLF_IDENTITY(int(7), int(7))) & (-64904 << 2953)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false, false, false)))) || false))), _GLF_IDENTITY(true, (true) && true), false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), bvec2(bvec3(bvec2(true, true), false)))), false || (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(77574))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(float(-66772)) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.6)), float(injectionSwitch.y), bool(true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-896.643, -68.84)) : injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((float(31515) + -96.98)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, injectionSwitch.y))) - 0.0)), float(_GLF_FUZZED(-30.05)), bool(false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), (float(_GLF_ZERO(0.0, injectionSwitch.x))) * 1.0), float(_GLF_FUZZED(-9970.1502)), bool(false))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x)), (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x, min(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x))) / (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) & 1u)))))], uint(1), 4, _GLF_IDENTITY(64, int(ivec3(64, 0, 0))), 4);
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-515.140) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), (false ? _GLF_FUZZED(-6509.4455) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-515.140) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-515.140) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)) : _GLF_FUZZED(2820.9974))))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, false)))))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec4(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), true && (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, false)))))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (bool(bvec4(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z + _GLF_IDENTITY(1, ((0 & _GLF_IDENTITY(4660, (_GLF_IDENTITY(4660, clamp(4660, 4660, 4660))) ^ 0)) >> _GLF_IDENTITY(int(0), int(0))) ^ (1)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))) << 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, 0u), max(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, 0u)))), (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, 0u), max(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id, (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), 1u))), uvec3(1u, 1u, 1u)))) * (GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(uvec3(13487u, 32404u, 19127u)) : GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id)).z, 0u))))) * 1u)) + _GLF_IDENTITY(1, ((0 & _GLF_IDENTITY(4660, (_GLF_IDENTITY(4660, clamp(4660, 4660, 4660))) ^ 0)) >> _GLF_IDENTITY(int(0), int(0))) ^ (1)))) < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-48.35)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))))))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))))) || false)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))), (_GLF_IDENTITY(bool(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))), bool(bvec4(bool(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))), true, false, false)))) || false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), (int(3)) | 0))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-89306) : int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, false || (true)))), bool(bool(! ((_GLF_IDENTITY(true, false || (true)))))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         subgroupAll(false);
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])) : _GLF_FUZZED(vec2(9.2, -2.0)))))).y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))), true, true)))))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))), true, true))))))) && true) || false))))) || false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) && true))), (bool(bool(_GLF_IDENTITY(true, (true) && true)))) || false))))))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), false || (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), ((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))) && true)))) && true))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))).y))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec4(vec2(vec3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))).y)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, false)))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), true, false, false))))))) || false), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, false)))))))))) || _GLF_IDENTITY(false, (false) || false)));
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))))), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-92856) : 3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-81438))))), min((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 ^ 1) ^ ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), (! (injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)))), (! (injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)))), (! (injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false, false), bvec3(bvec3(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false, false)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false, false), bvec3(bvec3(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false, false)))))))), true, false)))))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), (dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))) + 0.0), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1.9)), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(18.24) : 0.0))), bool(true))), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), vec3(1.0, 0.0, 0.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, sqrt(1.0), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))), injectionSwitch.y)))), false, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-95598) : 1))); _injected_loop_counter ++)
            {
             atomicStore(checker[virtual_gid], read, 4, 64, 4);
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), bool(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0, 1.0, sqrt(1.0)))))) > injectionSwitch.y))));
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-31376) : 0)), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))));
  }
}
