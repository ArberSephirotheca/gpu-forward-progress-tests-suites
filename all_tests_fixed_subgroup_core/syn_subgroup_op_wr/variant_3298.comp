#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))) + _GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id))))) * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-50606 & 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, (false) || false))), false, true))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), min(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), min((_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((subgroup_local_id + 1)))), _GLF_IDENTITY(((subgroup_local_id + 1)), ~ (~ (((subgroup_local_id + 1))))))) >> 0u) % subgroup_size), uint(uint((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             return;
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, 0 + (64)), 4);
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) ^ 0u)], buf[virtual_gid]), (min(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | 0u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | 0u)), (0u >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | 0u))) - 0u)) / 1u)))], buf[virtual_gid])) * 1u), (_GLF_IDENTITY(min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))) - 0u)) ^ 0u)], _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], (buf[virtual_gid]) - ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) << _GLF_IDENTITY(uint(7u), uint(7u))))), _GLF_IDENTITY((min(buf[virtual_gid], buf[virtual_gid])) * _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u, clamp(_GLF_IDENTITY(_GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u, max(_GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u, _GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u)), _GLF_IDENTITY(_GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u, (_GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u) << 0u), _GLF_IDENTITY((1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u), 0u + ((1u)))), (~ (_GLF_IDENTITY((1u), 0u + ((1u))))) + 0u))) / 1u))), ~ (~ (_GLF_IDENTITY((min(buf[virtual_gid], buf[virtual_gid])) * 1u, ((min(buf[virtual_gid], buf[virtual_gid])) * 1u) - 0u)))))) ^ 0u)), 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y)))))))))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(58.49)), vec2(_GLF_FUZZED(9.0), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))).y), false || ((injectionSwitch.x < injectionSwitch.y))))))) || false, true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y)) && true), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y)) && true), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(ceil(vec3(3.6, -419.009, -4866.6612)), vec3(-709.363, -7.6, -5.4))) : injectionSwitch.x)) < injectionSwitch.y)) && true), true), false), true))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(58.49)), vec2(_GLF_FUZZED(9.0), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))).y), _GLF_IDENTITY(false, bool(bvec2(false, true))) || ((injectionSwitch.x < injectionSwitch.y))))))) || false, _GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(58.49)), vec2(_GLF_FUZZED(9.0), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))).y), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x < injectionSwitch.y))))))) || false) || false, true && (_GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(58.49)), vec2(_GLF_FUZZED(9.0), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))).y), false || ((injectionSwitch.x < injectionSwitch.y))))))) || false) || false, ! (! (((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(58.49)), vec2(_GLF_FUZZED(9.0), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))).y), false || ((injectionSwitch.x < injectionSwitch.y))))))) || false) || false))))))))), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), (((injectionSwitch.x < injectionSwitch.y))) || false) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))) && true)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               return;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2(bool(bool(_GLF_DEAD(false))), true)), true && (bool(bvec2(bool(bool(_GLF_DEAD(false))), true)))))) || false)))))) || false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), 0 + _GLF_IDENTITY(((1 & 1)), min(_GLF_IDENTITY(((1 & 1)), 0 | (_GLF_IDENTITY(((1 & 1)), clamp(((1 & 1)), ((1 & 1)), ((1 & 1)))))), ((1 & 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (-21303 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) | (1)), 0, 1, 0))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0))), _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))), (max(_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0))), _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0))))) | 0))))) ^ 0) < _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), 1.0)), max(float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-23.85)), bool(false))), 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), true), bvec2(bvec2(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), true), bvec2(bvec2(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), true), bvec2(bvec2(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, false))))))), true))))), false, true))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, true))))), false, false, true))), true && (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) - 0));
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), ~ _GLF_IDENTITY((~ (int(3))), (false ? _GLF_FUZZED(-46437) : (~ (int(3)))))), 0), (false ? _GLF_FUZZED(ivec2(11546, 45045)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))), 0), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))), 0))), (ivec2(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), 0)) | (ivec2(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec2(int(3), 1)))))), 0))))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (int(3)) / 1)), (int(_GLF_IDENTITY(int(3), (int(3)) / 1))) >> 0))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0))), min((~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) >> 0)) | (int(3)))) - 0)) >> 0))), (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - _GLF_IDENTITY(0, ~ (~ (0))))) >> 0))))))))), 0)) | ivec2(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), ~ _GLF_IDENTITY((~ (int(3))), (false ? _GLF_FUZZED(-46437) : (~ (int(3)))))), 0), (false ? _GLF_FUZZED(ivec2(11546, 45045)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))), int(int(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0))))))))), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))), int(int(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0))))))))), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))), int(int(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0))))))))), 0)) >> (ivec2(1, 1) ^ ivec2(1, 1)))) - ivec2(0, 0)), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | 0)), (~ (~ (int(3)))) >> _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))), 0))), (ivec2(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), 0)) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec2(int(3), 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec2(int(3), 1)))))), (_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec2(int(3), 1))))))) >> 0))), 0))))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (int(3)) / 1)), (int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) + (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))) / 1))) >> 0))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0))), min((~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) >> 0)) | (int(3)))) - 0)), int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) >> 0)) | (int(3)))) - 0)), 0), (ivec2((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) >> 0)) | (int(3)))) - 0)), 0)) - ivec2(0, 0)))) >> 0))), (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)))), ~ (~ (0))))) >> 0))))))))), 0)) | ivec2(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) / ivec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), _GLF_IDENTITY(int(ivec3(~ (int(3)), 0, 1)), clamp(int(ivec3(~ (int(3)), 0, 1)), int(ivec3(~ (int(3)), 0, 1)), int(ivec3(~ (int(3)), 0, 1))))))), 0), (false ? _GLF_FUZZED(ivec2(11546, 45045)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (~ (int(3))), _GLF_IDENTITY((~ (~ (int(3)))) >> 0, max(_GLF_IDENTITY((~ _GLF_IDENTITY((~ (int(3))), ~ (~ ((~ (int(_GLF_IDENTITY(3, int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 1)))))))))) >> 0, max(_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) ^ 0), int(3)))))) >> 0, max((~ (~ (int(3)))) >> 0, (~ (~ (int(3)))) >> 0)), _GLF_IDENTITY((~ (~ (int(3)))) >> 0, ((~ (~ (int(3)))) >> 0) | ((~ (~ (int(3)))) >> 0)))), (~ (~ (int(3)))) >> 0)))), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(abs(_injected_loop_counter), (_GLF_IDENTITY(abs(_injected_loop_counter), int(ivec3(abs(_injected_loop_counter), 1, 0)))) * 1)) : _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), 0 | (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))))), 0)) | _GLF_IDENTITY((ivec2(_GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (int(3))), min(_GLF_IDENTITY((~ (int(3))), ((~ (int(3)))) - 0), (~ (int(3)))))), 0)), ((ivec2(_GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (int(3))), min(_GLF_IDENTITY((~ (int(3))), ((~ (int(3)))) - 0), (~ (int(3)))))), 0))) >> ivec2(0, 0))))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), min(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))))))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), min(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))))))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), min(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0))))))))) * 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), min(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)))))))))))))), 0)) | ivec2(0, 0)))))) / 1)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(_GLF_IDENTITY(3, max(3, _GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec3(3, 0, 0), max(ivec3(3, 0, 0), ivec3(3, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0))), (false ? _GLF_FUZZED((- _injected_loop_counter)) : _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, max(0, 0))))) | (0))), ((_GLF_IDENTITY(0, (0) | (0)))) >> 0)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 0))))))))))))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = (52448 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             subgroupAll(false);
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))), bool(bool(bool(! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec3(bvec2((false), _GLF_IDENTITY(true, bool(bool(true)))), false))))), bool(bvec4(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec3(bvec2((false), _GLF_IDENTITY(true, bool(bool(true)))), false))))), true, false, false))))))))))))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))), bool(bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), (((_GLF_IDENTITY(false, ! (! (false)))))) || false), (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), (((_GLF_IDENTITY(false, ! (! (false)))))) || false), bool(bvec3(! _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), (((_GLF_IDENTITY(false, ! (! (false)))))) || false), true, false)))) || false)))))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))), bool(bool(bool(! _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), (((_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), true, true), true)))))), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), ! (! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))))))))))))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).x > injectionSwitch.y)))) && true)))))))
                        break;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 do
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(vec2(2.7)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y))));
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (false))))), bool(bvec3(false, false, true)))))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) * 1u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 4);
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-565.488))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-28906) : int(1))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-28906) : _GLF_IDENTITY(int(1), int(ivec4(int(_GLF_IDENTITY(1, (1) | (1))), 1, 0, 1))))), (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-28906) : int(1)))) - 0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-64098) : _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-28906) : _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))), _GLF_IDENTITY(int(ivec4(false ? _GLF_FUZZED(-64098) : _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-28906) : int(1))))), 1, 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)), clamp((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))), 1, 1, 0))))) >> 0)), clamp((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0))) / 1))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)))) << 0)), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> 0)) << 0))) - 0) >> _GLF_IDENTITY(int(2), int(2))))), int(ivec2(int(ivec4(false ? _GLF_FUZZED(-64098) : _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-28906) : int(1))))), 1, 0, _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))) >> _GLF_IDENTITY(int(2), int(2))), (((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))) >> _GLF_IDENTITY(int(2), int(2)))) + 0))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) + 0)))))))) | 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   subgroupAll(true);
                  }
                 else
                  {
                  }
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-63.33)), bool(false))), 1.0)), clamp(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-63.33)), bool(false))), 1.0)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-63.33)), bool(false))), 1.0)), (float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-63.33)), bool(false))), 1.0))) - 0.0), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x), float(_GLF_FUZZED(-63.33)), bool(false))), 1.0))))), _GLF_IDENTITY((false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x), (true ? (false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x) : _GLF_FUZZED(-1.2)))) > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-87.24)), float(injectionSwitch.x), _GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true, false)), false, false))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(72.87)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-463.591)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8637.5794) : injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))) ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x), float(mat2x3((false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 1.0)))), max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x, (false ? _GLF_FUZZED(tan(34.41)) : false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x))), float(mat2x3((_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x), float(mat2x3((false ? _GLF_FUZZED(roundEven(-185.782)) : injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 1.0)))))) > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-87.24)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), _GLF_IDENTITY(true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))) && true))), ! (_GLF_IDENTITY(! (true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)))), ! (! (! (true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), min(0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) && true)))))))))), true, false)), false, false)))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << _GLF_IDENTITY(0, (0) | (0)))))) != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, false))))))) && true))))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 do
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      continue;
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), bool(bvec3(bool(bvec3(true, true, true)), false, true)))) && (bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), false || (! (false))))))))))))
                                        continue;
                                       if(_GLF_DEAD(false))
                                        return;
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         return;
                                        }
                                       if(_GLF_DEAD(false))
                                        return;
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(false, true, false)), false, false)), true && (bool(bvec3(bool(bvec3(false, true, false)), false, false))))))));
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                              continue;
                            }
                           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5330.6583)), bool(false)))))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(-2272, (-2272) << 0) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(1, ~ (~ (1))))); _injected_loop_counter ++)
    {
     return;
    }
  }
}
