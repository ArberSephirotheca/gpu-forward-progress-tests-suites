#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)), true, false)))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(bvec2(false, false)), false), false), bvec3(bvec3(bvec3(bvec2(bool(bvec2(false, false)), false), false))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(bvec2(false, false)), false), false), bvec3(bvec3(bvec3(bvec2(bool(bvec2(false, false)), false), false))))))), false || (bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(bvec2(false, false)), false), false), bvec3(bvec3(bvec3(bvec2(bool(bvec2(false, false)), false), false)))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true)))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), true)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))) && true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, false || (_GLF_IDENTITY((true), ((true)) && true) || false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))), injectionSwitch, injectionSwitch)).x) + 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch))) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (0) | (1 ^ 1))], ((injectionSwitch)[0]) * 1.0), _GLF_FUZZED(_GLF_IDENTITY(8.3, float(mat3x4(8.3, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), vec2(_GLF_FUZZED(763.577), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))), (true ? (subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) : _GLF_FUZZED(workgroup_size))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(1, 1, 1))), min((subgroup_local_id + 1), (subgroup_local_id + 1)))), min((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(1, 1, 1))), min((subgroup_local_id + 1), (subgroup_local_id + 1)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(1, 1, 1))), min((subgroup_local_id + 1), (subgroup_local_id + 1)))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), max(uint(1), uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) ^ (0 & 43539)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(false || (bool(bvec3(false, false, true))), true && (false || (bool(bvec3(false, false, true))))))) ? _GLF_FUZZED(50709) : 4)), (4) | (4)), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0))).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5745.5752) : injectionSwitch.y))) * 1.0)), bool(true))), max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) - 0u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))) ^ (0u | 0u)), 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (1.0)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)), 1u)) >> (uvec4(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) >> 0u)) / 1u), 0u, 0u)), 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u)))), uvec4(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))))), min(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0)))))))))[1]), vec2(_GLF_FUZZED(-208.420), _GLF_FUZZED(8.4)), bvec2(false, false)))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0))))))))))) + vec2(0.0, 0.0)))).y)), 1u))))), min(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u, 1u), (uvec3(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u, 1u)) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)))), 1u), (uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u, 1u), (uvec3(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u, 1u)) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)))), 1u)) - uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0))))), 1u)) >> (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u, 0u), (uvec4(0u, _GLF_IDENTITY(0u, 1u * (0u)), 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u))) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(8u, (8u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec4(8u)))), uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), clamp(uint(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0)), clamp(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0)), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0)), min(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0)), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0))))))))), 1u)) >> (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u))) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(8u, (8u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec4(8u)))), uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), uint(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], uint(uvec4(buf[virtual_gid], 0u, 1u, 1u))), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))))), 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0))))), 1u)) >> (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u))) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(8u, (8u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec4(8u)))), uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), 0.0, abs(1.0), 0.0, 0.0))))), 1u)) >> (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) | (uvec4(0u, 0u, 0u, 0u))) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(8u, (8u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec4(8u)))), uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), 0u | (uint(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), injectionSwitch.y)), _GLF_IDENTITY(1u, ~ (~ (1u)))), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1.4)), float(0.0), bool(true))))), abs(1.0), 0.0, 0.0))))), 1u)) >> (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u))) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(8u, (8u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec4(8u)))), _GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), clamp(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), _GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))))), _GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3624.1592))), injectionSwitch.y)), 0u ^ (uint(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3624.1592))), injectionSwitch.y)))), 1u), min(_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)), 1u), (uvec4(buf[virtual_gid], 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6671.1267, 511.874, -5.8).t)), bool(false))), injectionSwitch.y)), 1u)) >> _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(8u), (uvec4(8u)) + (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(5u)))))), uvec4(8u))), clamp((uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(8u), (uvec4(8u)) + (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))), uvec4(8u))), (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(8u), (_GLF_IDENTITY(uvec4(8u), (_GLF_IDENTITY(uvec4(8u), uvec4(0u, 0u, 0u, 0u) + (uvec4(8u)))) / uvec4(1u, 1u, 1u, 1u))) + (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))), uvec4(8u))), (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec4(8u), (uvec4(8u)) + (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))), uvec4(8u)))))), _GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) / vec3(1.0, 1.0, 1.0)))), injectionSwitch.y))))))), 1u), ~ (~ (_GLF_IDENTITY(uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u), _GLF_IDENTITY((uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u)) | uvec4(0u, 0u, 0u, 0u), ((uvec4(buf[virtual_gid], 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u)) | uvec4(0u, 0u, 0u, 0u)) ^ uvec4(0u, 0u, 0u, 0u)))))))))))), 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < subgroup_size, bool(bvec3(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < subgroup_size, true, false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), injectionSwitch.y)), 1.0, 1.0, sqrt(1.0), sqrt(1.0), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), log(1.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, exp(0.0), 1.0)), clamp(float(mat4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), injectionSwitch.y), min(min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), injectionSwitch.y), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), injectionSwitch.y)))), 1.0, 1.0, sqrt(1.0), sqrt(1.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-764.685)), bool(false)))) / 1.0), length(vec2(0.0, 0.0)), log(1.0), 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0)), float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat3(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), injectionSwitch.y)), 1.0, 1.0, sqrt(1.0), sqrt(1.0), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0)), float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5549.7788) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)), 1.0, 1.0, sqrt(1.0), sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.4)), float(1.0), bool(true)))), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), log(1.0), 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-77.13) : injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (_GLF_IDENTITY(true, false || (true)))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (_GLF_IDENTITY(true, false || (true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (_GLF_IDENTITY(true, false || (true)))))))), bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (_GLF_IDENTITY(true, false || (true)))))))), false, false, true)))) && true))), true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bool(false || (false)), true && (bool(false || (false)))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-90.75)), bool(false))) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    barrier();
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], read, 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) >> 0), (64) ^ 0), (_GLF_IDENTITY(64, (64) ^ 0)) / 1), 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
  }
 else
  {
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(read, (read) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(read, (read) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(read, (read) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY((read), min((read), _GLF_IDENTITY(_GLF_IDENTITY((read), max((read), (read))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((read), max((read), (read)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(read, min(read, read))), max((read), (read))))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((read), ((read)) * 1u), min((read), _GLF_IDENTITY((read), max((read), _GLF_IDENTITY((read), (_GLF_IDENTITY((read), (false ? _GLF_FUZZED(workgroup_size) : (read)))) - 0u))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(packUnorm2x16(vec2(-14.80, 244.721)), max(packUnorm2x16(vec2(-14.80, 244.721)), packUnorm2x16(vec2(-14.80, 244.721))))) : _GLF_IDENTITY((read), min((read), _GLF_IDENTITY((read), max(_GLF_IDENTITY((read), ((read)) | 0u), (read)))))))) | 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY((read), min((read), _GLF_IDENTITY(_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, ~ (_GLF_IDENTITY(~ (read), 0u + (~ (read)))))), (read))), (_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, ~ (_GLF_IDENTITY(~ (read), 0u + (~ (read)))))), (read)))) | (_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, ~ (_GLF_IDENTITY(~ (read), 0u + (~ (read)))))), (read))))))), (_GLF_IDENTITY(_GLF_IDENTITY((read), min((read), _GLF_IDENTITY((read), _GLF_IDENTITY(max((read), (read)), (max((read), (read))) + 0u)))), (false ? _GLF_FUZZED(packUnorm2x16(vec2(-14.80, 244.721))) : _GLF_IDENTITY((read), min((read), _GLF_IDENTITY(_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, (read) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read))), (_GLF_IDENTITY(_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, (read) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, (read) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read))), 0u ^ (_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, (read) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, (read) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read))), (_GLF_IDENTITY((read), max((_GLF_IDENTITY(read, (read) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (read)))) >> 0u)))))))) | 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY((read), min((read), _GLF_IDENTITY((read), max((read), (read))))), (_GLF_IDENTITY(_GLF_IDENTITY((read), min((read), _GLF_IDENTITY((read), max((read), (read))))), (false ? _GLF_FUZZED(packUnorm2x16(vec2(-14.80, 244.721))) : _GLF_IDENTITY((read), min((read), _GLF_IDENTITY((read), max(_GLF_IDENTITY((read), min((read), _GLF_IDENTITY((read), ~ (~ (_GLF_IDENTITY((read), ((read)) / 1u)))))), (read)))))))) | 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) << 0u)) + 0u)), _GLF_IDENTITY(read, (read) + uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x))))))), 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) + sin(vec2(0.0, 0.0)), vec2(mat3x4((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) + sin(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3((false), false, true))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
}
