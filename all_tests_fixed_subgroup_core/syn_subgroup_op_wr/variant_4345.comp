#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 mat4x2 _f0;
 vec2 _f1;
 ivec3 _f2;
 mat2x4 _f3;
 vec4 _f4;
 bool _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_19 {
 float _f0;
 ivec4 _f1;
 uvec2 _f2;
 bvec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_18 {
 mat2 _f0;
 uint _f1;
 ivec4 _f2;
 vec3 _f3;
 vec3 _f4;
 mat2x3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_17 {
 ivec4 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 int _f3;
 vec4 _f4;
 ivec4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_16 {
 uvec4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_21 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
 float _f3;
 _GLF_struct_19 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_12 {
 mat4x2 _f0;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_22 {
 _GLF_struct_13 _f0;
 _GLF_struct_15 _f1;
 uvec3 _f2;
 uvec3 _f3;
 uint _f4;
 _GLF_struct_21 _f5;
 bool _f6;
 uint subgroup_id;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
 bvec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_7 {
 uint _f0;
 vec3 _f1;
 bvec2 _f2;
 int _f3;
 uvec4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_9 {
 bool _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_10 {
 uint workgroup_id;
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 ivec4 _f1;
 ivec4 _f2;
 ivec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat3 _f1;
 mat2 _f2;
 mat4x2 _f3;
 mat4x2 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 bvec2 _f3;
 _GLF_struct_2 _f4;
 uint _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_6 {
 uint num_workgroup;
 bool _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 mat4x3 _f3;
 ivec2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_13(_GLF_struct_11(mat4x3(1.0)), _GLF_struct_12(mat4x2(1.0))), _GLF_struct_15(bvec2(true), _GLF_struct_14(mat2x3(1.0))), uvec3(1u), uvec3(1u), 1u, _GLF_struct_21(_GLF_struct_16(uvec4(1u), bvec4(true)), _GLF_struct_17(ivec4(1), mat4x2(1.0), mat3x2(1.0), 1, vec4(1.0), ivec4(1), mat3(1.0)), _GLF_struct_18(mat2(1.0), 1u, ivec4(1), vec3(1.0), vec3(1.0), mat2x3(1.0), bvec3(true)), 1.0, _GLF_struct_19(1.0, ivec4(1), uvec2(1u), bvec3(true), mat4x3(1.0)), _GLF_struct_20(mat4x2(1.0), vec2(1.0), ivec3(1), mat2x4(1.0), vec4(1.0), true, bvec4(true))), true, gl_SubgroupID);
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.y = subgroup_size;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_NumWorkGroups.x, true, _GLF_struct_4(_GLF_struct_0(mat3x4(1.0), mat3(1.0), mat2(1.0), mat4x2(1.0), mat4x2(1.0), mat3x4(1.0), mat3x2(1.0)), mat3(1.0), _GLF_struct_1(ivec3(1), vec4(1.0)), bvec2(true), _GLF_struct_2(mat2(1.0)), 1u, _GLF_struct_3(ivec3(1), ivec4(1), ivec4(1), ivec3(1), mat2x4(1.0))), _GLF_struct_5(mat4(1.0)), mat4x3(1.0), ivec2(1));
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(gl_WorkGroupID.x, _GLF_struct_9(true, _GLF_struct_7(1u, vec3(1.0), bvec2(true), 1, uvec4(1u), vec4(1.0)), _GLF_struct_8(mat4x3(1.0), bvec2(true), mat3x4(1.0))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_10.workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_22.subgroup_id * GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.y + subgroup_local_id;
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.z = virtual_gid;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_22.subgroup_id * GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.y + ((subgroup_local_id + 1) % GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.y);
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.x = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.z], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(subgroup_local_id + 1 < GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.y)
        {
         atomicStore(checker[GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.z], read, 4, 64, 4);
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             subgroupAll(false);
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             atomicStore(checker[GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidsubgroup_sizevirtual_gid.z], read, 4, 64, 4);
            }
          }
         subgroupAll(true);
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
}
