#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, uint(uvec3(workgroup_size, 1u, 0u)))) - 0u) * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) | _GLF_IDENTITY(((subgroup_id) << 0u), (((subgroup_id) << 0u)) + ((0u | 0u) | 0u)))))) * subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) | _GLF_IDENTITY(((subgroup_id) << 0u), (((subgroup_id) << 0u)) + ((0u | 0u) | 0u)))))) * subgroup_size))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) | _GLF_IDENTITY(((subgroup_id) << 0u), (true ? _GLF_IDENTITY(((subgroup_id) << 0u), (((subgroup_id) << 0u)) | 0u) : _GLF_FUZZED(workgroup_size))))))) * subgroup_size, (0u | 1u) * (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) | (_GLF_IDENTITY((subgroup_id), min(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))))) << 0u))))) * subgroup_size))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) | ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) << 0u))))) * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY((1u ^ 1u), _GLF_IDENTITY(((1u ^ 1u)) | ((1u ^ 1u)), clamp(((1u ^ 1u)) | ((1u ^ 1u)), _GLF_IDENTITY(_GLF_IDENTITY(((1u ^ 1u)), max(((1u ^ 1u)), ((1u ^ 1u)))), (_GLF_IDENTITY(((1u ^ 1u)), max(((1u ^ 1u)), ((1u ^ 1u))))) << 0u) | ((1u ^ 1u)), ((1u ^ 1u)) | ((1u ^ 1u))))), uint(uvec3(_GLF_IDENTITY((1u ^ 1u), _GLF_IDENTITY(((1u ^ 1u)) | ((1u ^ 1u)), clamp(((1u ^ 1u)) | ((1u ^ 1u)), _GLF_IDENTITY(((1u ^ 1u)), _GLF_IDENTITY(max(((1u ^ 1u)), _GLF_IDENTITY(((1u ^ 1u)), (((1u ^ 1u))) << 0u)), (max(((1u ^ 1u)), ((1u ^ 1u)))) * 1u)) | ((1u ^ 1u)), _GLF_IDENTITY(((_GLF_IDENTITY(1u, (1u) | (1u)) ^ 1u)) | ((1u ^ 1u)), _GLF_IDENTITY(uint(uvec3(((_GLF_IDENTITY(1u, (1u) | (1u)) ^ 1u)) | ((1u ^ 1u)), 0u, 0u)), uint(uvec2(uint(uvec3(((_GLF_IDENTITY(1u, (1u) | (1u)) ^ 1u)) | ((1u ^ 1u)), 0u, 0u)), 1u))))))), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u | (1u))) ^ 0u), _GLF_IDENTITY(1u, 0u | (1u)))), 0u))), (_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), 0u ^ (max(1u, 1u)))) | 1u)), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ 1u), (1u | 1u)), uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) / (0u ^ 1u)))), 1u, (_GLF_IDENTITY(1u, (1u) | 0u) ^ 1u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? uint(_GLF_IDENTITY(uint(1u), (uint(1u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(subgroup_size)))), ~ (~ (1u))) | 1u)))))), min(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), ((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, (1u ^ 1u) + 0u)) * 1u))) | ((1u ^ 1u))), (_GLF_IDENTITY(1u, max(1u, 1u)) | 1u)), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ _GLF_IDENTITY(1u, min(1u, 1u))), (1u | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | _GLF_IDENTITY((1u), _GLF_IDENTITY(max((1u), (1u)), max(_GLF_IDENTITY(max((1u), (1u)), (max((1u), (1u))) - 0u), _GLF_IDENTITY(max((1u), (1u)), (max((1u), (1u))) | (_GLF_IDENTITY(max((1u), (1u)), ~ (~ (max((1u), (1u))))))))))), ~ (~ (1u))) | 1u)))))), 0u + (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) | ((1u ^ 1u))), (_GLF_IDENTITY(1u, max(1u, 1u)) | 1u)), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ _GLF_IDENTITY(1u, min(1u, 1u))), (1u | 1u)), uvec4(subgroup_size, 1u, (1u ^ 1u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | _GLF_IDENTITY((1u), uint(uvec3((1u), 1u, 0u)))), ~ (~ _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uvec3((1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3((1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (0u | 0u)), (uvec4(uvec3((1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (0u | 0u))) | (uvec4(uvec3((1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (0u | 0u)))))))))) | 1u)))))), (true ? _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u), (subgroup_id))) * 1u), subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), 1u, _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) | ((1u ^ 1u))), (_GLF_IDENTITY(1u, max(1u, 1u)) | 1u)), _GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ _GLF_IDENTITY(1u, min(1u, 1u))), (1u | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ _GLF_IDENTITY((~ (1u)), ((~ (1u))) | (0u ^ 0u))) | 1u))), (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), (max(subgroup_size, subgroup_size)) / 1u)), 1u, (1u ^ _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, 1u))) + 0u, ((_GLF_IDENTITY(1u, min(1u, 1u))) + 0u) | ((_GLF_IDENTITY(1u, min(1u, 1u))) + 0u)))), (1u | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), (_GLF_IDENTITY((_GLF_IDENTITY(1u ^ 1u, (1u ^ 1u) * 1u)), ((_GLF_IDENTITY(1u ^ 1u, (1u ^ 1u) * 1u))) << 0u)) << _GLF_IDENTITY(0u, (0u) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))), 1u)), (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))), 1u))) | (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))), 1u))))) | 1u))), clamp(max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) + 0u), 1u)), (1u ^ _GLF_IDENTITY(1u, min(1u, 1u))), (1u | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ _GLF_IDENTITY(1u, (1u) | (1u))), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))) | 1u))), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ _GLF_IDENTITY(1u, min(1u, 1u))), (1u | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))) | 1u))), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ _GLF_IDENTITY(1u, min(1u, 1u))), (1u | 1u)), _GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))) | 1u)), clamp(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))) | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))) | 1u)), uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), _GLF_IDENTITY((1u ^ 1u), (_GLF_IDENTITY((1u ^ 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u ^ 1u), (true ? (1u ^ 1u) : _GLF_FUZZED(virtual_gid)))), 0u ^ (~ (_GLF_IDENTITY((1u ^ 1u), (true ? (1u ^ 1u) : _GLF_FUZZED(virtual_gid))))))))) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))) | 1u)))))))) ^ uvec4(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))), 0u))))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), min(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u | (_GLF_FUZZED(workgroup_size))), _GLF_FUZZED(workgroup_size))))))), workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u), (~ (subgroup_id)) - _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u ^ ((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), (3u) ^ 0u))), clamp(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), (3u) ^ 0u))), _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), (3u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), (3u) ^ 0u))), 0u ^ (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, 0u | (3u)), (3u) ^ 0u))))))))))))) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), ((_GLF_IDENTITY(1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))), min(1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), (uint(uvec3(1u, 1u, 1u))) | 0u), uint(uvec3(1u, 1u, 1u))))), 1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))))))) | ((1u ^ 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)) | 1u, (_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) << 0u), 1u)) | 1u) / ((1u & 1u) & 1u)))), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ 1u), (1u | 1u)), uvec4(subgroup_size, 1u, (1u ^ 1u), (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), 0u ^ ((1u))), (1u))), (1u))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (_GLF_IDENTITY(1u, 0u | (1u))))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)))))), ~ (~ ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)))))), (_GLF_IDENTITY((~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)))))), ((~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))) << 0u)) | ((~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))), max((_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))), (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))))), 1u)))))))))) | 1u)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), ((_GLF_IDENTITY(1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(0u), uint(0u))) ^ (1u)), 1u)))), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))), min(1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), _GLF_IDENTITY(min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))), (min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u)))) - 0u)) - 0u))), 1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) + (uvec3(1u, 1u, 1u)))), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))))))) | ((1u ^ 1u))), (_GLF_IDENTITY(1u, max(1u, 1u)) | 1u)), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ 1u), (1u | 1u)), uvec4(subgroup_size, 1u, (1u ^ 1u), (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)))))), uint(uint(~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), (1u), (1u)), (_GLF_IDENTITY(clamp((1u), (1u), (1u)), ~ (~ (_GLF_IDENTITY(clamp((1u), (1u), (1u)), (true ? clamp((1u), (1u), (1u)) : _GLF_FUZZED(workgroup_size))))))) ^ 0u))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)))))), uint(uint(~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), (1u), (1u)), (_GLF_IDENTITY(clamp((1u), (1u), (1u)), ~ (~ (_GLF_IDENTITY(clamp((1u), (1u), (1u)), (true ? clamp((1u), (1u), (1u)) : _GLF_FUZZED(workgroup_size))))))) ^ 0u))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u))))), (false ? _GLF_FUZZED(floatBitsToUint(686.388)) : _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)))))), uint(uint(~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), (1u), (1u)), (_GLF_IDENTITY(clamp((1u), (1u), (1u)), ~ (~ (_GLF_IDENTITY(clamp((1u), (1u), (1u)), (true ? clamp((1u), (1u), (1u)) : _GLF_FUZZED(workgroup_size))))))) ^ 0u))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)))))))) ^ 0u)), ~ (~ ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)))))))))) | 1u)))))), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY((1u ^ 1u), ((_GLF_IDENTITY(1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))), min(1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(1u, 1u, 1u), min(uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u)))))), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))), 1u ^ _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), min(uint(uvec3(1u, 1u, 1u)), uint(uvec3(1u, 1u, 1u))))))))) | ((1u ^ 1u))), (_GLF_IDENTITY(1u, max(1u, 1u)) | 1u)), max(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u, (1u ^ 1u), (1u | 1u)), uvec4(subgroup_size, 1u, (1u ^ 1u), (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), (1u), (1u)), max(clamp((1u), (1u), (1u)), clamp((1u), (1u), (1u))))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), (1u), (1u)), (clamp((1u), (1u), (1u))) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4584.9300)), float(injectionSwitch.x), bool(true)))))))))))), 1u)))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), ~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), clamp(_GLF_IDENTITY(~ (~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), max(~ (~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), ~ (~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))))), ~ (~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), ~ (~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))))))), 1u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id)), ~ (~ (true ? 1u : _GLF_FUZZED(atomicAnd(virtual_gid, subgroup_id)))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)), (true ? clamp((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (1u)) : _GLF_FUZZED(virtual_gid)))))), ~ (~ (~ (~ (_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) | 0u)), clamp((1u), (1u), (1u))), (1u))))))))), _GLF_IDENTITY(uint(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min((1u), (1u)))))) | 0u), clamp((1u), (1u), (1u)))))), 1u)), 0u ^ (uint(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u), (_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u), (_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u), uvec2(0u, 0u) + (uvec2(~ _GLF_IDENTITY((1u), ~ (~ (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), 1u)))) / uvec2(1u, 1u))) ^ uvec2(0u, 0u))))))) - 0u))))))))) | 1u))))))) << 0u) : _GLF_FUZZED(num_workgroup))))) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, min(1, 1))))), (false ? _GLF_FUZZED(-51783) : (1) | (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, min(1, 1)))))))), 0u + (subgroup_local_id + 1))) % subgroup_size);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 805)); _injected_loop_counter --)
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(1), 4, 64, 4);
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec3(bool(bvec3(false, true, true)), false, true)))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec3(bool(bvec3(false, true, true)), false, true))))))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) | (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), subgroup_size)), subgroup_size)))
                      {
                       do
                        {
                         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               switch(_GLF_SWITCH(0))
                                {
                                 case 78:
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = (7554 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 | 0, clamp(1 | 0, 1 | 0, 1 | 0)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                                                  {
                                                   mat4x2(outerProduct(vec4(408.613, 1.6, 7878.7132, 183.902), _GLF_IDENTITY(vec3(0.4, -4.8, -1995.0880), max(vec3(0.4, -4.8, -1995.0880), _GLF_IDENTITY(vec3(0.4, _GLF_IDENTITY(-4.8, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9.5)), float(-4.8), bool(true)), float(float(mix(float(_GLF_FUZZED(-9.5)), float(-4.8), bool(true)))))), -1995.0880), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec3(0.4, -4.8, -1995.0880) : _GLF_FUZZED((4909.6202 + vec3(6726.1134, -628.430, -739.768)))))))));
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 case 0:
                                 case 21:
                                 case 32:
                                 case 49:
                                 case 98:
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), ! (! (! (! _GLF_IDENTITY((false), ((false)) && true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), false || (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.8)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))))), true)))), true)), false || (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), true, _GLF_IDENTITY(false, ! (! (false))))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), true)))), true)), false || (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), true, _GLF_IDENTITY(false, ! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atanh(-4334.3453)) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(965.563)), bool(false)))))) && true)))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, false, true))))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
                                                {
                                                 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))) | _GLF_IDENTITY(1, (1) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                                                  {
                                                   do
                                                    {
                                                     do
                                                      {
                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))); _injected_loop_counter --)
                                                        {
                                                         do
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, (64) * 1), 4);
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                        }
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(false));
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (injectionSwitch.x > injectionSwitch.y))));
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                 case 94:
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))) || false)))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     subgroupAll(false);
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(-4.8, (false ? _GLF_FUZZED(435.003) : _GLF_IDENTITY(-4.8, (-4.8) - 0.0)))) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), vec2(mat3(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(float(-77859)), _GLF_FUZZED(-904.260)), vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), bvec2(true, true))), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))), 0.0, 1.0, 0.0, 1.0, 1.0))), min(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), vec2(mat3(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(float(-77859)), _GLF_FUZZED(-904.260)), vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), bvec2(true, true))), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))), 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), vec2(mat3(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(float(-77859)), _GLF_FUZZED(-904.260)), vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), bvec2(true, true))), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))), 0.0, 1.0, 0.0, 1.0, 1.0)))))).y))));
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 break;
                                 default:
                                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0)))) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))))), min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))))), sqrt(0.0), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))), max(vec2(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))))), sqrt(0.0), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))), vec2(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0))))), sqrt(0.0), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)))))))))).x > injectionSwitch.y)))))))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                  {
                                                   for(int _injected_loop_counter = (_GLF_IDENTITY(1, 1 * (1)) ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false)))); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
                                                      {
                                                       do
                                                        {
                                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               1;
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)) || false));
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ 1)); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))) - 0) < 1); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   switch(_GLF_SWITCH(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false))))) ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(75393, 1 * (_GLF_IDENTITY(75393, ~ (~ (75393)))))), (_GLF_FUZZED(_GLF_IDENTITY(75393, 1 * (_GLF_IDENTITY(75393, ~ (~ (75393))))))) >> 0)))))
                                    {
                                     case 83:
                                     ivec2 _GLF_SWITCH_1_0v;
                                     case 0:
                                     case 27:
                                     case 21:
                                     case 40:
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               do
                                                {
                                                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             for(int _injected_loop_counter = (1 | (_GLF_IDENTITY(665, (665) / 1) & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(int(_GLF_IDENTITY((0), min(_GLF_IDENTITY((0), ((0)) | ((0))), (0)))))) | (0)), 0))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(0, (0) | (0)))); _injected_loop_counter --)
                                                              {
                                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                  {
                                                                   do
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) ^ (0 << _GLF_IDENTITY(int(2), int(2)))), max(4, 4)))));
                                                                      }
                                                                    }
                                                                   while(_GLF_WRAPPED_LOOP(false));
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     else
                                      {
                                      }
                                     case 53:
                                     case 11:
                                     case 97:
                                     case 7:
                                     case 5:
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bvec2(bool(bvec3(true, true, false)), false))))))), false))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, _GLF_IDENTITY(true, true && (true))), false))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(true))), bool(bool(_GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(true))), ! (! (_GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(true))), true && (((_GLF_WRAPPED_IF_TRUE(true))))))))))) && true) || false), false, true), false)))))))))
                                            {
                                             do
                                              {
                                               subgroupAll(true);
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                     break;
                                     case 26:
                                     ;
                                     default:
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         _GLF_IDENTITY(1, int(ivec3(1, 1, 0)));
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
