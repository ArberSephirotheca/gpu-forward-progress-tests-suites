#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_33 {
 vec3 _f0;
} ;

struct _GLF_struct_31 {
 mat3x4 _f0;
 float _f1;
 bvec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_30 {
 mat2x3 _f0;
 uint _f1;
 vec2 _f2;
 mat4 _f3;
 mat4 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_29 {
 bool _f0;
 uvec2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_32 {
 ivec2 _f0;
 _GLF_struct_29 _f1;
 uint _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
 mat3x4 _f5;
 ivec2 _GLF_SWITCH_0_10v;
} ;

struct _GLF_struct_34 {
 _GLF_struct_32 _f0;
 uvec4 _f1;
 uint _f2;
 _GLF_struct_33 _f3;
 mat3x2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_26 {
 bool _f0;
} ;

struct _GLF_struct_27 {
 ivec4 _f0;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_25 {
 _GLF_struct_24 _f0;
} ;

struct _GLF_struct_28 {
 mat4x3 _f0;
 uvec2 _f1;
 _GLF_struct_25 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 _GLF_struct_27 _f5;
 int _injected_loop_counter;
} ;

struct _GLF_struct_21 {
 ivec3 _f0;
 mat2x4 _f1;
 ivec3 _f2;
 ivec2 _f3;
 int _f4;
 ivec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_20 {
 bvec4 _f0;
 uint _f1;
 mat4x2 _f2;
 int _f3;
 mat3 _f4;
 bool _f5;
} ;

struct _GLF_struct_22 {
 uvec3 _f0;
 _GLF_struct_20 _f1;
 uvec4 _f2;
 ivec2 _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_23 {
 mat3 _f0;
 _GLF_struct_22 _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_18 {
 uint _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_19 {
 _GLF_struct_18 _f0;
 int _injected_loop_counter;
 bool _f1;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 bvec2 _f1;
 uvec2 _f2;
 vec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_14 {
 uvec2 _f0;
 mat2x4 _f1;
 bvec4 _f2;
 mat2 _f3;
 bvec2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 mat2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_16 {
 mat4 _f0;
 ivec2 _f1;
 int _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_17 {
 bvec3 _f0;
 uint workgroup_id;
 _GLF_struct_16 _f1;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
} ;

struct _GLF_struct_9 {
 int _f0;
 mat4x2 _f1;
 bvec4 _f2;
 ivec4 _f3;
 vec3 _f4;
 uvec4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_8 {
 bvec2 _f0;
 vec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 mat4x3 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_6 {
 int _f0;
 mat3x4 _f1;
 mat4x2 _f2;
 vec4 _GLF_SWITCH_0_39v;
} ;

struct _GLF_struct_5 {
 uint _f0;
 mat3 _f1;
 mat2x4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_4 {
 uint _f0;
 int _f1;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_7 _f0;
 _GLF_struct_11 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 int _f1;
 mat2 _f2;
 mat4x3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_0 {
 float _f0;
 uint _f1;
 bvec2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_3 {
 int _f0;
 bool _f1;
 _GLF_struct_2 _f2;
 ivec4 _f3;
 uvec2 _f4;
 uint num_workgroup;
 mat4 _f5;
 uint _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, 1 * (0))), true, _GLF_struct_2(_GLF_struct_0(1.0, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) + 0u), bvec2(true), mat3(1.0)), _GLF_struct_1(ivec2(1), 1, mat2(1.0), mat4x3(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), (float(1.0)) + 0.0), float(_GLF_FUZZED(_GLF_IDENTITY(92.20, _GLF_IDENTITY(float(_GLF_IDENTITY(float(92.20), max(float(92.20), _GLF_IDENTITY(float(92.20), float(_GLF_IDENTITY(mat2(float(92.20), exp(determinant(mat2(0.0, 0.0, 0.0, 0.0))), 1.0, 0.0), mat2(mat4x2(mat2(float(92.20), exp(determinant(mat2(0.0, 0.0, 0.0, 0.0))), 1.0, 0.0))))))))), mix(float(float(_GLF_IDENTITY(float(92.20), max(float(92.20), float(92.20))))), float(_GLF_FUZZED(5.0)), bool(false)))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ivec3(1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec3(1, 1, 1))), 1))), (ivec4(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec3(1, 1, _GLF_IDENTITY(1, 1 * (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec3(1, 1, _GLF_IDENTITY(1, 1 * (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec3(1, 1, _GLF_IDENTITY(1, 1 * (1)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec3(1, 1, _GLF_IDENTITY(1, 1 * (1)))))))) + 0), 1)))) ^ ivec4(0, 0, 0, 0))), ivec4(1), uvec2(1u), _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u))), mat4(1.0), 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) || false))))) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(bvec3(true), gl_WorkGroupID.x, _GLF_struct_16(mat4(1.0), ivec2(1), 1, _GLF_struct_13(vec2(1.0), mat3x4(1.0), mat2x4(1.0), mat2(1.0), mat2x4(1.0)), _GLF_struct_14(uvec2(1u), mat2x4(1.0), bvec4(true), mat2(1.0), bvec2(true), mat3x4(1.0)), _GLF_struct_15(mat2x3(1.0), bvec2(true), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(uvec4(uvec2(1u), 0u, 1u)), (uvec2(uvec4(uvec2(1u), 0u, 1u))) | uvec2(0u, 0u))), vec3(1.0), uvec2(1u))));
 if(_GLF_DEAD(false))
  {
   for(_GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_18(1u, ivec2(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), true); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_19._injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))); _GLF_struct_replacement_19._injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u, (1u) * 1u) * (workgroup_size)) * _GLF_struct_replacement_17.workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(mat3(1.0), _GLF_struct_22(uvec3(1u), _GLF_struct_20(bvec4(true), 1u, mat4x2(1.0), 1, mat3(1.0), true), uvec4(1u), ivec2(1), _GLF_struct_21(ivec3(1), mat2x4(1.0), ivec3(1), ivec2(1), 1, ivec4(1), uvec2(1u))), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)) / 1u)) | 0u) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(_GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(mat4x3(1.0), uvec2(1u), _GLF_struct_25(_GLF_struct_24(vec2(1.0), uvec4(1u), mat3x2(1.0), mat3(1.0))), uvec4(1u), mat2x3(1.0), _GLF_struct_27(ivec4(1), _GLF_struct_26(true)), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_28._injected_loop_counter != 1); _GLF_struct_replacement_28._injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, (4) * 1))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 uint read = atomicLoad(buf[_GLF_struct_replacement_23.virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)) < subgroup_size)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false)) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))) || false), true), _GLF_IDENTITY(false, bool(bool(false))), true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), true), false, true)))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, false || ((true) && true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false)) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_IF_TRUE(true)))), bool(bvec3(_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_IF_TRUE(true)))), false || (! (! (! (_GLF_WRAPPED_IF_TRUE(true)))))), false, true))))))) || false), true), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(checker[_GLF_struct_replacement_23.virtual_gid], read, 4, 64, 4);
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), max(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), _GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), (_GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), (_GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), (float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0)))) - 0.0)) / sqrt(1.0))) / _GLF_IDENTITY(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), mix(float(_GLF_FUZZED(88.35)), float(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0))), bool(true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), max(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))))), min(_GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), max(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))))), _GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))), max(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0)), min(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0)), vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0))))), float(vec4(injectionSwitch.y, 0.0, 0.0, sqrt(0.0)))))))) * abs(1.0)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     switch(_GLF_SWITCH(0))
      {
       case 41:
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            barrier();
          }
         else
          {
          }
        }
       while((bvec4(true, true, false, false) != bvec4(true, true, false, true)))
        {
         switch(_GLF_SWITCH(0))
          {
           case 0:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             for(             (+ mat4x3(8282.2689, _GLF_IDENTITY(-57.74, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(-57.74, float(mat2x3(-57.74, 1.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), 0.0, log(1.0), 0.0), (mat2(_GLF_IDENTITY(-57.74, float(mat2x3(-57.74, 1.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), 0.0, log(1.0), 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), -8574.9671, 152.029, 7.8, 901.869, -539.420, -3.1, -4.0, -50.85, 1794.9641, 9309.4565));
 (-5356.5926 != -6.5); _GLF_struct_replacement_23.virtual_gid)
              {
               switch(_GLF_SWITCH(0))
                {
                 case 55:
                 mix(uvec2(72232u, 68134u), min(uvec2(135610u, 73626u), uvec2(156919u, 146926u)), bvec2(true, true));
                 case 9:
                 ;
                 case 0:
                 case 29:
                 case 33:
                 case 53:
                 case 93:
                 case 88:
                 case 41:
                 case 95:
                 case 76:
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 break;
                 default:
                 1;
                }
              }
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              switch(_GLF_SWITCH(0))
               {
                case 0:
                if(_GLF_DEAD(false))
                 barrier();
                case 12:
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 49:
                      mat3x4 _GLF_SWITCH_3_0v[82];
                      case 30:
                      vec2 _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
                      case 0:
                      case 24:
                      if(_GLF_DEAD(false))
                       barrier();
                      if(_GLF_DEAD(false))
                       barrier();
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                       }
                      else
                       {
                        barrier();
                       }
                      break;
                      case 98:
                      mat2(5.9, -84.07, -23.83, 567.616);
                      default:
                      1;
                     }
                   }
                  else
                   {
                   }
                 }
                uint _GLF_SWITCH_0_0v;
                if(_GLF_DEAD(false))
                 {
                  switch(_GLF_SWITCH(0))
                   {
                    case 95:
                    injectionSwitch;
                    case 0:
                    case 59:
                    case 43:
                    case 97:
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                     {
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                       barrier();
                     }
                    case 94:
                    if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) & 1)); _injected_loop_counter ++)
                       {
                        barrier();
                       }
                     }
                    case 39:
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                    case 31:
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                      if(_GLF_DEAD(false))
                       barrier();
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                        barrier();
                       }
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        do
                         {
                          if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))))
                           barrier();
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                        if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
                         {
                          barrier();
                          for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                           {
                            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                             barrier();
                           }
                         }
                        else
                         {
                         }
                        if(_GLF_DEAD(false))
                         barrier();
                       }
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                       {
                        if(_GLF_DEAD(false))
                         {
                          do
                           {
                            barrier();
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                       }
                     }
                    case 90:
                    case 12:
                    case 48:
                    if(_GLF_DEAD(false))
                     barrier();
                    barrier();
                    break;
                    default:
                    if(_GLF_DEAD(false))
                     barrier();
                    1;
                   }
                 }
                if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false, ! (! (false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                     barrier();
                    barrier();
                   }
                 }
                else
                 {
                 }
                vec4 _GLF_SWITCH_0_1v[67], _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v;
                case 37:
                for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8))))) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                 {
                  _GLF_IDENTITY(abs(vec3(7.6, 3.1, -0.8)), _GLF_IDENTITY(max(abs(vec3(7.6, 3.1, -0.8)), _GLF_IDENTITY(abs(vec3(7.6, 3.1, -0.8)), max(abs(vec3(7.6, 3.1, -0.8)), abs(vec3(7.6, 3.1, -0.8))))), clamp(max(abs(vec3(7.6, 3.1, -0.8)), _GLF_IDENTITY(abs(vec3(7.6, 3.1, -0.8)), max(abs(vec3(7.6, 3.1, -0.8)), abs(vec3(7.6, 3.1, -0.8))))), _GLF_IDENTITY(max(abs(vec3(7.6, 3.1, -0.8)), _GLF_IDENTITY(abs(vec3(7.6, 3.1, -0.8)), max(abs(vec3(7.6, 3.1, -0.8)), abs(vec3(7.6, 3.1, -0.8))))), (false ? _GLF_FUZZED(vec3(-7.2, -8.7, -8.4)) : max(abs(vec3(7.6, 3.1, -0.8)), _GLF_IDENTITY(abs(vec3(7.6, 3.1, -0.8)), max(abs(vec3(7.6, 3.1, -0.8)), abs(vec3(7.6, 3.1, -0.8))))))), max(abs(vec3(7.6, 3.1, -0.8)), _GLF_IDENTITY(abs(vec3(7.6, 3.1, -0.8)), max(abs(vec3(7.6, 3.1, -0.8)), abs(vec3(7.6, 3.1, -0.8))))))));
                 }
                if(_GLF_DEAD(false))
                 barrier();
                float _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[16];
                (- mat2(45.31, -2.8, 1984.3450, 8.0));
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 83:
                      _GLF_IDENTITY(uvec4(145726u, 109200u, 187474u, 77816u), ~ (~ (uvec4(145726u, 109200u, 187474u, 77816u))));
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       barrier();
                      case 0:
                      case 57:
                      case 19:
                      case 64:
                      case 88:
                      if(_GLF_DEAD(false))
                       barrier();
                      case 73:
                      case 39:
                      case 89:
                      case 79:
                      if(_GLF_WRAPPED_IF_FALSE(false))
                       {
                       }
                      else
                       {
                        do
                         {
                          barrier();
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           barrier();
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      break;
                      case 98:
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        bool(exp(5450.7484));
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       barrier();
                      default:
                      1;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                   }
                 }
                else
                 {
                 }
                case 45:
                uvec4 _GLF_SWITCH_0_6v;
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_DEAD(false))
                 barrier();
                case 44:
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    barrier();
                   }
                  else
                   {
                   }
                 }
                vec3 _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v[65];
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  barrier();
                 }
                if(_GLF_DEAD(false))
                 {
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                   {
                    barrier();
                   }
                 }
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                  if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
                   barrier();
                  do
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                     barrier();
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  if(_GLF_DEAD(false))
                   barrier();
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  ;
                 }
                -96.27;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                   barrier();
                  barrier();
                 }
                if(_GLF_DEAD(false))
                 barrier();
                break;
                case 15:
                uvec2(114934u, 192083u);
                case 58:
                ivec3 _GLF_SWITCH_2_0v;
                if(_GLF_DEAD(false))
                 barrier();
                default:
                1;
               }
              if(_GLF_DEAD(false))
               barrier();
             }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             (mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(-5382.9483, _GLF_IDENTITY((-5382.9483), max((-5382.9483), (-5382.9483))) * _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), max(_GLF_IDENTITY(-5382.9483, _GLF_IDENTITY((-5382.9483), max((-5382.9483), (-5382.9483))) * _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), _GLF_IDENTITY(-5382.9483, _GLF_IDENTITY((-5382.9483), max((-5382.9483), (-5382.9483))) * _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))))), 6.7, -4.6, -8.9, -4927.1706, 74.42, 23.98, -4420.0561) / 729.580);
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), false, true, true)))) && true))))
              barrier();
             if(true)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))));
               if(_GLF_DEAD(false))
                barrier();
               ;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 uvec2(73576u, 109097u);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             while((mat4(2.7, _GLF_IDENTITY(4.9, clamp(4.9, _GLF_IDENTITY(4.9, _GLF_IDENTITY((4.9) / 1.0, float(mat4(_GLF_IDENTITY((4.9) / 1.0, clamp((4.9) / 1.0, (4.9) / 1.0, (4.9) / 1.0)), tan(0.0), _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(4.9, max(4.9, _GLF_IDENTITY(4.9, _GLF_IDENTITY(float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0)), clamp(float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0)), clamp(float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0)))), float(mat3x2(4.9, 0.0, 1.0, 0.0, 0.0, 1.0))))))))), _GLF_IDENTITY(-9260.3820, _GLF_IDENTITY((_GLF_IDENTITY(-9260.3820, (true ? -9260.3820 : _GLF_FUZZED(-6810.5605)))) - 0.0, ((_GLF_IDENTITY(-9260.3820, (true ? -9260.3820 : _GLF_FUZZED(-6810.5605)))) - 0.0) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), -4640.3068, -6242.8973, 94.85, -89.40, 97.82, -1921.0771, 9.9, 5.2, -23.36, 97.99, 3.7, _GLF_IDENTITY(-7699.3536, min(-7699.3536, -7699.3536)), 215.619) != mat4(-80.10, -55.90, -747.202, -9.6, 5026.9707, -93.84, -532.176, 3.5, 759.191, 9.5, 25.07, -6.7, -9.6, 3.7, -7.2, _GLF_IDENTITY(234.026, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(234.026, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(_GLF_IDENTITY(0.0, min(0.0, 0.0))), abs(1.0), 0.0, 1.0, 0.0), (mat3x4(234.026, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(-4.7)), bool(false))), abs(1.0), 0.0, 1.0, 0.0)) + mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0 * (float(_GLF_IDENTITY(mat3x4(234.026, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), abs(1.0), 0.0, 1.0, 0.0), (mat3x4(234.026, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), abs(1.0), 0.0, 1.0, 0.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 switch(_GLF_SWITCH((0 | 0)))
                  {
                   case 1:
                   greaterThan(ivec3(-98834, -10609, -62762), ivec3(-30486, 59765, -89420));
                   case 80:
                   mat3x2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
                   case 0:
                   case 7:
                   case 46:
                   case 54:
                   case 51:
                   if(_GLF_DEAD(false))
                    barrier();
                   case 37:
                   case 56:
                   case 26:
                   case 5:
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(95.57, 36.16, -3816.6040)) : injectionSwitch.y)))))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   break;
                   case 48:
                   workgroup_size;
                   default:
                   1;
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               ;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               _GLF_struct_34 _GLF_struct_replacement_34;
               do
                {
                 uvec2(_GLF_IDENTITY(48215u, _GLF_IDENTITY(uint(uvec2(48215u, 0u)), (uint(uvec2(48215u, 0u))) / 1u)), 133948u);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               mat3 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 & -73980); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))), false || (_GLF_IDENTITY(false, (false) && true)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (bool((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(bool((! (bool((injectionSwitch.x > injectionSwitch.y))))), true)))), ! (! (bool(_GLF_IDENTITY(bool((! (bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(bool((! (bool((injectionSwitch.x > injectionSwitch.y))))), true))))))))))))))))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
                {
                 ;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (false) || false)))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                }
               vec4 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v[85];
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               mat3x4 _GLF_SWITCH_0_17v[34];
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               mat2x4 _GLF_SWITCH_0_18v;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), ! (! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               mat2 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             uvec2(135536u, 176564u);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             uvec2 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v[15], _GLF_SWITCH_0_23v;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))) && true)))
              barrier();
             uvec3 _GLF_SWITCH_0_24v[58], _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
             if(true)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               uvec2 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v;
               ;
               mat2x4 _GLF_SWITCH_0_29v;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bvec4(bool(_GLF_IDENTITY(false, false || (false))), true, true, true)))))))
                barrier();
               (_GLF_IDENTITY(ivec3(-83431, 1576, -83213) - ivec3(-40007, -26753, 27046), (_GLF_IDENTITY(ivec3(-83431, 1576, -83213), (ivec3(-83431, 1576, -83213)) - ivec3(0, 0, 0)) - ivec3(-40007, -26753, 27046)) ^ ivec3(0, 0, 0)));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               _GLF_IDENTITY((9.4 == float(-29805)), ((9.4 == float(-29805))) && true);
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) || false))) && (false)), (_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-69.03)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (false))) || false)))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  barrier();
                 vec4(-14.94, 1.0, 15.76, -639.635);
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               mat3x4(9543.0640, -402.342, -32.79, 93.24, 4888.3945, -15.28, -60.16, 3472.9545, 7746.6666, 9.2, 3.4, _GLF_IDENTITY(6.1, min(_GLF_IDENTITY(6.1, 1.0 * (6.1)), 6.1)));
               if(_GLF_DEAD(false))
                barrier();
              }
             for(             8039;
 (_GLF_IDENTITY(_GLF_SWITCH_0_26v, clamp(_GLF_SWITCH_0_26v, _GLF_SWITCH_0_26v, _GLF_SWITCH_0_26v)) != _GLF_SWITCH_0_25v); vec4(_GLF_IDENTITY(-1854.1770, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(-1854.1770, mix(float(-1854.1770), float(_GLF_FUZZED(-7.4)), bool(false))), abs(0.0), 1.0, 1.0, cos(0.0), 1.0)), clamp(float(mat3x2(_GLF_IDENTITY(-1854.1770, mix(float(-1854.1770), float(_GLF_FUZZED(-7.4)), bool(false))), abs(0.0), 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(_GLF_IDENTITY(-1854.1770, mix(float(-1854.1770), float(_GLF_FUZZED(-7.4)), bool(false))), abs(0.0), 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(_GLF_IDENTITY(-1854.1770, mix(float(-1854.1770), float(_GLF_FUZZED(-7.4)), bool(false))), abs(0.0), 1.0, 1.0, cos(0.0), 1.0))))), -4.6, _GLF_IDENTITY(1.9, (_GLF_IDENTITY(1.9, 1.0 * (1.9))) - determinant(mat2(0.0, 1.0, 0.0, 0.0))), 4422.9985))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               switch(_GLF_SWITCH(0))
                {
                 case 60:
                 if(_GLF_DEAD(false))
                  barrier();
                 mat2x4 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v;
                 case 65:
                 bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) && true), true, false, false);
                 case 0:
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, true, false)))))))
                  barrier();
                 int(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 bool _GLF_SWITCH_0_30v, _GLF_SWITCH_0_31v[23], _GLF_SWITCH_0_32v;
                 mat4x3((mat3x2(_GLF_IDENTITY(-115.530, min(-115.530, _GLF_IDENTITY(-115.530, clamp(-115.530, -115.530, -115.530)))), 74.95, 2.3, 2432.1854, -86.85, _GLF_IDENTITY(7729.1273, float(mat2x4(7729.1273, 0.0, tan(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0)))) + mat3x2(-4018.3601, 7.3, -18.94, -1708.3272, -568.082, _GLF_IDENTITY(-6523.3849, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.4) : -6523.3849)))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 mat2x3 _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v;
                 bvec2 _GLF_SWITCH_0_35v;
                 clamp(ivec3(300, -59274, -18641), 80882, (+ int(5.1)));
                 mat3(2.3, -15.22, -925.920, -4012.6148, _GLF_IDENTITY(7.6, (_GLF_IDENTITY(7.6, min(7.6, 7.6))) - log(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 1.0))))), 1.4, 7.6, 80.38, 225.312);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   switch(_GLF_SWITCH(0))
                    {
                     case 29:
                     _GLF_SWITCH_0_33v;
                     case 0:
                     case 78:
                     case 91:
                     case 95:
                     case 61:
                     case 6:
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                     break;
                     case 53:
                     mat3x4 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v;
                     case 27:
                     ivec3(-98545, -2017, -1288);
                     default:
                     1;
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bool(! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))), (_GLF_IDENTITY(bool(! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))), bool(bvec4(bool(! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))), true, false, false)))) || false)))))
                  barrier();
                 mat3x4(163.311, _GLF_IDENTITY(8.8, (8.8) / 1.0), 7.4, 1.1, -15.05, 527.418, 1.0, -3.9, 5229.8382, -1311.3630, -33.76, 988.521);
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 mat4 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v;
                 break;
                 default:
                 1;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
              barrier();
            }
           case 82:
           _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]));
           do
            {
             switch(_GLF_SWITCH((0 ^ (43417 & 0))))
              {
               case 99:
               ;
               case 0:
               case 64:
               case 50:
               case 6:
               case 87:
               case 10:
               case 14:
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               break;
               default:
               1;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           case 79:
           ivec2(-11855, 45800);
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.2), _GLF_FUZZED(8.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.2), _GLF_FUZZED(8.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y)))))), _GLF_IDENTITY(true && (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-599.125)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), bool(true))) > injectionSwitch.y))))), false || (true && (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-599.125)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0)), (float(mat3x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0))) * 1.0))))))))))) && true))));
           if(_GLF_DEAD(false))
            barrier();
           case 38:
           while(_GLF_IDENTITY((mat4x3(-7809.5184, 950.581, 3808.9910, -691.149, -8.5, -7.3, 12.97, 25.36, 85.99, -4906.0606, -2.5, _GLF_IDENTITY(-80.58, mix(float(_GLF_FUZZED(-48.50)), float(-80.58), bool(true)))) != mat4x3(3.0, 8960.0346, -475.238, -3.7, -2.2, -1347.5302, _GLF_IDENTITY(-9438.1991, mix(float(_GLF_FUZZED(-7102.4611)), float(_GLF_IDENTITY(-9438.1991, (-9438.1991) - 0.0)), bool(true))), -4102.4266, -9.6, 979.797, -513.831, 70.84)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((mat4x3(-7809.5184, 950.581, 3808.9910, -691.149, -8.5, -7.3, 12.97, 25.36, 85.99, -4906.0606, -2.5, _GLF_IDENTITY(-80.58, mix(float(_GLF_FUZZED(-48.50)), float(-80.58), bool(true)))) != mat4x3(3.0, 8960.0346, -475.238, -3.7, -2.2, -1347.5302, _GLF_IDENTITY(-9438.1991, mix(float(_GLF_FUZZED(-7102.4611)), float(_GLF_IDENTITY(-9438.1991, (-9438.1991) - 0.0)), bool(true))), -4102.4266, -9.6, 979.797, -513.831, 70.84)), ! (! ((mat4x3(-7809.5184, 950.581, 3808.9910, -691.149, -8.5, -7.3, 12.97, 25.36, 85.99, -4906.0606, -2.5, _GLF_IDENTITY(-80.58, mix(float(_GLF_FUZZED(-48.50)), float(-80.58), bool(true)))) != mat4x3(3.0, 8960.0346, -475.238, -3.7, -2.2, -1347.5302, _GLF_IDENTITY(-9438.1991, mix(float(_GLF_FUZZED(-7102.4611)), float(_GLF_IDENTITY(-9438.1991, (-9438.1991) - 0.0)), bool(true))), -4102.4266, -9.6, 979.797, -513.831, 70.84))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if((mat2x3(-6.6, 1731.5772, -7.5, _GLF_IDENTITY(0.3, (0.3) * 1.0), -7.3, -2.7) != mat2x3(-2549.3505, -40.84, 735.745, 7538.5288, 89.40, -7.2)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(true)))))))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))).y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             {
              bitCount(ivec4(98120, 43771, 82250, -94341));
              ;
              _GLF_struct_12 _GLF_struct_replacement_12;
              if(_GLF_DEAD(false))
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  barrier();
                 }
                else
                 {
                 }
               }
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true))))) || false))), bool(bvec3(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true))))) || false))), true, false))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true))))) || false))), bool(bvec3(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && _GLF_IDENTITY(true, false || (true))))) || false))), true, false))))))))))))
               {
                ;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  barrier();
                 }
                if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), false))))))
                 barrier();
               }
              else
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                 }
                else
                 {
                 }
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                 barrier();
               }
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                barrier();
                if(_GLF_DEAD(false))
                 barrier();
               }
             }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))
              barrier();
             ;
             ;
             uvec4(_GLF_IDENTITY(100053u, min(100053u, 100053u)), 22351u, 144491u, 58187u);
             ivec4(85282, 44125, -87368, 51475);
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             uvec2(192391u, 170772u);
            }
           case 5:
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             (+ uvec2(105758u, 168248u));
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) | (1)) | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     switch(_GLF_SWITCH((1 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))
                      {
                       case 16:
                       ivec4 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v[85];
                       case 0:
                       case 26:
                       case 65:
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           barrier();
                          }
                        }
                       case 71:
                       case 6:
                       case 43:
                       case 14:
                       case 39:
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         switch(_GLF_SWITCH(0))
                          {
                           case 0:
                           case 60:
                           case 33:
                           case 2:
                           case 48:
                           case 35:
                           if(_GLF_DEAD(false))
                            barrier();
                           case 54:
                           case 51:
                           if(_GLF_DEAD(false))
                            barrier();
                           case 16:
                           case 8:
                           barrier();
                           break;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                            barrier();
                           case 71:
                           if(_GLF_DEAD(false))
                            barrier();
                           vec4 _GLF_SWITCH_2_0v;
                           default:
                           1;
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       break;
                       default:
                       1;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               _GLF_IDENTITY(_GLF_IDENTITY(uvec4(read, _GLF_IDENTITY(194507u, 0u + (194507u)), workgroup_size, _GLF_struct_replacement_17.workgroup_id), (uvec4(read, _GLF_IDENTITY(194507u, 0u + (194507u)), workgroup_size, _GLF_struct_replacement_17.workgroup_id)) | (uvec4(read, _GLF_IDENTITY(194507u, 0u + (_GLF_IDENTITY(194507u, (194507u) / 1u))), workgroup_size, _GLF_struct_replacement_17.workgroup_id))), max(_GLF_IDENTITY(uvec4(read, _GLF_IDENTITY(194507u, 0u + (194507u)), workgroup_size, _GLF_struct_replacement_17.workgroup_id), (uvec4(read, _GLF_IDENTITY(194507u, 0u + (194507u)), workgroup_size, _GLF_struct_replacement_17.workgroup_id)) | (uvec4(read, _GLF_IDENTITY(194507u, 0u + (_GLF_IDENTITY(194507u, (194507u) / 1u))), workgroup_size, _GLF_struct_replacement_17.workgroup_id))), _GLF_IDENTITY(uvec4(read, _GLF_IDENTITY(194507u, 0u + (194507u)), workgroup_size, _GLF_struct_replacement_17.workgroup_id), (uvec4(read, _GLF_IDENTITY(194507u, 0u + (194507u)), workgroup_size, _GLF_struct_replacement_17.workgroup_id)) | (uvec4(read, _GLF_IDENTITY(194507u, 0u + (_GLF_IDENTITY(194507u, (194507u) / 1u))), workgroup_size, _GLF_struct_replacement_17.workgroup_id)))));
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                barrier();
               }
              mat3(_GLF_IDENTITY(-8735.3728, mix(float(-8735.3728), float(_GLF_FUZZED(948.239)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) || false)) && true))), _GLF_IDENTITY(-8.6, (true ? -8.6 : _GLF_FUZZED(-9.7))), 8.5, 5.9, -1.2, 7146.6006, 3.3, -6723.6687, 1.2);
              bitfieldExtract(ivec3(-3782, _GLF_IDENTITY(80362, (80362) << 0), 25690), _GLF_IDENTITY(-69059, max(-69059, -69059)), _GLF_IDENTITY(-64016, (-64016) | (-64016)));
              (mat3x2(7581.4154, 9277.0358, 7248.0350, 9.5, 3.2, -184.042) + -596.253);
              if(_GLF_DEAD(false))
               barrier();
              int _GLF_SWITCH_0_40v[76];
              if(_GLF_DEAD(false))
               barrier();
              do
               {
                if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true))))))
                 barrier();
                switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                 {
                  case 0:
                  case 41:
                  case 47:
                  case 92:
                  case 95:
                  case 27:
                  if(_GLF_DEAD(false))
                   barrier();
                  _GLF_IDENTITY(lessThan(ivec3(93281, 5460, _GLF_IDENTITY(22094, clamp(22094, 22094, 22094))), ivec3(5817, -19455, 63289)), bvec3(bvec3(lessThan(_GLF_IDENTITY(ivec3(93281, 5460, 22094), (ivec3(93281, 5460, 22094)) >> ivec3(0, 0, 0)), ivec3(5817, -19455, 63289)))));
                  break;
                  default:
                  1;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  switch(_GLF_SWITCH((76211 & (0 >> _GLF_IDENTITY(int(0), int(0))))))
                   {
                    case 0:
                    case 22:
                    case 62:
                    case 88:
                    if(_GLF_DEAD(false))
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(int(int(4))), max(int(int(int(4))), int(int(int(4))))))))); _injected_loop_counter ++)
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         barrier();
                       }
                      barrier();
                     }
                    break;
                    default:
                    1;
                   }
                 }
                else
                 {
                  barrier();
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                   barrier();
                  barrier();
                 }
               }
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                barrier();
               }
              mat2x3 _GLF_SWITCH_0_41v;
              vec3 _GLF_SWITCH_0_42v;
              if(_GLF_DEAD(false))
               barrier();
             }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             uvec4(159208u, 59568u, 112165u, 162726u);
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(ivec4 _GLF_SWITCH_0_43v[49], _GLF_SWITCH_0_44v, _GLF_SWITCH_0_45v[65]; all(greaterThanEqual(vec3(-766.451, -5.4, -7918.7425), _GLF_IDENTITY(vec3(24.43, -2.3, 2.1), vec3(_GLF_IDENTITY(mat3x2(vec3(24.43, -2.3, 2.1), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0), mat3x2(mat4x3(mat3x2(vec3(24.43, -2.3, 2.1), 0.0, 0.0, 1.0)))))))); greaterThanEqual(injectionSwitch, injectionSwitch))
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             max(48014, 53984);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           case 73:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           case 62:
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           for(bvec3 _GLF_SWITCH_0_46v[51]; (-1.8 < _GLF_IDENTITY(7.8, (false ? _GLF_FUZZED(1.6) : 7.8))); 150.770)
            {
             {
              do
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  barrier();
                 }
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                 }
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  transpose(mat3x4(-0.6, _GLF_IDENTITY(-7.3, min(-7.3, _GLF_IDENTITY(_GLF_IDENTITY(-7.3, min(-7.3, -7.3)), (-7.3) / 1.0))), _GLF_IDENTITY(-0.7, max(-0.7, -0.7)), -1.9, _GLF_IDENTITY(-799.359, _GLF_IDENTITY((-799.359) + 0.0, clamp((-799.359) + 0.0, _GLF_IDENTITY((-799.359) + 0.0, (true ? (-799.359) + 0.0 : _GLF_FUZZED(-436.895))), (-799.359) + 0.0))), -7.2, -2.1, _GLF_IDENTITY(4.6, mix(float(_GLF_FUZZED(442.471)), float(4.6), bool(true))), _GLF_IDENTITY(-109.109, (-109.109) + 0.0), -9.2, _GLF_IDENTITY(_GLF_IDENTITY(-9.9, float(mat4x2(-9.9, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), mix(float(_GLF_FUZZED(72.03)), float(_GLF_IDENTITY(-9.9, float(mat4x2(-9.9, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), bool(true))), -95.16));
                 }
                else
                 {
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              vec2 _GLF_SWITCH_0_47v[66], _GLF_SWITCH_0_48v[50], _GLF_SWITCH_0_49v;
              for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(vec3(86.92, -7.2, -8.2).y), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(vec4(1829.8496, -6.6, -7.2, 4.7).z)), bvec2(true, false)))).y, false, true, false))))))))))
                   {
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                     {
                     }
                    else
                     {
                      barrier();
                     }
                   }
                 }
                else
                 {
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                 barrier();
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    barrier();
                   }
                 }
               }
              if(_GLF_DEAD(false))
               barrier();
              (false ? mat3x2(1.2, -2961.4717, -8173.3169, -3.7, -4.3, -5.3) : mat3x2(_GLF_IDENTITY(-3875.6367, (true ? _GLF_IDENTITY(-3875.6367, max(-3875.6367, -3875.6367)) : _GLF_FUZZED(32.35))), 4979.4649, -158.691, 418.718, _GLF_IDENTITY(563.098, min(_GLF_IDENTITY(563.098, mix(float(563.098), _GLF_IDENTITY(float(_GLF_FUZZED(-4.0)), 0.0 + (float(_GLF_FUZZED(-4.0)))), bool(false))), _GLF_IDENTITY(563.098, clamp(563.098, 563.098, 563.098)))), _GLF_IDENTITY(-2.3, mix(float(-2.3), float(_GLF_FUZZED(-42.64)), bool(false)))));
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(_GLF_SWITCH_0_49v, injectionSwitch, vec2(-18.41, 4.3))))).x > injectionSwitch.y))))
                 barrier();
                barrier();
               }
              uvec2(71057u, 126639u);
              mat3(_GLF_IDENTITY(-3.1, min(-3.1, _GLF_IDENTITY(-3.1, float(_GLF_IDENTITY(mat4x2(-3.1, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat4x2(-3.1, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) * mat4(1.0)))))), _GLF_IDENTITY(-2828.9623, min(_GLF_IDENTITY(-2828.9623, (false ? _GLF_FUZZED(2.1) : _GLF_IDENTITY(-2828.9623, float(float(-2828.9623))))), -2828.9623)), -5003.5691, 40.65, -1574.2226, -636.000, 8.6, _GLF_IDENTITY(62.72, mix(float(62.72), _GLF_IDENTITY(float(_GLF_FUZZED(283.537)), min(float(_GLF_FUZZED(283.537)), float(_GLF_FUZZED(283.537)))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (0.0)), 1.0)))), (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0), mat2(1.0) * (mat3x2(injectionSwitch, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0))))) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x2(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, abs(1.0), 0.0))))).x > injectionSwitch.y))))), -2.6);
             }
             lessThanEqual(fract(_GLF_IDENTITY(vec4(-9.3, -2.4, _GLF_IDENTITY(2655.4716, min(2655.4716, 2655.4716)), -366.765), mix(vec4((vec4(-9.3, -2.4, _GLF_IDENTITY(2655.4716, max(2655.4716, 2655.4716)), -366.765))[0], _GLF_IDENTITY(_GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0), clamp(_GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0), min(_GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0), _GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0))), _GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0))), _GLF_IDENTITY((vec4(-9.3, -2.4, 2655.4716, -366.765))[_GLF_IDENTITY(1, min(1, 1))], (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (vec4(-9.3, -2.4, 2655.4716, -366.765)) * mat4(1.0)))[1], max((vec4(-9.3, -2.4, 2655.4716, -366.765))[1], (vec4(-9.3, -2.4, 2655.4716, -366.765))[1])), _GLF_IDENTITY((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1]))), mix(float((false ? _GLF_FUZZED(ldexp(1.1, 67676)) : _GLF_IDENTITY((vec4(_GLF_IDENTITY(-9.3, mix(float(_GLF_FUZZED(9.4)), float(-9.3), bool(true))), -2.4, 2655.4716, -366.765))[1], max((vec4(_GLF_IDENTITY(-9.3, clamp(-9.3, -9.3, -9.3)), -2.4, 2655.4716, -366.765))[1], (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), (_GLF_IDENTITY(vec4(-9.3, -2.4, 2655.4716, -366.765), vec4(mat3x2(vec4(-9.3, -2.4, 2655.4716, -366.765), 0.0, 0.0)))) - abs(vec4(0.0, 0.0, 0.0, 0.0))))[1])))), float(_GLF_FUZZED(7.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0))), _GLF_FUZZED(-6.4), (vec4(-9.3, _GLF_IDENTITY(-2.4, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2.4, (false ? _GLF_FUZZED(76.54) : -2.4)), 0.0), max(vec2(_GLF_IDENTITY(-2.4, (false ? _GLF_FUZZED(76.54) : -2.4)), 0.0), vec2(_GLF_IDENTITY(-2.4, (false ? _GLF_FUZZED(76.54) : -2.4)), 0.0))))), 2655.4716, -366.765))[_GLF_IDENTITY(3, min(3, 3))]), vec4(_GLF_FUZZED(-7887.3088), _GLF_FUZZED(7.6), (vec4(-9.3, -2.4, 2655.4716, -366.765))[2], _GLF_FUZZED(-124.340)), bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) - log(1.0)), 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0)), max(_GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-984.317))), 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))), sqrt(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), 1.0)), 0.0 + (float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), 1.0)))), max(_GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), 1.0)), 0.0 + (float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), 1.0)))), _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), 1.0)), 0.0 + (float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), 1.0)))))))), _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0)), float(mat3x4(float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0)), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), float(_GLF_FUZZED(_GLF_IDENTITY(-0.5, 1.0 * (-0.5)))), bool(false))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))))) > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec2(_GLF_IDENTITY((true), ! (! ((true)))), true)))) || false))), false)))), vec4(-9.8, -124.874, 1714.9299, -427.677));
             _GLF_IDENTITY((_GLF_IDENTITY(ivec2(-56552, -12734) * 35574, max(ivec2(-56552, -12734) * 35574, ivec2(-56552, -12734) * 35574))), _GLF_IDENTITY(((ivec2(-56552, -12734) * _GLF_IDENTITY(35574, max(35574, 35574)))), (((ivec2(-56552, -12734) * _GLF_IDENTITY(35574, max(35574, 35574))))) | ivec2(0, 0)) | ((ivec2(-56552, -12734) * 35574)));
             (mat4x3(-60.63, -72.55, 5.3, _GLF_IDENTITY(98.51, min(98.51, 98.51)), -58.06, 5660.3232, _GLF_IDENTITY(-4.8, (false ? _GLF_FUZZED(-84.93) : _GLF_IDENTITY(-4.8, mix(float(_GLF_IDENTITY(-4.8, max(-4.8, -4.8))), float(_GLF_FUZZED(-23.32)), bool(false))))), 90.23, 115.750, 925.016, 3.0, _GLF_IDENTITY(-8.1, (_GLF_IDENTITY(-8.1, mix(float(_GLF_FUZZED(-9.6)), float(-8.1), bool(true)))) / 1.0)) + distance(vec3(_GLF_IDENTITY(_GLF_IDENTITY(75.92, clamp(_GLF_IDENTITY(75.92, max(75.92, 75.92)), 75.92, 75.92)), mix(float(_GLF_FUZZED(-1.8)), float(_GLF_IDENTITY(75.92, clamp(_GLF_IDENTITY(75.92, max(75.92, _GLF_IDENTITY(75.92, clamp(_GLF_IDENTITY(75.92, mix(float(_GLF_FUZZED(-9.3)), float(75.92), bool(true))), _GLF_IDENTITY(75.92, clamp(75.92, 75.92, _GLF_IDENTITY(75.92, max(75.92, 75.92)))), _GLF_IDENTITY(75.92, mix(float(_GLF_FUZZED(-3.1)), float(75.92), bool(true))))))), 75.92, 75.92))), bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 465.231, -736.127), _GLF_IDENTITY(vec3(-3.8, 944.584, -1.9), (vec3(_GLF_IDENTITY(-3.8, max(_GLF_IDENTITY(-3.8, max(_GLF_IDENTITY(-3.8, max(-3.8, -3.8)), -3.8)), -3.8)), 944.584, -1.9)) / vec3(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), min(min(1.0, 1.0), _GLF_IDENTITY(min(1.0, 1.0), (true ? min(1.0, 1.0) : _GLF_FUZZED(8498.0095))))))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 1.0))));
             if(_GLF_DEAD(false))
              barrier();
             vec4(-2.4, -3347.8034, -4.6, 0.7);
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             for(int _injected_loop_counter = (1 ^ (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           case 77:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != (1 & 1), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != (1 & 1), false)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bool(! (bool(false)))))))))))
                barrier();
               ;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
            }
           break;
           case 16:
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             log2(vec3(-1170.3702, 12.58, -9.8));
            }
           else
            {
            }
           case 32:
           greaterThan(ivec2(-9381, -25660), ivec2(-28483, 76265));
           default:
           1;
          }
        }
       case 0:
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))), false || ((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       case 32:
       case 51:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       case 91:
       if(_GLF_DEAD(false))
        barrier();
       case 95:
       case 45:
       if(_GLF_DEAD(false))
        barrier();
       case 48:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       atomicStore(checker[_GLF_struct_replacement_23.virtual_gid], read, 4, 64, 4);
       case 89:
       do
        {
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH(0))
            {
             case 53:
             floatBitsToInt(asin(vec3(-1.6, -7843.3464, -917.635)));
             case 0:
             case 66:
             case 82:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             case 48:
             case 74:
             case 79:
             case 62:
             case 42:
             case 52:
             barrier();
             break;
             case 69:
             mat3x2 _GLF_SWITCH_3_0v[11], _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
             default:
             1;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       case 6:
       subgroupAll(true);
       break;
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))))))))
          {
           switch(_GLF_SWITCH(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), max((0 >> _GLF_IDENTITY(int(4), int(4))), (0 >> _GLF_IDENTITY(int(4), int(4)))))))
            {
             case 52:
             mat2(-4.2, 9195.2547, 53.23, 7600.9924);
             case 0:
             case 22:
             case 8:
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             break;
             case 94:
             ivec3 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
             case 60:
             mat4x3(-4255.0693, 3896.8598, 492.003, -50.66, 4.4, 7.6, 8844.7043, 9.2, 4.6, 4.4, 1.3, 451.245);
             default:
             1;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       default:
       _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) ^ 0)) - 0)), clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) ^ 0)) - 0)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) ^ 0)) - 0)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) ^ 0)) - 0)))) << 0);
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))) >> 0) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.9)), float(injectionSwitch.y), bool(true))))) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), false, false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
}
