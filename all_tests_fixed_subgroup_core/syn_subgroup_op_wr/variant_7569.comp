#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))
    {
     case 0:
     case 62:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     case 97:
     case 65:
     case 50:
     case 57:
     case 14:
     subgroupAll(false);
     break;
     case 93:
     mat4x3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
     case 56:
     float _GLF_SWITCH_0_3v;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)))))
    {
     case 83:
     {
      switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(4), int(4)))))
       {
        case 72:
        log2(mix(vec4(5.1, 3.9, -3563.3343, 8976.2148), vec4(3.6, 99.67, -5.4, 64.28), vec4(5213.5237, 8982.8504, -56.86, 954.591)));
        case 82:
        if((ivec2(80593, -80701) != ivec2(-85097, -39760)))
         {
          vec3(-2534.0312, vec2(5420.0680, 8420.2076));
          vec2(6545.4502, 553.938);
          7.5;
          ;
          bvec4(true, true, false, true);
          bvec3(bvec4(true, bvec3(true, false, false)));
          (false ? mat3x4(-68.92, -1036.0365, -2.2, 36.68, 4.2, 8.8, -0.7, -7.8, -915.496, -3.1, -220.161, -82.82) : mat3x4(5.4, -86.92, 5.1, 731.796, 3.0, -2.3, 8281.9184, -4.1, -6.4, -1.5, -45.42, 32.17));
         }
        else
         {
          vec3(4.1, -9152.9548, 8.4);
          mat2(398.026, 655.239, -879.523, -2.6);
          mat3x2(31.84, -3.1, -7.8, -4108.6724, 133.920, 67.18);
          mat2x4(-85.62, -7.8, 871.836, -4.6, 7877.9574, -7909.1166, -369.626, 1824.2470);
          vec4(-7.6, -45.32, 6.1, 79.00);
          uvec4(128272u, 174011u, 27768u, 17128u);
         }
        case 0:
        case 65:
        case 7:
        case 60:
        case 14:
        greaterThan(vec3(-68.71, 81.02, 6503.3544), vec3(6.7, -1.1, -835.536));
        break;
        case 56:
        {
         bvec2(false, false);
         vec2 _GLF_SWITCH_1_0v;
         uvec2(194919u, 176529u);
         (vec3(-40.85, -1640.0352, 6353.0962) * mat3(-30.91, -53.33, 49.06, 6.9, -9048.0439, -1919.1341, -5.3, 9.2, 620.939));
         (5914.3594 / vec3(67.99, 541.801, -490.305));
        }
        default:
        1;
       }
     }
     case 0:
     case 10:
     case 11:
     case 94:
     case 42:
     case 63:
     case 30:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     case 89:
     case 26:
     subgroupAll(true);
     break;
     default:
     1;
    }
  }
}
