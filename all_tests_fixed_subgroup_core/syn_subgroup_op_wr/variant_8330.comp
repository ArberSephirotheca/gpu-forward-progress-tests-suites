#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(17648) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) > ((0 | 0) ^ (0 ^ 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-41.52), max(_GLF_IDENTITY(_GLF_FUZZED(-41.52), max(_GLF_FUZZED(-41.52), _GLF_FUZZED(-41.52))), _GLF_FUZZED(-41.52)))), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), true && ((false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(6, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)))), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
        barrier();
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), true, false, true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(false), true, false), false))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(false), true, false), true))), false)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(false), true, false), true))), false)), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(false), true, false), false))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) && true), true, false), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(false), true, false), false))), bvec3(bvec4(bvec3(bool(false), true, false), true))), false)), true))), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec4(bvec3(bool(false), true, false), true))), false)), _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)), false)))))))))))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) && true)));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), _GLF_IDENTITY(false, (false) || false), false, true)))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, sin(0.0))), 1.0, 0.0, determinant(mat4(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (false ? _GLF_FUZZED(-8015.9561) : dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), cos(0.0), 1.0, 0.0)), max(float(mat3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (false ? _GLF_FUZZED(-8015.9561) : dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), cos(0.0), 1.0, 0.0)), _GLF_IDENTITY(float(mat3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (false ? _GLF_FUZZED(-8015.9561) : dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), cos(0.0), 1.0, 0.0)), (float(mat3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (false ? _GLF_FUZZED(-8015.9561) : dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), cos(0.0), 1.0, 0.0))) - 0.0)))), _GLF_IDENTITY(0.0, (0.0) / determinant(mat2(sqrt(1.0), 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0)), 1.0, 0.0, log(1.0)))), min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)), false || (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) || false)) && true)), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).y)))), false, false, true)))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), false, false, true)))), true, false, true)))) || false))), false, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 1.0, 1.0)), 1.0)))).y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-16.68)), bool(false)))), float(_GLF_FUZZED(-86.69)), bool(false)))), false, false, true)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-16.68)), bool(false)))), float(_GLF_FUZZED(-86.69)), bool(false)))), false, false, true)))))))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true))))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(0.0, 0.0) + (vec2(1.0, 1.0)))), _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch)))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, abs(0.0))), (dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, abs(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(967.554)), bool(false))), 1.0, 1.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(967.554)), bool(false))), 1.0, 1.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(967.554)), bool(false))), 1.0, 1.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) / 1.0), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, abs(0.0)))))), (float(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec3(0.0, 1.0, abs(0.0))))))) - 0.0))), false, false, true)))))))))))), ! (! ((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true, true)), false || (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true, true))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(false, true && (false)), true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), injectionSwitch)).y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(false, true && (false)), true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(false, true && (false)), true)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(false, true && (false)), true)))), bool(bvec3((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(false, true && (false)), true)))), false, false))), true))))))))))), true && ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)), true)))))))))))), bool(bvec4(! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, _GLF_IDENTITY(false, true && (false)), true))))))))), true && ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, false))), false)))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))), true && (false)), true)))))))))))), false, false, true)))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 0.0))))))).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), false, false, true)))))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) && true)), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) && true)))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true))))), true && _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), false, false, true)))))), _GLF_IDENTITY(bool(bvec3((! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), false, false, true)))))), false, true)), ! (! (bool(bvec3((! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), false, false, true)))))), false, true)))))))))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) || false)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false, true)))))))))))))), false, true))))))))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4762.0921), _GLF_FUZZED(vec3(-4745.9959, 5.6, 671.284).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.3), _GLF_FUZZED(-0.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))).y)))) || false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : uint(uint(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))))))) >> _GLF_IDENTITY(0u, (0u) * 1u)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec4(workgroup_size, 1u, 0u, 0u)), (uint(uvec4(workgroup_size, 1u, 0u, 0u))) - 0u))) : _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)))) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (uvec3(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)) - uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : subgroup_id), (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : subgroup_id), uint(uint((false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id))))))) | 0u)) * subgroup_size) / 1u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) | (subgroup_size), ((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) | (subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) | (subgroup_size), ((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) | (subgroup_size)) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u : _GLF_FUZZED(uvec4(176387u, 184538u, 135234u, 35794u)[0])))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) >> 0u), _GLF_IDENTITY(0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), ~ (~ (0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u)) ^ (subgroup_size)), (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(subgroup_size, subgroup_size, subgroup_size), clamp(subgroup_size, subgroup_size, subgroup_size))), (false ? _GLF_FUZZED((~ _GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))))) : _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4(_GLF_FUZZED(-0.8), (normalize(vec4(1.0, 1.0, 1.0, 1.0)))[1], (normalize(vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(float(-16718))), vec4((normalize(vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9097.9784), _GLF_FUZZED(6.3), (normalize(vec4(1.0, 1.0, 1.0, 1.0)))[3]), bvec4(true, false, false, true))), normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), float(vec3(float(mat3x2(injectionSwitch.y, 1.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0)))))) ? clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(subgroup_size)), (uint(uint(subgroup_size))) - 0u)), subgroup_size, subgroup_size) : _GLF_FUZZED(44701u))))))), 0u | _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(1u, 1u) * (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 1u, 1u)))) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u)))), (false ? _GLF_FUZZED(uvec2(61845u, 166589u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u)))), (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u))))) >> uvec2(0u, 0u))))))))) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(subgroup_size, subgroup_size, subgroup_size), clamp(subgroup_size, subgroup_size, subgroup_size))), (false ? _GLF_FUZZED((~ _GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))))) : _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4(_GLF_FUZZED(-0.8), (normalize(vec4(1.0, 1.0, 1.0, 1.0)))[1], (normalize(vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(float(-16718))), vec4((normalize(vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9097.9784), _GLF_FUZZED(6.3), (normalize(vec4(1.0, 1.0, 1.0, 1.0)))[3]), bvec4(true, false, false, true))), normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), float(vec3(float(mat3x2(injectionSwitch.y, 1.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0)))))) ? clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(subgroup_size)), (uint(uint(subgroup_size))) - 0u)), subgroup_size, subgroup_size) : _GLF_FUZZED(44701u))))))), 0u | _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(1u, 1u) * (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 1u, 1u)))) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u)))), (false ? _GLF_FUZZED(uvec2(61845u, 166589u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u)))), (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) * uvec2(1u, 1u)) * (_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / uvec2(1u, 1u))))) >> uvec2(0u, 0u))))))))) : _GLF_FUZZED(num_workgroup))))) ^ (0u << _GLF_IDENTITY(uint(0u), uint(0u)))) << _GLF_IDENTITY(0u, (0u) ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) * 1u))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) >> (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) * 1u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))), 0u + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) / 1u)) * 1u)), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(clamp(subgroup_size, subgroup_size, subgroup_size), _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) | (clamp(subgroup_size, subgroup_size, subgroup_size))), _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), ~ (~ (clamp(subgroup_size, subgroup_size, subgroup_size))))))))) * 1u))))))) * ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u)) << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), _GLF_IDENTITY(~ (~ (uint(7u))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (~ (uint(7u))), clamp(~ (~ (uint(7u))), _GLF_IDENTITY(~ (~ (uint(7u))), (~ (~ (uint(7u)))) ^ 0u), _GLF_IDENTITY(~ (~ (uint(7u))), (~ (~ (uint(7u)))) | (~ (~ (uint(7u))))))))))) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(uvec4(uint(4u), 0u, 1u, 0u)), (false ? _GLF_FUZZED(86719u) : uint(uvec4(uint(4u), 0u, 1u, 0u))))), uint(4u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u)) << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), ~ (~ (uint(7u))))) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), min((_GLF_IDENTITY(0u, max(0u, 0u)) << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), ~ (~ (uint(7u))))) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), (_GLF_IDENTITY(0u, max(0u, 0u)) << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), ~ (~ (uint(7u))))) - (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))) << 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | (~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1u))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(0u, (0u) ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) | (subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) * 1u))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), subgroup_size))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), subgroup_size))))))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), (((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), (((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) + 0u))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), clamp(uint(uvec3(subgroup_size, 1u, 1u)), uint(uvec3(subgroup_size, 1u, 1u)), uint(uvec3(subgroup_size, 1u, 1u)))))) - 0u), subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) + 0u))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) + 0u))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) + 0u))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u)) | 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : clamp(subgroup_size, subgroup_size, subgroup_size))))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)))), subgroup_size, subgroup_size))), _GLF_IDENTITY(0u, max(0u, 0u)) | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) + 0u))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) / 1u), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (1u & 1u) * (clamp(subgroup_size, subgroup_size, subgroup_size))))), 0u | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (_GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) >> 0u)))) + 0u))), _GLF_IDENTITY(0u, (0u) >> 0u) | ((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))))) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (subgroup_size) | _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), uint(uint(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))), 1u, 1u)), 0u | (uint(uvec3(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))), 1u, 1u))))))))))) ^ 0u, ((_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uint((subgroup_size)), clamp(_GLF_IDENTITY(uint((subgroup_size)), 0u + (uint((subgroup_size)))), _GLF_IDENTITY(uint((subgroup_size)), min(uint((subgroup_size)), uint((subgroup_size)))), uint((subgroup_size))))))))) ^ 0u) / 1u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u | _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), (((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) * 1u)))) << 0u)) * 1u)))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u ^ (workgroup_size), min(_GLF_IDENTITY(0u ^ (workgroup_size), (0u ^ (workgroup_size)) | (0u ^ (workgroup_size))), 0u ^ (workgroup_size))))) - 0u)) | (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(virtual_gid)))))) : uint(1u))), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) / 1u))), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))) << 0u), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(clamp(subgroup_size, subgroup_size, subgroup_size), clamp(subgroup_size, subgroup_size, subgroup_size), _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) | (clamp(subgroup_size, subgroup_size, subgroup_size))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : subgroup_size)), subgroup_size), 0u | (clamp(_GLF_IDENTITY(subgroup_size, (0u ^ 0u) ^ (subgroup_size)), subgroup_size, subgroup_size))), 0u, 0u, 1u), ~ (~ (uvec4(_GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), min(uint(8u), uint(8u)))))), subgroup_size), 0u | (clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (0u ^ 0u) ^ (subgroup_size)), subgroup_size, subgroup_size))), 0u, 0u, 1u)))))))) << 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(uvec2(uint(1u), 0u))), uint(1u))), (_GLF_IDENTITY(true ? (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 0u))))), subgroup_size, subgroup_size)), subgroup_size, subgroup_size), 0u | _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size))), (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))) | (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))))))), 0u, 0u, _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (1u))))))) << 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) << 0u)))) : _GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(true ? (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 0u))))), subgroup_size, subgroup_size)), subgroup_size, subgroup_size), 0u | _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size))), (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))) | (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))))))), 0u, 0u, _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (1u))))))) << 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) << 0u)))) : _GLF_FUZZED(num_workgroup), (true ? (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 0u))))), subgroup_size, subgroup_size)), subgroup_size, subgroup_size), 0u | _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size))), (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))) | (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))))))), 0u, 0u, _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (1u))))))) << 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) << 0u)))) : _GLF_FUZZED(num_workgroup)) | (true ? (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 0u))))), subgroup_size, subgroup_size)), subgroup_size, subgroup_size), 0u | _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size))), (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))) | (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))))))), 0u, 0u, _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (1u))))))) << 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) << 0u)))) : _GLF_FUZZED(num_workgroup)))) | (true ? (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 0u, 0u))))), subgroup_size, subgroup_size)), subgroup_size, subgroup_size), 0u | _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size))), (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))) | (~ ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) ^ 0u) ^ (subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u ^ 0u), ((_GLF_IDENTITY(0u ^ 0u, min(_GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, 0u ^ 0u, 0u ^ 0u)), 0u ^ 0u)))) ^ 0u) ^ (subgroup_size)))))) + 0u), subgroup_size, subgroup_size)))))))), 0u, 0u, _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (1u))))))) << 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) << 0u)))) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) | 0u)) * 1u), clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), max((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))), ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))))), clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u)) | _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(1u), uint(1u))), max(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(1u), uint(1u))), ~ (~ ((0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(1u), uint(1u))), 0u ^ ((0u << _GLF_IDENTITY(uint(1u), uint(1u)))))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), 1u * (clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | 0u), subgroup_size, subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : clamp(subgroup_size, subgroup_size, subgroup_size))))) << 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u) % subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))))) * 1u) + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (false ? _GLF_FUZZED(num_workgroup) : ~ (subgroup_size))))), max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))) - 0u), _GLF_IDENTITY(uint(uvec4(~ ((subgroup_local_id + 1) % subgroup_size), 0u, 1u, _GLF_IDENTITY(0u, 0u ^ (0u)))), (uint(uvec4(~ ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) >> 0)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) >> 0)))), (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) >> 0))))) | 0))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u))), 0u, 1u, 0u))) / 1u))), ~ (~ ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) ^ uvec2(0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) ^ uvec2(0u, 0u))))))) + 1))) % subgroup_size, uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size, (1u & (1u | 1u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1)), 1))) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u)))), _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) | (subgroup_local_id + 1))) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1))))), 1))) % subgroup_size)))), (((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (-63107 & 0)), (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) | (subgroup_local_id + 1))) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, 1))) : _GLF_FUZZED((ivec2(-99296, -28482) ^ (-47859 << 27388))))))), 1))) % subgroup_size))))) | (((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) | (subgroup_local_id + 1))) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec4(ivec2(1, 0), 1, _GLF_IDENTITY(1, (1) ^ 0)))))), 1))) % subgroup_size)))))) - 0u), _GLF_IDENTITY(uint(uvec4(~ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1) % subgroup_size), 0u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), max(~ ((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))))))) % subgroup_size))), 0u, 1u, 0u))) / 1u))))))), 0u | ((subgroup_local_id + 1) % subgroup_size)));
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - 0u)], uint(_GLF_IDENTITY(1, int(ivec4(1, _GLF_IDENTITY(1, (1) - 0), 0, (_GLF_IDENTITY(0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? 0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(9978)))))))), 4, _GLF_IDENTITY(64, 1 * (64)), 4);
 for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1], clamp((injectionSwitch)[1], (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-74612) : 1))], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec2(971.289, -20.32).s, mix(float(_GLF_FUZZED(-1.5)), float(vec2(971.289, -20.32).s), bool(true)))), _GLF_FUZZED((- -8.5))), bvec2(false, false))).x, mix(float(_GLF_FUZZED(-0.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true))))) ? injectionSwitch : _GLF_FUZZED(vec2(9.3, 708.913)))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat3(vec2(1.0, 1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), vec2(1.0, 1.0), vec2(1.0, 1.0)))))) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0), (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(55941) : 1))], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.7), (injectionSwitch)[_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(6), int(6))) ^ (1)))))))]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(6764.4039, 1.0 * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), 1.0 * (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), min((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), max((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), (_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))))))))), mix(float(_GLF_FUZZED(-42.05)), float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), 1.0 * (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), min((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), max((_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true)))), (_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(6764.4039, (true ? 6764.4039 : _GLF_FUZZED(0.0)))), bool(true))), mix(float(_GLF_FUZZED(-36.42)), float(6764.4039), bool(true))))))))))), bool(true)))))), bvec2(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, (false) || false)))), injectionSwitch)))[1])), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[_GLF_IDENTITY(1, min(1, 1))], clamp((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))], (injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2(_GLF_FUZZED(6.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6764.4039)), bvec2(true, false))), injectionSwitch)))[1]))), float(_GLF_FUZZED(-793.585)), bool(false)))), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5))), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), clamp((vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), _GLF_IDENTITY((vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), clamp((vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), (vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), (vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))))), (vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))))), vec2(mat4x3(mat2(1.0) * (vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) / 1.0)) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)))), bvec2(false, false))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.3, 708.913)))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.7)), bool(false)))), float(_GLF_FUZZED(-815.730)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0), clamp((injectionSwitch) / vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0), (injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mat2(1.0) * ((injectionSwitch) / vec2(1.0, 1.0))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat3x2(vec2(1.0, 1.0), 1.0, 0.0, round(length(normalize(1.0))), 1.0))))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))[_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(20292) : _GLF_IDENTITY(1, ~ (~ (1))))), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(20292) : _GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(20292) : _GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(20292) : _GLF_IDENTITY(1, ~ (~ (1)))))))], clamp((injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))], (injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(6764.4039, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(6764.4039, mix(float(_GLF_IDENTITY(6764.4039, min(6764.4039, 6764.4039))), float(_GLF_FUZZED(-1368.2712)), bool(false))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-36.42), 1.0 * (_GLF_FUZZED(-36.42)))), float(6764.4039), bool(true))))))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, ! (! (true))))), false))), injectionSwitch)))[1])), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-6.5, -8608.6670)) : vec2(1.0, 1.0)))))[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(float(9141))), bool(false))), (injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2(_GLF_FUZZED(6.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6764.4039)), bvec2(true, false))), injectionSwitch)))[1]))), float(_GLF_FUZZED(_GLF_IDENTITY(-793.585, 1.0 * (-793.585)))), bool(false)))), _GLF_IDENTITY(vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((_GLF_IDENTITY(- -8.5, max(- -8.5, - -8.5))))), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_FUZZED(vec2(_GLF_IDENTITY(971.289, min(_GLF_IDENTITY(971.289, 0.0 + (971.289)), 971.289)), -20.32).s), _GLF_FUZZED((- -8.5)))), vec2(mat4x3(mat2(1.0) * (vec2(_GLF_FUZZED(vec2(971.289, -20.32).s), _GLF_FUZZED((- -8.5)))), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), bvec2(false, false))).x : _GLF_FUZZED(-990.872)))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((injectionSwitch.x > injectionSwitch.y) || false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((injectionSwitch.x > injectionSwitch.y) || false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))))))))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, 1.0))))), injectionSwitch.y)))))), false || (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9.8)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.4)))))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bool(true))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bool(true)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3223.1734), _GLF_IDENTITY(_GLF_FUZZED(-7.8), tan(0.0) + (_GLF_FUZZED(-7.8)))), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, tan(0.0), 1.0)), clamp(vec2(vec4(injectionSwitch, tan(0.0), 1.0)), vec2(vec4(injectionSwitch, tan(0.0), 1.0)), vec2(vec4(injectionSwitch, tan(0.0), 1.0))))).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true))))))) && true)), false, false)))))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), bool(bvec3(bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8896.6326)), float(injectionSwitch.y), bool(true))))))), false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false)))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))), false, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, 0.0, sqrt(1.0))), float(mat3x4(float(vec3(injectionSwitch.y, 0.0, sqrt(1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, 0.0, sqrt(1.0))), float(mat3x4(float(vec3(injectionSwitch.y, 0.0, sqrt(1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, 0.0, sqrt(1.0))), float(mat3x4(float(vec3(injectionSwitch.y, 0.0, sqrt(1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)))))) && true), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))) || false), true)))) && true)), _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false))))))))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true, ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(_GLF_ONE(1.0, injectionSwitch.y)))), true)), (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(_GLF_ONE(1.0, injectionSwitch.y)))), true))) || false))) && true))))), false, false))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)))).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), true && ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))) && true)), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false), bvec3(bvec3(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false))))))))))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true)))) && true)))), false, false)))) && true))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && true)), false, false))))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))), false, false, false))), true))), false, false)), true)))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false)))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.1), _GLF_FUZZED(3.9)), bvec2(false, false))).y)), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.1), _GLF_FUZZED(3.9)), bvec2(false, false))).y))) || false) || false))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(_GLF_IDENTITY(0, (0) | (0))), (1 ^ 1), 0)))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * _GLF_IDENTITY(1, (1) | (1))) != 1, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != 1))); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(6.3)), bool(false))) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))) + 0))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-7.1, -0.9)))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.1)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) && (false), (true && (false)) && true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sqrt(injectionSwitch)) : injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sqrt(injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sqrt(injectionSwitch)) : injectionSwitch)))))), vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))) / 1.0)))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))), (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))) || false)))));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8969.0127)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat2(1.0, 1.0, 0.0, 1.0)))), bool(true))))), true, false))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), min(float(mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) / 1));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! _GLF_IDENTITY((! (subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-55656))), 0, 0))) < subgroup_size)), false || (_GLF_IDENTITY((! (subgroup_local_id + 1 < subgroup_size)), true && ((! _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) + 0) < subgroup_size), true && ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) + 0) < subgroup_size))))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, sqrt(0.0)), min(vec3(injectionSwitch, sqrt(0.0)), vec3(injectionSwitch, sqrt(0.0)))))).x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, sqrt(0.0)), min(vec3(injectionSwitch, sqrt(0.0)), vec3(injectionSwitch, sqrt(0.0)))))).x > injectionSwitch.y))))) && true) || false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false, true)))))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), 1, 1)), (int(ivec3(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), 1, 1))) << 0)), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))) : _GLF_FUZZED(65121)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(int(ivec2(1, 1)), 1 * (_GLF_IDENTITY(int(ivec2(1, 1)), int(int(int(ivec2(1, 1)))))))), 1, _GLF_IDENTITY(1, 1 * (1))))) << 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (4) | (4)), 4)), 4)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(383.129))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(383.129))) > injectionSwitch.y)))) && true))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, (false) || false)) || false)), false || (bool(bool((_GLF_IDENTITY(false, (false) || false)) || false))))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false)) || false)) && true)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))), true && (false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))) || false)) && true)))))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(true, false || (true)) && (bool(bool(false))))) || false), false, true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false), false, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false), _GLF_IDENTITY(false, false || (false)), true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true && (bool(bool(false))))) || false), false, true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), max(float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), (true ? float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))) : _GLF_FUZZED(-64.11)))))) < injectionSwitch.y))))))), true, true)))), bool(bvec3(bool(bvec3(bool(bool(false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), true)), false, false))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true, true, true)))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           do
            {
             atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, ~ (~ (read))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), clamp(read, read, read)) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))), 1u * (_GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))))))), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         subgroupAll(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), bvec3(bvec3(bvec3(false, false, true))))))))));
        }
      }
    }
  }
}
