#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), false))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))), bool(bool(bool(bvec4(false, false, false, false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) - vec2(0.0, 0.0))[1])).y))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) + 0.0), injectionSwitch[1])).y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))))))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, cos(0.0), sqrt(1.0), 0.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0)), (vec2(mat4x3(injectionSwitch, 0.0, cos(0.0), sqrt(1.0), 0.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))) + vec2(0.0, 0.0))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y) && true)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size))) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), min(subgroup_id, subgroup_id)) * subgroup_size))) | (subgroup_id * subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), 0u ^ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size))))), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), min(subgroup_id, subgroup_id)) * subgroup_size))) | (subgroup_id * subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), 0u ^ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size))))), 0u), ~ (~ (uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), min(subgroup_id, subgroup_id)) * subgroup_size))) | (subgroup_id * subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), 0u ^ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size))))), 0u)))))) >> 0u) + ((subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-996.105))))), _GLF_IDENTITY(true, (true) || false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) << 0), 64, 64))) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))) ^ 0) : _GLF_FUZZED(94155))))))) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) << 0), 64, 64))) | _GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | (64))) / 1), 64, 64)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), 0 | (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))))), (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))) ^ 0) : _GLF_FUZZED(94155))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155), (false ? _GLF_FUZZED(28086) : true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155))), true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155), true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / _GLF_IDENTITY(1, (1) >> 0)), 64, 64))), (false ? _GLF_FUZZED(-51578) : (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / _GLF_IDENTITY(1, (1) >> 0)), 64, 64))))) ^ 0) : _GLF_FUZZED(94155)))))))))))) >> 0)), ((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | (64))) / 1), 64, 64)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), 0 | (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))))), (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))) ^ 0) : _GLF_FUZZED(94155))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155), (false ? _GLF_FUZZED(28086) : true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155))), true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155), true ? _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0))))))), 0 ^ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), max(int(_GLF_IDENTITY((64), ((64)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY((64), ((64)) - 0)), min(int(_GLF_IDENTITY((64), ((64)) - 0)), int(_GLF_IDENTITY((64), ((64)) - 0)))))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), 64, 64), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), min(clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64), clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)))) - 0) ^ 0) : _GLF_FUZZED(94155))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / 1), 64, 64)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / _GLF_IDENTITY(1, (1) >> 0)), 64, 64))), (false ? _GLF_FUZZED(-51578) : (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) / _GLF_IDENTITY(1, (1) >> 0)), 64, 64))))) ^ 0) : _GLF_FUZZED(94155)))))))))))) >> 0))) >> 0))) - (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2)))), min(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2)))), 0 >> _GLF_IDENTITY(int(2), int(2)))))), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), true, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), true, true)), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), true, true)), true, true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))))), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), true, false)))), true, true)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), false), true, true))))), bool(bool((bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false), true, true))))))))), ! (! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool((false)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), true && ((false))), (true && _GLF_IDENTITY((false), true && ((false)))) && true))))), false), true, true))))), bool(bool((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), false)))))))))), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))), false), true, true)))))))))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), true))))))) && true)))) || false)), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, log(1.0), abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))) > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, tan(0.0), 1.0)), float(mat2((injectionSwitch.y) * determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, tan(0.0), 1.0)), 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], read, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(4, (4) - 0), 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0)), clamp(int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0)), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0)), clamp(int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0)), int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0)), int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0)))), int(ivec4((_GLF_IDENTITY(int(ivec2(4, 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), (_GLF_IDENTITY(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), clamp(ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0), ivec4(int(ivec2(4, 0)), 1, _GLF_IDENTITY(0, min(0, 0)), 0)))) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0)), (false ? _GLF_FUZZED(85122) : int(ivec4(int(ivec2(4, 0)), 1, 0, 0))) + 0))))), 1, 0, 0))))) >> 0)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   subgroupAll(true);
  }
}
