#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 84:
     while(false)
      {
       while(true)
        {
         if(((ivec3(85740, 96916, 4770) / (21968 | ivec3(-38578, 37729, 76899))) == ivec3(55821, 55375, 25123)))
          {
           ;
           bvec3 _GLF_SWITCH_0_0v[13];
           bvec3(false, true, false);
          }
         else
          {
           mat2x3(-8.6, 48.40, -113.156, -9.9, -6364.0519, -5982.0701);
           bvec2 _GLF_SWITCH_0_1v[38];
           transpose(mat3x2(87.27, -87.78, 45.65, -4170.2965, 8.6, -39.97));
           mat4x2 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[4], _GLF_SWITCH_0_4v;
           mat4x3(2.8, 5414.5759, 43.76, 6.6, 9.8, -4923.3423, 2893.1232, 467.595, 3723.8692, -459.073, 1.1, -2449.7136);
           exp2(vec3(-2.4, 2869.5419, 702.379));
           85.43;
           uint _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v[22];
          }
        }
       if(true)
        {
         {
          ivec3 _GLF_SWITCH_0_7v;
          equal(bvec2(true, false), notEqual(ivec2(-75283, -71357), ivec2(-47772, 59708)));
          mat4x3 _GLF_SWITCH_0_8v[16], _GLF_SWITCH_0_9v;
          ivec2(44585, -3029);
          ;
          min(exp2(vec4(-6.0, -2.1, 3355.2179, 4022.0929)), smoothstep(vec4(-931.492, 98.24, 34.74, 3.3), pow(vec4(-5773.6890, 216.790, 833.372, 1902.4253), vec4(2550.1730, -598.101, -1.2, -70.45)), vec4(-8.5, -296.750, 24.32, 4.3)));
          (bvec4(true, false, true, false) , mat4(-34.32, 51.63, -58.15, -55.88, -78.36, 4.2, -274.199, -42.78, 5.7, -3.5, -3637.3367, -1.2, 4217.0019, -6071.2052, -137.923, 7104.6014));
          (mat3(607.152, -2.2, 0.9, 672.107, -522.702, -691.472, -8.1, 758.419, -5.9));
         }
         (8122 + -86525);
         for(         ivec4(93201, -2476, -74952, 60430);
 true; greaterThanEqual(ivec2(45074), ivec2(85206, -93056)))
          {
          }
         for(         ivec3(-93916, 17390, 14572);
 true; mat3(3.0, -3.6, 5139.8716, 10.94, 823.007, -1.6, -50.36, -16.01, 6518.6788))
          {
           (true ? mat2x3(39.69, -9224.9572, -8.1, -8515.0969, -63.87, -3913.7860) : mat2x3(5.2, -5.7, -5539.6058, 8.7, 99.41, 960.990));
           clamp(vec2(-2127.2332, -42.31), injectionSwitch, vec2(9.3, 80.87));
           (findLSB(uvec4(115319u, 36299u, 36141u, 31383u)));
           subgroup_id;
           bool _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v;
           mat3(-56.85, 26.06, -9.6, -2.0, -4.7, -3.5, -9.3, 6476.0565, 3572.2284);
          }
         {
          uint _GLF_SWITCH_0_13v;
          vec4 _GLF_SWITCH_0_14v[92];
         }
         for(         mat4x2(-4.1, 6.7, 7.5, -9396.6535, -395.614, -976.028, 6305.2060, -3.2);
 false; ivec4(75765, 77337, -82918, 58839))
          {
           (ivec2(57131, -20890) + ivec2(8527, 96851));
           bvec3(true, false, false);
           45702;
           ;
          }
         for(         mat2(-58.82, -57.64, 502.834, 751.556);
 bvec3(false, true, false).r; uvec2(59107u, 1817u))
          {
           transpose(mat2x4(0.0, -53.48, -86.79, 5.2, 4642.3896, -166.375, -1.8, 561.196));
           equal(vec4(-3593.7910, -155.328, 8.8, -4.4), vec4(-5.1, 1.1, 8.6, 4.2));
          }
         mat3x2(-6.1, 3.7, -2.3, -4.7, -6.3, -0.5);
        }
       else
        {
        }
       for(ivec3 _GLF_SWITCH_0_15v; (94612 < ivec4(-86464, -51958, -80328, -52007).q); bvec3(false, false, false))
        {
         if(true)
          {
           bitCount(ivec4(10316, 47707, -43498, -93176));
           mat2(1.2, -831.581, -6.4, -7.3);
           mat2 _GLF_SWITCH_0_16v;
           bvec3 _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v;
           _GLF_SWITCH_0_18v.xx;
           uvec2(workgroup_id);
           mat3x2 _GLF_SWITCH_0_19v[81], _GLF_SWITCH_0_20v;
          }
         else
          {
           min(ivec2(-77385, 52006), ivec2(-46424, -95379));
           ;
           (mat3x4(6477.7415, 9421.5541, 8164.0933, -175.935, 3.7, -1808.5340, -7.3, -391.893, -9716.8372, -5.9, -2904.9496, 6261.6160) * mat2x3(mat2x4(mat2(6.8, 285.172, 4071.5881, 682.973))));
           mat3x2(9.8, 437.231, 1.0, 797.220, -98.38, -123.915);
           mat4 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v;
           _GLF_SWITCH_0_15v;
           abs(vec4(-8.4, 1.1, -9603.7777, 484.753));
           int _GLF_SWITCH_0_24v;
          }
        }
      }
     case 0:
     case 43:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     case 77:
     subgroupAll(false);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 23:
     for(ivec3 _GLF_SWITCH_1_0v[46]; false; mat4(-5.7, -7.6, -61.15, -17.63, 948.971, -3.5, 463.962, -39.41, -1542.8825, 2.2, 3803.4724, -6.8, 3797.2943, 6.4, 515.360, -646.582))
      {
       ((mat2x3(-58.57, -9.2, -9.7, -53.07, 457.988, 4.3) + (true ? mat2x3(48.36, -6297.0128, -5.0, -7006.6336, 7556.2238, -5698.8922) : mat2x3(43.32, -220.074, -2.5, -7.0, -672.615, 624.049))));
       for(       mat4x2(-528.663, 2.1, -15.54, -3167.6762, 64.72, 4.4, 5.6, -4718.9494);
 true; (vec4(5768.7747, 0.1, -87.09, -5490.3276) == vec4(88.88, -885.250, 2.0, -6.5)))
        {
         {
          mat4(0.5, -37.07, 8.9, -8375.7700, 4.4, -609.680, -9.2, -39.79, 497.891, 860.398, 13.22, -5.8, 7.6, 154.211, -55.24, -75.28);
          mat2x4 _GLF_SWITCH_1_1v;
          mat4x2 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v;
          mat3 _GLF_SWITCH_1_5v[18], _GLF_SWITCH_1_6v;
          (mat2x3(0.9, 27.30, -735.155, 401.471, 2.4, 6028.6137) * mat3x2(-93.96, -1.4, -8133.5136, 1.1, -547.897, -867.533));
          (vec3(191.013, 43.92, -634.672) / reflect(atan(vec3(-745.201, 7.6, -528.755)), vec3(-6.8, 996.786, 9437.1001)));
          ;
          uvec3(96247u, 197208u, 90713u);
          ivec2 _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v;
         }
         455.491;
         ;
         (+ mat3x4(7786.1787, -9367.0203, 789.950, -39.58, 7.1, -1.8, 4141.7767, 64.73, 7.1, -5.0, 6.9, 3.1));
         if(all(bvec2(true, false)))
          {
           mat3x4(363.191, -5.4, 5.2, -85.38, 85.53, 3.7, 48.65, 2.8, 713.103, -522.941, -0.9, -79.95);
           ivec2(21510, -5068);
           workgroup_base;
           mat2(-4940.5483, -4785.2837, -1.5, 1.3);
           smoothstep(vec3(-9949.9194, 3.7, -14.44), vec3(7.7, 6.5, -5.2), vec3(-1.8, -8.6, -1.7));
           mix(44164u, workgroup_size, false);
           ivec4 _GLF_SWITCH_1_10v, _GLF_SWITCH_1_11v[29];
           uvec4(144734u, 180871u, 33343u, 183188u);
           _GLF_SWITCH_1_10v.q;
          }
         else
          {
           bool _GLF_SWITCH_1_12v;
           ;
          }
         mat4x2(-36.49, 3.0, -2.6, -3.9, 2330.5562, 931.806, 96.01, -5259.3006);
         if((mat4x3(-45.63, 2.0, -2235.1122, -4020.8408, -4.5, -76.96, -2.9, 713.964, 4.7, -3.6, -92.67, 6304.5542) != mat4x3(-29.52, -0.0, -71.58, 8013.9620, 4.5, -12.22, -9206.3525, -47.66, 4.7, -39.16, -54.82, -8.3)))
          {
           mat2x3(mat4x2(-620.484, 2.4, -8.3, -19.26, 272.761, -3510.8543, 76.69, -7.5));
           bvec4 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v;
           int(num_workgroup);
           (mat2(-703.107, 9.8, -1.7, -290.047) + 3798.5434);
           -9.7;
           vec3 _GLF_SWITCH_1_15v, _GLF_SWITCH_1_16v[93], _GLF_SWITCH_1_17v;
           uvec2(106267u, 107348u);
           _GLF_SWITCH_1_14v;
          }
        }
      }
     case 34:
     clamp((-23134 & ivec3(23064, -8538, 13360)), ivec3(-74556, -92207, 89579), ivec3(92093, 5868, 26417));
     case 0:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     case 41:
     subgroupAll(true);
     break;
     default:
     1;
    }
  }
}
