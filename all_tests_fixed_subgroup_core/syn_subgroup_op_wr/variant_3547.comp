#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec3 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.7) : injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
          barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-96185))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.x = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (_injected_loop_counter)) > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), ((0 >> _GLF_IDENTITY(int(1), int(1)))) | 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y = _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id))), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id))), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))) | 0u))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))))), true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), (bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))) && true))))) && true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), (bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true))) || false), false, false, true))))))), ! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, true))))))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))) || false)))))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true))))), true, false, true)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), bvec2(bvec4(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), false, false))))))), bool(bool(bool(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), true, true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), bvec2(bvec4(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(0.0), 0.0, 0.0, 0.0))).x < injectionSwitch.y))))))))))))), false), false, false))))))))))))))), ! (! ((_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), (bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true))) || false), false, false, true))))))), ! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, true))))))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))) || false)))))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), true, true))))), true, false, true)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), bvec2(bvec4(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), false, false))))))), bool(bool(bool(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), true, true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false), bvec2(bvec4(bvec2((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(0.0), 0.0, 0.0, 0.0))).x < injectionSwitch.y))))))))))))), false), false, false))))))))))))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, 1))])).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(525.666), _GLF_FUZZED(_GLF_IDENTITY(3.5, 0.0 + (3.5)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), true && (bool(bvec2(_GLF_DEAD(false), true))))))
      barrier();
    }
   else
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), 0 ^ ((0 << _GLF_IDENTITY(int(4), int(4))))))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize)).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) & ((-47393) - _GLF_IDENTITY(-23659, _GLF_IDENTITY(int(ivec4(-23659, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ 0), 0)), (int(ivec4(-23659, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ 0), 0))) ^ 0))))); _injected_loop_counter --)
  {
   GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.z = workgroup_size;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (false), bool(bvec3(! _GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true))))), bool(bvec4(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(bvec2(true && (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), true))), false, false, false))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), _GLF_IDENTITY(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), (true && (! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true)))))) || false), bool(bvec4(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(bvec2(true && (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), true))), false, false, false))))))))))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.z * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && true)) || false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-71.04))))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), false, false)))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, false || (false)))))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, false || (false)))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.z = workgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.z + _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base, (GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(177508u) : subgroup_size, max(false ? _GLF_FUZZED(177508u) : subgroup_size, false ? _GLF_FUZZED(177508u) : subgroup_size)))))))))) >> 0u) + GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y;
 _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.y = virtual_gid, (false ? _GLF_FUZZED(96436u) : GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.y = _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))))) | 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1))) | 0), 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-6.6)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(float(_GLF_FUZZED(-6.6)), (true ? float(_GLF_FUZZED(-6.6)) : _GLF_FUZZED(5521.8309))), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) * 1.0))), _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)), max(_GLF_IDENTITY(float(mat4(_GLF_IDENTITY(float(_GLF_FUZZED(-6.6)), (true ? float(_GLF_FUZZED(-6.6)) : _GLF_FUZZED(5521.8309))), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) * 1.0))), _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)), max(float(mat4(_GLF_IDENTITY(float(_GLF_FUZZED(-6.6)), (true ? float(_GLF_FUZZED(-6.6)) : _GLF_FUZZED(5521.8309))), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) * 1.0))), _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)), float(mat4(_GLF_IDENTITY(float(_GLF_FUZZED(-6.6)), (true ? float(_GLF_FUZZED(-6.6)) : _GLF_FUZZED(5521.8309))), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) * 1.0))), _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)))), float(mat4(_GLF_IDENTITY(float(_GLF_FUZZED(-6.6)), (true ? float(_GLF_FUZZED(-6.6)) : _GLF_FUZZED(5521.8309))), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) * 1.0))), _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0))))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0))) > injectionSwitch.y))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true)));
 uint next_virtual_gid = GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.z + GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.x * subgroup_size + (_GLF_IDENTITY((GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) / 1)), 1))) % subgroup_size, _GLF_IDENTITY(((GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (((GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | (_GLF_IDENTITY(((GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + 1) % subgroup_size), (((GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + 1) % subgroup_size)) | (((GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + 1) % subgroup_size))))) >> 0u));
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -54227) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) / 1))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true))))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.5)), vec2(_GLF_FUZZED(vec4(-3948.4319, -66.41, vec2(121.978, -971.894)).g), (injectionSwitch)[1]), bvec2(false, true))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.5)), vec2(_GLF_FUZZED(vec4(-3948.4319, -66.41, vec2(121.978, -971.894)).g), (injectionSwitch)[1]), bvec2(false, true))).y))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), min(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0))))), clamp(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), min(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0))))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), min(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0))))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), min(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0))))))), (true ? _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(34.41) : 1.0)), 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-562.018)), bool(false))) : _GLF_FUZZED(5.4)))), float(_GLF_IDENTITY(_GLF_FUZZED(-7.8), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-7.8), (true ? _GLF_FUZZED(-7.8) : _GLF_FUZZED(510.175)))), float(_GLF_FUZZED(vec3(-0.4, -6.4, 589.360).g)), bool(false)))), bool(false))))), min(vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, abs(1.0), 1.0, 1.0, 0.0)), vec2(mat4(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, abs(1.0), 1.0, sqrt(0.0), 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)))).x < injectionSwitch.y))) && true)))
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), false))) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))), (injectionSwitch.x > injectionSwitch.y)), false)))))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) | ((1)))) / 1))])).x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(true, false || (true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
  }
 uint read = atomicLoad(buf[GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.y], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 ^ (0)), 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-0.1) : injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))) * sqrt(determinant(mat2(1.0, 0.0, 0.0, 1.0))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.2) : injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y)), max((0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y))))) | ((0 >> _GLF_IDENTITY(int(8), int(8))) | int(_GLF_ONE(1.0, injectionSwitch.y))))))))) && true); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(mix(-27.51, faceforward(976.697, 5793.4132, -3571.9946), false))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.x = _GLF_IDENTITY(_GLF_IDENTITY(read, 0u ^ (_GLF_IDENTITY(read, min(read, read)))), _GLF_IDENTITY(0u, (0u) - 0u) | (read));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) && true) || (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(281.476), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-17.80)), bvec2(true, false))).x < injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) && true) || (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(281.476), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-17.80)), bvec2(true, false))).x < injectionSwitch.y)))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) && true) || (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(281.476), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-17.80)), bvec2(true, false))).x < injectionSwitch.y))))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || false))) && true) || _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), false, false, _GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), true, true))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false)))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), clamp((1 << _GLF_IDENTITY(int(0), int(0))), (1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), min((1 << _GLF_IDENTITY(int(0), int(0))), (1 << _GLF_IDENTITY(int(0), int(0))))))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 + (0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))) || false)))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))) || (_GLF_DEAD(false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(float(mat3x2((injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 0.0)), float(vec4(float(mat3x2((injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)))))))))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((0 ^ 1) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(6, _GLF_IDENTITY(6, ~ (~ (6))), 6))))) >> _GLF_IDENTITY(int(6), int(6))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, clamp(0, 0, 0)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.y + 1 < subgroup_size)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))) && true))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), vec3(mat4x3(vec3(injectionSwitch, 1.0), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - 0.0)) * 1.0), 1.0, 0.0, 1.0))))).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bool(_GLF_IDENTITY(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), (bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) || false))), ! _GLF_IDENTITY((! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, abs(0.0) + (1.0)), float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(960.922)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, abs(0.0) + (1.0)), float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, abs(0.0) + (1.0)), float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, abs(0.0) + (1.0)), float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2((injectionSwitch.y) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, abs(0.0) + (1.0)), float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0)))) * 1.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, length(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), sin(sin(0.0)), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0)), exp(0.0), 1.0))), 0.0, 0.0, log(1.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), (! ((! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(sqrt(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(sqrt(0.0), 1.0), vec2(0.0, 1.0))), 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0))))), float(mat3x4(float(float(0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0)))))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) - 0.0)))))))), (! ((! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0)) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat3x4(float(float(0.0)), 0.0, _GLF_IDENTITY(1.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(135.305) : 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)))))))) || false)), bool(bool(! (_GLF_IDENTITY(! ((! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0))))))), (! ((! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat3x4(float(float(0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)))))))) || false))))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-9.6, -4.4)) : _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))))[0], (injectionSwitch)[1]), mat2(1.0) * (vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-9.6, -4.4)) : _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))))[0], (injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[_GLF_IDENTITY(0, (0) ^ 0)], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), mix(vec2(_GLF_FUZZED((true ? -552.055 : 956.862)), (vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)))[1]), vec2((vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)))[0], _GLF_FUZZED(-78.51)), bvec2(true, false))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x, (false ? _GLF_FUZZED(-10.67) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), clamp(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bool((true)))) && true)))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), false))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), clamp(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)))), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))) * mat2(1.0))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))) * mat2(1.0))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7951.4150), _GLF_FUZZED(-0.5)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0)], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(((false ? -327.048 : 827.653) - -7330.2632)), _GLF_FUZZED(3.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x)))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-6.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base, (false ? _GLF_FUZZED(uvec3(54473u, 99350u, 112978u)) : GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base)).y], GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.x, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (4))) / 1));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(267.220) : 1.0))), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))), (injectionSwitch) - vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)))).x))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), false), false, true))), true, true)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ((! (_GLF_IDENTITY(false, (false) || false)))) && true))), false || (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))))))) || false, ((_GLF_IDENTITY(false, ! (! (false)))) || false) || _GLF_IDENTITY(false, ! (! (false))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         do
          {
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))) && true)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, exp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), max(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), float(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), log(1.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0))))))))) > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, exp(0.0)))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(72.59)), bool(false))))))))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))))).x > injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), 1)))) - 0) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-54903 & 0)); _injected_loop_counter --)
                  {
                   do
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))), true))), true))))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[0], injectionSwitch[1])).y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && true))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.7) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) || false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! (! (false))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! (! (false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! (! (false))), true), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! (! (false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! (! (false))), true), true))))), false)))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))) || false)) && true))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).x, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).x, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / mat2(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(vec4(mat4(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), max(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-11.80), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9946.5556)), bvec2(_GLF_IDENTITY(true, false || (true)), false))), 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(63.40), _GLF_FUZZED(5.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), 1.0, 0.0))), 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(6.8))), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), (vec4(mat4(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 0.0), max(vec4(injectionSwitch, 1.0, 0.0), vec4(injectionSwitch, 1.0, 0.0))), 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))) / vec4(1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(injectionSwitch))).x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, _GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0)), mix(vec2(_GLF_FUZZED(1.5), _GLF_FUZZED((-69.80 / 2.0))), vec2((vec2(vec4(injectionSwitch, _GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0)))[0], (vec2(vec4(injectionSwitch, _GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), 1.0))), 0.0)))[1]), bvec2(true, true)))) : _GLF_FUZZED(injectionSwitch))).x, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).x) * 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch))).x, 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y)))) || false))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), true, false, true))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) && true)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))) && true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), (! (! (_GLF_IDENTITY(false, (false) || false)))) || false)))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))));
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   atomicStore(checker[GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.y], _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.x, max(GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.x, GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_size.x)), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), false || (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     do
      {
       subgroupAll(true);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false))))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(bvec3(bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), true, false))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))) || false))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec2(73.92, -9.7) * 1684.7653)))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec2(73.92, -9.7) * 1684.7653)))), 1.0, 0.0, 1.0, 1.0))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true))))))))))))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, (false ? _GLF_FUZZED(5509.1468) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(5509.1468) : injectionSwitch.y, (false ? _GLF_FUZZED(5509.1468) : injectionSwitch.y) - 0.0))))) + tan(0.0)), mix(float(_GLF_FUZZED(-47.55)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, (false ? _GLF_FUZZED(5509.1468) : injectionSwitch.y))), (float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5509.1468) : injectionSwitch.y)))) + tan(0.0))), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), float(_GLF_FUZZED(-9.4)), bool(false)))))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, false || (true)), false))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))))) > (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0)) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))))) > (0 >> _GLF_IDENTITY(int(2), int(2)))) || false)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))))) > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) << (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) ^ 1))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))))) > (0 >> _GLF_IDENTITY(int(2), int(2)))) || false)), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))), max(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))), ((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter)))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))), ((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter)))) / 1))))) > (0 >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter)))), 0 ^ ((~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), _injected_loop_counter))))))) > (0 >> _GLF_IDENTITY(int(2), int(2)))) || _GLF_IDENTITY(false, ! (! (false))))), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_injected_loop_counter --)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((1 & 1), (true ? (1 & 1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(((1 & 1)) >> 0, 0 | (((1 & 1)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-76881, 83201, -47775, 94515).x, (ivec4(-76881, 83201, -47775, 94515).x) >> 0)), ~ (~ (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-76881, 83201, -47775, 94515).x, (ivec4(-76881, 83201, -47775, 94515).x) >> 0)), int(ivec3(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-76881, 83201, -47775, 94515).x, (ivec4(-76881, 83201, -47775, 94515).x) >> 0)), 0, (0 >> _GLF_IDENTITY(int(2), int(2)))))))))), (true ? (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-76881, 83201, -47775, 94515).x, (ivec4(-76881, 83201, -47775, 94515).x) >> 0)), ~ (~ (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-76881, 83201, -47775, 94515).x, (ivec4(-76881, 83201, -47775, 94515).x) >> 0)), int(ivec3(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-76881, 83201, -47775, 94515).x, (ivec4(-76881, 83201, -47775, 94515).x) >> 0)), 0, (0 >> _GLF_IDENTITY(int(2), int(2)))))))))) : _GLF_FUZZED(ivec2(12050, -96164).y))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))))
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-80.75, 180.221)) : (injectionSwitch))), (injectionSwitch)))).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), true, false, false)))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! (false))), false || (! (! (! _GLF_IDENTITY((false), ((false)) && true)))))), _GLF_IDENTITY(((_GLF_IDENTITY(! (! (! (false))), false || (! (! (! (false))))))), (((_GLF_IDENTITY(! (! (! (false))), false || (! (! (! (false)))))))) || false) || false)))))
    barrier();
  }
}
