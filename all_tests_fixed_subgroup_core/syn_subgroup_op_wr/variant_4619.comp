#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), true && (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), false, true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), ! (! ((true)))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))), false || (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false)))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))), false || (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false)))))))))))))))), ! (! (_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false)))))))))))))))), false || (bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false)))))))))))))))))))))), true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))), false || (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false)))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))), false || (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false))))))))))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false)))))))))))))))), ! (! (_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false)))))))))))))))), false || (bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(! (! (bool(bool(false))))), ! (! (bool(! (! (bool(bool(false)))))))))))))))))))))), true, true)))))), false)))))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(7284))) != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_DEAD(false), true, true))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), true))), bool(_GLF_IDENTITY(bool((false)), _GLF_IDENTITY((bool((false))), ! (_GLF_IDENTITY(! ((bool((false)))), _GLF_IDENTITY(bool(bvec4(! ((bool((false)))), true, true, true)), (bool(bvec4(! ((bool((false)))), true, true, true))) && true)))) && true))) && true))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-80931))))))) >> _GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) / 1)) >> 0)))) >> _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(33547, max(33547, 33547))) : int((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec3(gl_WorkGroupID.x, 0u, 1u)), 0u | (uint(uvec3(gl_WorkGroupID.x, 0u, 1u)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(num_workgroup) : workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))), 1u * (uint(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))))))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(uvec3(163677u, 119777u, 52123u).p) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) << 0), _GLF_IDENTITY(64, max(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), ((64)) / 1) - 0), clamp(_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(min((64), _GLF_IDENTITY((64), ~ (~ ((64))))), (min((64), _GLF_IDENTITY((64), ~ (~ ((64)))))) >> (0 << _GLF_IDENTITY(int(3), int(3))))) - 0), _GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64) - 0, (_GLF_IDENTITY((64) - 0, 0 ^ ((64) - 0))) - 0)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(64, (64) - 0))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(64, (64) - 0))), min(~ (~ (_GLF_IDENTITY(64, (64) - 0))), ~ (~ (_GLF_IDENTITY(64, (64) - 0)))))) ^ 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(ivec4(77152, -45948, -92227, 86649).p)))) - 0), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(64, (64) - 0))), (~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), (_GLF_IDENTITY(64, (64) - 0)) ^ 0), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(64, (64) - 0))), _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0, _GLF_IDENTITY(min(_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0, max((~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0, (~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0)), (~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0), 0 | (min(_GLF_IDENTITY((~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0, max((~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0, (~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0)), (~ (~ (_GLF_IDENTITY(64, (64) - 0)))) ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) >> 0)) - 0), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(64, (64) - 0))), _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(64, (64) - 0)))), ((~ (~ (_GLF_IDENTITY(64, (64) - 0))))) << 0) ^ 0))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) - _GLF_IDENTITY(0, _GLF_IDENTITY((0), int(_GLF_IDENTITY(ivec3((0), (1 | 0), 1), max(ivec3((0), (1 | 0), 1), ivec3((0), (1 | 0), 1))))) | 0)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(64, (64) - 0))), (~ (~ (_GLF_IDENTITY(64, _GLF_IDENTITY((64) - 0, _GLF_IDENTITY(int(_GLF_IDENTITY(int((64) - 0), min(int((64) - 0), _GLF_IDENTITY(int((_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) * 1)))) - 0), int(ivec4(int((64) - 0), 0, 1, 0)))))), (int(_GLF_IDENTITY(int((64) - 0), min(_GLF_IDENTITY(int((64) - 0), clamp(_GLF_IDENTITY(int((64) - 0), max(int((64) - 0), int((64) - 0))), int((64) - 0), int((64) - 0))), _GLF_IDENTITY(int((64) - 0), int(ivec4(int((64) - 0), 0, 1, 0))))))) ^ 0)))))) ^ 0))))))))), 64)), 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (38935 & 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(34.59, _GLF_IDENTITY(_GLF_IDENTITY(-354.007, (true ? -354.007 : _GLF_FUZZED(-969.873))), max(-354.007, -354.007)))) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-27.09, -3425.1650)) : injectionSwitch))) : (false ? _GLF_FUZZED(vec2(34.59, -354.007)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), mix(vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))[1]), vec2(_GLF_FUZZED(-5.1), _GLF_FUZZED(701.554)), bvec2(false, false))))))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, (0 & 99449), 0, 0))), 0 | (1)) < subgroup_size)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))))))))), ((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = ((0 | (1 ^ 1)) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(_GLF_IDENTITY(3, 0 ^ (3)))), max((int(3)), (int(3)))) ^ 0), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(0 + (3), (_GLF_IDENTITY(0 + (3), (0 + (3)) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | (_GLF_IDENTITY(0 + (3), (_GLF_IDENTITY(0 + (3), 0 ^ (0 + (3)))) | (0 + (3)))))), int(int(3)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 ^ (3)), int(int(3)))))), clamp((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) / 1), (false ? _GLF_FUZZED(98548) : _GLF_IDENTITY(_GLF_IDENTITY(3, (3) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) / 1), (_GLF_IDENTITY(3, (3) / 1)) | (_GLF_IDENTITY(3, (3) / 1))), (0 >> _GLF_IDENTITY(int(8), int(8))), 0, 1)))))), int(_GLF_IDENTITY(3, int(int(3)))))), (4) * ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(int(3)))))), (4) * ((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), ~ (~ (int(_GLF_IDENTITY(3, int(int(3)))))))))))), 0 | (~ (_GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), min(int(3), int(3))), 1))), int(_GLF_IDENTITY(3, int(int(3)))))), clamp((4) * _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, min(3, 3)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 1 * (3))) | (_GLF_IDENTITY(3, (3) >> 0)))), int(3))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))))))) | 0)) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, int(int(3))), (_GLF_IDENTITY(3, int(int(3)))) << 0)))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, min(3, 3)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 1 * (3))) | (_GLF_IDENTITY(3, (3) >> 0)))), int(3))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))))))) | 0)) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, int(int(3))), (_GLF_IDENTITY(3, int(int(3)))) << 0))))) / 1), (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4)))))))) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(3)), min(int(int(3)), int(int(3)))))))), (4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) ^ 0), int(int(3))))))))))))))) * _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(24674) : 1))), max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), max((int(3)), (int(3)))) ^ 0), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 + (3)), int(int(3)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 ^ (3)), int(int(3))))), (_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 ^ (3)), int(int(3)))))) + 0)), clamp((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(_GLF_IDENTITY(3, int(int(3)))))), (4) * (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(int(3))))), 0 | ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(int(3)))))))), (4) * ((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), clamp(int(_GLF_IDENTITY(3, int(int(3)))), int(_GLF_IDENTITY(3, int(int(3)))), int(_GLF_IDENTITY(3, int(int(3))))))) >> 0)), max((_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), clamp(int(_GLF_IDENTITY(3, int(int(3)))), int(_GLF_IDENTITY(3, int(int(3)))), int(_GLF_IDENTITY(3, int(int(3))))))) >> 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), clamp(int(_GLF_IDENTITY(3, int(int(3)))), int(_GLF_IDENTITY(3, int(int(3)))), int(_GLF_IDENTITY(3, int(int(3))))))) >> 0))))))))))), 0 | (~ (_GLF_IDENTITY((_GLF_IDENTITY(4, (4) >> (0 | 0))) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3)))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(3)), (false ? _GLF_FUZZED(-1386) : _GLF_IDENTITY(int(int(3)), min(_GLF_IDENTITY(int(int(3)), (true ? int(int(3)) : _GLF_FUZZED(-45060))), int(int(3)))))))))), clamp((4) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), clamp((_GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(int(3), int(3)))))) | ((_GLF_IDENTITY(int(3), int(3))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), 0 ^ (_GLF_IDENTITY(int(3), int(3))))))))) | 0)) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, int(int(3))), (_GLF_IDENTITY(3, int(int(3)))) << 0)))), _GLF_IDENTITY((4), int(ivec2((4), 1))) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(3)), min(int(int(3)), int(int(3)))))))), (4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) ^ 0), int(int(3))))))))))))))) * _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(24674) : 1))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), max((int(3)), (int(3)))) ^ 0), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 + (3)), int(int(3))))), max(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 + (3)), int(int(3))))), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 + (3)), int(int(3)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, 0 ^ (3)), int(int(3)))))), clamp((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(_GLF_IDENTITY(3, int(int(3)))))), (4) * ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(int(3)))))), (4) * ((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), ~ (~ (int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(3)), max(int(int(3)), int(int(3)))))))))))))), 0 | (~ (_GLF_IDENTITY((4) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(ivec2(3, 0)))) >> 0))))))), clamp((4) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(3), int(3))), int(ivec4(0 ^ (_GLF_IDENTITY(int(3), int(3))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) - (0 << _GLF_IDENTITY(int(7), int(7)))), 0 ^ (_GLF_IDENTITY(int(3), int(3))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))))))) | 0)) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, int(int(3))), (_GLF_IDENTITY(3, int(int(3)))) << 0)))), (4) * ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | 0)) | (0 << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(3)), min(int(int(3)), int(int(3)))))))), (4) * ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) ^ 0), int(int(3))))))))))))))) * _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(24674) : 1))))), 64, _GLF_IDENTITY(4, int(ivec3(4, 0, 0))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), true))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), true))))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))) || false), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))) || false))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (((_GLF_IDENTITY(1 & 1, int(int(1 & 1)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(4, 4, 4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-21521)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(vec4(0.1, _GLF_IDENTITY(-0.5, clamp(_GLF_IDENTITY(-0.5, min(-0.5, -0.5)), -0.5, -0.5)), -7.6, -71.62).g), float(mat2x3(_GLF_FUZZED(vec4(0.1, _GLF_IDENTITY(-0.5, clamp(_GLF_IDENTITY(-0.5, min(-0.5, -0.5)), -0.5, -0.5)), -7.6, -71.62).g), 0.0, 1.0, 0.0, 1.0, 0.0))))) > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, ! (! (false)))))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), false)), false))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), false))))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           subgroupAll(true);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false, false, false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, false)))) && true))
          barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7.7) : injectionSwitch.y))) * 1.0), min(injectionSwitch.y, injectionSwitch.y))))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-68.98)), float(injectionSwitch.y), bool(true)))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
}
