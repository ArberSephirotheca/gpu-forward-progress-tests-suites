#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false, false)))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false, false)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, ! (! (((injectionSwitch.x > injectionSwitch.y)) || false)))), false, false))))) || false)) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(6003.0650)), bool(false)), clamp(mix(float(injectionSwitch.y), float(_GLF_FUZZED(6003.0650)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(6003.0650)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(6003.0650)), bool(false)))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), log(1.0), 1.0, 1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, abs(1.0), 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, abs(1.0), 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), (vec4(0.0, 0.0, 1.0, 0.0)) * mat4(1.0)))), abs(1.0), 1.0, 0.0, 0.0)), (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0))), 1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, abs(1.0), 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, abs(1.0), 0.0), vec4(0.0, 0.0, 1.0, 0.0))), abs(1.0), 1.0, 0.0, 0.0))) + log(1.0)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(vec2(0.0, 0.0))).y, (injectionSwitch.y) / 1.0))))) && true))
      barrier();
    }
  }
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.z = subgroup_size;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.z;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.y = subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)))); _injected_loop_counter --)
    {
     GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.y = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.y;
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false)))
        barrier();
       for(int _injected_loop_counter = (0 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), 0u), min(uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), 0u), uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), 0u)))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)), 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)))), uvec3(_GLF_IDENTITY(uvec4(uvec3(uvec3(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)))), 0u), (false ? _GLF_FUZZED(uvec4(168732u, 104600u, 134198u, 121341u)) : uvec4(uvec3(uvec3(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)))), 0u))))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)), 0u)) | (uvec4(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)), 0u))), min(uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), 0u), uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u)), 0u))))) | (uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupSize)))), max((_GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupSize)))), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupSize)))), (true ? (_GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupSize)))) : _GLF_FUZZED(uvec3(32401u, 9492u, 62398u)))))) ^ uvec3(0u, 0u, 0u)), 0u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))), clamp((false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))), clamp((false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(77628u, 191676u, 145021u)) : _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u)))))))), 0u), uvec4(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u))))), ((gl_WorkGroupSize)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), max((0u), (0u)))) * 1u) / 1u))))), 0u))))))) * uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, mix(float(_GLF_FUZZED(7.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x) / 1.0, ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x) / 1.0) + 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))), (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) >> uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(0u, (0u) / 1u) : _GLF_FUZZED(36579u))), 0u)), uvec3(1u, 1u, 1u))))))) - uvec3(0u, 0u, 0u))).x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2251.9719), _GLF_FUZZED(-5649.6045)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.z = _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1)) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-32094)))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))
              barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))))), true, true), true))), false))))) ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(71314))) | 1), min((_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))))), true, true), true))), false))))) ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(71314))) | 1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))))), true, true), true))), false))))) ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(71314))) | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 uint workgroup_base = GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.z * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, 1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, exp(0.0), exp(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(false, ! (! (false))))))), (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false))))) && true))))))); _injected_loop_counter --)
    {
     GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = workgroup_base;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, min(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base)).y + subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x + GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.y;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(vec2(-2.0, 8.5), (+ injectionSwitch), injectionSwitch)))), injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))) || false)))))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), true, true, false)))), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))))), false, false, true))))))), false || (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, false))))))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))))))))))) || false)), false, false, true))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(-1.4)), vec2(_GLF_FUZZED(127.550), (max(injectionSwitch, injectionSwitch))[1]), bvec2(false, true)))) * vec2(1.0, 1.0))).x, mix(float(_GLF_FUZZED(-8.9)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(-1.4)), vec2(_GLF_FUZZED(127.550), (max(injectionSwitch, injectionSwitch))[1]), bvec2(false, true)))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(-1.4)), vec2(_GLF_FUZZED(127.550), (max(injectionSwitch, injectionSwitch))[1]), bvec2(false, true)))))) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0)))))).x), bool(true))) < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(807.116)), bool(false))) < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) - 0.0) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) - 0.0) < injectionSwitch.y) || false)))))))))), false, false, true)))))))))))))))
        {
         GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false))), ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))) && true)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))
          barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base)).y, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[0], GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[1])).y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u)) ^ 0u), 1u, 1u)), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[0], GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[1])).y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u)) ^ 0u), 1u, 1u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[0], GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[1])).y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u)) ^ 0u), 1u, 1u)), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[0], GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[1])).y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u)) ^ 0u), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[0], GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base[1])).y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u)) ^ 0u), 1u, 1u))))))) + subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, _GLF_IDENTITY(0u + (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x) | (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)), 0u, 0u, 0u)))), (_GLF_IDENTITY(0u + (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x), (0u + (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)) >> 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size, uvec3(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size[0], GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size[1], GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size[2]))) / uvec3(1u, 1u, 1u)).y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size, (GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size) | (GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size)).y, 1u * (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.y, (GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.y) ^ 0u)))) + 0u) + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x);
 do
  {
   GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.x = next_virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), (vec3(injectionSwitch.y, 0.0, 0.0)) / vec3(1.0, 1.0, 1.0))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, false || (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, bool(bool((_GLF_IDENTITY(false, false || (false))) && true))))))))
      barrier();
     barrier();
    }
  }
 GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.x = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4003.0790))) > injectionSwitch.y)))) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), (int(5)) * (1 | 1)))))))), max((1 ^ 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) ^ 0)), (1 ^ 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.8)), bool(false))), injectionSwitch.y))))))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           atomicStore(buf[GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.x], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(_injected_loop_counter) : 64)), _GLF_IDENTITY(1, 0 ^ (1)) * (64)), 4);
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec4(int(7), (0 >> _GLF_IDENTITY(int(7), int(7))), 1, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(7), int(ivec4(int(7), (0 >> _GLF_IDENTITY(int(7), int(7))), 1, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
              }
             for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp((0 << _GLF_IDENTITY(int(8), int(8))), (0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), 0 | ((0 << _GLF_IDENTITY(int(8), int(8))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))) && true));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), bool(bvec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), min(_GLF_IDENTITY(float(injectionSwitch.x), 0.0 + (float(injectionSwitch.x))), float(injectionSwitch.x))))) > injectionSwitch.y), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-23.99), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-54.68)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), true && (bool((injectionSwitch.x > injectionSwitch.y))))))), false || (! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), true && (bool((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(146.874)), min(float(_GLF_FUZZED(146.874)), _GLF_IDENTITY(float(_GLF_FUZZED(146.874)), (_GLF_IDENTITY(float(_GLF_FUZZED(146.874)), float(mat2x4(float(_GLF_FUZZED(146.874)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) * 1.0))), float(injectionSwitch.y), bool(true))))), sin(0.0), 1.0, 0.0, 0.0, 0.0, log(1.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y), _GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.25)), bool(false))), 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0)))), (mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(146.874)), float(injectionSwitch.y), bool(true))))), sin(0.0), 1.0, 0.0, 0.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))))))), true)))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))) && true))
  barrier();
 uint read = atomicLoad(buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.w], 4, 64, 0);
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 1.0, cos(_GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), max(length(vec3(0.0, 0.0, 0.0)), length(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, 1.0, cos(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat4x3(-80.77, -7.8, 41.79, 6074.9677, -31.69, -2658.5179, 7328.0824, -675.199, _GLF_IDENTITY(-15.26, (false ? _GLF_FUZZED(-0.8) : _GLF_IDENTITY(-15.26, float(float(_GLF_IDENTITY(-15.26, min(-15.26, -15.26))))))), 25.62, 70.78, -15.91))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 1.0, cos(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (true ? mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-149.188), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(69.59)), bvec2(true, false))).y, 1.0, 1.0, cos(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat4x3(-80.77, -7.8, 41.79, 6074.9677, -31.69, -2658.5179, 7328.0824, -675.199, -15.26, _GLF_IDENTITY(25.62, max(_GLF_IDENTITY(25.62, mix(float(25.62), float(_GLF_FUZZED(4.8)), bool(false))), 25.62)), 70.78, -15.91))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), mix(float(_GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), clamp(cos(length(vec3(0.0, 0.0, 0.0))), cos(length(vec3(0.0, 0.0, 0.0))), cos(length(vec3(0.0, 0.0, 0.0)))))), float(_GLF_FUZZED(-173.674)), bool(false))), _GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), (true ? _GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), clamp(cos(length(vec3(0.0, 0.0, 0.0))), cos(length(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0))), _GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), (cos(length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(0.0, 0.0, 0.0)))))) / 1.0))) : _GLF_FUZZED(length(5.6)))), cos(length(vec3(0.0, 0.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-996.249)), bool(false)))), (true ? mat4x3(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(cos(length(vec3(0.0, 0.0, 0.0))), 0.0 + (cos(length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / exp(0.0)), 0.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat4x3(-80.77, -7.8, 41.79, 6074.9677, -31.69, -2658.5179, 7328.0824, -675.199, -15.26, 25.62, 70.78, -15.91))))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0))), injectionSwitch, injectionSwitch)).y, 1.0, 1.0, cos(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, 1.0, cos(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat4x3(-80.77, -7.8, 41.79, 6074.9677, -31.69, -2658.5179, 7328.0824, -675.199, -15.26, 25.62, _GLF_IDENTITY(70.78, (_GLF_IDENTITY(70.78, 0.0 + (70.78))) / 1.0), -15.91)))))))))))) && true))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false, false)))) || false)));
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (0 << _GLF_IDENTITY(int(3), int(3)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, 1 * (6)), 6))) << 0)) << 0)), int(6))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), max((int(6)), _GLF_IDENTITY((int(6)), ((int(6))) | 0))) / 1), (_GLF_IDENTITY(true, bool(bool(true))) ? int(6) : _GLF_FUZZED(-41370))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec3(2, 0, 0), ivec3(0, 0, 0) ^ (ivec3(2, 0, 0))))), 2))), int(2))) ^ (6)), 6))), max(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))) || false)))
    {
     for(int _injected_loop_counter = (0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), _GLF_IDENTITY((int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), ((int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))) + 0) - 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.4)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.4)), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.4)), bool(false))))), 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ! (! (true && (_GLF_IDENTITY(false, (false) || false))))))))
    barrier();
  }
 if(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size.y + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   atomicStore(checker[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.w], read, 4, _GLF_IDENTITY(64, (64) / 1), 4);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(159.254) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)))).y)))), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), (_GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(8.0) : (injectionSwitch.y))) - 0.0, ((injectionSwitch.y) - 0.0) - 0.0)))))))), _GLF_IDENTITY((! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))))).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), float(vec2((injectionSwitch.y), 0.0))) - 0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), float(vec2((injectionSwitch.y), 0.0))) - 0.0, mix(float(_GLF_IDENTITY((injectionSwitch.y), float(vec2((injectionSwitch.y), 0.0))) - 0.0), float(_GLF_FUZZED((- 750.926))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), float(vec2((injectionSwitch.y), 0.0))) - 0.0, mix(float(_GLF_IDENTITY((injectionSwitch.y), float(vec2((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) * 1.0)), 0.0))) - 0.0), float(_GLF_FUZZED(9.9)), bool(false))), _GLF_IDENTITY((injectionSwitch.y), float(vec2((injectionSwitch.y), 0.0))) - 0.0)))))))))), true && ((! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(vec2((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-50.25) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-9116.6832), max(_GLF_IDENTITY(_GLF_FUZZED(-9116.6832), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(-9116.6832), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)), min(float(mat3x4(_GLF_FUZZED(-9116.6832), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)), float(mat3x4(_GLF_FUZZED(-9116.6832), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), _GLF_FUZZED(-9116.6832)))), clamp((true ? injectionSwitch.y : _GLF_FUZZED(-9116.6832)), (true ? injectionSwitch.y : _GLF_FUZZED(-9116.6832)), (true ? injectionSwitch.y : _GLF_FUZZED(-9116.6832)))))))), 0.0))) - 0.0)))))), true && ((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(vec2((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-50.25) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(-9116.6832, (true ? -9116.6832 : _GLF_FUZZED(cosh(-3.2)))))))))), 0.0))) - 0.0)))))))))))) || false)) || false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(false);
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(checker[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid, (true ? GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid : _GLF_FUZZED(uvec4(164723u, 45323u, 90953u, 28904u)))).w], read, 4, 64, 4);
    }
   subgroupAll(true);
  }
}
