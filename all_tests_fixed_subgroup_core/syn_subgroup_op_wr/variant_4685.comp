#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((false)))), false))) && true)))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false))))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                break;
               return;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))))));
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))) && true)))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(173181u, 103629u, 84905u)), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(173181u, 103629u, 84905u)), uvec3(uvec3(_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(173181u, 103629u, 84905u)), (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(173181u, 103629u, 84905u))) / uvec3(1u, 1u, 1u))))))))), uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)) * (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(_GLF_IDENTITY(173181u, min(173181u, 173181u)), _GLF_IDENTITY(103629u, (_GLF_IDENTITY(103629u, (103629u) | (_GLF_IDENTITY(103629u, (103629u) | 0u)))) ^ 0u), 84905u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u) * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size + subgroup_local_id) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size + subgroup_local_id, 0u ^ (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size + subgroup_local_id))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) / vec2(1.0, 1.0))).y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, (1u | 1u)))) + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), min(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), subgroup_local_id + 1))) | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), clamp(ivec3(1, 0, 0), ivec3(1, 0, 0), ivec3(1, 0, 0))))))), min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(num_workgroup) : subgroup_local_id + 1)), subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 1u)))) | (subgroup_local_id))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(~ (~ (subgroup_local_id)), uint(uvec4(~ (~ (subgroup_local_id)), 0u, 1u, 0u)))) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(false || ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(false || ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)), false, true))))))))));
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     subgroupAll(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! ((! (false)))), ! (! (! (! ((_GLF_IDENTITY(! (false), false || (! (false)))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! ((! (false)))), ! (! (! (! ((_GLF_IDENTITY(! (false), false || (! (false)))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), bool(bvec3(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), false, false))))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))), true && ((_GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec3(false, false, false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(((! (false))), bool(bvec2(((! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(((! (false))), bool(bvec2(((! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (false)), true, true, false)))) && true))), ! (! (! (! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), bool(bool(((! (false))))))), false || (! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (false)), true, true, false)))) && true))), ! (! (! (! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), bool(bool(((! (false))))))), false || (! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), false || ((false)))) || false)), ! (! ((! (false)))))), (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))))), ! (! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))))), (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))))) || false)))))))))))) && true)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! ((! (false)))), ! (! (! (! ((! (false)))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! ((! (false)))), ! (! (! (! ((! _GLF_IDENTITY((false), bool(bool((false))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), true && ((_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ((! (_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))))))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, false)))) && true))), ! (! (! (! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false))))))), false || (! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || ((false)))) || false)), ! (! ((! (false)))))), (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))))))))), bool(bvec2(! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, false)))) && true))), ! (! (! (! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false))))))), false || (! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || ((false)))) || false)), ! (! ((! (false)))))), (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))), ! (! ((! (false))))))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))))))))), true)))))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY((false), false || ((false))))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! _GLF_IDENTITY(((! (false))), true && (_GLF_IDENTITY(((! (false))), (((! (false)))) || false)))), ! (! (! (! ((! (false)))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! ((! (false)))), true && ((! ((! (false)))))))), (! (_GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), (((! (false)))) || false))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), ! (! (((! (false)))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true))))) && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, ! (! (false))))))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2((false), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2((false), false), true))))))), ! (! (bool(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2((false), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2((false), false), true)))))))))))), ! (! ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec4((! (false)), true, true, false)), ! (! (bool(bvec4((! (false)), true, true, false))))))) && true))), ! (! (! (! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false))))))), false || (! (_GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))))))), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false)))))), false || ((false)))) || false)), ! (! ((! (false)))))), (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true)))), ! (! ((! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), bool(bvec2((! (false)), true))), ! _GLF_IDENTITY((! ((! (false)))), ((! ((! (false))))) || false)))), true && ((! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))))))))))))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
    }
   else
    {
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 1u * (read)), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)))))), _GLF_IDENTITY(false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true)))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), _GLF_IDENTITY(bool(bool((false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true)))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))), (bool(bool((false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true)))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), true)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))) && true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))), ! (! (! (_GLF_IDENTITY(false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)), max(vec2(mat3x4(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, exp(0.0), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)))))))) * mat2(1.0)).y)))))), ! (! (! (_GLF_IDENTITY(false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)), true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))), true && (false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), bool(bool(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, ! (! (false))))) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))) + 0.0)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))))))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), min((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2))))), (1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 0 ^ (2))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false)), true)))))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.6)), float(injectionSwitch.x), bool(true)))) * cos(0.0)) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y)) && true)))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true), true)), false)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))), false)))))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), injectionSwitch[1])))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), max(_GLF_IDENTITY((int(7)) | (int(7)), min((int(7)) | (int(7)), (int(7)) | (int(7)))), _GLF_IDENTITY((int(7)) | (int(7)), ((int(7)) | (int(7))) - 0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), 1, 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), max(ivec4(int(6), _GLF_IDENTITY(1, min(1, 1)), 1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) | ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(ivec4(int(6), 1, 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(ivec4(int(6), 1, 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (ivec4(int(6), 1, 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) / ivec4(1, 1, 1, 1))) << ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(int(6), int(int(int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       subgroupAll(true);
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false) || (_GLF_DEAD(false))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) * 1, ((1) * 1) + 0))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((-70.21 + 1897.3681)) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(float(float((injectionSwitch.y))), mix(float(float(float((injectionSwitch.y)))), float(_GLF_FUZZED(548.785)), bool(false)))) - 0.0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 1, 0))) > 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ~ (~ ((_GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))))) >> 0))
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
