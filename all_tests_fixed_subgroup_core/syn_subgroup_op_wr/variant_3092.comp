#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 ivec3 _f0;
 vec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_18 {
 uvec4 _f0;
 mat3x4 _f1;
 mat3x2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_17 {
 mat4x3 _f0;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 mat3x4 _f1;
 int _f2;
 int _f3;
 uvec2 _f4;
 bvec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_20 {
 bool _f0;
 _GLF_struct_16 _f1;
 uvec4 _f2;
 bvec2 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_18 _f5;
 _GLF_struct_19 _f6;
} ;

struct _GLF_struct_15 {
 int _f0;
 int _f1;
 mat4x3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 mat2 _f1;
 mat4 _f2;
 mat4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 float _f1;
 uint workgroup_size;
 bool _f2;
 mat2x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 vec3 _f1;
 _GLF_struct_13 _f2;
 mat2x4 _f3;
 ivec4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_21 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_20 _f2;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_8 {
 uint subgroup_local_id;
 int _f0;
} ;

struct _GLF_struct_7 {
 int _f0;
 uint _f1;
 bvec3 _f2;
 bool _f3;
 bvec2 _f4;
 uvec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_10 {
 mat2x3 _f0;
 _GLF_struct_7 _f1;
 mat3x2 _f2;
 _GLF_struct_8 _f3;
 mat4 _f4;
 uvec2 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_5 {
 int _f0;
 float _f1;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat3 _f1;
 uvec3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 mat4 _f1;
 vec4 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 uvec3 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
} ;

struct _GLF_struct_1 {
 uint _f0;
 _GLF_struct_0 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 vec3 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_10 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY(1 | 0, ~ (_GLF_IDENTITY(~ (1 | 0), (~ (1 | 0)) | (~ (1 | 0)))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(bvec4(true), mat3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_struct_1(1u, _GLF_struct_0(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (_GLF_IDENTITY(uvec4(1u), min(uvec4(1u), uvec4(1u)))))), vec3(1.0), _GLF_struct_6(_GLF_struct_2(mat2x3(1.0), mat3(1.0), uvec3(1u), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, uint(uint(1u))), 1u), (max(_GLF_IDENTITY(1u, uint(uint(1u))), 1u)) - 0u)), min(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, uint(uint(1u))), 1u), ~ (~ (max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), uint(uint(1u))), 1u))))), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uint(1u))), _GLF_IDENTITY(1u, (1u) ^ 0u)))))) / 1u))), mat4(1.0), vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), min(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0)))) / 1.0), 0.0)), mix(float(float(mat4x2(1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), log(1.0), 0.0))), float(_GLF_FUZZED(2518.3792)), bool(false))))))), _GLF_struct_3(mat3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(0.7)))) - 0.0), 1.0, 1.0)))), _GLF_struct_4(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(394.769, (true ? 394.769 : _GLF_FUZZED(atan(-95.79)))), -158.054)) : injectionSwitch)).x < injectionSwitch.y))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), true))))), bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), true))))), (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(394.769, -158.054)) : injectionSwitch)).x < injectionSwitch.y))), true)))))) || false)))))) && true)))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (! (bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED((-65.29 - -76.22)), _GLF_FUZZED(-5.3)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), true))))).y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true) || (false || (injectionSwitch.x < injectionSwitch.y)))), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true) || (false || (injectionSwitch.x < injectionSwitch.y)))), true, false, false)))))) && true))))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true) || (false || (injectionSwitch.x < injectionSwitch.y)))), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true) || (false || (injectionSwitch.x < injectionSwitch.y)))), true, false, false)))))) && true)))))), bvec2(bvec3(bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true) || (false || (injectionSwitch.x < injectionSwitch.y)))), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true) || (false || (injectionSwitch.x < injectionSwitch.y)))), true, false, false)))))) && true)))))), true)))))))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-10.18)), bool(false))), injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], float(mat3x2(injectionSwitch[1], 0.0, 1.0, 0.0, 1.0, 1.0)))) - 0.0), (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x))) - 0.0) < injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1], (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-10.18)), bool(false))), injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], float(mat3x2(injectionSwitch[1], 0.0, 1.0, 0.0, 1.0, 1.0)))) - 0.0), (true ? _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(680.789))))).x))) - 0.0) < injectionSwitch.y)) || false))), bvec2(bvec2(bvec2(true, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), (true ? vec3(injectionSwitch.x, 0.0, 1.0) : _GLF_FUZZED(vec3(-1.7, 6.0, -6321.4755)))))) < injectionSwitch.y)))))))), _GLF_IDENTITY(((bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec4(_GLF_IDENTITY(((bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0)))) / _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(-31.90, 44.87))))).y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))))))), bool(bvec4(((bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true, false))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))))), uvec3(1u), _GLF_struct_5(1, 1.0)), _GLF_struct_10(mat2x3(1.0), _GLF_struct_7(1, 1u, bvec3(true), true, bvec2(true), uvec3(1u), bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))), mat3x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9.3))))) - 0.0)), _GLF_struct_8(gl_SubgroupInvocationID, 1), mat4(1.0), uvec2(1u), _GLF_struct_9(mat4x2(1.0), bvec3(true))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.7), _GLF_FUZZED(-6.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, true && (true)), true), true))), true))))), _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_14(_GLF_struct_12(mat3(1.0), 1.0, gl_WorkGroupSize.x, true, mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))), _GLF_IDENTITY(bool(true), true && (bool(true)))))), vec4(1.0)), vec3(1.0), _GLF_struct_13(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1)))) | (ivec4(1))), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1)))) | (ivec4(1))))), mat2(1.0), mat4(1.0), mat4(1.0), vec4(1.0)), mat2x4(1.0), ivec4(1), mat4x2(1.0)), _GLF_struct_15(1, 1, mat4x3(1.0), mat3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), _GLF_struct_20(true, _GLF_struct_16(ivec3(1), mat3x4(1.0), 1, 1, uvec2(_GLF_IDENTITY(1u, 0u | (1u))), bvec2(true), ivec4(1)), uvec4(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : 1u)), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u))), bvec2(true), _GLF_struct_17(mat4x3(1.0)), _GLF_struct_18(uvec4(1u), mat3x4(1.0), mat3x2(1.0), bvec4(true)), _GLF_struct_19(ivec3(1), vec3(1.0), bvec3(true))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = (0 & 82163); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))), false, false, true))), false))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (false) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), bvec2(true, true))).y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true))), false)))), ! (! (false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true, true), true)), bvec3(bvec3(bvec3(bvec3(bvec2(true, true), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true, true), true)), bvec3(bvec3(bvec3(bvec3(bvec2(true, true), true)))))))), true, false)))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true)))) || false), false)))))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), max(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))), mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))) : _GLF_FUZZED(vec2(-650.010, 388.865)))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(896.307), min(_GLF_IDENTITY(_GLF_FUZZED(896.307), min(_GLF_FUZZED(896.307), _GLF_FUZZED(896.307))), _GLF_FUZZED(896.307))), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true)))) || false), false)))))))), bool(bvec3(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true))), false))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(-344.684, -9.6, -6.7, -76.86, 1.4, 8666.1384)) : mat3x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))))), bvec2(true, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(896.307), _GLF_IDENTITY(_GLF_FUZZED(25.36), mix(float(_GLF_IDENTITY(_GLF_FUZZED(25.36), clamp(_GLF_FUZZED(25.36), _GLF_FUZZED(25.36), _GLF_IDENTITY(_GLF_FUZZED(25.36), float(mat4(_GLF_FUZZED(25.36), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(_GLF_FUZZED(8.4)), bool(false)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat2(_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(7196.0614)), bool(false))), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(322.872)), float((injectionSwitch)[1]), bool(true))))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), abs(0.0))))), bvec2(true, true))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(896.307), 1.0 * (_GLF_FUZZED(896.307))), _GLF_FUZZED(25.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false, false, true))), false)))))) && true)))), false, true)))))) && true)))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_21._f0._f0.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), max(_GLF_struct_replacement_21._f0._f0.workgroup_size * workgroup_id, _GLF_struct_replacement_21._f0._f0.workgroup_size * workgroup_id));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (0u & 150894u) | (subgroup_id * subgroup_size))))))) + _GLF_struct_replacement_11._f5._f3.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_11._f5._f3.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     do
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.7), _GLF_FUZZED(33.96)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))))))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) / 1))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-66.98), min(_GLF_FUZZED(-66.98), _GLF_FUZZED(-66.98)))), bool(false))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-5218.4738, 0.6, -8519.8350, -1032.7791).z), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(3533.7265) : (injectionSwitch)[0])), _GLF_FUZZED(410.057)), bvec2(true, false))).x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bool(bvec4(! (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false, _GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_struct_replacement_11._f5._f3.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_11._f5._f3.subgroup_local_id, max(_GLF_struct_replacement_11._f5._f3.subgroup_local_id, _GLF_struct_replacement_11._f5._f3.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1)), (int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))) | 0)) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec2(1, 0))), 1)))), 1))) - 0)), _GLF_struct_replacement_11._f5._f3.subgroup_local_id + 1)) < subgroup_size)
      {
       atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, clamp(4, 4, 4))))), 4)));
       subgroupAll(false);
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((25290 & 0) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(2.0, 0.0 + (2.0)))), bvec2(true, false))).y, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(2.0, (false ? _GLF_FUZZED(3407.4670) : 2.0)))), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))), 1.0))).y)), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0)))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))))))) - 0.0), 1.0, 0.0, length(0.0), 0.0, 0.0, sin(0.0), 1.0, 0.0)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y)), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-4.7, 2.0, 73.08)) : vec3(0.0, 0.0, 1.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-984.947)), bool(false)))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0)))), 1.0, 0.0, length(0.0), 0.0, 0.0, sin(0.0), 1.0, 0.0))))), (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(0.1), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(2.0)), bvec2(true, false))) * cos(vec2(0.0, 0.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), (_GLF_IDENTITY(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED((-8.4 / 47.40)), (vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]))[1]), vec2((vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]))[0], _GLF_FUZZED(-61.06)), bvec2(true, false)))) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.0)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(6522.1763, -8.7)))), mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, 0 | (0))], _GLF_FUZZED(2.0)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false))))).y)), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (false ? _GLF_FUZZED(atan(vec3(-97.13, 8.4, 896.390), vec3(-6.1, 7260.6823, -99.06))) : _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (vec3(0.0, 0.0, 1.0)) / vec3(1.0, 1.0, 1.0)))), vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7152.5072) : 1.0)))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-614.800) : 1.0)), 0.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(76.84)), bool(false))), 1.0))), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), tan(0.0), exp(0.0)))), 1.0, 0.0, length(0.0), 0.0, 0.0, sin(0.0), 1.0, 0.0)))))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(73.33)))) - 0.0), clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-7.6)), float(injectionSwitch[1]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[1])))).x > injectionSwitch.y)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))) || false))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).y)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) / 1)], _GLF_FUZZED(2.0)), bvec2(true, false))).y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), (bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))) || false)))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, false || (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) / 1)], _GLF_FUZZED(2.0)), bvec2(true, false))).y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), (bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))) || false)))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, bool(bvec2((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) / 1)], _GLF_FUZZED(2.0)), bvec2(true, false))).y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), (bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.9) : injectionSwitch.x)) > injectionSwitch.y))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))), true, false, false))) || false)))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, true)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           subgroupAll(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))), true, false))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, cos(0.0))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  return;
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true && (! (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))))))), (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), bool(bvec4(! (! (! (false))), false, false, true)))))))) && true))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
  }
}
