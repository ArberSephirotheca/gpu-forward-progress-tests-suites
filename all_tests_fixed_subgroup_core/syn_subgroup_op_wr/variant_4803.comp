#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), false || (bool(bool(_GLF_IDENTITY(false, (false) && true)))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)), (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atanh(-7337.3448)) : (injectionSwitch)[0])), _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED(5.3), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8223.1712)))), float(_GLF_FUZZED(6032.0628)), bool(false)))))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)) : _GLF_FUZZED(564.080))) > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, true))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec2(bvec2(! (false), true)))), false, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec2(bvec2(! (false), true)))), false, true)), false)))))))), ! (! (bool(bvec2(! (false), true))))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(((87.28 + -3.4) / 133.495))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))), 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, abs(0.0)), (true ? vec2(0.0, abs(0.0)) : _GLF_FUZZED(injectionSwitch))))), 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y) || false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(ivec2(_GLF_IDENTITY(3, (3) | (3)), 0)))) << 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (1), clamp(1 * (1), 1 * (1), 1 * (1)))) & int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), 1.0 * (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), 1.0 * (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))) - 0.0))), (false ? _GLF_FUZZED(-29.12) : _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), 1.0 * (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))) - 0.0))))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))), 1.0 * (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0)))))) - 0.0))))))), max((1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(543.436)), bool(false))))), _GLF_IDENTITY(_GLF_IDENTITY((1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(8713)), _GLF_IDENTITY(_GLF_FUZZED(0.1), (_GLF_FUZZED(0.1)) - 0.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))), _GLF_IDENTITY(((1 & int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0, max(((1 & int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0, ((1 & int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0))), (_GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), ((1 & int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0)) ^ 0))), _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), 1 * ((_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(_injected_loop_counter) : 1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))), (1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)) + 0.0))))) | 1), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < ((1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.1)), bool(false))), injectionSwitch.y))) | 1), (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1, clamp((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1, (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1, _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1, ((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1) ^ 0)))), min(((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1), ((1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) | 1))), (_injected_loop_counter < ((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1)) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))) + (injectionSwitch.y))))) >> 0), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0)))) / 1)) | 1))), (_injected_loop_counter < ((1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 1)) || false)))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(41.11, -8.9)))) : _GLF_FUZZED(vec2(-71.54, -475.153)))))).x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(41.11, -8.9)))) : _GLF_FUZZED(vec2(-71.54, -475.153)))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(41.11, -8.9)))) : _GLF_FUZZED(vec2(-71.54, -475.153)))))).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (false ? _GLF_FUZZED(71.56) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))), true))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-5938))), 0)))) << _GLF_IDENTITY(int(6), int(6))) | 1), 0 ^ (((_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-5938))), 0)))) << _GLF_IDENTITY(int(6), int(6))) | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), clamp(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y)) || false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | 0u)), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(1u, (1u) | 0u)), 1u, 1u, 0u)), (uint(uvec4((_GLF_IDENTITY(1u, (1u) | 0u)), 1u, 1u, 0u))) ^ 0u))), 1u)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u)), min((_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u)), (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u))))), 1u), (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u))), 1u)) * uvec3(1u, 1u, 1u))).x, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u)), min((_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u)), (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u))))), 1u), (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u))), 1u)) * uvec3(1u, 1u, 1u))).x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u)), min((_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u)), (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u))))), 1u), (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, (1u) | 0u))), 1u)) * uvec3(1u, 1u, 1u))).x)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) * 1u)) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | 0u, ((1u) | 0u) | (_GLF_IDENTITY((1u) | 0u, max((1u) | 0u, (1u) | 0u))))))), 1u)).x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))), false, false, false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], (true ? _GLF_IDENTITY(gl_WorkGroupID[0], clamp(gl_WorkGroupID[0], gl_WorkGroupID[0], gl_WorkGroupID[0])) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))[1], max(gl_WorkGroupID[1], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) << 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(140649u, 150563u, 174546u)) : gl_WorkGroupID))[2])).x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), ~ (_GLF_IDENTITY(~ ((0 >> _GLF_IDENTITY(int(7), int(7)))), 1 * (~ ((0 >> _GLF_IDENTITY(int(7), int(7)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(64, (64) / (1 | 1)), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.3), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(51651) : 0))], _GLF_FUZZED(5.6)), bvec2(true, false))).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, _GLF_IDENTITY(true, false || (true))))))))), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true))))), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true))))), false))))))))) || false), false || (! ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))))))) || false)))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true))), ((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true))))))), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))), false, true, false)), (bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))), false, true, false))) && true))))))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))))))) || false), false || (! ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), _GLF_IDENTITY(true, ! (! (true))), false))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))))), false || ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), _GLF_IDENTITY(true, ! (! (true))), false))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (false), false, true, true)))))))))) || false)))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true)))) || false) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), bool(bvec2(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))) && true)))), bool(bool((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), bool(bvec2(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))) && true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ((! (_GLF_IDENTITY(false, (false) && true)))) && true)) || false)))))), false, true, false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))), (bool(_GLF_IDENTITY(true, bool(bool(true))))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bool(true)))), (bool(_GLF_IDENTITY(true, bool(bool(true))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bool(true)))), (bool(_GLF_IDENTITY(true, bool(bool(true))))) && true)))))) && true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_IDENTITY(true, ! (! (true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0, int(ivec4(0, (0 ^ 0), 1, 0))))), 0, 0)), (int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0, int(ivec4(0, (0 ^ 0), 1, 0))))), 0, 0))) << 0), int(ivec3(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), 0, 1)))), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0, int(ivec4(0, (0 ^ 0), 1, 0))))), 0, 0)), (int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0, int(ivec4(0, (0 ^ 0), 1, 0))))), 0, 0))) << 0), int(ivec3(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), 0, 1))))) | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0, int(ivec4(0, (0 ^ 0), 1, 0))))), 0, 0)), (int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0, int(ivec4(0, (0 ^ 0), 1, 0))))), 0, 0))) << 0), int(ivec3(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), 0, 1)))))))), (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))), 1, (1 ^ 1), int(_GLF_ZERO(0.0, injectionSwitch.x))))) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, 0 | (_GLF_IDENTITY(64, clamp(64, 64, 64)))), 4);
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(reflect(atan(5.8), -1239.6066)) : 0.0))), cos(0.0)))).y, sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, sin(0.0), cos(0.0)))).y)), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), cos(0.0)))).y, sqrt(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), cos(0.0)))).y), mix(float(_GLF_FUZZED(float(true))), float((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), cos(0.0)))).y)), bool(true)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 0.0, 1.0)))), min(float(vec4(0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 0.0, 1.0)))), float(vec4(0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 0.0, 1.0))))))))))).y, sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), float(mat2x3(sin(0.0), sqrt(0.0), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))))), cos(0.0)))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), cos(0.0)))).y, sqrt(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(764.821) : 1.0))) + 0.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, sin(0.0), cos(0.0)))).y)))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) || false), (! (true)) || _GLF_IDENTITY(false, true && (false))))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), true)), (bool(bvec2(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), true))) && true)))))), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (! (true))), (! (true)) || false)))), (false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (! (true))), (! (true)) || false))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x < injectionSwitch.y), false, true, false)))))))) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(false);
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)), _GLF_IDENTITY(false || (true), bool(bvec2(_GLF_IDENTITY(false || (true), true && (_GLF_IDENTITY(false || (true), (false || (true)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)), false || ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(20.43, 757.385)) : injectionSwitch)).y), false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(20.43, 757.385)) : injectionSwitch)).y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(distance(-31.60, -240.594)) : injectionSwitch.y))))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
