#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u), (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (workgroup_id))), 0u | (~ (workgroup_id))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (workgroup_id), ~ (workgroup_id)), (min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u))) / 1u))), clamp(~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (workgroup_id), ~ (workgroup_id)), (min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u))) / 1u))), clamp(~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (workgroup_id), ~ (workgroup_id)), (min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u))) / 1u))), clamp(~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))))))))), max((_GLF_IDENTITY(~ (workgroup_id), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), _GLF_IDENTITY(min(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), ~ (workgroup_id)), _GLF_IDENTITY(uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), min(uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec3(workgroup_id, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u), max(uvec3(workgroup_id, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u), uvec3(workgroup_id, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u)))))) | (_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))))) >> 0u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (0u | 0u)), (workgroup_id) >> _GLF_IDENTITY(0u, (0u) / 1u)), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))), _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)))))), ~ (~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))))))), (false ? _GLF_FUZZED(workgroup_id) : ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (workgroup_id))), 0u | (_GLF_IDENTITY(~ (workgroup_id), (~ (workgroup_id)) << 0u))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (workgroup_id), ~ (workgroup_id)), (min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u))) / 1u))), clamp(~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), min((workgroup_id), (workgroup_id)))) | ((workgroup_id)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ((_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))) | (110966u & 0u)), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), clamp((workgroup_id), (workgroup_id), (workgroup_id)))) - 0u)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (workgroup_id)), (_GLF_IDENTITY(min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u)), min(min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u)), _GLF_IDENTITY(min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u)), 0u ^ (_GLF_IDENTITY(min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u)), (min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u))) << 0u)))))) / 1u))), clamp(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id))), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (workgroup_id), ~ (workgroup_id)), uint(uvec4(min(~ (workgroup_id), ~ (workgroup_id)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u))))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(min(~ (workgroup_id), ~ (workgroup_id)), (min(~ (workgroup_id), ~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) >> 0u))) / 1u))), clamp(~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id)))), ~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_id), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), _GLF_IDENTITY(min(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u)) ^ 0u), _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u))), ~ (workgroup_id)), _GLF_IDENTITY(uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(((workgroup_id)) | 0u, (((workgroup_id)) | 0u) | (_GLF_IDENTITY(((workgroup_id)) | 0u, min(((workgroup_id)) | 0u, ((workgroup_id)) | 0u))))), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), min(uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))))), uint(uvec4(min(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), 1u * (~ _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), min((workgroup_id), _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))) | 0u))), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))))))))), ((_GLF_IDENTITY(~ (workgroup_id), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))), _GLF_IDENTITY(min(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u)) ^ 0u), _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u))), ~ (workgroup_id)), _GLF_IDENTITY(uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(((workgroup_id)) | 0u, (((workgroup_id)) | 0u) | (_GLF_IDENTITY(((workgroup_id)) | 0u, min(((workgroup_id)) | 0u, ((workgroup_id)) | 0u))))), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), min(uint(uvec4(min(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))))), uint(uvec4(min(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | 0u), 1u * (~ _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), min((workgroup_id), _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))) | 0u))), ~ (workgroup_id)), 1u, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))))))))) ^ 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec3(workgroup_id, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u), max(uvec3(workgroup_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) - (43939u & 0u))), 0u), uvec3(workgroup_id, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u)))))) | (_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))))) >> 0u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (0u | 0u)), (workgroup_id) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)), min(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) >> 0u))), _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u)))))), ~ (~ (_GLF_IDENTITY(~ (workgroup_id), min(~ (workgroup_id), ~ (workgroup_id))))))))))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) * 1u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          return;
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true)))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                      return;
                     return;
                    }
                  }
                }
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53161) : 1))) - 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, (true ? (subgroup_id) ^ 0u : _GLF_FUZZED((workgroup_size / subgroup_id)))))))) | (subgroup_id)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) | 0u), subgroup_local_id + 1)), ~ (~ (subgroup_local_id + 1)))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), (_GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, true, true))))))) && true), (! (_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), (_GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, true, true))))))) && true), (! (_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))) && true)), bool(bvec3(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), (_GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, true, true))))))) && true), (! (_GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))) && true)), false, false))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), (next_virtual_gid) | _GLF_IDENTITY((next_virtual_gid), ~ (~ ((next_virtual_gid)))))], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY((1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, max(5, 5))))))), 0, 1), clamp(ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, max(5, 5))))))), 0, 1), ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, max(5, 5))))))), 0, 1), ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, max(5, 5))))))), 0, 1)))), clamp(int(ivec4((1), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | (0 >> _GLF_IDENTITY(int(5), int(5))))))), 0, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1), (false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (~ ((1)))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1)), ~ (~ (int(ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1))))), int(ivec4((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 + (1)), 1))) >> (0 & 92374))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), _GLF_IDENTITY(int(5), min(int(5), int(5))))), 0, 1))))) / 1)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1)), clamp(int(ivec4((1), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(78340)))) - (1 ^ 1))), int(5))), 0, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1), _GLF_IDENTITY((false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1))))))), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1))))))), ((false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1)))))))) - 0) : _GLF_FUZZED(61630))), _GLF_IDENTITY((false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1))))))), 0 ^ ((false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1))))))))), (false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), 1 * (~ ((1)))))))))), (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, 5))))), 0, 1)), ~ (~ (int(ivec4((1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(-25086)))), 0, 1))))), int(ivec4((1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), int(5))), 0, 1))))) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(1, 0 | (1))), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, _GLF_IDENTITY(1, (1) | (0 ^ 0)))), clamp(int(_GLF_IDENTITY(ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1), ivec4(0, 0, 0, 0) ^ (ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1)))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1), (false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (~ ((1)))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY((1), ((1)) / (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) * 1)))) | 0)), 0, 1))))), int(ivec4((1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), int(5))), 0, 1))))) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec4((1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(-66833)))), 0, 1)), clamp(int(ivec4((1), (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(5), int(5))), 0, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1), (false ? _GLF_FUZZED(3595) : _GLF_IDENTITY((1), ~ (~ _GLF_IDENTITY(((1)), (true ? ((1)) : _GLF_FUZZED(96152))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1)), ~ (~ (int(ivec4((1), (0 >> _GLF_IDENTITY(int(5), int(5))), 0, 1))))), int(ivec4((1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), int(5))), 0, 1))))) / 1)))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (1) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (1) / 1)), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))) ^ 0))) * ((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (1) / 1))))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 ^ (1))) / 1)))) >> (0 ^ 0))), 4, 64, 4);
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), subgroup_size)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, false || (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < 1)))))))))))) || false, _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false, (false) || false) || (_injected_loop_counter < 1)))))) || false, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4((_injected_loop_counter < 1), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec4((_injected_loop_counter < 1), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))))))))) || false, false), true))), true, false)))), (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_injected_loop_counter < 1)))))), bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false))) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))), (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), min(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_IDENTITY(_GLF_FUZZED(-27713), ~ (~ (_GLF_FUZZED(-27713)))))), _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)) - 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), _injected_loop_counter, _injected_loop_counter)))) < 1, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false, false || (false)) || (_injected_loop_counter < 1)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false, false || (false)) || (_injected_loop_counter < 1))))) && true))) || false, false)), (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false || ((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false)), false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)), false))))))) || false, false), false))), _GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))))) || false, false), false))), false)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))) || false)))))); _injected_loop_counter ++)
            {
             atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, 1 * (4)), 4, 4)), (4) | (4)), (4) ^ (0 ^ 0)));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))), (~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))))) | (~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ~ (~ ((1 & 1))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         continue;
        }
       subgroupAll(false);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | (0 >> _GLF_IDENTITY(int(2), int(2)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (true))) && true))), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, true, false))));
    }
  }
}
