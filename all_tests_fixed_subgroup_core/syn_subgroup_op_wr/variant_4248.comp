#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) + 0)) | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
    }
  }
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.z = virtual_gid;
  }
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ivec4(-80590, -98573, -1145, 64056).y)); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.x = next_virtual_gid;
    }
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.z], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(subgroup_local_id + 1 < GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y)
    {
     atomicStore(checker[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.z], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 subgroupAll(false);
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   else
    {
     atomicStore(checker[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.z], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         subgroupAll(true);
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
}
