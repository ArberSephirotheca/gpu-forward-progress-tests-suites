#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_84 {
 mat4x2 _f0;
 vec3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_83 {
 uvec3 _f0;
 mat3 _f1;
 int _f2;
 ivec3 _f3;
 mat4x2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_82 {
 mat4x2 _f0;
 mat3x4 _f1;
 mat2 _f2;
 mat2x4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_81 {
 mat4x2 _f0;
 mat4x3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_85 {
 ivec2 _f0;
 _GLF_struct_81 _f1;
 mat3x4 _f2;
 _GLF_struct_82 _f3;
 _GLF_struct_83 _f4;
 _GLF_struct_84 _f5;
} ;

struct _GLF_struct_79 {
 mat3x4 _f0;
 float _f1;
 float _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_78 {
 mat2 _f0;
 bool _f1;
 mat3x2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_80 {
 _GLF_struct_78 _f0;
 _GLF_struct_79 _f1;
} ;

struct _GLF_struct_76 {
 ivec2 _f0;
} ;

struct _GLF_struct_75 {
 bvec4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_77 {
 _GLF_struct_75 _f0;
 bvec3 _GLF_SWITCH_0_83v;
 vec3 _f1;
 _GLF_struct_76 _f2;
 bool _f3;
} ;

struct _GLF_struct_73 {
 bvec2 _f0;
 mat2x4 _f1;
 vec4 _f2;
 ivec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_72 {
 uint _f0;
 mat4 _f1;
 ivec2 _f2;
 bvec4 _f3;
 bool _f4;
 mat4 _f5;
} ;

struct _GLF_struct_71 {
 uvec3 _f0;
} ;

struct _GLF_struct_70 {
 uint _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_74 {
 uvec3 _f0;
 _GLF_struct_70 _f1;
 _GLF_struct_71 _f2;
 bool _f3;
 _GLF_struct_72 _f4;
 bvec4 _f5;
 _GLF_struct_73 _f6;
} ;

struct _GLF_struct_86 {
 _GLF_struct_74 _f0;
 _GLF_struct_77 _f1;
 _GLF_struct_80 _f2;
 bool _f3;
 _GLF_struct_85 _f4;
} ;

struct _GLF_struct_67 {
 bvec4 _f0;
 bvec2 _f1;
 mat2x3 _GLF_SWITCH_0_82v;
 mat4x3 _f2;
 mat4x2 _f3;
 vec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_66 {
 bvec4 _f0;
} ;

struct _GLF_struct_65 {
 mat2x4 _f0;
 vec4 _f1;
 bvec3 _f2;
 mat2 _f3;
 uvec2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_68 {
 uvec2 _f0;
 _GLF_struct_65 _f1;
 _GLF_struct_66 _f2;
 _GLF_struct_67 _f3;
} ;

struct _GLF_struct_69 {
 _GLF_struct_68 _f0;
 uint _f1;
} ;

struct _GLF_struct_62 {
 mat3 _f0;
 bvec4 _f1;
 ivec3 _f2;
 mat3x2 _f3;
 mat4x2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_61 {
 vec3 _f0;
 mat4 _f1;
 uint _f2;
} ;

struct _GLF_struct_63 {
 int _f0;
 mat2 _f1;
 _GLF_struct_61 _f2;
 ivec2 _f3;
 _GLF_struct_62 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_64 {
 vec3 _f0;
 _GLF_struct_63 _f1;
 int _injected_loop_counter;
 mat2x4 _f2;
} ;

struct _GLF_struct_58 {
 bool _f0;
} ;

struct _GLF_struct_57 {
 uvec3 _f0;
 float _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_56 {
 mat3 _f0;
 ivec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_55 {
 ivec2 _f0;
 vec4 _f1;
 uvec4 _f2;
 uvec4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_59 {
 mat3x4 _f0;
 _GLF_struct_55 _f1;
 _GLF_struct_56 _f2;
 _GLF_struct_57 _f3;
 mat2x4 _f4;
 _GLF_struct_58 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_60 {
 mat4x2 _GLF_SWITCH_0_90v;
 _GLF_struct_59 _f0;
} ;

struct _GLF_struct_54 {
 uint _f0;
 bvec3 _f1;
 mat2x3 _f2;
 mat4 _f3;
 mat2x4 _GLF_SWITCH_0_25v;
} ;

struct _GLF_struct_51 {
 ivec4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 ivec2 _f3;
 int _f4;
 ivec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_50 {
 uvec3 _f0;
 mat4x2 _f1;
 mat3 _f2;
 ivec2 _f3;
 int _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_52 {
 _GLF_struct_50 _f0;
 _GLF_struct_51 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_48 {
 bvec3 _f0;
} ;

struct _GLF_struct_49 {
 vec3 _f0;
 _GLF_struct_48 _f1;
} ;

struct _GLF_struct_46 {
 ivec2 _f0;
 bvec4 _f1;
 mat2 _f2;
 bool _f3;
 mat3x2 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_45 {
 mat2 _f0;
 bvec4 _f1;
 uint _f2;
 bvec2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_44 {
 mat4x2 _f0;
 mat4x3 _f1;
 bvec2 _f2;
 bvec3 _f3;
 mat3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_47 {
 _GLF_struct_44 _f0;
 _GLF_struct_45 _f1;
 _GLF_struct_46 _f2;
} ;

struct _GLF_struct_42 {
 ivec2 _f0;
} ;

struct _GLF_struct_41 {
 uint _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_40 {
 bool _f0;
 ivec2 _f1;
 uvec3 _f2;
 mat3x2 _f3;
 mat3x4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_39 {
 float _f0;
 bool _f1;
 float _f2;
 bool _f3;
 mat2x4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_38 {
 bvec2 _f0;
 mat3x2 _f1;
 bvec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_43 {
 _GLF_struct_38 _f0;
 mat4x2 _f1;
 _GLF_struct_39 _f2;
 _GLF_struct_40 _f3;
 _GLF_struct_41 _f4;
 mat2x4 _f5;
 _GLF_struct_42 _f6;
} ;

struct _GLF_struct_36 {
 mat2x4 _f0;
} ;

struct _GLF_struct_35 {
 ivec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_34 {
 mat3x4 _f0;
} ;

struct _GLF_struct_33 {
 ivec4 _f0;
 mat2x4 _f1;
 mat4x3 _f2;
 mat3 _f3;
 vec3 _f4;
 bvec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_37 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
 _GLF_struct_35 _f2;
 _GLF_struct_36 _f3;
} ;

struct _GLF_struct_53 {
 _GLF_struct_37 _f0;
 uint read;
 mat4 _f1;
 _GLF_struct_43 _f2;
 _GLF_struct_47 _f3;
 _GLF_struct_49 _f4;
 _GLF_struct_52 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_30 {
 bvec4 _GLF_SWITCH_0_119v;
 uvec3 _f0;
} ;

struct _GLF_struct_29 {
 bvec3 _f0;
 ivec4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_28 {
 float _f0;
} ;

struct _GLF_struct_31 {
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 bvec4 _f2;
 mat2x4 _f3;
 bvec4 _f4;
 _GLF_struct_30 _f5;
} ;

struct _GLF_struct_32 {
 _GLF_struct_31 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_25 {
 int _f0;
 vec3 _f1;
 bool _f2;
 bvec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_24 {
 bool _f0;
 vec4 _f1;
 vec4 _f2;
 uvec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_23 {
 mat3x4 _f0;
 uint _f1;
 bvec3 _f2;
 bvec3 _f3;
 mat2 _f4;
 ivec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_26 {
 vec3 _f0;
 _GLF_struct_23 _f1;
 bool _f2;
 _GLF_struct_24 _f3;
 _GLF_struct_25 _f4;
 mat3 _GLF_SWITCH_0_13v;
 vec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_21 {
 ivec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_20 {
 mat4x2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_22 {
 _GLF_struct_20 _f0;
 uint _f1;
 vec2 _f2;
 ivec2 _f3;
 uvec3 _f4;
 mat2x4 _f5;
 _GLF_struct_21 _f6;
} ;

struct _GLF_struct_27 {
 _GLF_struct_22 _f0;
 _GLF_struct_26 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_17 {
 vec4 _f0;
 uvec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_16 {
 uint subgroup_id;
 mat3x4 _f0;
 uvec4 _f1;
 uint _f2;
 vec2 _f3;
 mat4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_15 {
 uint _f0;
 uvec3 _f1;
 int _f2;
} ;

struct _GLF_struct_18 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 mat4x2 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_13 {
 uint _f0;
 mat2x3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_12 {
 uvec3 _f0;
 bvec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_11 {
 int _f0;
 mat4x3 _f1;
 bvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 _GLF_struct_11 _f1;
 float _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 bool _f5;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
} ;

struct _GLF_struct_7 {
 bool _f0;
 mat3x4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 float _f1;
 uvec2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 uvec2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 mat3 _f1;
 mat3x4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 mat3x2 _f1;
 mat4 _f2;
 vec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 bvec2 _f1;
 uvec4 _f2;
 float _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 float _f1;
 _GLF_struct_1 _f2;
 uint _f3;
 uvec4 _f4;
 _GLF_struct_2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_3 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_14 _f2;
 bvec3 _f3;
 _GLF_struct_18 _f4;
 ivec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_3(_GLF_struct_0(mat4x2(1.0), bvec2(true), uvec4(1u), 1.0), 1.0, _GLF_struct_1(mat3x2(1.0), uvec3(1u)), 1u, uvec4(1u), _GLF_struct_2(bvec4(true), mat3x2(1.0), mat4(1.0), vec3(1.0), vec2(1.0)), mat2(1.0)), _GLF_struct_10(_GLF_struct_4(bvec4(true), mat3(1.0), mat3x4(1.0), mat2(1.0)), _GLF_struct_5(mat4x3(1.0), uvec2(1u), vec3(1.0)), _GLF_struct_6(vec4(1.0), 1.0, uvec2(1u), mat3(1.0)), _GLF_struct_7(true, mat3x4(1.0), vec3(1.0)), _GLF_struct_8(ivec4(1)), _GLF_struct_9(mat3x4(1.0), mat2x4(1.0))), _GLF_struct_14(mat3x2(1.0), _GLF_struct_11(1, mat4x3(1.0), bvec3(true), 1u), 1.0, _GLF_struct_12(uvec3(1u), bvec3(true), mat3(1.0)), _GLF_struct_13(1u, mat2x3(1.0), mat2x3(1.0)), true), bvec3(true), _GLF_struct_18(_GLF_struct_15(1u, uvec3(1u), 1), _GLF_struct_16(gl_SubgroupID, mat3x4(1.0), uvec4(1u), 1u, vec2(1.0), mat4(1.0), mat2x3(1.0)), mat4x2(1.0), _GLF_struct_17(vec4(1.0), uvec3(1u), bvec4(true))), ivec2(1));
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(_GLF_struct_64 _GLF_struct_replacement_64 = _GLF_struct_64(vec3(1.0), _GLF_struct_63(1, mat2(1.0), _GLF_struct_61(vec3(1.0), mat4(1.0), 1u), ivec2(1), _GLF_struct_62(mat3(1.0), bvec4(true), ivec3(1), mat3x2(1.0), mat4x2(1.0), mat2(1.0)), mat3(1.0)), 1, mat2x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_64._injected_loop_counter > ((0 | 0) ^ 0)); _GLF_struct_replacement_64._injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_19._f4._f1.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_19._f4._f1.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 _GLF_struct_53 _GLF_struct_replacement_53 = _GLF_struct_53(_GLF_struct_37(_GLF_struct_33(ivec4(1), mat2x4(1.0), mat4x3(1.0), mat3(1.0), vec3(1.0), bvec4(true), 1u), _GLF_struct_34(mat3x4(1.0)), _GLF_struct_35(ivec4(1), mat2x4(1.0)), _GLF_struct_36(mat2x4(1.0))), atomicLoad(buf[virtual_gid], 4, 64, 0), mat4(1.0), _GLF_struct_43(_GLF_struct_38(bvec2(true), mat3x2(1.0), bvec3(true), vec4(1.0)), mat4x2(1.0), _GLF_struct_39(1.0, true, 1.0, true, mat2x4(1.0), uvec2(1u)), _GLF_struct_40(true, ivec2(1), uvec3(1u), mat3x2(1.0), mat3x4(1.0), mat3x4(1.0)), _GLF_struct_41(1u, uvec2(1u)), mat2x4(1.0), _GLF_struct_42(ivec2(1))), _GLF_struct_47(_GLF_struct_44(mat4x2(1.0), mat4x3(1.0), bvec2(true), bvec3(true), mat3(1.0), uvec4(1u)), _GLF_struct_45(mat2(1.0), bvec4(true), 1u, bvec2(true), uvec2(1u)), _GLF_struct_46(ivec2(1), bvec4(true), mat2(1.0), true, mat3x2(1.0), mat3x2(1.0))), _GLF_struct_49(vec3(1.0), _GLF_struct_48(bvec3(true))), _GLF_struct_52(_GLF_struct_50(uvec3(1u), mat4x2(1.0), mat3(1.0), ivec2(1), 1, mat2x4(1.0)), _GLF_struct_51(ivec4(1), mat4x3(1.0), ivec2(1), ivec2(1), 1, ivec3(1), bvec2(true)), mat2x4(1.0)), mat3x2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_53.read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 17:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     bvec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     case 70:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(mat4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v; (mix(vec2(7.2, 4.8), injectionSwitch, bvec2(false, true)) != injectionSwitch); bvec4(true, bvec2(true, false), false))
        {
         mat3x4 _GLF_SWITCH_0_5v[23], _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         ivec3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
         {
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(false))
           break;
          ivec2(-42499, -71026);
          ivec2(96873, -47062);
          mat3x4(mat3x2(mat2x4(315.378, -7.5, -290.278, 7.9, -4.8, 0.4, 4231.7911, -4471.2769)));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          bvec3 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v;
          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
           {
            if(_GLF_DEAD(false))
             return;
           }
          mat4(-96.02, 40.52, 19.61, 93.45, faceforward(-34.95, 59.31, max(7.0, 8.8)), -1856.1717, 501.429, 7.2, 9632.3761, -3.8, -104.156, 80.95, -335.698, -28.75, -7754.8710, -70.12);
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           continue;
          _GLF_struct_27 _GLF_struct_replacement_27;
          equal(notEqual(ivec2(72515, 50888), ivec2(-10400, -16001)), bvec2(true, false));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
         }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
          continue;
         mat4x2(-4296.7071, -85.74, -5.3, 56.44, 1.1, -7275.4805, -6.1, 6.7);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       mat3x4(-2.5, -0.3, -40.48, 412.146, -5.6, 8.3, -900.874, 2444.1082, 7.1, 997.791, -9.7, 842.154)[0];
       {
        while(false)
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
          (ivec2(10591, 18878) >> -53598);
          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
           {
            sqrt(atan(vec4(612.935, -21.65, 49.11, -5.0), vec4(-4.6, 323.835, -472.295, 250.711)));
           }
          else
           {
           }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           break;
          do
           {
            (mat2(-6524.7716, 8.6, -72.23, -46.99) / (mat2(-8.2, -9.2, -2.6, 3.6) - mat2(-0.3, 36.73, -0.6, -1.0)));
           }
          while(_GLF_WRAPPED_LOOP(false));
          (mat3x4(8.7, 6178.2165, -60.85, 0.6, 8.6, 75.22, 91.97, -4770.7684, -4.2, -1410.1574, 397.891, -668.158) == mat3x4(-2.6, -2561.5649, -8.9, 9813.6095, -57.46, -0.9, -657.071, 33.67, -62.28, -569.432, -519.141, -8.9));
          ;
         }
        if(_GLF_DEAD(false))
         return;
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_DEAD(false))
         continue;
        int((-97702 >= -60558));
        while((mat2x4(6501.0679, 6.5, 435.834, -4594.4862, 4.6, -3.1, -14.60, -7.1) != (-8.0 - (71.57 + mat2x4(8.1, 199.658, 987.933, 8.4, 4.0, -5432.5117, 3177.2698, -8252.4426)))))
         {
         }
        mat2x4 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v;
        if(_GLF_DEAD(false))
         break;
        for(bool _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v; bool(_GLF_struct_replacement_53.read); equal((mat3(272.506, 8.5, -1.5, -653.075, -5.4, 60.32, -1.6, -3.4, 12.15) , uvec3(76392u, 36886u, 178043u)), (uvec3(10286u, 155351u, 187958u) + uvec3(124018u, 181519u, 179808u))))
         {
          vec3(-64.78, -0.7, 9966.3067);
          if(_GLF_DEAD(false))
           barrier();
          ivec3 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v;
          bvec4(false, false, false, true);
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             break;
            barrier();
           }
          if(_GLF_DEAD(false))
           return;
          ((-61856 << 25287) | ivec2(73397, -33550));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
          mat4x2(67.42, 7.9, -3.4, -149.450, 8521.6236, -0.2, -3.9, 7.0);
          if(_GLF_DEAD(false))
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              return;
             }
            else
             {
             }
           }
          ivec4 _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v;
          if(_GLF_DEAD(false))
           continue;
          _GLF_struct_54 _GLF_struct_replacement_54;
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
               barrier();
              if(_GLF_DEAD(false))
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                 }
                barrier();
               }
              if(_GLF_DEAD(false))
               {
                for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                 {
                  if(_GLF_DEAD(false))
                   return;
                 }
                barrier();
               }
             }
            else
             {
             }
           }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
          mat4 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v;
          if(_GLF_DEAD(false))
           continue;
         }
        vec4 _GLF_SWITCH_0_29v;
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         mat3(2730.2579, 757.175, -456.164, 1.7, 1124.1538, -1.5, -3.9, -10.08, -56.86);
         mat4x3(-6.8, -5.3, 4.5, 7243.9147, 5.6, 934.384, 668.908, -2842.8918, 264.148, 3060.1875, 5.4, -8865.9366);
         if(_GLF_DEAD(false))
          barrier();
         -7845;
         -65434;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
        if((mat3(-218.875, -1319.7040, 96.45, -7142.3143, 0.7, 34.67, 8.7, -50.91, 5822.9246) != (mat3(-3.0, -3.9, 5695.0629, 575.459, -1.8, -3.3, 2.1, -389.313, 79.86))))
         {
          -3.2;
          if(_GLF_DEAD(false))
           continue;
          mat2x4 _GLF_SWITCH_0_30v[19], _GLF_SWITCH_0_31v[72], _GLF_SWITCH_0_32v;
          if(_GLF_DEAD(false))
           break;
          if(_GLF_DEAD(false))
           return;
          vec3 _GLF_SWITCH_0_33v[20];
          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
           {
            if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
             break;
            subgroup_local_id;
           }
          else
           {
           }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          if(_GLF_DEAD(false))
           return;
          mat2x3(174.060, 7004.5785, -0.4, 8293.7293, -3.0, -4.1);
          if(_GLF_DEAD(false))
           break;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             continue;
            return;
            if(_GLF_DEAD(false))
             break;
           }
          ((mat2x3(-8225.2293, 0.2, 8.1, 901.815, -757.432, 3291.2662) + mat2x3(3.4, -6416.7249, 955.861, -2.9, 3.1, -8.9)) / -9.2);
          ivec4 _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v;
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            equal(injectionSwitch, injectionSwitch);
           }
          else
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              if(_GLF_DEAD(false))
               barrier();
              break;
             }
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             break;
            break;
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
             {
              barrier();
             }
            if(_GLF_DEAD(false))
             return;
           }
          mat3(75.59);
          if(_GLF_DEAD(false))
           break;
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_DEAD(false))
         {
          if(_GLF_DEAD(false))
           return;
          barrier();
         }
       }
       uvec4 _GLF_SWITCH_0_36v[42];
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         ;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         mat2 _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v, _GLF_SWITCH_0_39v;
        }
       while((mat3x4(0.1, -3.2, 329.382, 0.1, -0.2, 1964.5620, -7.1, 7733.5657, 42.38, -875.917, -0.9, 50.59) == mat3x4(-90.81, -6.0, 92.32, 1.2, 5966.4057, -5213.7068, -2678.5357, -7981.2139, -69.86, 16.01, 639.517, -1.0)));
       mat3x4(4.6, -87.48, 71.78, 951.936, -92.02, -639.337, 1487.8244, -2675.3479, -4362.1094, 283.726, -151.909, 8.6);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       while(false)
        {
         if(false)
          {
           uaddCarry(workgroup_id, usubBorrow((workgroup_id / _GLF_struct_replacement_19._f4._f1.subgroup_id), workgroup_id, workgroup_id), num_workgroup);
           mat4x2 _GLF_SWITCH_0_40v, _GLF_SWITCH_0_41v;
           int _GLF_SWITCH_0_42v[68];
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 9.4;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                  barrier();
                }
               break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           _GLF_SWITCH_0_2v;
           ;
           lessThan(abs(ivec2(-54628, -97912)), ivec2(89876, 76253));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           uvec3 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v;
           213.323;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           vec2 _GLF_SWITCH_0_45v[51];
           (packUnorm4x8(vec4(26.42, -794.808, 6530.2965, -6618.5406)));
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           (round(-0.4) - mat3x2(581.207, -660.994, -4.7, -0.1, -0.5, -50.79));
           vec4(40.75, 32.14, 4581.2810, -8.5);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   return;
                  }
                }
              }
             return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             faceforward(determinant((mat3(1.6, 427.653, -9.8, 911.481, -4306.9965, -0.0, -7.3, 4.8, 4.2) - 475.953)), 2.3, normalize(2748.9476));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         do
          {
           (mat3(-97.28, 48.52, -3262.6576, -5.4, -0.3, 924.730, 49.25, -4.5, -8.5) * ((uvec4(147754u, 27921u, 71236u, 161459u) , mat3(1.1, -5.6, -3.2, -9.6, 79.90, -5129.3956, 3920.0171, 5.8, -500.299)) * mat3(7014.7073, -42.04, 8661.2424, 8.0, 519.581, 8.8, 6.9, -3121.1063, -6145.9503)));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         ;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         {
          for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
           {
            switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(1), int(1)))))
             {
              case 35:
              mat4(-6709.9892, -37.70, 8.4, -0.5, -7142.2957, 6.6, 4.5, 4.2, -3.2, 1.0, -26.78, -5.5, 23.85, -5.6, -1.1, 610.746);
              case 83:
              radians(vec4(-42.49, 288.895, 89.13, 629.158));
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              case 0:
              if(_GLF_DEAD(false))
               {
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                 }
                else
                 {
                  return;
                 }
               }
              case 22:
              case 4:
              case 72:
              if(_GLF_DEAD(false))
               return;
              break;
              case 75:
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              ;
              do
               {
                if(_GLF_DEAD(false))
                 return;
               }
              while(_GLF_WRAPPED_LOOP(false));
              default:
              1;
             }
           }
          if(_GLF_DEAD(false))
           {
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                barrier();
               }
              else
               {
               }
             }
           }
          uvec2 _GLF_SWITCH_0_46v;
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              barrier();
             }
            else
             {
             }
            if(_GLF_DEAD(false))
             continue;
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_DEAD(false))
               break;
              barrier();
             }
            else
             {
             }
           }
          if(_GLF_DEAD(false))
           break;
          do
           {
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              vec3(10.27, -86.92, -2.5);
             }
            if(_GLF_DEAD(false))
             {
              for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(59691) : int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
               {
                barrier();
               }
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                continue;
               }
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
               {
                if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                 barrier();
                barrier();
               }
              else
               {
               }
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          (mat3x2(38.12, 793.363, 935.392, 402.264, -809.091, 7321.0370) + 45.42);
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           break;
         }
         if(_GLF_DEAD(false))
          continue;
         (_GLF_SWITCH_0_0v);
         if(_GLF_DEAD(false))
          barrier();
         if((uvec3(64106u, 24200u, 177009u) != uvec3(132882u, 104253u, 4347u)))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           max(((ivec2(-88364, 83067) + -90544)), ivec2(32479, -95397));
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         mat4 _GLF_SWITCH_0_47v, _GLF_SWITCH_0_48v[86], _GLF_SWITCH_0_49v[88];
         while(true)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             ivec3(-3645, 38338, -50400);
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           bvec2(false, false);
           if(_GLF_DEAD(false))
            continue;
           (ivec4(-7463, 34969, -48240, 12797) ^ -90119);
           mat2 _GLF_SWITCH_0_50v, _GLF_SWITCH_0_51v;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       (vec2(508.483, 6692.0920) + -8.7);
      }
     while(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) ^ 0)); _injected_loop_counter --)
        {
         return;
        }
      }
     case 0:
     case 61:
     case 59:
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 16:
         case 71:
         case 54:
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         case 43:
         case 32:
         case 82:
         case 27:
         barrier();
         break;
         default:
         1;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     case 15:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     case 34:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(checker[virtual_gid], _GLF_struct_replacement_53.read, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       switch(_GLF_SWITCH(0))
        {
         case 67:
         vec4(-8.4, -59.70, -5653.3741, -6.9);
         case 32:
         mat4x3(973.410, 90.71, 1344.9228, 8074.7087, 3.2, -86.28, -8706.9796, 5898.4768, -1.8, -951.595, 0.6, 4.5);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         case 0:
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         break;
         default:
         1;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     case 21:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     case 68:
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     subgroupAll(true);
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(5), int(5))) | (0 >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     case 45:
     if(false)
      {
       (true ? equal(bvec2(true, true), bvec2(false, false)) : bvec2(true, true));
       mat3x2(-5.0, -6.6, 80.69, 6.9, 7640.3319, 2493.9189);
       ;
       while(true)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           mat3 _GLF_SWITCH_0_52v;
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           bvec3 _GLF_SWITCH_0_53v[64];
           uint _GLF_SWITCH_0_54v;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           bvec3(false, true, true);
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           ivec4 _GLF_SWITCH_0_55v, _GLF_SWITCH_0_56v;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             ;
            }
           else
            {
            }
           degrees(vec3(-0.1, -90.80, -5.6));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           uvec4 _GLF_SWITCH_0_57v;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             workgroup_id;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         uvec2 _GLF_SWITCH_0_58v, _GLF_SWITCH_0_59v, _GLF_SWITCH_0_60v;
         ivec4(56476, -96749, 5601, -46280)[0];
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           while((vec4(-931.880, 9299.7285, -718.878, 7.4) == vec4(-3.1, -8.7, -4.1, 341.779)))
            {
             bitCount(ivec4(39635, -97926, -10507, 58113)).wwwz;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               ;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             mat2 _GLF_SWITCH_0_61v, _GLF_SWITCH_0_62v, _GLF_SWITCH_0_63v;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             uvec4(22484u, 77883u, 13338u, 172478u);
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             uaddCarry(subgroup_local_id, next_virtual_gid, virtual_gid);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                continue;
               return;
              }
             (mat3x4(-748.291, -493.285, 241.893, -44.11, 8.0, -2.9, 4727.7250, -1562.7122, -0.6, 34.43, 1263.1847, 80.88) == mat3x4(-140.233, 2.2, -2.1, -40.87, 3410.3330, -78.55, -65.63, -52.34, -410.466, 4899.9331, 977.381, -9.3));
             mat4x3 _GLF_SWITCH_0_64v, _GLF_SWITCH_0_65v, _GLF_SWITCH_0_66v;
             vec3 _GLF_SWITCH_0_67v, _GLF_SWITCH_0_68v[27], _GLF_SWITCH_0_69v;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, true, false)))))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 ivec2(29155, 31826);
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
          }
         mat3x4(mat2x3(9.2, 5948.1648, 0.1, -40.11, 811.486, -252.752));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         {
          mat2x4(-7.4, 703.281, -3130.1186, 784.124, 561.644, 1.4, -4.5, 5877.5197);
          if(_GLF_DEAD(false))
           break;
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           break;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
             return;
            barrier();
            if(_GLF_DEAD(false))
             barrier();
           }
          float _GLF_SWITCH_0_70v[5];
          if(_GLF_DEAD(false))
           break;
          (uvec4(131344u, 20356u, 66289u, 149292u));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
           }
          else
           {
           }
          mat2(-4.3, -223.023, 5.0, 48.81);
          do
           {
            ;
           }
          while(_GLF_WRAPPED_LOOP(false));
          mat3x4(-8.7, 8.6, -7.0, -1788.2001, 3.5, 922.420, -95.07, -241.250, 37.71, 32.99, 6.5, 34.90);
         }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         mat3x2 _GLF_SWITCH_0_71v[64], _GLF_SWITCH_0_72v[55], _GLF_SWITCH_0_73v[1];
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         switch(_GLF_SWITCH(0))
          {
           case 39:
           uint _GLF_SWITCH_2_0v[74];
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           case 80:
           36419;
           case 0:
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
           break;
           default:
           1;
          }
        }
       mat4x2 _GLF_SWITCH_0_74v[45], _GLF_SWITCH_0_75v, _GLF_SWITCH_0_76v;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       for(mat2x3 _GLF_SWITCH_0_77v, _GLF_SWITCH_0_78v, _GLF_SWITCH_0_79v; false; uvec3(139550u, 190491u, 52006u))
        {
         mat4x3 _GLF_SWITCH_0_80v, _GLF_SWITCH_0_81v;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         _GLF_struct_69 _GLF_struct_replacement_69;
         mat3(vec3(245.210, -6.3, 0.3), (injectionSwitch * mat3x2(46.82, 4850.0569, 5.1, 746.040, -5867.6723, 4124.7540)), vec3(51.01, -76.78, 872.810));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         ;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         _GLF_SWITCH_0_81v;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             ivec3(55216, -13623, -57776);
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               switch(_GLF_SWITCH(0))
                {
                 case 5:
                 ;
                 case 85:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 ;
                 case 0:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 case 13:
                 case 45:
                 case 62:
                 case 63:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 case 98:
                 if(_GLF_DEAD(false))
                  continue;
                 case 92:
                 if(_GLF_DEAD(false))
                  break;
                 case 26:
                 if(_GLF_DEAD(false))
                  return;
                 case 54:
                 case 33:
                 barrier();
                 break;
                 if(_GLF_DEAD(false))
                  barrier();
                 default:
                 1;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         while((-95711 < 80608))
          {
           _GLF_struct_86 _GLF_struct_replacement_86;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             (ivec4(-69898, -74127, -54984, -45392) & -72113);
             if(_GLF_DEAD(false))
              barrier();
            }
           ivec3 _GLF_SWITCH_0_84v, _GLF_SWITCH_0_85v, _GLF_SWITCH_0_86v;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             bvec4(false, false, true, true);
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           mat3x4 _GLF_SWITCH_0_87v, _GLF_SWITCH_0_88v[35], _GLF_SWITCH_0_89v;
           _GLF_struct_60 _GLF_struct_replacement_60;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
           continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(true)
            {
             if(_GLF_DEAD(false))
              return;
             bvec2 _GLF_SWITCH_0_91v[35];
             ivec2 _GLF_SWITCH_0_92v, _GLF_SWITCH_0_93v, _GLF_SWITCH_0_94v;
             (outerProduct(vec4(-44.29, 4.0, 4.7, 7.9), injectionSwitch) / mat2x4(-5.7, -6.1, -96.79, 61.32, -0.6, 7.2, -3770.4761, -8.9));
             bvec3 _GLF_SWITCH_0_95v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             bvec2 _GLF_SWITCH_0_96v, _GLF_SWITCH_0_97v[80], _GLF_SWITCH_0_98v[98];
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             ;
             if(_GLF_DEAD(false))
              break;
             ;
             mat2x3 _GLF_SWITCH_0_99v, _GLF_SWITCH_0_100v[80], _GLF_SWITCH_0_101v;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         switch(_GLF_SWITCH(0))
          {
           case 82:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           ;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))));
            }
           case 0:
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           case 70:
           if(_GLF_DEAD(false))
            return;
           case 33:
           mat4x3 _GLF_SWITCH_0_102v[57], _GLF_SWITCH_0_103v;
           case 45:
           uvec3(uvec2(186211u, 65419u), virtual_gid);
           case 43:
           if(_GLF_DEAD(false))
            barrier();
           for(           -2.9;
 (mat2(-633.119, -400.268, 12.42, 3518.4649) != mat2(-402.553, 72.00, 436.210, 89.73)); mat4(outerProduct(vec4(7.6, 3.7, 4.8, 2.8), vec3(3.1, -95.71, 2.7))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             (mat3x2(mat4(-5.8, -6.7, -751.461, 2.3, -32.86, -391.186, 38.42, 6388.8335, -5.1, -6955.7367, 5445.3857, -4.9, -8591.0865, -6.2, 4.9, 0.5)) * _GLF_SWITCH_0_103v);
             ivec3 _GLF_SWITCH_0_104v[93], _GLF_SWITCH_0_105v, _GLF_SWITCH_0_106v;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             ;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           case 48:
           case 8:
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           mat3x2 _GLF_SWITCH_0_107v, _GLF_SWITCH_0_108v;
           case 96:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           mat3x2 _GLF_SWITCH_0_109v, _GLF_SWITCH_0_110v[19], _GLF_SWITCH_0_111v;
           case 66:
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             barrier();
            }
           break;
           case 86:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           mat2x4(-6.4, 74.05, -3605.9357, dot(vec4(-9.2, -821.746, 5.5, -855.826), vec4(-92.66, 7.9, -341.369, 4.5)), ldexp(3.9, int(num_workgroup)), -5.6, -1502.8819, -9.2);
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           default:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             1;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(           mat4(-6.0, 481.687, 2.7, -1.7, -97.91, 94.82, 7.2, 146.102, -0.2, -724.406, 749.921, 3.7, -9176.0187, -5.0, 22.16, -0.2);
 true; bvec4(false, false, false, true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             uvec3(194143u, 183337u, 126481u);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             mat3x4(-3540.2422, -458.339, -997.898, -0.3, -35.97, -3.8, -21.69, 4497.2687, 819.279, 6.3, -23.62, -3529.0853);
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       uvec3 _GLF_SWITCH_0_112v, _GLF_SWITCH_0_113v;
       _GLF_SWITCH_0_112v;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(         ivec4(51135, -72234, 81571, -15568);
 false; ivec3(59508, -93785, -48789))
          {
           ;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
              break;
             barrier();
            }
           vec4(-887.130, -60.77, -9.8, 8915.3281);
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           clamp(uvec4(192967u, 163410u, 174276u, 108950u), virtual_gid, workgroup_base);
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 barrier();
                }
              }
            }
           else
            {
            }
           uvec3 _GLF_SWITCH_0_114v, _GLF_SWITCH_0_115v;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             mat4x2 _GLF_SWITCH_0_116v, _GLF_SWITCH_0_117v[43], _GLF_SWITCH_0_118v;
             _GLF_struct_32 _GLF_struct_replacement_32;
             mat4x3 _GLF_SWITCH_0_120v;
             _GLF_SWITCH_0_120v;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             vec3 _GLF_SWITCH_0_121v, _GLF_SWITCH_0_122v[59];
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           atanh(asin(vec2(7.4, 64.50)));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         while(true)
          {
           switch(_GLF_SWITCH(0))
            {
             case 25:
             vec2 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v[85];
             case 8:
             mat4(3.7, -482.058, -0.3, -7632.1082, -44.33, 922.987, -223.876, -635.010, 4404.9895, 558.263, -3.8, -7203.1984, -5.3, -4827.3149, 553.207, -6.7);
             case 0:
             case 61:
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(0), int(0)))))
                {
                 case 66:
                 ((-227.166 + mat4x2(9.9, -1.8, -4547.0864, 9973.2622, -6526.9766, -0.2, 60.65, -4.0)) / -1942.7149);
                 case 10:
                 ;
                 case 0:
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 case 60:
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   break;
                  }
                 case 21:
                 case 27:
                 case 81:
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                 case 26:
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 vec3(-362.486, -8.1, -145.886);
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  return;
                 case 77:
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 ivec2(80476, 88781);
                 if(_GLF_DEAD(false))
                  barrier();
                 default:
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  break;
                 1;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             break;
             case 39:
             if(_GLF_DEAD(false))
              return;
             ;
             default:
             1;
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       {
        vec3(-1.8, -7.6, -6.4).brbg;
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          switch(_GLF_SWITCH(0))
           {
            case 93:
            bvec2 _GLF_SWITCH_1_0v[98];
            case 57:
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
             {
              mat2x4(-27.40, -3.3, 67.90, 405.921, 4.7, -8.3, 1135.0589, -6804.7036);
             }
            else
             {
             }
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             return;
            case 0:
            case 96:
            case 77:
            if(_GLF_DEAD(false))
             barrier();
            case 48:
            case 30:
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
             {
              if(_GLF_DEAD(false))
               return;
             }
            do
             {
              if(_GLF_DEAD(false))
               break;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              (ivec3(-8553, 38726, -37563) * ivec3(37081, -33301, 68340));
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                 }
                else
                 {
                 }
                return;
               }
              return;
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                 }
                else
                 {
                  barrier();
                 }
               }
             }
            if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
             barrier();
            break;
            default:
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             barrier();
            1;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            if(_GLF_DEAD(false))
             return;
           }
         }
        else
         {
         }
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               {
                do
                 {
                  return;
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              return;
             }
           }
         }
        else
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             return;
            barrier();
           }
         }
        if(_GLF_DEAD(false))
         return;
        if(_GLF_DEAD(false))
         {
          if(_GLF_DEAD(false))
           return;
          do
           {
            barrier();
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         }
        35260;
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_DEAD(false))
         return;
        ;
        if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
         {
         }
        else
         {
          for(uvec4 _GLF_SWITCH_0_123v, _GLF_SWITCH_0_124v; false; mat2x4(mat4x2(528.810, 562.079, 881.902, 6.6, -622.281, -12.99, -1.1, -2304.3016)))
           {
            if(_GLF_DEAD(false))
             return;
           }
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            return;
           }
         }
        vec2 _GLF_SWITCH_0_125v[60], _GLF_SWITCH_0_126v, _GLF_SWITCH_0_127v;
        if(_GLF_DEAD(false))
         barrier();
        for(        (true || true);
 false; (vec4(-2.6, 8.3, 29.26, -415.441) == vec4(0.7, 4105.9907, 3683.2858, -3.3)))
         {
          vec3(-1580.0489, 3958.8487, -9739.0255);
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           continue;
          ivec3 _GLF_SWITCH_0_128v, _GLF_SWITCH_0_129v[65], _GLF_SWITCH_0_130v;
          mat4x3 _GLF_SWITCH_0_131v, _GLF_SWITCH_0_132v, _GLF_SWITCH_0_133v;
          bvec2 _GLF_SWITCH_0_134v[3], _GLF_SWITCH_0_135v;
          int _GLF_SWITCH_0_136v, _GLF_SWITCH_0_137v, _GLF_SWITCH_0_138v[75];
          (+ mat4x2(mat3x4(-46.26, 6.8, -6108.4869, -4.5, 2306.8860, 7.1, -9.9, 7.7, 6106.9621, 59.05, -673.256, -12.18)));
          if(_GLF_DEAD(false))
           barrier();
         }
       }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     default:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     1;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
