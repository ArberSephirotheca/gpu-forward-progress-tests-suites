#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 uint read_1;
 mat4x2 _f0;
} ;

struct _GLF_struct_9 {
 mat2 _f0;
 mat3x2 _f1;
 mat3x4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_8 {
 int _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 vec2 _f1;
 bool _f2;
 mat4x2 _f3;
 mat2x3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 uvec3 _f1;
 uint subgroup_local_id;
 float _f2;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 bvec3 _f1;
 mat4x2 _f2;
 mat3x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 ivec4 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_6 {
 ivec3 _f0;
 mat2x3 _f1;
 mat4 _f2;
 mat4x3 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 mat2 _f1;
 mat3 _f2;
 mat4x2 _f3;
 mat2 _f4;
 uvec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 bvec2 _f1;
 _GLF_struct_1 _f2;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(852.987)), bool(false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-82.64)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-82.64)))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-82.64)))))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-82.64))))))))) || false)), _GLF_IDENTITY(true, ! (! (true))), true, false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1])))))), mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))))) / vec2(1.0, 1.0))[0], injectionSwitch[1]), mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))).y))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((! ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))), true && (bool(bool((! ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))))))))))) || false), true, false, true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3390.3537))))), 0.0) + _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp(((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3390.3537))))), 0.0) + _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp(((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))))).y)) || false))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, false, true))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))[0], injectionSwitch[1])).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) + _GLF_IDENTITY(0, min(0, 0)), int(ivec2(_GLF_IDENTITY((_injected_loop_counter) + _GLF_IDENTITY(0, min(0, 0)), max((_injected_loop_counter) + _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 | (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) / 1))) << _GLF_IDENTITY(int(8), int(8))))), min(0, 0)), (_injected_loop_counter) + _GLF_IDENTITY(0, min(0, 0)))), 1)))) != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false || (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, true && (true)))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), (false || (! (false))) || false)))), false || (false))))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), true && (bool(bvec2(true, false))))))) || false))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) * vec2(1.0, 1.0))).x, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
  barrier();
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id, (true ? GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id : _GLF_FUZZED(7542u)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.35), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.7)), bvec2(true, false))).y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))) || false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))))))))), true && (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(false))), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), (false || (_GLF_IDENTITY(false, true && (false)))) && true)), (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.6)), float(injectionSwitch.x), bool(true))), length(0.0), abs(abs(0.0)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), _GLF_IDENTITY(float(mat4x3(float(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)), max(float(mat4x3(float(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(float(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))), 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), (false || (_GLF_IDENTITY(false, true && (false)))) && true)), (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true)), ! (! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, true))))))))), true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.z = _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), false), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(-4913.7030)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x), bool(true))))), ~ (~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(-4913.7030)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x), bool(true)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(false, (false) && true))) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, true, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)) && true))) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))), false, true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(false, ! (! (false))))))), ((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(false, ! (! (false)))))))) || false)) && true))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), float(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), 1.0)))), float(_GLF_FUZZED(3.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(float(true))), bool(false))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), float(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), 1.0)))), float(_GLF_FUZZED(3.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(float(true))), bool(false))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false)), (mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))) + 0.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), float(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(4.6)), bool(false))), 1.0)))), float(_GLF_IDENTITY(_GLF_FUZZED(3.4), (_GLF_FUZZED(3.4)) - 0.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(float(true))), bool(false))) > injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), false || (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  return;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_10(_GLF_struct_7(vec4(1.0), vec2(1.0), true, mat4x2(1.0), mat2x3(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(length(vec4(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0)), _GLF_IDENTITY(min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, _GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0)))), 0.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0)))), mix(float(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0))))), float(_GLF_FUZZED((false ? vec4(6.6, 6503.7502, 8.1, 442.011).b : 415.957))), bool(false))), 0.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0)))), mix(float(_GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), min((0.0), (0.0))))), float(_GLF_FUZZED((false ? vec4(6.6, 6503.7502, 8.1, 442.011).b : 415.957))), bool(false))), 0.0, 0.0))) - vec4(0.0, 0.0, 0.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) + tan(0.0))) * 1.0)))), ivec3(1)), _GLF_struct_8(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, ~ (~ (1))), 1)), min(1, 1)), mat3x4(1.0)), _GLF_struct_9(mat2(1.0), mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat3x4(1.0), vec4(1.0))), uvec3(1u), gl_SubgroupInvocationID, 1.0);
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat4x2(1.0), bvec2(true), _GLF_struct_1(bvec2(true), _GLF_struct_0(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(mat3x4(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 1.0, 1.0, 0.0, abs(log(1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-29.29), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), float(mat3x2(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(-6354.6363)), float(_GLF_IDENTITY(_GLF_FUZZED(-29.29), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), float(mat3x2(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0, 1.0))))), bool(true)))), _GLF_IDENTITY(float(1.0), min(float(1.0), _GLF_IDENTITY(float(1.0), clamp(_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED(349.588)), bool(false))), float(1.0), float(1.0))))), bool(true)), mix(float(mix(float(_GLF_IDENTITY(_GLF_FUZZED(-29.29), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), float(mat3x2(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), mix(vec3(_GLF_FUZZED(26.87), (vec3(0.0, 0.0, 1.0))[1], _GLF_FUZZED(-11.69)), vec3((vec3(0.0, 0.0, 1.0))[0], _GLF_FUZZED(71.57), _GLF_IDENTITY((vec3(0.0, 0.0, 1.0))[2], 1.0 * ((vec3(0.0, 0.0, 1.0))[2]))), bvec3(true, false, true))))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, cos(0.0), 1.0, 1.0, 1.0))))), float(1.0), bool(true))), float(_GLF_FUZZED(2199.7932)), _GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))))), (mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(-29.29), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.1)))) / 1.0), 0.0))) / 1.0), 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), float(mat3x2(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))) - vec3(0.0, 0.0, 0.0)), vec3(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0))), 1.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0, 1.0))))), float(1.0), bool(true)), mix(float(mix(float(_GLF_IDENTITY(_GLF_FUZZED(-29.29), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), mat3(mat4x3(mat3(1.0)))) * (vec3(0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), max(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9.2)), bool(false)))) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-391.719, 9274.0774, -6142.8021))))))), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0))))), vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))))), float(mat2x3(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), max(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (vec3(0.0, 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 1.0))))), 1.0, 0.0)), float(mat3x2(float(mat3x4(_GLF_FUZZED(-29.29), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0, 1.0))))), float(1.0), bool(true))), float(_GLF_FUZZED(2199.7932)), bool(false)))))) - mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), mat3(mat3(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) * mat3(1.0))))), mat3(mat3(_GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(9901.5854, 808.877, 71.31, -6420.4857, -407.552, -0.1, 7790.6599, -657.362, -179.825)) : _GLF_IDENTITY(mat3(1.0), mat3(1.0) * (mat3(1.0)))))))), mat4x2(1.0), mat2(1.0), uvec4(1u), _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(true), true))))))))))), gl_NumWorkGroups.x);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(ivec3(1), mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, min(1.0, 1.0))), max((1.0), (1.0))) * 1.0)), mat4(1.0), mat4x3(1.0), _GLF_struct_5(mat4(1.0), ivec4(1), _GLF_struct_3(mat3x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) - 0.0)), bvec3(true), mat4x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(97.49))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), float(mat4x2(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))) - 0.0) : _GLF_FUZZED(8.5)))))), mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(9111.6602, (9111.6602) + 0.0)) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), _GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0))), _GLF_struct_4(ivec2(1), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, true, _GLF_IDENTITY(false, (false) && true))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(true, false || (true))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, false || (true))) || false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false)))))))), (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(true, false || (true))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_IDENTITY(true, false || (true))) || false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false))))))))) || false))) ? gl_WorkGroupID.x : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) | _GLF_IDENTITY((workgroup_size), (true ? (workgroup_size) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(35145u) : _GLF_FUZZED(workgroup_size)))))))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))))))))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.w = _GLF_struct_replacement_6._f4._f3.workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-70.09))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false)))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.w, uint(uvec2(_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.w) | (_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.w) << 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 1.0), max(vec3(injectionSwitch.y, 1.0, 1.0), vec3(injectionSwitch.y, 1.0, 1.0)))))))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), true && (false)))))))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool(false))) || false))))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-44.28) : injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.z, 0u ^ (GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.z)) + _GLF_struct_replacement_11.subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u)), (uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u))) >> uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u)), _GLF_IDENTITY((uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u))) >> uvec4(0u, 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec4(145331u, 5111u, 139539u, 196547u)) : (uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u))) >> uvec4(0u, 0u, 0u, 0u))))), uint(_GLF_IDENTITY(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u)), (uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u))) >> uvec4(0u, _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) | 0u))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u))))), 0u))), uint(_GLF_IDENTITY(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u)), (uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base), 1u, 0u, (1u ^ 0u))) >> uvec4(0u, 0u, 0u, 0u))))))) + GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.z + ((_GLF_IDENTITY(_GLF_struct_replacement_11.subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_11.subgroup_local_id, (_GLF_struct_replacement_11.subgroup_local_id) | (_GLF_struct_replacement_11.subgroup_local_id)), _GLF_IDENTITY(uint(uvec2(_GLF_struct_replacement_11.subgroup_local_id, 0u)), ~ (~ (uint(uvec2(_GLF_struct_replacement_11.subgroup_local_id, 0u))))))) >> 0u) + 1) % GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.z);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true)))))))) && true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
        barrier();
       do
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-5.7, -3652.2946)))).y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y)) && true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, 0 | (_GLF_IDENTITY(1 & 1, (1 & 1) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)) || false)))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.5)), bool(false))))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
                }
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))), (_GLF_DEAD(false)) || false))))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bvec2(bool(bool(injectionSwitch.x < injectionSwitch.y)), true))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8502.5828), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-75.81)), bvec2(true, false))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8502.5828), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))))[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-75.81)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false))))))).y))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)))))))))))))))
      barrier();
    }
  }
 else
  {
   do
    {
     GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.x = next_virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(97064u, 51301u, 143244u, 36212u)) : GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id)))), _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(97064u, 51301u, 143244u, 36212u)) : GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id))))) >> uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id) : (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))), 0.0, 0.0, 0.0, 0.0, 1.0, cos(sin(0.0)), 1.0))).x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(97064u, 51301u, 143244u, _GLF_IDENTITY(36212u, (36212u) | 0u))) : GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id))), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))), 0.0, 0.0, 0.0, 0.0, 1.0, cos(sin(0.0)), 1.0))).x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(97064u, 51301u, 143244u, _GLF_IDENTITY(36212u, (36212u) | 0u))) : GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id)))) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), _GLF_IDENTITY(uvec4(8u), (uvec4(8u)) | (uvec4(8u)))))))) >> uvec4(0u, 0u, 0u, 0u))))).x], uint(1), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), bool(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)))), false, false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0, sin(0.0), 0.0, 1.0, tan(0.0))), max(float(mat3x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0, sin(0.0), 0.0, 1.0, tan(0.0))), float(mat3x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0, sin(0.0), 0.0, 1.0, tan(0.0)))))), injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY(0, (0) | 0))))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), ~ (~ (int(0)))) : _GLF_FUZZED(-67406))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 ^ 1) ^ (_injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((_GLF_IDENTITY(false, ! (! (false))))) && true) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), true, true)))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) << (0 ^ 0))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           continue;
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(42044) : _injected_loop_counter)), _injected_loop_counter)) < _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) - 0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))) && true))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(vec4(-4.8, -8.3, 28.87, 7037.1558).g) : injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 1.0)), (true ? float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(1.5))), min(_GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 1.0)), (true ? float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(1.5))), _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 1.0)), (true ? float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(1.5))))))))))))
                  barrier();
                 return;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.7)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-165.428))), max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))) || (injectionSwitch.x > injectionSwitch.y))))));
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) - 0.0))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(smoothstep(vec2(528.006, -21.04), vec2(-8089.1036, -1.6), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), injectionSwitch, injectionSwitch)))).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(8), int(8))), 0 + (((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)))), ! (! (false)))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) | (0 & (45468 | 92881))), 64, 0), mat4x2(1.0));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) - 0) > 0, ! (! _GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))), ((_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0)))) && true)))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true, ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true) && true)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > 0, true, true, true)), ! (! (bool(bvec4(_injected_loop_counter > 0, true, true, true)))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > 0, true, true, true)), ! (! (bool(bvec4(_injected_loop_counter > 0, true, true, true))))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) || false, bool(bvec4((false) || false, true, false, true)))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) * 1.0) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), false, _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, false)), false, false, true)))))))) && true), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))), (((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6)))) - 0), _GLF_IDENTITY(true && (_GLF_IDENTITY(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))))))), (true && (_GLF_IDENTITY(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6))), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(_GLF_IDENTITY(6, 0 ^ (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))), (int(6)) << 0)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (-43807 & 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))) >> _GLF_IDENTITY(int(6), int(6)))))))))))) || _GLF_IDENTITY(false, true && (false))))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.x, (GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.x) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.x, (GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_12next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_id.x) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u)], uint(_GLF_struct_replacement_12.read_1 == read_2) + 1, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
