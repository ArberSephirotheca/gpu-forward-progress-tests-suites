#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))) && true))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), true, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), true, true, true)), false, true, false))))) && true))))
    barrier();
   return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(832.764), _GLF_FUZZED(-599.898)), bvec2(false, false))) : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec4((! (false)), false, false, true)), false || (bool(bvec4((! (false)), false, false, true))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (_GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false)))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bool(true)))) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
   return;
  }
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), (! ((! (false)))) && true))))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), (! ((! (false)))) && true))))), false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), (! ((! (false)))) && true))))), false, false)))))))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))), false, false))), false || (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) || false))), ((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) || false)))) || false) || _GLF_IDENTITY(false, ! (! (false)))))), false, false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), max(int(ivec2(0, 0)), int(ivec2(0, 0)))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (false))))) && true))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED((false ? -9.4 : -0.2))), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))), 0.0, 1.0, 0.0)), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0))) * mat2(1.0))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), mix(float(_GLF_FUZZED((false ? -9.4 : -0.2))), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))), 0.0, 1.0, 0.0)), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, determinant(mat4(cos(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0))) * mat2(1.0)))) / vec2(1.0, 1.0)).y))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), (vec3(injectionSwitch.x, 0.0, 0.0)) / vec3(1.0, 1.0, 1.0))), (true ? float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), (vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0)) / vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-8.8)))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - (0 >> _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) >> 0) & 1, 0 | (_GLF_IDENTITY(1 & 1, 0 ^ (_GLF_IDENTITY(1 & 1, max(1 & 1, 1 & 1)))))))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, true))), false))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) || false), false)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))), true && (bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), false || (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), true && (bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))), true && (bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))))), false, true))))))), false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          break;
        }
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) >> 0) >> _GLF_IDENTITY(int(7), int(7))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _injected_loop_counter, _injected_loop_counter)) < 1, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) | (_injected_loop_counter))) ^ 0) < 1)), false || (bool(bool(_injected_loop_counter < 1)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! (false)), false, true), bvec3(bvec4(bvec3(! (! (false)), false, true), false)))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))) && true))), true, true, true)))), (false) && true), false)), (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((false) && true) && true), true && ((false) && true))), false))) && true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), ((1)) >> 0), max(_GLF_IDENTITY(0 ^ _GLF_IDENTITY((1), ((1)) >> 0), (false ? _GLF_FUZZED(-84648) : 0 ^ _GLF_IDENTITY((1), ((1)) >> 0))), 0 ^ _GLF_IDENTITY((1), ((1)) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(60.63)), float(injectionSwitch.y), bool(true)))))) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) >> 0)) >> 0)))), int(5)))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, true, false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) && true)) && true))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) && true)) && true))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) && true)) && true))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))), false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) && true)) && true))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))), false)))))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), ! (! (false))), _GLF_IDENTITY(true, false || (true)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true, false), true)))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), ! (! (false))), _GLF_IDENTITY(true, false || (true)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true, false), true)))))), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))), false)), bool(bool(bool(bvec2(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))), false)))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), true, false), true)))))), true)))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, false)), (bool(bvec3(false, true, false))) && true)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5.8, 93.95)))).y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true, false, true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(-41.91, _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, max(-41.91, -41.91)), -41.91)), -41.91)))), -41.91))) : injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(-41.91, _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, max(-41.91, -41.91)), -41.91)), -41.91)))), -41.91))) : injectionSwitch.x)) > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(-41.91, _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)), (false ? _GLF_FUZZED(-4.5) : _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)))), -41.91)))), -41.91))) : injectionSwitch.x), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(_GLF_IDENTITY(-41.91, float(float(-41.91))), _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)), -41.91)))), -41.91))) : injectionSwitch.x), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(_GLF_IDENTITY(-41.91, float(float(-41.91))), _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)), -41.91)))), -41.91))) : injectionSwitch.x)) / sqrt(1.0))) * 1.0)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-13.97)), float(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))), bool(true))) : _GLF_FUZZED(-783.485))))).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-13.97)), float(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))), bool(true))) : _GLF_FUZZED(-783.485))))).y) + 0.0)), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(-41.91, _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)), (false ? _GLF_FUZZED(-4.5) : _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)))), -41.91)))), -41.91))) : injectionSwitch.x), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(_GLF_IDENTITY(-41.91, float(float(-41.91))), _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)), -41.91)))), -41.91))) : injectionSwitch.x), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-41.91, clamp(_GLF_IDENTITY(-41.91, float(float(-41.91))), _GLF_IDENTITY(-41.91, max(-41.91, _GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(_GLF_IDENTITY(-41.91, min(_GLF_IDENTITY(-41.91, (_GLF_IDENTITY(-41.91, (-41.91) / 1.0)) / 1.0), -41.91)), max(-41.91, -41.91)), -41.91)), -41.91)))), -41.91))) : injectionSwitch.x)) / sqrt(1.0))) * 1.0)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-13.97)), float(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))), bool(true))) : _GLF_FUZZED(-783.485))))).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-13.97)), float(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))), bool(true))) : _GLF_FUZZED(-783.485))))).y) + 0.0))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-41.91) : injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-41.91) : injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-41.91) : injectionSwitch.x)) > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-41.91) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (0.0) + 0.0)) * 1.0, ((_GLF_IDENTITY(0.0, (0.0) + 0.0)) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3.9)))) - 0.0))))), injectionSwitch.y))) && true))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(7376.2327))) > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -96714)); _injected_loop_counter --)
              {
               return;
              }
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.7))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) && true))), true, true, false))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-151.031, 0.4))))), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))), (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))) && true))))))).y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-0.6, -6001.8015, 8.0, -2.1)) : mat2(1.0))) * (injectionSwitch), _GLF_IDENTITY(mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), vec2(vec3(_GLF_IDENTITY(mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), min(_GLF_IDENTITY(mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), clamp(mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), 0.0))))).y), _GLF_IDENTITY(true, true && (true)), false), bvec3(bvec4(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], _GLF_FUZZED(9.7)), vec2(_GLF_FUZZED(-9.8), (mat2(1.0) * (injectionSwitch))[1]), bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))).y), _GLF_IDENTITY(true, true && (true)), false), true))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
          return;
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec2(0, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))))))))) + 0)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, (7) / 1), ~ (~ (7))))), ~ (~ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) + 0)), int(_GLF_IDENTITY(7, ~ (~ (7))))))))) | _GLF_IDENTITY(1, (1) | (1)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0)), min(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0)), max(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0)), float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0)), min(float(vec4(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0)), float(vec4(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-21128)))), int(0))), max(_GLF_IDENTITY(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-21128)))), int(0))), 0 | (((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-21128)))), int(0))))), (false ? _GLF_FUZZED(-99148) : _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-21128)))), _GLF_IDENTITY(int(0), (int(0)) >> (1 ^ 1)))), 0 | (((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-21128)))), int(0))))))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 0 ^ (0)) : _GLF_FUZZED(-21128)))), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))) || false))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))) && true))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(true, true, true), _GLF_IDENTITY(true, (true) || false)))))))), true && (bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(true, true, true), true)))))))))) && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, (true) && true), true)))))), bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), true, false), bvec3(bvec4(bvec3((false), true, false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3((false), true, false), bvec3(bvec4(bvec3((false), true, false), true)))))))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-23.30) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-0.0, 315.175).s)), float(injectionSwitch.y), bool(true)))))))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED((1997.9390 + 6.9))), vec2(_GLF_FUZZED(7.2), (injectionSwitch)[1]), bvec2(false, true)), (mix(vec2((injectionSwitch)[0], _GLF_FUZZED((_GLF_IDENTITY(1997.9390, (1997.9390) * 1.0) + 6.9))), vec2(_GLF_FUZZED(7.2), (injectionSwitch)[1]), bvec2(false, true))) / vec2(1.0, 1.0)))[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(roundEven(289.987)) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((1997.9390 + 6.9))), vec2(_GLF_FUZZED(7.2), (injectionSwitch)[1]), bvec2(false, true)))[0])), _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), (false ? _GLF_FUZZED(mat3x4(153.866, 9409.0954, -80.61, -7.4, -4.6, 2.2, -73.68, 5.5, -1.0, -4.0, 374.809, -5631.0531)) : mat3x4(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))) / _GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))), float(mat3(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))[1]) / 1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), (false ? _GLF_FUZZED(mat3x4(153.866, 9409.0954, -80.61, -7.4, -4.6, 2.2, -73.68, 5.5, -1.0, -4.0, 374.809, -5631.0531)) : mat3x4(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-4.0))), 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) + vec2(0.0, 0.0), (((injectionSwitch)) + vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0)), 0.0)) - vec2(0.0, 0.0))) - vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0)).y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) ^ (0 | 0))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-41848, (0 | 0) + (-41848)) & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false))), true, true, false))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (true)) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false, false, false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))))), (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false))))))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), bool(bool(! (_GLF_IDENTITY((false), true && ((false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))) && true), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)))), ! (! (bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(! (_GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false))))))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED((- 80.32)), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))) && true))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) >> (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(uint(4u), 0u, 1u, 0u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(uvec4(uint(4u), 0u, 1u, 0u))), (~ (uint(uvec4(uint(4u), 0u, 1u, 0u)))) | (~ (uint(uvec4(uint(4u), 0u, 1u, 0u))))), (_GLF_IDENTITY(~ (uint(uvec4(uint(4u), 0u, 1u, 0u))), (~ (uint(uvec4(uint(4u), 0u, 1u, 0u)))) | (~ (uint(uvec4(uint(4u), 0u, 1u, 0u)))))) | (_GLF_IDENTITY(~ (uint(uvec4(uint(4u), 0u, 1u, 0u))), (~ (uint(uvec4(uint(4u), 0u, 1u, 0u)))) | (~ (uint(uvec4(uint(4u), 0u, 1u, 0u))))))))), (uint(uvec4(uint(4u), 0u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) >> 0u) : _GLF_FUZZED(workgroup_size))), 0u))) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uint(4u), (uint(4u)) | (_GLF_IDENTITY(uint(4u), 0u + (uint(4u)))))), ~ (~ ((_GLF_IDENTITY(uint(4u), (uint(4u)) | (_GLF_IDENTITY(uint(4u), 0u + (uint(4u))))))))), min((_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u | (4u))), (uint(_GLF_IDENTITY(4u, ~ (~ _GLF_IDENTITY((4u), min(_GLF_IDENTITY((4u), (_GLF_IDENTITY((4u), min((4u), (4u)))) / 1u), _GLF_IDENTITY((4u), ((4u)) / 1u))))))) | (_GLF_IDENTITY(uint(4u), 0u + (uint(4u)))))), (_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), clamp(_GLF_IDENTITY(uint(4u), (uint(4u)) - 0u), uint(4u), uint(4u)))) | (_GLF_IDENTITY(uint(4u), 0u + _GLF_IDENTITY((uint(_GLF_IDENTITY(4u, uint(_GLF_IDENTITY(uvec3(4u, 1u, 0u), (uvec3(4u, 1u, 0u)) | uvec3(0u, 0u, 0u)))))), ((uint(_GLF_IDENTITY(4u, uint(_GLF_IDENTITY(uvec3(4u, 1u, 0u), (uvec3(4u, 1u, 0u)) | uvec3(0u, 0u, 0u))))))) ^ 0u))))))) | (_GLF_IDENTITY(uint(4u), (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, 0u ^ (1u))))) | (uint(4u)))))))) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) << 0u, 0u ^ ((workgroup_id) << 0u))), (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(0.2, clamp(0.2, 0.2, 0.2))), (injectionSwitch)[1]), vec2(1.0, 1.0) * (vec2(_GLF_FUZZED(_GLF_IDENTITY(0.2, clamp(0.2, 0.2, 0.2))), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.6)), bvec2(true, false))).y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(false, true)))))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))) && true)), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))))))))))), true))))), _GLF_IDENTITY(false, ! (! (false))), true, false)))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tanh((-0.9 - -66.97))) : injectionSwitch.y))))));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false)))))), bool(bvec2(_GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false)))))), false)))) && true)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3(bool(_GLF_WRAPPED_IF_FALSE(false)), false, true)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3(bool(_GLF_WRAPPED_IF_FALSE(false)), false, true)))))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))), ! (! (bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))), false)))), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))), ! (! (bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.3)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) ^ 1, (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) ^ 1, (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) ^ 1) / 1)) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))), ~ (~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))), (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))))) | 0)) - 0))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bool((_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bool((_GLF_IDENTITY(false, false || (false))))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bool((_GLF_IDENTITY(false, false || (false)))))))) && true)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), 1, 0))) != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.0)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true))))).y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id)))), (1u ^ 1u) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (subgroup_id)), ((~ (subgroup_id))) >> 0u), _GLF_IDENTITY((~ (~ (subgroup_id))), min(_GLF_IDENTITY((~ (~ (subgroup_id))), max((~ (~ (subgroup_id))), (~ (~ (subgroup_id))))), _GLF_IDENTITY((~ (~ (subgroup_id))), min((~ (~ (subgroup_id))), (~ (~ (subgroup_id))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) << (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) - 0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))) || false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y)))).y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), mix(float(_GLF_FUZZED((_GLF_IDENTITY(vec2(-2.0, -76.39).t - 5.1, 0.0 + (vec2(-2.0, -76.39).t - 5.1))))), float(injectionSwitch.y), bool(true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), false || (_GLF_IDENTITY((! (! (false))), false || ((! (! (false))))))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-5.2)), bool(false)))))) - 0.0) > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(94.93), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(33049u))), vec2(_GLF_FUZZED(16.93), (injectionSwitch)[1]), bvec2(false, true))))).x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(94.93), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(33049u))), vec2(_GLF_FUZZED(16.93), (injectionSwitch)[1]), bvec2(false, true))))).x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, true, false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (false ? _GLF_FUZZED(31855) : _GLF_IDENTITY(1, ~ (~ (1)))))) | (_GLF_IDENTITY(1, ~ (~ (1)))))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), true, false))))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u)))))))), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u)))))))), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u))))))))) | 0u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u)))))))), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u))))))))) | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u)))))))))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) | (~ (subgroup_id))))) * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size)), 1u, 0u, 0u)))))))))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, 1 * (1)))), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (0u) - 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(182927u) : (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (0u) - 0u))))), _GLF_IDENTITY(max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)))), 0u | (_GLF_IDENTITY(max((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (0u | 0u) + (subgroup_local_id + 1))), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u & 40065u)) + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)))), (max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 0u))))))))))) / 1u)))))) >> 0u)) + 0u) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_id) : 0u), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_id) : 0u), clamp((false ? _GLF_FUZZED(workgroup_id) : 0u), (false ? _GLF_FUZZED(workgroup_id) : 0u), (false ? _GLF_FUZZED(workgroup_id) : 0u)))))))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) - 0u))))))), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) - 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) - 0u))))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), min(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))))) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) - 0u))))))))))) >> 0u, min(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1)))), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> (0u & 105075u)))))) >> _GLF_IDENTITY(0u, (0u) - 0u)))) + 0u), (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec2(149618u, 191923u) % uvec2(53959u, 30107u)).g) : subgroup_local_id + 1))), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | 0u) >> _GLF_IDENTITY(0u, (0u) - 0u))))), ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), ~ (~ (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u + (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (true ? (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) : _GLF_FUZZED(num_workgroup))))), 0u)))))), max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, max(0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)), max(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))))))) >> 0u, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(2400) : _GLF_IDENTITY(1, clamp(1, 1, 1)))))), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (((subgroup_local_id + 1)))) >> _GLF_IDENTITY(0u, (0u) - 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1)), 1))), ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1)), 1)))) | ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1)), 1))))), ((subgroup_local_id + 1)) | 0u)) | ((subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1), 1u, 0u, _GLF_IDENTITY(1u, max(1u, 1u))), (uvec4((subgroup_local_id + 1), 1u, 0u, 1u)) | (uvec4((subgroup_local_id + 1), 1u, 0u, 1u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((0u), max((0u), (0u))))) - 0u), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, ((0u) - 0u) + 0u))))))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))))))) >> 0u, (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1)), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), clamp(((subgroup_local_id + 1)), ((subgroup_local_id + 1)), ((subgroup_local_id + 1)))) >> _GLF_IDENTITY(0u, (0u) - 0u))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)))) << 0u), ~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)), 0u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u) : _GLF_FUZZED(128776u))))) >> _GLF_IDENTITY(0u, (0u) - 0u))), ~ (~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))))))))))), _GLF_IDENTITY(max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 ^ (1))))), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)))), (max((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 ^ (1))))), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))))) ^ 0u)))) >> 0u) | (_GLF_IDENTITY(((subgroup_local_id + 1)), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | ((0u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), max(_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | ((0u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) | ((0u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u)), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, (0u) - 0u)) | 0u))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) - 0u))))), (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / (1u & 1u)), 0u, 0u)))) >> _GLF_IDENTITY(0u, (0u) - 0u))))))) >> 0u)))))) + _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 1u * (0u))))) % subgroup_size))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.5)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
              return;
            }
           else
            {
             barrier();
            }
          }
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), false, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), false, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), false, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), false, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0))))), false), false, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false || (false), (false || (false)) && true))), ! (! ((! (_GLF_IDENTITY(false || (false), (false || (false)) && true))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 4, _GLF_IDENTITY(64, (64) - 0), 0);
 for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), int(5))), 0 ^ (_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), int(5))), 0 ^ ((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, ~ (~ (7)))))) << 0))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((true && (_GLF_IDENTITY(false, false || (false)))), false || ((true && (_GLF_IDENTITY(false, false || (false)))))), false || (! (true && (false)))))), ! (! (_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), false || (_GLF_IDENTITY(! (true && (false)), bool(bvec4(! (true && (false)), false, true, true)))))))))))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2((_GLF_IDENTITY(false, (false) && true)), true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-49.63))), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, bool(bvec4((_GLF_IDENTITY(false, true && (false))) && true, false, true, true))))));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-62.88)), bvec2(true, _GLF_IDENTITY(false, bool(bvec2(false, true)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (true) && true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || false)))) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (0) + int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false), (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)) || false)))))), false, false)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5093.8084) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((5.3 / vec2(-4.5, -958.311))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))).y))) || false)))
        continue;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))))))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))))) && true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec4(0.0, log(1.0), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, log(1.0), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))));
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5047.2157)), float(1.0), bool(true))))))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
            barrier();
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))) || false)) || false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), _GLF_IDENTITY(true, ! (! (true))) && (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))) || false)) || false))))))
                barrier();
               return;
              }
             return;
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          break;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), true, false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))) || (_GLF_IDENTITY(false, true && (false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, false, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]))) - 0.0), injectionSwitch[1])).y)))) && true))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != 0, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != 0), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != 0))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), (! (read_1 == read_2)) || false)) || false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (read_1 == read_2)) || _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false || ((! (read_1 == read_2)) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((! (read_1 == read_2)) || _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false || ((! (read_1 == read_2)) || false)))), (_GLF_IDENTITY(! ((_GLF_IDENTITY((! (read_1 == read_2)) || _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false || ((! (read_1 == read_2)) || false)))), ! (! (! ((_GLF_IDENTITY((! (read_1 == read_2)) || _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false || ((! (read_1 == read_2)) || false)))))))) && true))), true && (! (_GLF_IDENTITY((! _GLF_IDENTITY((read_1 == read_2), false || ((read_1 == read_2)))) || false, false || ((! _GLF_IDENTITY((read_1 == read_2), false || ((read_1 == read_2)))) || false))))))))))) + 1, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), (_GLF_IDENTITY(64, min(64, 64))) * 1), 4);
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), true)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), true))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), (! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))) || false))))), true), bvec2(bvec2(bvec2(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || (_GLF_DEAD(false)))) && true)) || false))
    break;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
        return;
       return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_ONE(1.0, injectionSwitch.y))))))
        return;
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec2((false) && true, true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((false) && true, true)), bool(bvec3(bool(bvec2((false) && true, true)), true, false))), (_GLF_IDENTITY(bool(bvec2((false) && true, true)), bool(bvec3(bool(bvec2((false) && true, true)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))))), false)))) && true))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0)))).y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))), true && (false))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(dot(vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), vec2(0.0, 1.0)), dot(vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) - vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 1.0, 1.0, 1.0, 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) - vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 1.0, 1.0, 1.0, 1.0))))))), 1.0, 0.0, 1.0))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true, false))), true, false, false)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true, false))), true, false, false)))))))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))))), false)), ! (! (bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))))), false)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), true && (_GLF_IDENTITY(false, false || (false))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), ! (! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)))))))))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
                  continue;
                 barrier();
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))));
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3723.3434, -2.2)) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(24.49)), bool(false))), injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(_GLF_IDENTITY(float(injectionSwitch[0]), (false ? _GLF_FUZZED(-8.3) : float(injectionSwitch[0]))), float(_GLF_FUZZED(24.49)), bool(false))), injectionSwitch[1]))) / vec2(1.0, 1.0)).x > injectionSwitch.y, false, true, false)))) && true))), _GLF_IDENTITY(true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0)), dot(vec2(exp(0.0), 0.0), vec2(1.0, 0.0))) * (float(injectionSwitch.y))), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)))))), true && (true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(1.7)), float(mat2(float(_GLF_FUZZED(1.7)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, sqrt(1.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, sqrt(1.0)))), 0.0))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), false, true)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(1.7)), float(mat2(float(_GLF_FUZZED(1.7)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, sqrt(1.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, sqrt(1.0)))), 0.0))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), false, true)))))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(1.7)), float(mat2(float(_GLF_FUZZED(1.7)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, sqrt(1.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, sqrt(1.0)))), 0.0))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), false, true))))))) || false))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, _GLF_IDENTITY(false, false || (false))))), false, true))))))))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))), false, true), true))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(4.6), _GLF_FUZZED(-4.6)), bvec2(false, false))) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(875.528), (((injectionSwitch) * mat2(1.0)))[1]), vec2((((injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(2110.6396)), bvec2(true, false))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))))) - vec2(0.0, 0.0))))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - sqrt(vec2(0.0, 0.0))) * mat2(1.0), max((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(4.6), _GLF_FUZZED(-4.6)), bvec2(false, false))) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(875.528), (((injectionSwitch) * mat2(1.0)))[1]), vec2((((injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(2110.6396)), bvec2(true, false))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))))) - vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(4.6), _GLF_FUZZED(-4.6)), bvec2(false, false))) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(875.528), (((injectionSwitch) * mat2(1.0)))[1]), vec2((((injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(2110.6396)), bvec2(true, false))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))))) - vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(4.6), _GLF_FUZZED(-4.6)), bvec2(false, false))) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(875.528), (((injectionSwitch) * mat2(1.0)))[1]), vec2((((injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED(2110.6396)), bvec2(true, false))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))))) - vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(1025.0611), _GLF_FUZZED(904.320)), bvec2(false, false)))))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bool(((injectionSwitch.x > injectionSwitch.y)))), true && (bool(bool(((injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, sin(0.0), 0.0)), (true ? _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, sin(0.0), 0.0)), max(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, sin(0.0), 0.0)), (vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, sin(0.0), 0.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, sin(0.0), 0.0)), vec2(vec3(vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, sin(0.0), 0.0)), 0.0))))) : _GLF_FUZZED(vec2(467.955, 150.579))))).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(bool(bvec4(false, true, false, false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ((_GLF_IDENTITY(false, (false) || false)) && true) && true), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ((_GLF_IDENTITY(false, (false) || false)) && true) && true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, exp(0.0), 1.0, length(vec3(0.0, 0.0, 0.0))), (mat3x2(injectionSwitch, 0.0, exp(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, exp(0.0), 1.0, length(vec3(0.0, 0.0, 0.0))), (mat3x2(injectionSwitch, 0.0, exp(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
}
