#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8741.5029, -3.6)))))), 1.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id, (GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id) / 1u)) - 0u), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id, (GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id) / 1u)) - 0u)) - (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(0u, _GLF_IDENTITY((1u ^ 1u) ^ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) * _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, 0u | (1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))))))) | ((0u)))) ^ 0u), 1u * (_GLF_IDENTITY((1u ^ 1u) ^ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) * 1u)) | ((0u)))) ^ 0u), min((1u ^ 1u) ^ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), _GLF_IDENTITY(((0u)) * 1u, max(((0u)) * 1u, ((0u)) * 1u)))) | ((0u)))) ^ 0u), _GLF_IDENTITY((1u ^ 1u) ^ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) * 1u)) | ((0u)))) ^ 0u), 0u | ((1u ^ 1u) ^ _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ((0u)) * 1u)) | ((0u)))) ^ 0u)))))))) | (GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))), ! (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))))))))) && true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))), ! (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))))))))) && true)), bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))), ! (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))))))))) && true))))), true))))), (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)) && true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), false || (bool(bvec4(false, true, false, true))))))) || (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, false || (false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), _GLF_IDENTITY(false, bool(bvec3(false, false, false))) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(-61.72) : clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) * 1.0) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), true, false, false)), bool(bvec3(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), true, false, false)), true, true)))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
uint subgroup_size = 16;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, true)), false, false, false))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y : _GLF_FUZZED(-4.9)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, sin(sqrt(0.0)), 0.0), (true ? mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, sin(sqrt(0.0)), 0.0) : _GLF_FUZZED(mat2x3(-292.790, 8.5, -639.081, -82.16, 44.82, -0.2)))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(413.985), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2296.1143)), bvec2(true, _GLF_IDENTITY(false, (false) || false)))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(413.985), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], _GLF_FUZZED(-2296.1143)), bvec2(true, _GLF_IDENTITY(false, (false) || false)))).y)), true && (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(413.985), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2296.1143)), bvec2(true, _GLF_IDENTITY(false, (false) || false)))).y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(413.985), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2296.1143)), bvec2(true, _GLF_IDENTITY(false, (false) || false)))).y))))))))), false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))) || false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))) || false)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))) || false)))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))) && true))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bool(! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bool(! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bool(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))))) && true))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y) - 0.0)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))), false, false, true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1 | 0, (_GLF_IDENTITY(1 | 0, 0 | (1 | 0))) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) | 0))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec4(bool(bvec3(false, true, false)), true, true, false)))) ? _GLF_FUZZED(77272) : _GLF_IDENTITY(_GLF_IDENTITY((1 | 0), min(_GLF_IDENTITY((1 | 0), max((1 | 0), (1 | 0))), (1 | 0))), ~ (~ (_GLF_IDENTITY((1 | 0), ((1 | 0)) >> 0))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, cos(0.0), 1.0))), mix(float(_GLF_FUZZED(1.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0))), 1.0, 1.0, sin(0.0), sqrt(0.0), 1.0))), min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(8.2, -8027.5467)))) : _GLF_FUZZED(vec2(-827.120, -63.88))))).y))), bool(true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w = subgroup_local_id, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.5))))), ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u)) >> (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)))))) + 0u)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_IDENTITY(true, ! (! (true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))), _GLF_IDENTITY(0, (0) >> 0), 0))], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED((uvec3(165591u, 195648u, 10988u) / subgroup_size)) : _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), ~ (~ (uvec3(gl_NumWorkGroups))))))), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) << 0u))))), _GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))))) | (gl_NumWorkGroups))))[2])), gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.x = num_workgroup;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.y = GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || _GLF_IDENTITY((false), ((false)) && true))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.8), _GLF_FUZZED(1.9)), bvec2(false, false))).y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, bool(bvec2((false) || false, false))))))))) && true)) && true)), ! (! (false)))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1356.6753)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
          }
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))));
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)) + GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true, false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)) : _GLF_FUZZED(atomicXor(workgroup_size, subgroup_local_id)))) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1, min(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1, GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1))), clamp((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1) - 0u))))), (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1), (true ? (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.w + 1) : _GLF_FUZZED(workgroup_base))))) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | (_GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) * 1u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u))), (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)) | (uvec2(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), 1u)))))) / (1u ^ 0u)))))), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id) ^ uvec4(0u, 0u, 0u, 0u)).w + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / (1u ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size))) / (1u ^ 0u), ~ (~ ((subgroup_size) / (1u ^ 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size))) / (1u ^ 0u), ~ (~ ((subgroup_size) / (1u ^ 0u))))) << 0u), (subgroup_size) / _GLF_IDENTITY((1u ^ 0u), (189746u & 0u) | (_GLF_IDENTITY((1u ^ 0u), _GLF_IDENTITY(((1u ^ 0u)) >> 0u, (true ? ((1u ^ 0u)) >> 0u : _GLF_FUZZED(subgroup_size)))))), (subgroup_size) / (1u ^ 0u))))) * _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, (_GLF_IDENTITY((0) - 0, ((0) - 0) | 0)) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0)))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0))) * (injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-903.495)), float(injectionSwitch.x), bool(true)))))))) && true)))))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) * 1.0))))), 1.0)), float(mat4x3(float(vec3(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, sqrt(1.0), determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (false ? _GLF_FUZZED(vec3(-9034.8727, 7.0, 79.85)) : vec3(0.0, 1.0, 0.0)))) / vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, exp(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))), 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + 0.0), injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, sqrt(1.0), abs(1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), exp(0.0), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))))), (float(mat4(0.0, sqrt(1.0), _GLF_IDENTITY(determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), float(mat4(_GLF_IDENTITY(determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), clamp(_GLF_IDENTITY(determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), min(determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)))), determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), determinant(mat4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), sin(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)))), 1.0, 0.0, 0.0, 1.0, abs(sqrt(1.0)), 1.0, sqrt(tan(0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-441.569)), bool(false))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), sqrt(1.0), abs(1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), float(mat4x2(round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))))) / 1.0)), 1.0, 1.0))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))) || false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != ((0 | 0) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z = read_1;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec3(27.56, 45.83, 0.8).tp) : injectionSwitch)).y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec3(27.56, 45.83, 0.8).tp) : injectionSwitch)).y))), true, false, true)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false)), bool(bvec2(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false)), true)))), false, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false)), bool(bvec2(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false)), true)))), false, false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), max(virtual_gid, virtual_gid))], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) - 0))))], (injectionSwitch[_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) - 0))))]) / 1.0), injectionSwitch[1])).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) - 0)))), min(_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) - 0))))))], injectionSwitch[1])).x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) - 0))))], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, _GLF_IDENTITY(0, clamp(0, 0, 0)) + (_GLF_IDENTITY(1, (1) | 0)))])).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec4(injectionSwitch[1], 0.0, 0.0, 1.0))))).x, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec4(injectionSwitch[1], 0.0, 0.0, 1.0))))).x), bool(true))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0))))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(97522))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y = read_2, (true ? GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y = read_2 : _GLF_FUZZED(workgroup_base)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(((true)) || false, bool(bvec3(((true)) || false, false, false)))))), bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), ((true)) || false))))), false, false))))))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(false)))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || _GLF_IDENTITY(false, true && (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))), true && ((! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       barrier();
      }
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.x, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.x) | 0u)], _GLF_IDENTITY(uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y) + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0)), 0 | (int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0))))))))) - 0), 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0)), 0 | (int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0))))))))) - 0))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z) | (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z)) == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y) + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0)), 0 | (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), (~ (_GLF_IDENTITY(0, ~ (~ (0))))) | (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), 1, 0))))))))), ((_GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0)), 0 | (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), (~ (_GLF_IDENTITY(0, ~ (~ (0))))) | (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), 1, 0)))))))))) * 1) - 0)), uint(uvec2(_GLF_IDENTITY(~ (uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), ~ (~ (0))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0)), 0 | (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))) | (~ (_GLF_IDENTITY(0, ~ (~ (0))))))), 1 * ((_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))) | (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))))), 1, 0))))))))) - 0)), (~ (uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_17next_virtual_gidnum_workgroupread_1subgroup_local_id.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), 1, 0)), 0 | (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), (~ (_GLF_IDENTITY(0, ~ (~ (0))))) | (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), (~ (_GLF_IDENTITY(0, ~ (~ (0))))) | (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))))), 1, 0))))))))) - _GLF_IDENTITY(0, max(0, 0))))) / 1u), 0u))))), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec2((false) || false, true)), true && (bool(bvec2(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), true && ((false))))) || false, true))))))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(bvec3(false, false, true))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ! (_GLF_IDENTITY(! ((false) || false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((false) || false)), (! (! ((false) || false))) || false)), false || ((_GLF_IDENTITY(! (! ((false) || false)), (! (! ((false) || false))) || false)))))))), false, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (! ((false) || false))))))), false, true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || false), ! (! (! ((false) || false))))))), false, true))))), false || (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY(! (! (! ((false) || false))), ! (! (_GLF_IDENTITY(! (! (! ((false) || false))), false || (! (! (! ((false) || false)))))))))))), false, true))))))))))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (! ((false) || false))))))), false, true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (! ((false) || false))))))), false, true))))), false || (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (! ((false) || false))))))), false, true))))))))))))))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
}
