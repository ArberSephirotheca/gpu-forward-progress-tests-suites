#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_48 {
 bvec4 _f0;
 float _f1;
} ;

struct _GLF_struct_49 {
 mat3x4 _f0;
 _GLF_struct_48 _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_50 {
 _GLF_struct_49 _f0;
} ;

struct _GLF_struct_45 {
 float _f0;
 ivec2 _f1;
 mat4 _f2;
 vec2 _f3;
 mat2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_46 {
 _GLF_struct_45 _f0;
 vec2 _f1;
 mat4x3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_43 {
 bool _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_44 {
 _GLF_struct_43 _f0;
 int _f1;
} ;

struct _GLF_struct_41 {
 ivec4 _f0;
 mat4x3 _f1;
 uint _f2;
 mat3 _f3;
 float _f4;
 mat2x3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_40 {
 uvec3 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_39 {
 uvec3 _f0;
} ;

struct _GLF_struct_42 {
 float _f0;
 _GLF_struct_39 _f1;
 _GLF_struct_40 _f2;
 _GLF_struct_41 _f3;
 bvec4 _f4;
 uvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_47 {
 vec4 _f0;
 _GLF_struct_42 _f1;
 vec3 _f2;
 uint read_2;
 mat2x4 _f3;
 _GLF_struct_44 _f4;
 _GLF_struct_46 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_36 {
 ivec2 _f0;
 mat3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_37 {
 mat4 _f0;
 _GLF_struct_36 _f1;
} ;

struct _GLF_struct_34 {
 uvec4 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_35 {
 mat2x3 _f0;
 _GLF_struct_34 _f1;
 ivec2 _f2;
 float _f3;
} ;

struct _GLF_struct_32 {
 mat4 _f0;
} ;

struct _GLF_struct_31 {
 bool _f0;
 mat3 _f1;
 mat4x3 _f2;
 int _f3;
 vec4 _f4;
 mat4x3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_30 {
 uvec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_29 {
 vec2 _f0;
 ivec3 _f1;
 bool _f2;
} ;

struct _GLF_struct_28 {
 uvec2 _f0;
} ;

struct _GLF_struct_33 {
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_30 _f2;
 _GLF_struct_31 _f3;
 _GLF_struct_32 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_38 {
 _GLF_struct_33 _f0;
 ivec2 _f1;
 int _f2;
 ivec4 _f3;
 _GLF_struct_35 _f4;
 uint read_1;
 _GLF_struct_37 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_27 {
 uint subgroup_id;
 mat3x2 _f0;
} ;

struct _GLF_struct_25 {
 mat4x2 _f0;
 int _injected_loop_counter;
 ivec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_26 {
 ivec4 _f0;
 uvec4 _f1;
 _GLF_struct_25 _f2;
 int _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_22 {
 bvec3 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
} ;

struct _GLF_struct_24 {
 vec4 _f0;
 _GLF_struct_23 _f1;
} ;

struct _GLF_struct_19 {
 uint virtual_gid;
 int _f0;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 ivec4 _f1;
 ivec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_20 {
 mat4x2 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_19 _f2;
 uvec3 _f3;
 mat2x4 _f4;
 mat3x2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_21 {
 mat2x3 _f0;
 vec2 _f1;
 _GLF_struct_20 _f2;
} ;

struct _GLF_struct_16 {
 uint workgroup_base;
 ivec4 _f0;
} ;

struct _GLF_struct_14 {
 mat3 _f0;
 vec4 _f1;
 bvec4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 int _f1;
 mat3 _f2;
 mat3 _f3;
 vec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_10 {
 mat2x3 _f0;
 bvec3 _f1;
 ivec2 _f2;
 mat3 _f3;
 ivec2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_9 {
 bvec2 _f0;
 bvec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 float _f1;
 mat4 _f2;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 bool _f1;
 uvec2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_7 _f0;
 vec4 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 mat4 _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_12 _f0;
 _GLF_struct_15 _f1;
 mat2x3 _f2;
 uvec4 _f3;
 _GLF_struct_16 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 uvec3 _f1;
 uint subgroup_local_id;
 mat2x4 _f2;
 mat2x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 ivec4 _f1;
 mat3x4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 uvec3 _f1;
 uint _f2;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 uint _f1;
 mat3x4 _f2;
 uvec4 _f3;
 mat4 _f4;
 bvec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat3x2 _f1;
 ivec2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 _GLF_struct_0 _f1;
 mat4x3 _f2;
 _GLF_struct_1 _f3;
 int _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(gl_SubgroupID, mat3x2(1.0));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 1 * ((1 << _GLF_IDENTITY(int(2), int(2))))), (1 << _GLF_IDENTITY(int(2), int(2))), (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(_GLF_IDENTITY(2, min(2, 2))))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, min(2, 2)))) - 0))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(0, max(0, 0))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0)))), _GLF_IDENTITY(0, max(0, 0)))))), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2))) ^ (0 >> _GLF_IDENTITY(int(5), int(5))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(40142, _GLF_IDENTITY(0, clamp(0, 0, 0)) + (40142))) : _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), clamp(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, 1 * (2))))))) - 0))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (2) ^ 0))) - _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 + (0))))) / 1)))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2))), int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) - 0), (_GLF_IDENTITY(int(2), (int(2)) - 0)) ^ 0)))))) ^ 0), int(2))), (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) << 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(_GLF_IDENTITY(2, min(2, 2))), int(2))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(max(int(2), int(2)), ~ (_GLF_IDENTITY(~ (max(int(2), int(2))), (~ (max(int(2), int(2)))) / 1)))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2))), clamp(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) << _GLF_IDENTITY(0, ~ (~ (0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))), (0 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) * (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2))) ^ 0)), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) << 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), int(2)))), (max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))) ^ 0)), int(_GLF_IDENTITY(2, 0 ^ (2))), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2)))) << 0), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) << 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | _GLF_IDENTITY((_GLF_IDENTITY(int(2), max(int(2), int(2)))), max(_GLF_IDENTITY((_GLF_IDENTITY(int(2), max(int(2), int(2)))), int(int((_GLF_IDENTITY(int(2), max(int(2), int(2))))))), (_GLF_IDENTITY(int(2), max(int(2), int(2))))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(max(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), (max(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) / 1)))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1)) * 1)), (true ? (1 << _GLF_IDENTITY(int(2), int(2))) : _GLF_FUZZED(-57731))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), int(2)))) << 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | (_GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), clamp(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0)))) | ivec3(0, 0, 0))), clamp(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), clamp(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (_GLF_IDENTITY(int(2), (int(2)) | (int(2))))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (2))), int(2))), 0)))) | ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (_GLF_IDENTITY(int(2), (int(2)) ^ 0))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), clamp(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(1, (1) ^ 0) * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0)))) | ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))), 0), _GLF_IDENTITY(clamp(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0)), (_GLF_IDENTITY(clamp(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0)), (clamp(ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0), ivec3(_GLF_IDENTITY(int(2), 1 * (int(2))), (0 << _GLF_IDENTITY(int(2), int(2))), 0))) - ivec3(0, 0, 0))) << ivec3(0, 0, 0)))) | ivec3(0, 0, 0)))))))))), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), int(2)))))) - 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((36647 & 0), 0 ^ (_GLF_IDENTITY((36647 & 0), (false ? _GLF_FUZZED(_injected_loop_counter) : (36647 & 0))))), ! (! (_injected_loop_counter > (36647 & 0)))), (_injected_loop_counter > (36647 & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) - 0))) && _GLF_IDENTITY(true, (true) || false))); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(_GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(roundEven(-2.4)) : 1.0))) / exp(0.0))), _GLF_IDENTITY(float(mat3x2(max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-77.37) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(int(1))), 1, 1)), 1))]) : _GLF_IDENTITY(1.0, float(vec2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7788.0611))), 1.0))))), 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(float(mat3x2(max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), vec2(1.0, 1.0))))[1]) : _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), vec2(1.0, 1.0))))[1]) : _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))) + 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0)), max(float(mat3x2(max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))), 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat3x2(max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))), 0.0, 0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), false, true, false)))))), max(1.0, 1.0))))), _GLF_struct_0(vec4(1.0), mat3x2(1.0), _GLF_IDENTITY(ivec2(1), max(ivec2(1), ivec2(1))), mat2x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), mat4x3(1.0), _GLF_struct_1(mat4x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (0u) ^ 0u) + (1u))))) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), 0u + _GLF_IDENTITY((1u), (true ? (1u) : _GLF_FUZZED(uvec2(4824u, 94013u)[1]))))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + _GLF_IDENTITY((1u), ((1u)) | ((1u))))), (_GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), 0u | (_GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (min(1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, 0u ^ (1u)))))) >> 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(0u + (1u), (0u + (1u)) + (0u | 0u)))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u, clamp((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (min(1u, _GLF_IDENTITY(1u, 0u + (1u)))) >> 0u))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, min(1u, 1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (min(1u, _GLF_IDENTITY(1u, 0u + (1u)))) >> 0u))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, min(1u, 1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (min(1u, _GLF_IDENTITY(1u, 0u + (1u)))) >> 0u))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, min(1u, 1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (min(1u, _GLF_IDENTITY(1u, 0u + (1u)))) >> 0u))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, min(1u, 1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(0u + (1u), (_GLF_IDENTITY(0u + (1u), clamp(0u + (1u), _GLF_IDENTITY(0u + (1u), (0u + (1u)) << 0u), 0u + (1u)))) - 0u))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), clamp((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), ((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u)))))) ^ 0u), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))))) / 1u))))), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u) | ((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), uint(uvec3(uint(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), 1u, (1u & 1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), clamp(_GLF_IDENTITY(1u, 0u + (1u)), _GLF_IDENTITY(1u, 0u + (1u)), _GLF_IDENTITY(1u, 0u + (1u))))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 0u))) * (1u)), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(0u + (1u), min(_GLF_IDENTITY(0u + (1u), 0u ^ (0u + (1u))), 0u + (1u))))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u ^ (_GLF_FUZZED(subgroup_size))) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) ^ 0u)))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), 0u | (_GLF_IDENTITY(1u, 0u + (1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), (_GLF_IDENTITY(1u, 0u + (1u))) | (_GLF_IDENTITY(1u, 0u + (1u))))))))) / 1u), min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u))) | (1u))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(atomicMax(subgroup_size, subgroup_size)) : 1u)), 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, (1u) / 1u)), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (_GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(min(1u, _GLF_IDENTITY(1u, 0u + (1u))), (true ? min(1u, _GLF_IDENTITY(1u, 0u + (1u))) : _GLF_FUZZED(subgroup_size)))))) >> 0u))) / 1u)), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), min(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))) - 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), uint(uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), 0u, 1u)))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))) >> 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) * (subgroup_size))) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | 0u)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))))))) ^ 0u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(196367u) : ~ (_GLF_IDENTITY(~ (1u), (_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u)) | 0u))))), 1u, 1u)), min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / _GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), clamp((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))) / 1u)))))))) - 0u) : _GLF_FUZZED(subgroup_size)))), mat3x4(1.0), uvec4(1u), mat4(1.0), bvec4(true), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false)))), 1, _GLF_struct_2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), (_GLF_IDENTITY(1.0, 1.0 * (1.0))) / 1.0)))), uvec3(1u), 1u)), _GLF_struct_5(_GLF_struct_4(uvec4(1u), uvec3(1u), gl_SubgroupInvocationID, mat2x4(1.0), mat2x4(1.0), ivec3(1)), ivec4(1), mat3x4(1.0), uvec3(1u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(-7481.7130)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(-7481.7130)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(step(float(false), vec2(-97.87, 9.9))))))).y))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y))))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true))))))))))
  barrier();
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), (true ? (int(7)) : _GLF_FUZZED(-59845))) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false))))))), (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false))))))), (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false))))))), (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false))))))), (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false))))))), (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-67965) : _injected_loop_counter --)))
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))) || (_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, true)))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_12(_GLF_struct_7(uvec4(1u), true, uvec2(1u), mat4x2(1.0)), vec4(1.0), _GLF_struct_8(ivec2(1), 1.0, mat4(1.0)), _GLF_struct_9(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bool(bvec3(false || _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), true, false)), bool(bvec2(bool(bvec3(false || (true), true, false)), true)))))))), bvec2(bvec2(bvec2(true)))), bvec3(true), mat2x4(1.0)), mat4(1.0), _GLF_struct_10(mat2x3(1.0), bvec3(true), _GLF_IDENTITY(ivec2(1), (ivec2(1)) << ivec2(0, 0)), mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (1), (1 * (1)) | 0)), (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), mat2x3(1.0)), _GLF_struct_11(vec4(1.0), 1, _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY((_GLF_IDENTITY(mat3(1.0), mat3(mat4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), (true ? (_GLF_IDENTITY(mat3(1.0), mat3(mat4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))) : _GLF_FUZZED(mat3(73.10, -5056.1178, -4.9, 14.34, -71.33, -6232.6934, 6.2, 3.2, -6.9)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.4)), bool(false))), 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(mat3(9.8, -9917.6174, 71.50, -147.554, 6.0, -1.7, 70.66, 8.1, -8.8)) : _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), mat3(mat4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (mat3(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), mat3(mat4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-595.678)), float(0.0), bool(true)))))) - tan(abs(0.0))), 0.0, 0.0, 0.0, 0.0, 0.0))))), transpose(transpose(mat3(mat3(mat3(1.0))))))), mat3(1.0), vec4(1.0), bvec4(true))), _GLF_struct_15(mat2x3(1.0), _GLF_struct_13(_GLF_IDENTITY(vec4(1.0), vec4(mat4x3(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, sqrt(1.0), _GLF_IDENTITY(dot(vec3(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0))), mat3x2(_GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_struct_14(mat3(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, 0.0 + (0.0)))), float(_GLF_FUZZED((mat4x3(-4.4, -5202.7577, _GLF_IDENTITY(-315.574, (true ? -315.574 : _GLF_FUZZED(-6.8))), -63.49, -7251.4412, -1.0, -91.38, 873.154, 1.6, 7.8, 65.73, -2.7) * vec4(_GLF_IDENTITY(-7.6, (-7.6) + 0.0), -2480.7904, 8.6, -88.78)).x)), bool(false))))) * _GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))), bvec4(true), vec3(1.0)), vec4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - sin(0.0)), 1.0)))), mat2x3(1.0), uvec4(1u), _GLF_struct_16(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))), workgroup_size, workgroup_size), (clamp(_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))), workgroup_size, workgroup_size)) / 1u)), ~ (~ (_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))), workgroup_size, workgroup_size))))) * workgroup_id, ivec4(1)), bvec3(true));
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(mat2x3(_GLF_IDENTITY(1.0, (1.0) + 0.0)), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.0)), float(1.0), bool(true)))), _GLF_struct_20(mat4x2(1.0), _GLF_struct_18(mat3x4(1.0), ivec4(1), ivec2(1), ivec2(1)), _GLF_struct_19(_GLF_struct_replacement_17._f4.workgroup_base + _GLF_struct_replacement_27.subgroup_id * subgroup_size + _GLF_struct_replacement_6._f1._f0.subgroup_local_id, _GLF_IDENTITY(1, max(1, 1))), uvec3(1u), mat2x4(1.0), mat3x2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), min(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, sin(0.0), determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(7.3)))))), mat3x2(1.0)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(vec4(1.0), _GLF_struct_23(_GLF_struct_22(bvec3(true), _GLF_IDENTITY(_GLF_struct_replacement_17._f4.workgroup_base, (_GLF_struct_replacement_17._f4.workgroup_base) | (_GLF_struct_replacement_17._f4.workgroup_base)) + _GLF_IDENTITY(_GLF_struct_replacement_27.subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_struct_replacement_27.subgroup_id * subgroup_size) | 0u, clamp(_GLF_IDENTITY((_GLF_struct_replacement_27.subgroup_id * subgroup_size), 0u | ((_GLF_struct_replacement_27.subgroup_id * subgroup_size))) | 0u, (_GLF_struct_replacement_27.subgroup_id * subgroup_size) | 0u, (_GLF_struct_replacement_27.subgroup_id * subgroup_size) | 0u))) + (_GLF_IDENTITY((_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(clamp((_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1)), (clamp((_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1))) ^ 0u), 0u | (_GLF_IDENTITY(clamp((_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1)), (clamp((_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1), (_GLF_struct_replacement_6._f1._f0.subgroup_local_id + 1))) ^ 0u)))) % subgroup_size))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), mat3(1.0) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), mat3(1.0) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))))), (true ? vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(1.0) * _GLF_IDENTITY((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))), transpose(_GLF_IDENTITY(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(660.512, -6.4, -9.7, 5.2, 9.3, 44.22, -191.866, -7.2, 8.3)) : _GLF_IDENTITY(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))), mat3(mat4x3(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))))))))))) : _GLF_FUZZED(injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), mat3(1.0) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), mat3(1.0) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))))), (true ? vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(1.0) * _GLF_IDENTITY((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))), transpose(_GLF_IDENTITY(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(660.512, -6.4, -9.7, 5.2, 9.3, 44.22, -191.866, -7.2, 8.3)) : _GLF_IDENTITY(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))), mat3(mat4x3(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))))))))))) : _GLF_FUZZED(injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x2(1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0))))), (false ? _GLF_FUZZED(2.0) : float(_GLF_IDENTITY(mat3x2(1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x2(1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0))))))))) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))), (true ? vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(1.0) * _GLF_IDENTITY((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))), transpose(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))))))) : _GLF_FUZZED(injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(1.0) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))), (true ? vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3(1.0) * _GLF_IDENTITY((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(1.0, (1.0) / 1.0)))), transpose(transpose((_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3668.8812)), bool(false))), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), 1.0, abs(1.0)), (true ? mat3(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(-3668.8812, 1.0 * (-3668.8812)))), bool(false))), 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)) : _GLF_FUZZED(mat3(899.461, 57.87, -3.9, 1.8, -29.82, 89.83, 96.10, -9.8, -3.6)))))))))) : _GLF_FUZZED(injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0))).y)))), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(1.0) * (mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))))), (true ? vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)), mat3(1.0) * _GLF_IDENTITY((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0))), transpose(transpose((mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0)))))))) : _GLF_FUZZED(injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))))))))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), _GLF_IDENTITY((_GLF_IDENTITY(((! (false))), (_GLF_IDENTITY(((! (false))), ! (! (((! (false))))))) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY(((! (false))), (_GLF_IDENTITY(((! (false))), ! (! (((! (false))))))) && true)), bool(bvec3((_GLF_IDENTITY(((! (false))), (_GLF_IDENTITY(((! (false))), ! (! (((! (false))))))) && true)), false, true))))) || false)))))), bool(bvec4(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ((! (false))) && true)))), false || (! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))), false, false, false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                      barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false))), ! (! (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false))))))), (bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false))), ! (! (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)))))))) || false)))), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)))))), _GLF_IDENTITY(true, (true) || false), true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (false)))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), ! (! (false)))), false, false, false)))))), true, true, false)))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0))))), max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0))))))))).x > injectionSwitch.y) || false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (true), ! (_GLF_IDENTITY(! (true && (true)), (! (true && (true))) && true)))), ! (! (! (_GLF_IDENTITY(true && (true), ! (_GLF_IDENTITY(! (true && (true)), (! (true && (true))) && true)))))))))), false))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0)))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y) * 1.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))), ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (_GLF_IDENTITY(! ((false) || false), bool(bvec4(! ((false) || false), true, true, false)))))))))))) && true), false, false, false)), ! (! _GLF_IDENTITY((bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, false, false))), false || ((bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)), false, false, false)))))))), ! (! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)), false, false, false))), true && (! (bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)), false, false, false))))))))))))))), bool(bvec3(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), false, false, false)), ! (! (bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false)))))))))), false, false)))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.7, 635.129)) : injectionSwitch)).x < injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec3(bool(bvec4(false, true, true, false)), true, true)))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.0) : injectionSwitch[0]))), float(_GLF_FUZZED(7605.0125)), bool(false))), injectionSwitch[1])).x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, exp(_GLF_IDENTITY(0.0, (0.0) / 1.0)), round(length(normalize(1.0))), 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))) || false)))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(_GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | ivec4(0, 0, 0, 0)), ivec4(1, 1, 1, 1) * (ivec4(1)))) * ivec4(1, 1, 1, 1))) - ivec4(0, 0, 0, 0)), uvec4(1u), _GLF_struct_25(mat4x2(1.0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec3(1, 0, 0))), 1))) >> 0), ivec4(1), mat3(1.0)), 1, mat4x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_26._f2._injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _GLF_IDENTITY(_GLF_struct_replacement_26._f2._injected_loop_counter --, _GLF_IDENTITY(0 ^ (_GLF_struct_replacement_26._f2._injected_loop_counter --), (0 ^ (_GLF_struct_replacement_26._f2._injected_loop_counter --)) + 0)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 0.0))).x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(_GLF_struct_50 _GLF_struct_replacement_50 = _GLF_struct_50(_GLF_struct_49(mat3x4(1.0), _GLF_struct_48(bvec4(true), 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) ^ 0), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED((6.4 + -434.782))), vec2(_GLF_FUZZED(0.9), (injectionSwitch)[1]), bvec2(false, true)), (mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0))), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED((6.4 + -434.782))), vec2(_GLF_FUZZED(0.9), (injectionSwitch)[1]), bvec2(false, true))) / vec2(1.0, 1.0))).y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (0 ^ 0)))))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_50._f0._injected_loop_counter > 0); _GLF_struct_replacement_50._f0._injected_loop_counter --)
                    {
                     atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (true ? _GLF_struct_replacement_24._f1._f0.next_virtual_gid : _GLF_FUZZED((workgroup_size / num_workgroup)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u))) - 0u)))), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u)) << 0u))) - 0u))))))), _GLF_struct_replacement_24._f1._f0.next_virtual_gid), (clamp(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), _GLF_struct_replacement_24._f1._f0.next_virtual_gid)) | (clamp(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_24._f1._f0.next_virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_24._f1._f0.next_virtual_gid))) - 0u), _GLF_struct_replacement_24._f1._f0.next_virtual_gid))))], uint(1), 4, 64, 4);
                    }
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)))).y))));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && ((true))) || false)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4)))))) / 1))))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4)))))) / 1)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, cos(0.0), 0.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- -2369.3880))), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-61.23)))), bool(true))) < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) & 1, ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1))))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(128.691)))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(128.691)))), injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(128.691))), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(128.691))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0))), (dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0)))) / 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(128.691))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0))), (dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0)))) / 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0))))))), injectionSwitch.x)) > injectionSwitch.y, true, true, false)))) && true)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(246.453, -86.44)) : injectionSwitch))) * vec2(1.0, 1.0)).x, injectionSwitch.x)))), (true ? _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), (float(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), float(mat3(min(injectionSwitch.x, injectionSwitch.x), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 0.0, 0.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0))))))) + 0.0) : _GLF_FUZZED(0.3)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(_GLF_struct_33(_GLF_struct_28(uvec2(1u)), _GLF_struct_29(vec2(1.0), ivec3(1), true), _GLF_struct_30(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))))), _GLF_IDENTITY((uvec4(1u)), ~ (~ (_GLF_IDENTITY((uvec4(1u)), clamp((uvec4(1u)), (uvec4(1u)), (uvec4(1u))))))) >> uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) << 0u))))))) | uvec4(0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)), mat3x4(1.0)), _GLF_struct_31(true, mat3(1.0), mat4x3(1.0), 1, _GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(1.0))[_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) / 1) + 0)], (vec4(1.0))[1], _GLF_FUZZED(5.5), (vec4(1.0))[3]), vec4(_GLF_FUZZED(vec2(-1715.7305, -6349.2111).r), _GLF_FUZZED(5.3), (vec4(1.0))[2], _GLF_FUZZED(-4.0)), bvec4(false, false, true, false))), mat4x3(1.0), mat3(1.0)), _GLF_struct_32(mat4(1.0)), ivec3(1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), min(ivec2(1), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-93321)))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), min(_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1)))), ivec2(_GLF_IDENTITY(1, (1) | 0))))) << ivec2(0, 0), ((_GLF_IDENTITY(ivec2(1), min(ivec2(1), ivec2(1)))) << ivec2(0, 0)) | _GLF_IDENTITY(ivec2(0, 0), ~ (~ (_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) << ivec2(0, 0))))))), 1, ivec4(1), _GLF_struct_35(mat2x3(1.0), _GLF_struct_34(uvec4(1u), mat4x2(1.0), mat2x3(1.0), bvec4(true)), ivec2(1), 1.0), atomicLoad(buf[_GLF_struct_replacement_21._f2._f2.virtual_gid], 4, 64, 0), _GLF_struct_37(mat4(1.0), _GLF_struct_36(ivec2(1), mat3(1.0), mat4x3(1.0))), mat4x2(1.0));
 _GLF_struct_47 _GLF_struct_replacement_47 = _GLF_struct_47(_GLF_IDENTITY(vec4(1.0), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(min(vec4(1.0), vec4(1.0)), (min(vec4(1.0), vec4(1.0))) * mat4(1.0))))), _GLF_struct_42(1.0, _GLF_struct_39(uvec3(1u)), _GLF_struct_40(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) ^ uvec3(0u, 0u, 0u)), mat2x4(1.0), uvec4(1u), mat2(1.0)), _GLF_struct_41(ivec4(1), mat4x3(1.0), 1u, _GLF_IDENTITY(mat3(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3(1.0) : _GLF_FUZZED(mat3(-3874.1041, 5.4, -573.341, -162.026, -386.320, -0.5, -5747.5143, 42.81, -27.98)))), 1.0, mat2x3(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true)))), bvec4(true), uvec4(1u), mat3x2(1.0)), vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-733.674)), float(1.0), bool(true)))), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, (true ? _GLF_struct_replacement_21._f2._f2.virtual_gid : _GLF_FUZZED(30533u))), max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) / 1u) ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_21._f2._f2.virtual_gid), ((_GLF_struct_replacement_21._f2._f2.virtual_gid)) - 0u), min((_GLF_struct_replacement_21._f2._f2.virtual_gid), (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid), (true ? 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid) : _GLF_FUZZED((workgroup_size ++))))))))))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), max(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ _GLF_IDENTITY((_GLF_struct_replacement_21._f2._f2.virtual_gid), min((_GLF_struct_replacement_21._f2._f2.virtual_gid), _GLF_IDENTITY((_GLF_struct_replacement_21._f2._f2.virtual_gid), min((_GLF_struct_replacement_21._f2._f2.virtual_gid), (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))))), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ _GLF_IDENTITY((_GLF_struct_replacement_21._f2._f2.virtual_gid), min((_GLF_struct_replacement_21._f2._f2.virtual_gid), (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ _GLF_IDENTITY((_GLF_struct_replacement_21._f2._f2.virtual_gid), min((_GLF_struct_replacement_21._f2._f2.virtual_gid), (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid))))))))) ^ (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))) ^ 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), 1u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, max(_GLF_struct_replacement_21._f2._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))))))), _GLF_IDENTITY(_GLF_struct_replacement_21._f2._f2.virtual_gid, 0u ^ (_GLF_struct_replacement_21._f2._f2.virtual_gid)))), 1u, 0u))))))))], 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) + 0)), mat2x4(1.0), _GLF_struct_44(_GLF_struct_43(true, uvec2(1u)), 1), _GLF_struct_46(_GLF_struct_45(1.0, ivec2(1), mat4(1.0), vec2(1.0), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-75.91) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y), _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), max(min(0.0, 0.0), min(0.0, 0.0)))), 0.0, 1.0, 0.0, log(1.0), length(vec2(0.0, 0.0)), 1.0, 0.0)))))), mat4x3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-29.94)), bool(false))))), vec2(1.0), mat4x3(_GLF_IDENTITY(1.0, round(length(normalize(sqrt(1.0)))) * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(557.592)), float(1.0), bool(true)))))), bvec4(true)), vec4(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_struct_replacement_24._f1._f0.next_virtual_gid], uint(_GLF_struct_replacement_38.read_1 == _GLF_struct_replacement_47.read_2) + 1, _GLF_IDENTITY(4, (4) >> 0), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false)))) || false))), false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
}
