#version 460
struct _GLF_struct_1 {
 bool _f0;
 mat4x3 _f1;
 vec4 _f2;
 mat3 _f3;
 uvec2 _f4;
 bool _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint _f1;
} ;

struct _GLF_struct_3 {
 uint subgroup_size;
 _GLF_struct_2 _f0;
 vec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_0 {
 uint subgroup_id;
 vec2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupID, vec2(1.0));
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_SubgroupSize, _GLF_struct_2(_GLF_struct_1(true, mat4x3(1.0), vec4(1.0), mat3(1.0), uvec2(1u), true), 1u), vec4(1.0), vec3(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_0.subgroup_id * _GLF_struct_replacement_3.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_0.subgroup_id * _GLF_struct_replacement_3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_3.subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
}
