#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (61830 & 0)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(606.023, 6936.1716)) : injectionSwitch)).x)) > injectionSwitch.y, false))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))))))))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false))))))))))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, false || (injectionSwitch.x > injectionSwitch.y))) || false)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))))))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-27.15))) > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = (0 & -28868); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), clamp((gl_WorkGroupID), (gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) << uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u)))))), max(_GLF_IDENTITY((gl_WorkGroupID), clamp((gl_WorkGroupID), (gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(((gl_WorkGroupID)), max(((gl_WorkGroupID)), _GLF_IDENTITY(((gl_WorkGroupID)), max(((gl_WorkGroupID)), ((gl_WorkGroupID)))))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), _GLF_IDENTITY((gl_WorkGroupID), clamp((gl_WorkGroupID), (gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) << uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u | (0u))))))))))))) + (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u)) >> _GLF_IDENTITY(uvec3(6u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(6u, (6u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(min(6u, 6u), (min(6u, 6u)) | (min(6u, 6u))), (_GLF_IDENTITY(_GLF_IDENTITY(min(6u, 6u), (min(6u, 6u)) | (min(6u, 6u))), 0u | (_GLF_IDENTITY(min(6u, 6u), (min(6u, 6u)) | (min(6u, 6u)))))) << (0u | 0u))))))).x;
 for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) << 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.3)), bool(false))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.3)), bool(false)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), _GLF_IDENTITY((0u & 165054u) ^ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))), ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) >> 0u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (_GLF_IDENTITY((0u & 165054u) ^ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))), ~ (_GLF_IDENTITY(~ ((0u & 165054u) ^ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)))), ~ (~ (~ (_GLF_IDENTITY((0u & 165054u), (_GLF_IDENTITY((0u & 165054u), uint(uint((0u & 165054u))))) | ((0u & 165054u))) ^ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))))))))))))))) / 1u) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), ~ (_GLF_IDENTITY(~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), max(~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), ~ (~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))))))))) / 1u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), false || (_injected_loop_counter != (1 & 1))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 << _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, true))), ! (! (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, true)))))), false, true, false)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false)), true && (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(-9785)))), max(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(-9785)))), int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(-9785)))))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(int(6), 0, _GLF_IDENTITY(1, int(ivec2(1, 0))), 0))), int(ivec3(int(6), 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))), min(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))), ((~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1)))))) / 1), (~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))))), (~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))), (~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))))), 0 ^ ((~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))))) * 1)))), min(0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), (_GLF_IDENTITY(int(6), min(int(6), int(6)))) | 0)) << 0), 1, 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))), 1 * (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1)), min(int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1)), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))))), _GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))), _GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), min(int(6), int(6))), 1, 1))))))) * 1)))), 0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1)))), (~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), _GLF_IDENTITY(min(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0)), min(min(int(6), int(6)), _GLF_IDENTITY(min(int(6), int(6)), int(_GLF_IDENTITY(ivec2(min(int(6), int(6)), 0), (false ? _GLF_FUZZED(ivec2(-48150, -84792)) : ivec2(min(int(6), int(6)), 0)))))))), 1, 1))))) * 1)))))), clamp(_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))) * 1), (0 >> _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))) * 1))), _GLF_IDENTITY(0, int(int(0))) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1)))), max(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1)))), _GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + _GLF_IDENTITY((int(6)), clamp(_GLF_IDENTITY((int(6)), _GLF_IDENTITY(int(ivec3((int(6)), 0, 0)), (int(ivec3((int(6)), 0, 0))) | (int(ivec3((int(6)), 0, 0))))), (int(6)), _GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) << 0)), 0 ^ (~ (1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), clamp(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, int(ivec2(1, 0))))))), 1))))) * 1)))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1)))))), (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))))) | (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) << (0 & (-85424))), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))) * 1, (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) << (0 & (-85424))), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))) * 1, ((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) << (0 & (-85424))), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))) * 1) / 1)) << 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (_GLF_IDENTITY(ivec3(int(6), 1, 1), clamp(ivec3(int(6), 1, 1), ivec3(int(6), 1, 1), ivec3(int(6), 1, 1))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))), clamp(int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(6), 1, 1))))), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (~ (ivec3(int(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) ^ 0)))), 1, 1))))))) : _GLF_FUZZED(bitCount(mix(workgroup_base, subgroup_local_id, true))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))))) * 1, min(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))))) * 1, (true ? (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))))) * 1 : _GLF_FUZZED((-35101 % 86394)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))))) * 1, ((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), 0 + (int(6))), int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(ivec3(int(6), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(1, int(ivec2(1, 0))))), 1))))))) * 1) << 0))))))))), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(89894))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))), 0 | (~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(89894))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))))), max(~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), (int(_GLF_IDENTITY(6, ~ (~ (6))))) | 0), (true ? int(6) : _GLF_IDENTITY(_GLF_FUZZED(89894), (_GLF_FUZZED(89894)) | 0))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))), ~ (_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(89894))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 1, 1), ~ (_GLF_IDENTITY(~ (ivec3(int(6), 1, 1)), (~ (ivec3(int(6), 1, 1))) | (_GLF_IDENTITY(~ (ivec3(int(6), 1, 1)), ivec3(0, 0, 0) | (~ (ivec3(int(6), 1, 1))))))))))), ((_GLF_IDENTITY(int(6), int(ivec3(int(6), _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, clamp((1) / 1, (1) / 1, (1) / 1))), 1))))) >> 0)) * 1)))), 0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (6), (~ (6)) | (~ (6)))))))), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) | 0), 1, 1))))), max(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (6), (~ (6)) | (~ (6)))))))), int(ivec3(int(6), 1, 1))))), int(ivec3((~ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (6), (~ (6)) | (~ (6)))))))), int(ivec3(int(6), 1, 1))))), 1, 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))), (false ? _GLF_FUZZED(-2421) : int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec4(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, ~ (~ (6)))))), (~ (6)) | _GLF_IDENTITY((~ (6)), max((~ (6)), (~ (6))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), (1 & 1), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) + ivec4(0, 0, 0, 0))))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 1, 1), (_GLF_IDENTITY(ivec3(int(6), 1, 1), (ivec3(int(6), 1, 1)) / ivec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) - ivec3(0, 0, 0)))))))) * 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, 1 * (1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), (clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))) / 1u))], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), uint(uvec2(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), 0u))))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)))), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), 0u))), clamp(_GLF_IDENTITY(uint(1), (uint(1)) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), (uvec2(0u, 1u)) << uvec2(0u, 0u)))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), 0u))), _GLF_IDENTITY(uint(1), (uint(1)) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u), (uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)) | uvec3(0u, 0u, 0u))), _GLF_IDENTITY((uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u, (false ? _GLF_FUZZED(next_virtual_gid) : (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)))), 0u))), _GLF_IDENTITY(uint(1), (uint(1)) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u))) << 0u)), 0u)))))) | (_GLF_IDENTITY(uint(1), (uint(1)) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), uint(_GLF_IDENTITY(uvec2(0u, 1u), ~ (~ (uvec2(0u, 1u)))))), 0u, 1u))) << 0u)), 0u)))))) | (uint(1))), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), false))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (_GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))) || false)) && true))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), virtual_gid))], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (injectionSwitch.y))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bool(! (_GLF_IDENTITY(false, (false) && true)))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)) && true))))))), bool(bvec3(bool(! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ((_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)) && true))))))), bool(bvec3(bool(! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false) && true))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) >> 0) : _GLF_FUZZED(69938))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), bool(bvec3(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), true, false))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), false))), true))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), false)))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), false))))))))))))))), bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), false))), true))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), false)))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), false))))))))))))))), true, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bvec3(bvec4(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), false))), true))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), false)))))))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true), false))))))))))))))), true, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false)))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-226.194, -33.24)) : injectionSwitch)), injectionSwitch, injectionSwitch)).y)))))) && true));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1202.4529), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-756.378)), bvec2(true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(19.66)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(19.66)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(19.66)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)) || false))))).y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))))
          {
           do
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0))))) ^ 1)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), clamp((0), (0), (0))))))), (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) > _GLF_IDENTITY(0, max(0, 0))) && true)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        break;
                       barrier();
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))))))))
                          continue;
                         barrier();
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) || (false))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))) || false)))) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false, true))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false, true))))), (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false, true)))))) && true))))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true))))))
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
    }
   else
    {
     do
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) : read_2))) + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), (1) << (0 & -14544)), 0u | (uint(read_1 == _GLF_IDENTITY(read_2, (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) : read_2))) + _GLF_IDENTITY(1, (1) << (0 & -14544)))), _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 0), (ivec2(4, 0)) | ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, 1)), clamp(int(ivec2(64, 1)), int(ivec2(64, 1)), int(ivec2(64, 1))))), min(64, 64))), min((_GLF_IDENTITY(64, min(64, 64))), _GLF_IDENTITY((_GLF_IDENTITY(64, min(64, 64))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, int(ivec3(64, 1, 1))) : _GLF_FUZZED(73001))), 1), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, int(ivec3(64, 1, 1))) : _GLF_FUZZED(73001))), 1))))), 64))), max((_GLF_IDENTITY(64, min(64, 64))), (_GLF_IDENTITY(64, min(64, 64))))))))) - 0), 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - length(0.0)))).x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), true)))))
    break;
  }
}
