#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) >> 0) | (1 ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) >> 0) | (1 ^ 1), 0 ^ (_GLF_IDENTITY((0 | 0), ((0 | 0)) >> 0) | (1 ^ 1)))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) - 0))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
        {
         return;
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), mix(vec2((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(-6.7)), vec2(_GLF_FUZZED(1689.5939), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))[1]), bvec2(false, true))))).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-11.23)), bool(false))), injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.7, -1.1)) : injectionSwitch)))).y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) && true)), (! (_GLF_IDENTITY((false), ((false)) && true))) && true))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) / 1)), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), ((false)) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY((false), ((false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) && true), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), bvec3(bvec4(bvec3(_GLF_IDENTITY((false), ((false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))), false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), ((false)) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY((false), ((false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(178.050)), bool(false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(37424) : _GLF_IDENTITY(int(0), 0 + (int(0)))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))) | ((149817u & 0u) << _GLF_IDENTITY(uint(4u), uint(4u)))), workgroup_base))) | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size, subgroup_size)), subgroup_size, subgroup_size)), ~ (~ (subgroup_size)))) << 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (subgroup_size))) : subgroup_id)) * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) >> 0u) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), ((subgroup_local_id + 1)) - 0u) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) + 0u)), (((subgroup_local_id + 1) % subgroup_size)) >> 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bool((! (injectionSwitch.x > injectionSwitch.y)))))) || false)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (injectionSwitch.x > injectionSwitch.y)))))), false, true), false)), true))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, sqrt(0.0), abs(1.0), 1.0))) > injectionSwitch.y) || false)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (! (bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))))))))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true)))))))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec2((false), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), false, false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))), (! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), _GLF_IDENTITY(! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))), false || (! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))))))) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), ! (! (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, false), true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false, (false) && true), false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), false, false)), ! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))), (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))), (! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))) && true), false || (! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))))), _GLF_IDENTITY(true, true && (true)) && ((_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))), (! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))) && true), false || (! (! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))))))))) && true))))))))))))))
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), uint(uvec4(_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid)), 1u, 0u, 0u)))], _GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u | 0u)), uint(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (int(ivec2(1, 1))) << 0))))), 4, 64, 4);
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(bool(bool(! ((false)))), _GLF_IDENTITY(! (! (bool(bool(! ((false)))))), ! (_GLF_IDENTITY(! (! (! (bool(bool(! ((false))))))), false || (_GLF_IDENTITY(! (! (! (bool(bool(! ((false))))))), bool(bvec4(! (! (! (bool(bool(! ((false))))))), false, true, true))))))))), true && (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(bool(bool(! ((false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bool(! ((false))), false || (bool(! ((false)))))))), ! (! (! (! (bool(bool(! ((false))))))))))))))))))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))), false || (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (true ? buf[virtual_gid] : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), max(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))), (_GLF_FUZZED(num_workgroup)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), bool(bvec4(! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bvec2((false), true)))) && true)), true, false, _GLF_IDENTITY(false, ! (! (false)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(float((_GLF_IDENTITY(184384u + 30951u, (184384u + 30951u) | (184384u + 30951u)))))), bvec2(false, false))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), (int(1)) / 1)), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), (int(1)) / 1))) >> 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (1 ^ 1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, int(int(1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (_GLF_IDENTITY(1, int(int(1)))) | (0 << _GLF_IDENTITY(int(5), int(5))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(3.1) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(vec3(-45.96, 1.0, -4.8).z)), bool(false)))))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(3.1) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(vec3(-45.96, 1.0, -4.8).z)), bool(false)))))), int(ivec4(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(3.1) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(vec3(-45.96, 1.0, -4.8).z)), bool(false)))))), 1, (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) ^ 0), 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(46402) : int(1)))))) >> 0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), _GLF_IDENTITY(((1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(1), (int(1)) >> 0) : _GLF_FUZZED(-55733)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(ivec3(((1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(1), (int(1)) >> 0) : _GLF_FUZZED(-55733)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1, 1))) ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           break;
           if(_GLF_DEAD(false))
            break;
          }
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) >> 0, int(_GLF_IDENTITY(ivec2((_injected_loop_counter) >> 0, 1), ~ (~ (ivec2((_injected_loop_counter) >> 0, 1)))))))) | (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))), (_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))), max(ivec3(_injected_loop_counter, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))), ivec3(_injected_loop_counter, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)))))) | (ivec3(_injected_loop_counter, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(_injected_loop_counter))))))))))) * 1))) != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, _GLF_IDENTITY(1, ~ (~ (1))), 0), (_GLF_IDENTITY(ivec3(1, _GLF_IDENTITY(1, (1) + (0 >> _GLF_IDENTITY(int(6), int(6)))), 0), min(ivec3(1, _GLF_IDENTITY(1, (1) + (0 >> _GLF_IDENTITY(int(6), int(6)))), 0), ivec3(1, _GLF_IDENTITY(1, (1) + (0 >> _GLF_IDENTITY(int(6), int(6)))), 0)))) * (ivec3(1, 1, 1) | ivec3(1, 1, 1))))), 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (0 << _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), int(int(int(ivec3(int(5), 1, 1))))))), max(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (0 << _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), int(int(int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (0 << _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), int(int(int(ivec3(int(5), 1, 1))))))))))))))))), ((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(17518) : int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (5) << 0)))))), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(ivec3(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))) | 0)), 1, 1))), _GLF_IDENTITY(((int(ivec3(int(5), 1, 1)))), (((int(ivec3(int(5), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1), 1))))) ^ 0) / 1))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter)))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter)))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter)))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))))))))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | 0)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter)))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter)))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))), 0, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter)))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (true ? ivec3(int(5), 1, 1) : _GLF_FUZZED(ivec3(11524, -58163, -54869)))))))))))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), max(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) | (int(ivec3(int(5), 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), _GLF_IDENTITY(1, (1) | 0), 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), 0, 0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | 0))))) ^ 0)), max((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(ivec3(int(5), 1, 1))), (true ? (int(ivec3(int(5), 1, 1))) : _GLF_FUZZED(_injected_loop_counter)))))), (0 & 91618) ^ (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), (int(5)) ^ (0 ^ 0)), 1, 1), (ivec3(int(5), 1, 1)) >> ivec3(0, 0, 0)))), ((int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (ivec3(int(5), 1, 1)) >> ivec3(0, 0, 0))))) - 0)))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, 0 ^ (5))))), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))), 0 ^ (0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(~ (~ (int(ivec3(int(5), 1, 1)))), (0 | 0) | (~ (~ (int(ivec3(int(5), 1, 1))))))))))) | (_GLF_IDENTITY(0, (0) ^ 0) ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))), 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(0), int(0)))))))), ~ (~ (int(ivec3(int(5), 1, 1)))))))))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), (int(ivec3(int(5), 1, 1))) << 0), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) : (_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), 0)), (0) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, clamp(5, 5, 5)), 5))))), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), _GLF_IDENTITY((ivec3(int(5), 1, 1)), ivec3(0, 0, 0) | ((ivec3(int(5), 1, 1)))) ^ ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), min(_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))) | 0)))))) * 1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), min(int(5), int(5))), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (ivec3(int(5), 1, 1)) ^ ivec3(0, 0, 0)))))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))))) * 1)))), 0 ^ (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) : (_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), 0)), (0) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, clamp(5, 5, 5)), 5))))), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), _GLF_IDENTITY((ivec3(int(5), 1, 1)), ivec3(0, 0, 0) | ((ivec3(int(5), 1, 1)))) ^ ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), min(_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1))))))), (_GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))) | 0)))))) * 1), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), min(int(5), int(5))), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (ivec3(int(5), 1, 1)) ^ ivec3(0, 0, 0)))))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))))) * 1)))))), min(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) : (_GLF_IDENTITY(_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 1))))), int(1))))) | (_GLF_IDENTITY(0, (0) ^ 0))), (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0))) ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), _GLF_IDENTITY(1, min(1, 1)), 1))))))) | (0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ _GLF_IDENTITY((int(ivec3(int(5), 1, 1))), ((int(ivec3(int(5), 1, 1)))) | ((int(ivec3(int(5), 1, 1)))))))))))))), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) : (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), max(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), clamp(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(0, (0) ^ 0))))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))))), false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) : (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(5, (5) | (5))), 1, 1)), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(_GLF_IDENTITY(5, ~ (~ (5)))), 1, 1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(_GLF_IDENTITY(5, ~ (~ (5)))), 1, 1)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(_GLF_IDENTITY(5, ~ (~ (5)))), 1, 1))))))))) | (0 | 0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicXor(_injected_loop_counter, 97135)) : _GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(5, (5) | (5))), 1, 1)), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (_GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ (5)), clamp((~ (5)), (~ (5)), (~ (5)))))), 1, 1)), min(_GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ (5)), clamp((~ (5)), (~ (5)), (~ (5)))))), 1, 1)), (true ? int(ivec3(int(_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ (5)), clamp((~ (5)), (~ (5)), (~ (5)))))), 1, 1)) : _GLF_FUZZED(_injected_loop_counter))), int(ivec3(int(_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ (5)), clamp((~ (5)), (~ (5)), (~ (5)))))), 1, 1)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(_GLF_IDENTITY(5, ~ (~ (5)))), 1, 1)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(5), 1, 1), (ivec3(int(5), 1, 1)) ^ ivec3(0, 0, 0))), ~ (~ (int(ivec3(int(_GLF_IDENTITY(5, ~ (~ (5)))), 1, 1))))))))) | (0 | 0)))))))), false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), int(_GLF_IDENTITY(ivec4((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)), (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))), int(1))))), 1, 1), (_GLF_IDENTITY(ivec4((_injected_loop_counter) | (_injected_loop_counter), (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), (int(1)) + 0), int(1))))), 1, 1), (ivec4((_injected_loop_counter) | (_injected_loop_counter), (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), (int(1)) + 0), int(1))))), 1, 1)) << ivec4(0, 0, 0, 0))) << ivec4(0, 0, 0, 0)))))) : (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), 0 + (int(5)))) | (int(5))), int(5))), 1, 1)), ~ (~ (int(ivec3(int(5), 1, 1)))))))))))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))), (_injected_loop_counter) | (_injected_loop_counter))), min(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))), (_injected_loop_counter) | (_injected_loop_counter))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))), (_injected_loop_counter) | (_injected_loop_counter)))) | 0), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))), (_injected_loop_counter) | (_injected_loop_counter))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))), (_injected_loop_counter) | (_injected_loop_counter)))) << 0))) : (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0) ^ 0, max((0) ^ 0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) * 1))), max(_GLF_IDENTITY((0) ^ 0, max((0) ^ 0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) * 1))), _GLF_IDENTITY(_GLF_IDENTITY((0) ^ 0, max((0) ^ 0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) * 1))), (_GLF_IDENTITY((0) ^ 0, max((0) ^ 0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) * 1)))) | 0)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(5, 1, 0), (ivec3(5, 1, 0)) | ivec3(0, 0, 0))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(5, 1, 0), (ivec3(5, 1, 0)) | ivec3(0, 0, 0))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(5, 1, 0), (ivec3(5, 1, 0)) | ivec3(0, 0, 0)))), 1 * ((int(_GLF_IDENTITY(ivec3(5, 1, 0), (ivec3(5, 1, 0)) | ivec3(0, 0, 0))))))))))))), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(int(5), 1, 1)), ~ (~ (int(ivec3(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, max(5, 5))))), 1, 1)))))))))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) >> 0, 0 | (_GLF_IDENTITY((0) >> 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (0) >> 0)))))) - 0) | (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (1 ^ 1), 0)))) << _GLF_IDENTITY(0, (0) << 0))) | (_injected_loop_counter))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))))) : (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), (int(5)) >> 0), 1, 1)), ~ (~ (int(ivec3(int(5), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ((1) >> 0) ^ 0)), 1)))))))))), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (1 ^ 1), 0)))) << _GLF_IDENTITY(0, (0) << 0))) | (_injected_loop_counter))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))))) : (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), (int(5)) >> 0), 1, 1)), ~ (~ (int(ivec3(int(5), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ((1) >> 0) ^ 0)), 1)))))))))), false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (1 ^ 1), 0)))) << _GLF_IDENTITY(0, (0) << 0))) | (_injected_loop_counter))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))))) : (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), (int(5)) >> 0), 1, 1)), ~ (~ (int(ivec3(int(5), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ((1) >> 0) ^ 0)), 1)))))))))), false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (1 ^ 1), 0)))) << _GLF_IDENTITY(0, (0) << 0))) | (_injected_loop_counter))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))))) : (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 1, 1)), 0 ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(5), (int(5)) >> 0), 1, 1)), ~ (~ (int(ivec3(int(5), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ((1) >> 0) ^ 0)), 1))))))))))))))))))))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, max(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, clamp(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, min(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1))) << 0), min(false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter + _injected_loop_counter), ~ (~ ((_injected_loop_counter + _injected_loop_counter))))), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1)), false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1)), false ? _GLF_IDENTITY(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), clamp(_GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)), _GLF_FUZZED((_injected_loop_counter + _injected_loop_counter)))) : 1))))) | (1))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                        return;
                       return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                      {
                       return;
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.8) : injectionSwitch.x))), float(_GLF_FUZZED(-3577.2514)), bool(false))) > injectionSwitch.y))) || false)))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                        break;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       break;
                      }
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.8) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      break;
    }
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, true, true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, true, true))))) && true)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     for(int _injected_loop_counter = ((int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(47.68), max(_GLF_IDENTITY(_GLF_FUZZED(47.68), (_GLF_FUZZED(47.68)) + 0.0), _GLF_IDENTITY(_GLF_FUZZED(47.68), (_GLF_FUZZED(47.68)) / 1.0))))))), injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 + (_GLF_IDENTITY(int(6), 1 * (int(6)))))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(! (! (false))), _GLF_IDENTITY(bool(bool(bool(! (! (false))))), ! (! (bool(bool(bool(! (! (false))))))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | (0 ^ 0)))
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
