#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4 _f0;
 mat4x2 _f1;
 mat4 _f2;
 mat4 _f3;
 bvec4 _f4;
 uint _f5;
 bool _f6;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
 _GLF_struct_9 _f1;
 bvec3 _f2;
 _GLF_struct_10 _f3;
 uvec2 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_12 {
 uint workgroup_size;
 bool _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
 mat4x2 _f1;
 bvec3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 mat2x4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 mat2 _f1;
 ivec4 _f2;
 vec2 _f3;
 uint _f4;
 uvec2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 vec4 _f1;
 mat3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 bvec2 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 bvec4 _f1;
 ivec4 _f2;
 uvec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 ivec2 _f1;
 _GLF_struct_0 _f2;
 mat2 _f3;
 float _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_8 {
 uint subgroup_local_id;
 _GLF_struct_2 _f0;
 _GLF_struct_7 _f1;
 uint _f2;
 ivec4 _f3;
 mat4x2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(gl_SubgroupInvocationID, _GLF_struct_2(vec3(1.0), ivec2(1), _GLF_struct_0(mat2x3(1.0), ivec3(1)), mat2(1.0), 1.0, _GLF_struct_1(mat2x4(1.0), bvec4(true), ivec4(1), uvec3(1u), uvec2(1u))), _GLF_struct_7(_GLF_struct_3(mat2(1.0), mat2(1.0), ivec4(1), vec2(1.0), 1u, uvec2(1u), mat2x4(1.0)), vec4(1.0), mat3(1.0), _GLF_struct_4(mat2(1.0), mat2x4(1.0), bvec2(true)), _GLF_struct_5(mat3(1.0), mat4x2(1.0), bvec3(true), ivec4(1)), bvec2(true), _GLF_struct_6(vec2(1.0))), 1u, ivec4(1), mat4x2(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_WorkGroupSize.x, true, _GLF_struct_11(mat4x2(1.0), _GLF_struct_9(mat3(1.0), bvec3(true)), bvec3(true), _GLF_struct_10(mat4(1.0), mat4x2(1.0), mat4(1.0), mat4(1.0), bvec4(true), 1u, true), uvec2(1u), mat4(1.0), bvec4(true)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_12.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_8.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec4(int(0), 1, 0, 1)), 0 + (int(ivec4(int(0), 1, 0, 1))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
}
