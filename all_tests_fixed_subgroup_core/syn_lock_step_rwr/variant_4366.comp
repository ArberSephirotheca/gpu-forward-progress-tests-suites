#version 460
struct _GLF_struct_5 {
 bool _f0;
 mat2 _f1;
 uint workgroup_size;
 bvec3 _f2;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 bool _f1;
 vec2 _f2;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 bool _f1;
 bool _f2;
 mat2x4 _f3;
 mat2 _f4;
 float _f5;
 vec2 _f6;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 uvec4 _f1;
 mat4 _f2;
 mat3x4 _f3;
 bvec4 _f4;
 mat2x3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 uint subgroup_size;
 ivec4 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 uvec2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(uvec2(1u), gl_SubgroupSize, ivec4(1), _GLF_struct_2(_GLF_struct_0(ivec4(1), uvec4(1u), mat4(1.0), mat3x4(1.0), bvec4(true), mat2x3(1.0), vec4(1.0)), _GLF_struct_1(vec4(1.0), true, true, mat2x4(1.0), mat2(1.0), 1.0, vec2(1.0))), _GLF_struct_3(vec4(1.0), true, vec2(1.0)), uvec2(1u));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(true, mat2(1.0), gl_WorkGroupSize.x, bvec3(true));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_5.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_4.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_4.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_4.subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
}
