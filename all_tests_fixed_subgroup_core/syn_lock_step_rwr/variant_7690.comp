#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bvec4(! (! (_GLF_WRAPPED_IF_TRUE(true))), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec3(-1.9, -18.36, -235.392))) : injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bool((true))), (bool(bool((true)))) || false)) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, length(vec2(0.0, 0.0)), sin(length(vec2(0.0, 0.0))), 0.0, 1.0)), mat2(1.0) * (vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, length(vec2(0.0, 0.0)), sin(length(vec2(0.0, 0.0))), 0.0, 1.0))))).y, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + _GLF_IDENTITY(0.0, float(mat2(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(473.128) : 0.0)) : _GLF_FUZZED(step(-45.93, 67.44)))), 1.0, 0.0)))) > injectionSwitch.y) || false)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))), (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), false || (! (false))))))))))))) || _GLF_IDENTITY(false, false || (false))))) || _GLF_IDENTITY(false, ! (! (false)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)))
      return;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 0, 1, 0)), max(int(ivec4(_injected_loop_counter, 0, 1, 0)), int(ivec4(_injected_loop_counter, 0, 1, 0))))), _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))), 1, ((0 & -74250) << _GLF_IDENTITY(int(7), int(7))), 1))), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | 0) - 0))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), 1, ((0 & -74250) << _GLF_IDENTITY(int(7), int(7))), 1))), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | 0) - 0))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-8.9)), bool(false)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), 1, ((0 & -74250) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), 1))), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | 0) - 0))), (true ? _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), 1, ((_GLF_IDENTITY(0 & -74250, (true ? _GLF_IDENTITY(0 & -74250, (0 & -74250) | (_GLF_IDENTITY(0 & -74250, 0 ^ (0 & -74250)))) : _GLF_FUZZED(-6900)))) << _GLF_IDENTITY(int(7), int(7))), 1))), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | 0) - 0))) : _GLF_FUZZED(-14255))))))) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), (1u | 1u) * (~ (workgroup_id)))))))) ^ 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ((! (false))) && true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, log(cos(0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat2x4(injectionSwitch.y, log(cos(0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 0), int(ivec2((0 ^ 0), 1)))); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, _GLF_IDENTITY(1 | 1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1 | 1)))))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(-77816) : int(7)))) + _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), clamp(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))))))))) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))) || false))))), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (_GLF_IDENTITY(! (! ((true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((true))), bool(_GLF_IDENTITY(bvec2(! (! ((true))), true), bvec2(bvec3(bvec2(! (! ((true))), true), false)))))), ! (! (! (_GLF_IDENTITY(! (! ((true))), bool(_GLF_IDENTITY(bvec2(! (! ((true))), true), bvec2(bvec3(bvec2(! (! ((true))), true), false))))))))))))))))))))))))))))) || false))))))))))))), true && (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))))))))) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))) || false))))), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (_GLF_IDENTITY(! (! ((true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((true))), bool(_GLF_IDENTITY(bvec2(! (! ((true))), true), bvec2(bvec3(bvec2(! (! ((true))), true), false)))))), ! (! (! (_GLF_IDENTITY(! (! ((true))), bool(_GLF_IDENTITY(bvec2(! (! ((true))), true), bvec2(bvec3(bvec2(! (! ((true))), true), false))))))))))))))))))))))))))))) || false))))))))))))), bool(bvec3((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))))))))) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))) || false))))), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (_GLF_IDENTITY(! (! ((true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((true))), bool(_GLF_IDENTITY(bvec2(! (! ((true))), true), bvec2(bvec3(bvec2(! (! ((true))), true), false)))))), ! (! (! (_GLF_IDENTITY(! (! ((true))), bool(_GLF_IDENTITY(bvec2(! (! ((true))), true), bvec2(bvec3(bvec2(! (! ((true))), true), false))))))))))))))))))))))))))))) || false))))))))))))), false, false))))) && true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (true ? workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) : _GLF_FUZZED(workgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), (max(_injected_loop_counter, _injected_loop_counter)) + 0)) != 1), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 1), false, true, false))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), mix(float(_GLF_FUZZED(331.715)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), mix(float(_GLF_FUZZED(331.715)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y), true, true, true))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, 0 | (0))), 1, _GLF_IDENTITY(1, 0 | (1)))), (1) | 0)), ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))), (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))) + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (uint(_GLF_ONE(1.0, injectionSwitch.y)) | _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u))), uint(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (float(mat4x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-6.9))), 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * 1.0)))))), 1u))) + ((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(subgroup_local_id), (true ? subgroup_size : _GLF_FUZZED(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (! (_GLF_WRAPPED_IF_FALSE(false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, abs(1.0), 1.0))))) < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), bool(bvec4(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), true, true, true)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, false))), true, true)), (bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false))))) || false))), true, false))), true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (vec3(injectionSwitch.x, 1.0, 0.0)) * mat3(1.0))), clamp(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (vec3(injectionSwitch.x, 1.0, 0.0)) * mat3(1.0))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (vec3(injectionSwitch.x, 1.0, 0.0)) * mat3(1.0))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (vec3(injectionSwitch.x, 1.0, 0.0)) * mat3(1.0)))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((false) && true, ((false) && true) || false))))), ! (! ((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((false) && true, ((false) && true) || false)))))))))))))
      return;
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (_GLF_DEAD(false)) || false))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         continue;
        }
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))).y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))) && true), true, false, true)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, false, _GLF_IDENTITY(false, false || (false)))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, false, _GLF_IDENTITY(false, false || (false)))), true, false)), (bool(bvec3(bool(bvec4(false, false, false, _GLF_IDENTITY(false, false || (false)))), true, false))) && true)))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec2(false, false)))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec2(false, false))))))) && true, false || ((_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec2(false, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec2(false, false)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec2(false, false))))))), true, false, false)))))) && true))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 | (~ (1)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  break;
                 return;
                }
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
            return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, int(ivec2(64, 1))), 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0)))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), true && (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-20.18)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-20.18)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(608.780), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1582.3966)), bvec2(true, false))).x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, abs(0.0), 1.0, abs(1.0), 0.0))).y)))))), float(_GLF_FUZZED((-7843.9331 - 7.2))), bool(false))) > injectionSwitch.y)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true && (((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))), bool(bvec2(! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))) && ((injectionSwitch.x > injectionSwitch.y))))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))).y))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
            break;
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          return;
         return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           continue;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(int(0)), (_GLF_IDENTITY(int(int(0)), (true ? int(int(0)) : _GLF_FUZZED(5645)))) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), clamp(int(int(0)), int(int(_GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0), _GLF_IDENTITY(max(_GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0), _GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0)), max(max(_GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0), _GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0)), max(_GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0), _GLF_IDENTITY(int(int(0)), (int(int(0))) ^ 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), false))))))))))))
        break;
       if(_GLF_DEAD(false))
        continue;
       do
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) << 0u)) | (read_1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ _GLF_IDENTITY((read_1), max((read_1), (read_1))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) << 0u), ~ (~ _GLF_IDENTITY((read_1), max((read_1), (read_1))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))))))) | (read_1), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ _GLF_IDENTITY((read_1), ((read_1)) >> 0u))))))) | (read_1), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), clamp(_GLF_IDENTITY(~ (read_1), min(~ (read_1), ~ (read_1))), ~ (read_1), ~ (read_1))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), 0u + (_GLF_IDENTITY(read_1, ~ (~ (read_1))))) : _GLF_FUZZED(workgroup_base)), 1u * ((true ? _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), 0u + (_GLF_IDENTITY(read_1, ~ (~ (read_1))))) : _GLF_FUZZED(workgroup_base))))), ~ (~ (_GLF_IDENTITY(read_1, ~ (~ (read_1)))))), _GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, max(read_1, read_1))))), (false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ (~ (read_1))))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (~ (read_1))), ~ (~ (_GLF_IDENTITY((~ (~ (read_1))), ((~ (~ (read_1)))) | 0u)))), min(_GLF_IDENTITY(~ (~ (~ (read_1))), (~ (~ (~ (read_1)))) | (~ (~ (~ (read_1))))), ~ (~ (_GLF_IDENTITY(~ (read_1), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u), max(uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u), uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u)))))))))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (_GLF_IDENTITY(~ (~ (~ (read_1))), min(_GLF_IDENTITY(~ (~ (~ (read_1))), (~ (~ (~ (read_1)))) | (~ (~ (~ (read_1))))), ~ (~ (~ (read_1)))))))), uint(uint(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), max(_GLF_IDENTITY(~ (read_1), (1u & 1u) * (~ (read_1))), _GLF_IDENTITY(~ (read_1), (~ (read_1)) / 1u))))))))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (_GLF_IDENTITY(~ (~ (~ (read_1))), min(_GLF_IDENTITY(~ (~ (~ (read_1))), (~ (~ (~ (read_1)))) | (~ (~ (~ (read_1))))), ~ (~ (~ (read_1)))))))), uint(uint(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), max(_GLF_IDENTITY(~ (read_1), 1u * (~ (read_1))), ~ (read_1))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (_GLF_IDENTITY(~ (~ (~ (read_1))), min(_GLF_IDENTITY(~ (~ (~ (read_1))), (~ (~ (~ (read_1)))) | (~ (~ (~ (read_1))))), ~ (~ (~ (read_1)))))))), uint(uint(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (_GLF_IDENTITY(~ (read_1), 0u + (~ (read_1)))) | (_GLF_IDENTITY(~ (read_1), 0u | (~ (read_1)))))))))))) | 0u)))) << (0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (read_1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec2(read_1, 0u), uvec2(0u, 0u) + (uvec2(read_1, 0u)))))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))))))) >> 0u) | (read_1), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, (read_1) | (read_1))))), ~ (~ _GLF_IDENTITY((read_1), ((read_1)) | (_GLF_IDENTITY((read_1), ((read_1)) - 0u))))))))) | (read_1))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1)))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, (read_1) | 0u), read_1)), ~ (~ _GLF_IDENTITY((read_1), ((read_1)) >> 0u))))))) | (read_1), 0u | _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1, ~ (~ (read_1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))), ~ (~ (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))), (uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))) ^ 0u)))))), 0u | (~ (_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) / 1u))), _GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (_GLF_IDENTITY(~ (~ (~ (read_1))), 0u ^ (~ (~ (~ (read_1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ (~ (read_1))) : _GLF_FUZZED(read_2))))))), uint(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (~ (~ (~ (read_1)))))))))) | (read_1)), (true ? ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1, ~ (~ (read_1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))), ~ (~ (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))), (uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))))) ^ 0u)))))), 0u | (~ (_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) / 1u))), _GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (_GLF_IDENTITY(~ (~ (~ (read_1))), 0u ^ (~ (~ (~ (read_1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ (~ (read_1))) : _GLF_FUZZED(read_2))))))), uint(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), ~ (~ (~ (~ (read_1)))))))))) | (read_1)) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ _GLF_IDENTITY((read_1), ((read_1)) - 0u))))))) | (read_1), min((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(read_1, ~ (~ (read_1)))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(read_1, ~ (~ (read_1)))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(read_1, ~ (~ (read_1)))) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(read_1, ~ (~ (read_1)))) / 1u)))) | 0u)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), min(_GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (true ? _GLF_IDENTITY(read_1, ~ (~ (read_1))) : _GLF_FUZZED(workgroup_base))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), min(_GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY(read_1, ~ (~ _GLF_IDENTITY((read_1), 0u + ((read_1))))))))))))) | (read_1))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1)))), (clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ _GLF_IDENTITY((read_1), ((read_1)) >> 0u))))))) | (read_1), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), min(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - 0u), ~ (read_1))))), ~ (~ (_GLF_IDENTITY(read_1, ~ (~ (read_1)))))), _GLF_IDENTITY(read_1, ~ (~ (read_1))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ _GLF_IDENTITY((~ (read_1)), ((~ (read_1))) << 0u)), (false ? _GLF_FUZZED(bitfieldInsert(virtual_gid, read_2, -90411, -89891)) : _GLF_IDENTITY(read_1, ~ _GLF_IDENTITY((~ (read_1)), ((~ (read_1))) << 0u))) + 0u))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (_GLF_IDENTITY(read_1, (read_1) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), min((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(~ (~ (read_1)), (~ (~ _GLF_IDENTITY((read_1), ((read_1)) * 1u))) ^ 0u)), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1)))), (uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))) ^ 0u)))) | (read_1))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), max(~ (read_1), ~ (read_1))))), uint(uint(_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) | (read_1))))) ^ 0u) : _GLF_FUZZED(workgroup_id))))))))) + 1 == read_2) + 1, _GLF_IDENTITY(4, (4) >> 0), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))))))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) || false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || false))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (! (bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))))))))
      return;
    }
   else
    {
    }
  }
}
