#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true))), true))))
  barrier();
 uvec4 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(false || (! (_GLF_WRAPPED_IF_TRUE(true))), (false || (! (_GLF_WRAPPED_IF_TRUE(true)))) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), false, true, true)))))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * (1 & 1))), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz = GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_base;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.6)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(1.6), max(_GLF_FUZZED(1.6), _GLF_FUZZED(1.6)))), bool(false)))), _GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))), true && (bool(_GLF_IDENTITY(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, true, false)), (bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, true, false))) || false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.y = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
uint subgroup_size = 16;
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.y = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(85.51)), float(injectionSwitch.y), bool(true))))))), false, false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.z = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6549.7736) : injectionSwitch.y)))), true, true, false))) || false))))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), float(mat3x4(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat2(0.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(true, (true) || false))))
    barrier();
   barrier();
  }
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_GLF_IDENTITY(15623, (15623) >> 0)) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), false))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size.x = _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.w, (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.w) << 0u);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.x = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, uvec3(_GLF_IDENTITY(0u, 1u * (0u)), 0u, 0u) | _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size), ((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) ^ uvec3(0u, 0u, 0u))), uvec3(uvec3(_GLF_IDENTITY(((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)), clamp(((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)), ((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)), ((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size))))))) | uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(5.4, float(mat4x3(5.4, exp(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-747.561))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-195.886)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-747.561))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-195.886)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 1.0)), clamp(determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-747.561))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-195.886)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 1.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-747.561))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-195.886)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 1.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-747.561))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-195.886)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-747.561))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-195.886)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 1.0)))), sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), determinant(mat4(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), -127.465)) : injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))).x;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), bool(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), true)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), bool(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), true)))), false))))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size.z = workgroup_size;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))) && true), true && _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), false || _GLF_IDENTITY(((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true))), bool(_GLF_IDENTITY(bvec2(((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true))), false), bvec2(bvec4(bvec2(((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true))), false), true, false)))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0) | (_GLF_IDENTITY(0, int(int(0)))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.w = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, (false ? _GLF_FUZZED((~ GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) : GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u))), max(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) << 0u), 0u), (_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, 0u, 0u), uvec3(uvec3((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u)), (GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size + GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) : uvec3(0u, 0u, 0u)))))))).z, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, (false ? _GLF_FUZZED((~ GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) : GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size))) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, 0u, 0u), max(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) << 0u), 0u), (_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, 0u, 0u), uvec3(uvec3((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u)), (GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size) ^ _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size + GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) : uvec3(0u, 0u, 0u))), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size + GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) : uvec3(0u, 0u, 0u))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED((GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size + GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)) : uvec3(0u, 0u, 0u)))))))))).z));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), clamp(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))))))) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(+ -4.6, clamp(_GLF_IDENTITY(+ -4.6, mix(float(+ -4.6), float(_GLF_FUZZED(370.594)), bool(false))), + -4.6, + -4.6)))), (_GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(+ -4.6, 1.0 * _GLF_IDENTITY(_GLF_IDENTITY((+ -4.6), float(float((+ -4.6)))), (_GLF_IDENTITY((+ -4.6), float(float((+ -4.6))))) - 0.0))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(+ -4.6, (+ -4.6) / 1.0), 1.0 * _GLF_IDENTITY((+ -4.6), float(float((+ -4.6)))))) : _GLF_FUZZED(-2537.7894))))) - 0.0)), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(17.48, 60.29)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(132.025, -1.2)) : injectionSwitch)).y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))), injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x > injectionSwitch.y)))) && true), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0]), clamp(_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_IDENTITY(_GLF_FUZZED((+ -4.6)), (_GLF_IDENTITY(_GLF_FUZZED((+ -4.6)), clamp(_GLF_FUZZED((+ -4.6)), _GLF_FUZZED((+ -4.6)), _GLF_FUZZED((+ -4.6))))) + 0.0)), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), injectionSwitch[0]), (_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(702.959), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4317.3553)), bvec2(true, false)))[0], _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), min(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))))), mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), (mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))) / 1.0)))), injectionSwitch[0]), float(mat2x4(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), max(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), float(mat4x2(mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), injectionSwitch[0]), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0), 1.0 * (_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(847.316)), vec2(_GLF_FUZZED(6337.8508), (injectionSwitch)[1]), bvec2(false, true)))[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, true)), true, true, false)), ! (! (bool(bvec4(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-93658) : 1))])).y, true, true)), true, _GLF_IDENTITY(true, true && (true)), false)))))))))))), injectionSwitch[0]), (_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ _GLF_IDENTITY(-4.6, (true ? _GLF_IDENTITY(-4.6, float(mat4(-4.6, _GLF_IDENTITY(cos(0.0), (cos(0.0)) - 0.0), 1.0, 0.0, 1.0, 1.0, length(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(0.2)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-129.533)), bool(false))))), 0.0)), sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), dot(vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float((ivec3(-98984, -73628, -9344) != ivec3(-17008, 85883, -57467))))), float(0.0), bool(true))), sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch[0]), float(mat2x4(clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 0.0), (vec4(1.0, 1.0, 1.0, 0.0)) + vec4(0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9364.6668)), bool(false))))), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), true && ((injectionSwitch.x < injectionSwitch.y))))))), sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, (1.0) - length(vec3(0.0, 0.0, 0.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(-1307.5913, -3653.4164, -73.45, 39.88, -9.8, -3370.1126, 8937.9636, -8.7, -685.746, 506.279, 364.611, 51.82, _GLF_IDENTITY(1.1, (1.1) * 1.0), -5673.5992, 4.2, -566.567), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(-1307.5913, -3653.4164, -73.45, 39.88, -9.8, -3370.1126, 8937.9636, -8.7, -685.746, 506.279, 364.611, 51.82, _GLF_IDENTITY(1.1, (1.1) * 1.0), -5673.5992, 4.2, -566.567), (mat4(-1307.5913, -3653.4164, -73.45, 39.88, -9.8, -3370.1126, 8937.9636, -8.7, -685.746, 506.279, 364.611, 51.82, _GLF_IDENTITY(1.1, (1.1) * 1.0), -5673.5992, 4.2, -566.567)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat4(1.0) * (transpose(_GLF_IDENTITY(mat4(-1307.5913, -3653.4164, -73.45, 39.88, -9.8, -3370.1126, 8937.9636, -8.7, -685.746, 506.279, 364.611, 51.82, _GLF_IDENTITY(1.1, (1.1) * 1.0), -5673.5992, 4.2, -566.567), (mat4(-1307.5913, -3653.4164, -73.45, 39.88, -9.8, -3370.1126, 8937.9636, -8.7, -685.746, 506.279, 364.611, 51.82, _GLF_IDENTITY(1.1, (1.1) * 1.0), -5673.5992, 4.2, -566.567)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) : _GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), _GLF_IDENTITY((+ -4.6), mix(float((+ -4.6)), float(_GLF_FUZZED(-812.891)), bool(false))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(exp(0.0), float(mat2(exp(0.0), 1.0, 1.0, 1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + (0.0))) - 0.0), 1.0, 0.0, 0.0))), 1.0), (mat4(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), _GLF_IDENTITY((+ -4.6), mix(float((+ -4.6)), float(_GLF_FUZZED(-812.891)), bool(false))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(exp(0.0), float(mat2(exp(0.0), 1.0, 1.0, 1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + (0.0))) - 0.0), 1.0, 0.0, 0.0))), 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), injectionSwitch[0]), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0))), clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.0, -272.977)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))[0], injectionSwitch[1]))[0], mix(float(_GLF_IDENTITY(_GLF_FUZZED((+ -4.6)), (_GLF_FUZZED((+ -4.6))) / 1.0)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1]))))[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0]), _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), true && (! (true))), true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false))))), injectionSwitch[0]), clamp(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), true && (! (true))), true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false))))), injectionSwitch[0]), _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), true && (! (true))), true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false))))), injectionSwitch[0]), (clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), true && (! (true))), true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false))))), injectionSwitch[0])) + 0.0), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), true && (! (true))), true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false))))), injectionSwitch[0])))))), injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0)))), min(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0))))))], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0]), clamp(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))), ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))))))))))), injectionSwitch[0]), (clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ _GLF_IDENTITY(-4.6, mix(float(-4.6), float(_GLF_FUZZED(-6.0)), bool(false)))), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (true ? vec3(1.0, 0.0, 0.0) : _GLF_FUZZED(vec3(152.816, 702.693, 19.93))))), dot(_GLF_IDENTITY(vec3(0.0, sqrt(1.0), cos(0.0)), min(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(0.0, sqrt(1.0), cos(0.0)))), vec3(1.0, 0.0, 0.0))), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-74.36)), float(0.0), bool(true)))), 1.0))))), float(injectionSwitch[0]), _GLF_IDENTITY(bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), injectionSwitch.x))) / _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.5) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, abs(1.0), 0.0))), max(injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), (bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))) && true))))), injectionSwitch[0])) / 1.0), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[_GLF_IDENTITY(0, (0) / 1)]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))) && true), (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5.6)), bvec2(true, false)))[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ _GLF_IDENTITY(-4.6, max(-4.6, -4.6))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0]), clamp(_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED((+ _GLF_IDENTITY(-4.6, (-4.6) / 1.0)))), (float(_GLF_FUZZED((+ _GLF_IDENTITY(-4.6, (-4.6) / 1.0))))) / 1.0), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), injectionSwitch[0]), (_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (_GLF_IDENTITY(+ -4.6, mix(float(+ -4.6), float(_GLF_FUZZED(-207.414)), bool(false)))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), min(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)))), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), (false ? _GLF_FUZZED(-3.8) : float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (_GLF_IDENTITY(+ -4.6, mix(float(+ -4.6), float(_GLF_FUZZED(-207.414)), bool(false)))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), min(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)))), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))[0]), float(mat2x4(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch[0]), mix(float(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch[0]), mix(float(_GLF_FUZZED(-1.3)), float(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch[0])), bool(true)))), float(_GLF_FUZZED(vec2(-2.3, -0.9).s)), bool(false))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0), 1.0 * (_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, true)), true, true, false)), ! (! (bool(bvec4(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, true)), true, true, false)))))))))))), injectionSwitch[0]), (_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ _GLF_IDENTITY(-4.6, (true ? _GLF_IDENTITY(-4.6, float(mat4(-4.6, cos(0.0), 1.0, 0.0, 1.0, 1.0, length(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(0.2)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1482.7467)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.3))), 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-129.533)), bool(false))))), 0.0)), sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.9)), float(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))), bool(true)))))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch[0]), float(mat2x4(clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(mat2x4(vec3(1.0, 0.0, 0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, abs(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, abs(1.0)), vec2(0.0, 1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (true ? vec3(mat2x4(vec3(1.0, 0.0, 0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, abs(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, abs(1.0)), vec2(0.0, 1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(vec3(3.7, 0.8, -265.762)))))), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) + 0)], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(50.64))), 0.0, 0.0)))), cos(0.0)), vec3(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(mat4(-1307.5913, -3653.4164, -73.45, 39.88, -9.8, -3370.1126, 8937.9636, -8.7, -685.746, 506.279, 364.611, 51.82, 1.1, -5673.5992, 4.2, -566.567)) : mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, (0.0) - 0.0), sqrt(1.0), cos(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), cos(0.0)), vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.4))), 1.0))), float(_GLF_FUZZED(9.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0))), 1.0, exp(0.0), 1.0))))), float(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-4444.8219)), float(injectionSwitch[0]), bool(true)))), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(true, ! (! (true))) && ((injectionSwitch.x < injectionSwitch.y))))))), sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0))))), injectionSwitch[0]), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0))), clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float(_GLF_IDENTITY(_GLF_FUZZED((+ -4.6)), (_GLF_FUZZED((+ -4.6))) / 1.0)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6.0, 51.15)) : injectionSwitch)), injectionSwitch))[1], 1.0 * (injectionSwitch[1]))))[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) || false), bool(bvec2(_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, false))) || false))))), _GLF_IDENTITY(injectionSwitch[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])) : _GLF_FUZZED(max(-0.3, -5.0)))))))), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(1, 0 | (1))))], float(_GLF_IDENTITY(mat4(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(1, 0 | (1))))], round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, sqrt(0.0), 1.0, sqrt(0.0), abs(abs(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), log(1.0)), (mat4(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(1, 0 | (1))))], round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, sqrt(0.0), 1.0, sqrt(0.0), abs(abs(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), log(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0)))), min(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))), 0)))), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))) : _GLF_FUZZED(7621))), 0))))))], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch[0]), clamp(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))), ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))))))))))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))), ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))))))))))), sqrt(0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(-5.3) : float(vec4(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))), ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, false)))), true))))))))))))), sqrt(0.0), 0.0, 0.0))))), injectionSwitch[0]), (clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(_GLF_IDENTITY((+ -4.6), float(mat4x2(_GLF_IDENTITY((+ -4.6), clamp((+ -4.6), (+ -4.6), (+ -4.6))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), cos(0.0)), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (true ? vec3(1.0, 0.0, 0.0) : _GLF_FUZZED(vec3(152.816, 702.693, 19.93))))), dot(_GLF_IDENTITY(vec3(0.0, sqrt(1.0), cos(0.0)), min(vec3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(vec4(0.0, abs(0.0), 0.0, 0.0))), 0.0)), sqrt(1.0), cos(0.0)), vec3(0.0, sqrt(1.0), cos(0.0)))), vec3(1.0, 0.0, 0.0))), 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-74.36)), float(0.0), bool(true)))), 1.0))))), float(injectionSwitch[0]), _GLF_IDENTITY(bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), injectionSwitch.x))) / 1.0) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), (bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))))) && true))))), injectionSwitch[0])) / 1.0), clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), mix(float(_GLF_FUZZED((+ -4.6))), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[_GLF_IDENTITY(0, (0) / 1)]), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.0)), vec2(_GLF_FUZZED(-6.0), (injectionSwitch)[1]), bvec2(false, true)))[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], mix(float(_GLF_IDENTITY(_GLF_FUZZED((+ -4.6)), clamp(_GLF_FUZZED((+ -4.6)), _GLF_IDENTITY(_GLF_FUZZED((+ -4.6)), clamp(_GLF_FUZZED((+ -4.6)), _GLF_FUZZED((+ -4.6)), _GLF_FUZZED((+ -4.6)))), _GLF_FUZZED((+ -4.6))))), float(injectionSwitch[0]), bool(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))) && true), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))), injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))), bool(bvec2(bool(bvec2(false, false)), true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0), false || (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((-92165 | _injected_loop_counter)))), _GLF_IDENTITY((1) << 0, min((1) << 0, _GLF_IDENTITY((1) << 0, clamp((1) << 0, (1) << 0, (1) << 0))))) ^ 0)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))) && true)))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.w * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.z = workgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))), (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)))) * 1))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 ^ (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 uint virtual_gid = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size[0], GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size[1], GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size[2], GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size[3])))).y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.z + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), _GLF_IDENTITY(false || (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), bool(bvec2(_GLF_IDENTITY(false || (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), _GLF_IDENTITY(bool(bvec2(false || (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true)), true && (bool(bvec2(false || (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true))))), true)))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), false, false)))))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true))), false, true, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.y, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.y, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.y))), GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.y)), uint(uvec3(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) | uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))).y, 1u, 1u))))) * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size.z + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(_GLF_IDENTITY(5u, (5u) << 0u)))), uint(5u))), 1u)))) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u, 0u, 0u)).z, ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(_GLF_IDENTITY(5u, _GLF_IDENTITY((5u) << 0u, max((5u) << 0u, (5u) << 0u)))))), uint(5u))), 1u)))) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u, 0u, 0u)).z) * 1u)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), 1u)))), clamp((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), _GLF_IDENTITY((0u | 0u) | (uint(5u)), 0u | ((0u | 0u) | (uint(5u))))), uint(5u))), 1u)))), (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u)))) | (_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u)))) >> 0u))), 1u)))), (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), 1u)))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, 0u | ((0u) ^ 0u))))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) / 1u) | 0u), 0u, 0u)).z, max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(0u))), (0u) | 0u), 0u, 0u)).z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u)).z))), (((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), 1u)))) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u, 0u, 0u)).z)) - 0u), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), 1u))), (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), 1u)))) / 1u)) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u, 0u, 0u)) >> uvec4(0u, 0u, 0u, 0u))).z), ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u | 0u) | (uint(5u))), uint(5u))), 1u)))) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_size) >> uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u, 0u, 0u)).z)));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, 1 * (64)), min(64, _GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(int(64), int(ivec2(int(64), 1)))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(int(64), int(ivec2(int(64), 1)))), max(int(_GLF_IDENTITY(int(64), int(ivec2(int(64), 1)))), int(_GLF_IDENTITY(int(64), int(ivec2(int(64), 1))))))))))), 0);
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.x = read_1;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))), true, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true && (bool(bool(bvec3(_GLF_DEAD(false), true, true))))), true && (bool(bool(bvec3(_GLF_DEAD(false), true, true)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true && (_GLF_IDENTITY(bool(bool(bvec3(_GLF_DEAD(false), true, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true, false)), bvec3(bvec4(bvec3(bvec3(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true, false)), true)))))), false || (bool(_GLF_IDENTITY(bvec3(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true, false)), bvec3(bvec4(bvec3(bvec3(bool(bool(bvec3(_GLF_DEAD(false), true, true))), true, false)), true))))))))))))))))))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz, (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz) | (_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz, uvec3(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz, clamp(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz)), 0u))))).x + 1), 4, 64, _GLF_IDENTITY(4, 0 ^ (4)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(-2.2, 4356.7834) / sin(7.2))) : injectionSwitch)).y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, 0.0))), determinant(mat3(1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, determinant(mat3(1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), sqrt(0.0), 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, exp(0.0)), (false ? _GLF_FUZZED(mat3x4(-149.266, -355.474, 0.0, -5.8, 834.040, 9980.1232, 5463.5777, -33.98, -7518.4222, 9.6, -1.2, 656.119)) : mat3x4(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, 0.0))), determinant(mat3(1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, determinant(mat3(1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), sqrt(0.0), 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / cos(0.0)), 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, exp(0.0)))))) < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, 0 + ((0) << 0))), 0, _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, 0 + ((0) << 0))), 0, _GLF_IDENTITY(0, (0) >> 0)), 0 ^ (clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, 0 + ((0) << 0))), 0, _GLF_IDENTITY(0, (0) >> 0))))) - 0)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size.y = _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, min(read_2, read_2))) / _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1)))), (~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1))))) << 0u))), clamp(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1)))), (~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1))))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1)))), (~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1))))) << 0u))), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1)))), (~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (true ? uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(read_1))))) << 0u)))) | 0u), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), clamp(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (true ? uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.8) : injectionSwitch.y)))) : _GLF_FUZZED(read_1)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0), injectionSwitch.y)))), (true ? uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(read_1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0), injectionSwitch.y)))), (true ? uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(read_1)))), ((_GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0), injectionSwitch.y)))), (true ? uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(read_1))))) ^ 0u)) >> 0u)) << 0u)))))), read_2));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec2(bool(bvec4(false, true, false, true)), true))))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.4)), bool(false))), abs(0.0), 1.0, 1.0, 0.0, 0.0)), (float(mat2x3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.4)), bool(false))), abs(0.0), 1.0, 1.0, 0.0, 0.0))) - 0.0)))))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(((-56.72 / -331.716))), _GLF_FUZZED(9.2)), min(vec2(_GLF_FUZZED(((-56.72 / -331.716))), _GLF_FUZZED(9.2)), vec2(_GLF_FUZZED(((-56.72 / -331.716))), _GLF_FUZZED(9.2)))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(_GLF_FUZZED(((-56.72 / -331.716))), _GLF_FUZZED(9.2)), min(vec2(_GLF_FUZZED(((-56.72 / -331.716))), _GLF_FUZZED(9.2)), vec2(_GLF_FUZZED(((-56.72 / -331.716))), _GLF_FUZZED(9.2)))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(-2468.6925, 0.4).x), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(97.85)), bvec2(true, false))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.x + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | 0))), 0 ^ (_GLF_IDENTITY(1, int(int(1))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) << 0))), int(_GLF_IDENTITY(int((~ (_GLF_IDENTITY(1, (1) << 0)))), (int((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) << 0))))) + (0 | 0)))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(1, (1) << 0)))) - 0, (((~ (_GLF_IDENTITY(1, (1) << 0)))) - 0) << 0))) == GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size.y), (uint(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_6_1_1_13_2_1_14read_1subgroup_sizeworkgroup_basenum_workgroup.xyz.x + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY((~ (1)) | 0, ~ (~ ((~ (1)) | 0)))))), 0 ^ (_GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) << 0))), int(_GLF_IDENTITY(int((~ (_GLF_IDENTITY(1, (1) << 0)))), (int((~ (_GLF_IDENTITY(1, (1) << 0))))) + (0 | 0)))), ((~ (_GLF_IDENTITY(1, (1) << 0)))) - 0), (~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) << 0))), int(_GLF_IDENTITY(int((~ (_GLF_IDENTITY(1, (1) << 0)))), (int((~ (_GLF_IDENTITY(1, (1) << 0))))) + (0 | 0)))), ((~ (_GLF_IDENTITY(1, (1) << 0)))) - 0)) | 0)) == _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, max(GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size, GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_2workgroup_size)).y)) - 0u) + 1, 4, 64, 4);
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(-51580))), float(injectionSwitch.y), bool(true)))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))) + 0) > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && ((_GLF_WRAPPED_LOOP(false))))) && true) && _GLF_IDENTITY(true, ! (! (true)))));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(vec3(-0.6, -574.138, -0.6) * mat2x3(1606.1198, 5912.5646, 873.552, 7.9, -21.76, -4209.2111), (_GLF_IDENTITY(true, ! (! (true))) ? vec3(_GLF_IDENTITY(-0.6, mix(float(-0.6), float(_GLF_FUZZED(-1.6)), bool(false))), -574.138, -0.6) * mat2x3(1606.1198, 5912.5646, 873.552, _GLF_IDENTITY(7.9, mix(float(_GLF_IDENTITY(7.9, float(mat4x2(7.9, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), float(_GLF_FUZZED(-808.712)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), -21.76, -4209.2111) : _GLF_FUZZED(injectionSwitch))))))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(vec3(-0.6, -574.138, -0.6) * mat2x3(1606.1198, 5912.5646, 873.552, 7.9, -21.76, -4209.2111), (_GLF_IDENTITY(true, ! (! (true))) ? vec3(_GLF_IDENTITY(-0.6, mix(float(-0.6), float(_GLF_FUZZED(-1.6)), bool(false))), -574.138, -0.6) * mat2x3(1606.1198, 5912.5646, 873.552, _GLF_IDENTITY(7.9, mix(float(_GLF_IDENTITY(7.9, float(mat4x2(7.9, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-808.712)), (false ? _GLF_FUZZED(0.7) : float(_GLF_FUZZED(-808.712)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), -21.76, -4209.2111) : _GLF_FUZZED(injectionSwitch))))))).y, (false ? _GLF_FUZZED(955.686) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(vec3(-0.6, -574.138, -0.6) * mat2x3(1606.1198, 5912.5646, 873.552, 7.9, -21.76, -4209.2111), (_GLF_IDENTITY(true, ! (! (true))) ? vec3(_GLF_IDENTITY(-0.6, mix(float(-0.6), float(_GLF_FUZZED(-1.6)), bool(false))), -574.138, -0.6) * mat2x3(1606.1198, 5912.5646, 873.552, _GLF_IDENTITY(7.9, mix(float(_GLF_IDENTITY(7.9, float(mat4x2(7.9, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-808.712)), (false ? _GLF_FUZZED(0.7) : float(_GLF_FUZZED(-808.712)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), -21.76, -4209.2111) : _GLF_FUZZED(injectionSwitch))))))).y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
}
