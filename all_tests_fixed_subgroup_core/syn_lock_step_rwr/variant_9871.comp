#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id;
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.6))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9414.0614, 721.314)))), injectionSwitch)).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9414.0614, 721.314)))), injectionSwitch)).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9414.0614, 721.314)))), injectionSwitch)).y)), true, false, true))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.6))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9414.0614, 721.314)))), injectionSwitch)).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9414.0614, 721.314)))), injectionSwitch)).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9414.0614, 721.314)))), injectionSwitch)).y)), true, false, true)))))))))) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)) || false)))), (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))
          {
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))), max(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))), min(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))))), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) | 0), _GLF_IDENTITY(1, (1) >> 0))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w = subgroup_id;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      return;
     break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, abs(1.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))) + (0.0)), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), abs(0.0), 0.0, 0.0, length(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 0.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), length(vec4(0.0, 0.0, 0.0, 0.0))))).y))))
    return;
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) + (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(53.85))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) >> (_GLF_IDENTITY(0u, 0u | (0u)) & 107501u)))) / 1u)));
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u)), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u))) * 1u), 1u * (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u)), ~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u), uint(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0), injectionSwitch.y)) * (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup), ~ (~ ((GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup)))) / _GLF_IDENTITY(1u, min(1u, 1u))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup, (GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.x = num_workgroup) / 1u))))) | 0u)) ^ 0u))))))))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)), ~ (~ ((0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ _GLF_IDENTITY(((0u)), _GLF_IDENTITY(uint(uint(((0u)))), (uint(uint(((0u))))) / 1u))))) ^ (0u | 0u))))))) ^ uvec3(0u, 0u, 0u)), clamp((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), _GLF_IDENTITY((_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u), (0u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u)), 1u * (uint(uvec3((_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u), (0u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u)))))))) ^ uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)), (_GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u))) - (147025u & 0u)))) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u)), ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u))) | ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u)))), clamp((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))), ~ (~ ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, (0u ^ 0u)))))))))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u))))), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), ~ (~ ((0u))))) ^ (0u | 0u)))) ^ uvec3(0u, 0u, 0u)))))) + (gl_WorkGroupSize)))), (~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(86443u) : _GLF_IDENTITY(0u, (0u) - (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.x))))) & 48345u)))), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(86443u) : _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY((0u & 48345u), uint(uvec3(_GLF_IDENTITY((0u & 48345u), (_GLF_IDENTITY((0u & 48345u), _GLF_IDENTITY(max((0u & 48345u), (0u & 48345u)), uint(uint(max((0u & 48345u), (0u & 48345u))))))) | 0u), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) | 0u), 0u, 0u) ^ uvec3(0u, 0u, 0u)) + _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))), uvec3(1u, 1u, 1u) * ((gl_WorkGroupSize))))))) - uvec3(0u, 0u, 0u))).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))), mix(vec2(_GLF_FUZZED(vec4(-5.5, -8.8, -3.4, -5701.5476).p), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) | (1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(30.95)), bvec2(true, false))).x < injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))) || false), true, true, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false, true, true)), bool(bvec3(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false, true, true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(85.25)), vec2(_GLF_FUZZED(-674.893), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && ((injectionSwitch.x > injectionSwitch.y))))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5956.2676), _GLF_FUZZED(49.33)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(7.4))), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(! (true)), bool(bvec4(bool(! (true)), false, true, false))))))), true))).y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-21.33)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, true)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), true, true)))))))))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = ((0 | 0) & 56437); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, (1) * 1)))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) * 1))), 1, 1))); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).y, mix(float(_GLF_FUZZED((-88.42 / -5.9))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0)), float(mat4x3(float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-88.42 / -5.9))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.3)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))))))), sin(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          continue;
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)) && true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.z = workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-382.116, -54.52)))).x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, (((injectionSwitch.x > injectionSwitch.y)) || false) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)) && true, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)) && true, false, false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec4((_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)) && true, false, false, true)), false)), bool(bvec4(bool(bvec2(bool(bvec4((_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)) && true, false, false, true)), false)), false, true, true))))))))) && _GLF_IDENTITY(true, false || (true))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true), false))))))) && true)))) && true))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false)))) && true)) && true)))) && true)))))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), (int(0)) + 0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), true, false))))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.6)), vec2(_GLF_FUZZED(21.68), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), true))).y, true, _GLF_IDENTITY(false, false || (false))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false))))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) || false)) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && ((false))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), true && ((false))))), ! (! (bool(bool(_GLF_IDENTITY((false), true && ((false))))))))) && true)) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) | ((0 << _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.z;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size, min(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size, workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w) + 0u) * subgroup_size)) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y), true, true))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false)))) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)))))), (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, false)))))) || false)))))), ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))))))))) || false) || false)))), bool(bvec4((! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))))))))) || false) || false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! ((_GLF_IDENTITY(true, ! (! (true))))))))))) && true))), true && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! ((_GLF_IDENTITY(true, ! (! (true))))))))))) && true)))))))), true, false, false)))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))))), false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                        return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / (1 & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(6.1)), bool(false))), 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0)))))), (false) || false), false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true), true))))))), true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (_GLF_IDENTITY(false, false || (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), true, true, false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, 0u | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), 0u ^ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0))) | ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), 0u ^ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0))) | ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) - (1 ^ 1)))))))) - 0u) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(uint(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, 0u | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size))))), uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, _GLF_IDENTITY(min(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id), max(min(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id), _GLF_IDENTITY(min(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id), clamp(min(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id), min(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id), min(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)))))).w * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), subgroup_size))), uint(uint(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base)) + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u), (uvec3((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))) + 1) % subgroup_size), uint(uint(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)).w * subgroup_size, (workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)).w * subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u)) << uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))))))) >> 0u), (0u ^ _GLF_IDENTITY((1u ^ 1u), max((1u ^ 1u), (1u ^ 1u)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u))), (~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u)), ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u))) | ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u)), ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u))) | ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u)))))) ^ 0u)) | (~ (~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) >> 0u)))))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, 0u | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), 0u ^ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), clamp(~ ((1)), _GLF_IDENTITY(~ ((1)), (~ ((1))) | 0), ~ ((1)))))) << 0))) | ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(atomicXor(subgroup_size, subgroup_size)) : _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) + _GLF_IDENTITY(1, (1) << 0)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) << 0))) | ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0))) | _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0))), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))), 0u | (~ (((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))))))))) << 0u)))), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), 0u ^ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0))) | ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) + uvec4(0u, 0u, 0u, 0u)), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)).w, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))) | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))), min(uint(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, 0u | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), uint(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, 0u | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | (0u & 162142u))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)), (uint(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))) * 1u))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))))))))), (true ? (uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))))))))) : _GLF_FUZZED(workgroup_id))))), uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))))))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, max(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) ^ (subgroup_size))) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u), (uvec3((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size), uint(uint(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)).w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u)) << uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uint(uvec4(0u, 0u, 0u, 0u)), (uint(uvec4(0u, 0u, 0u, 0u))) | 0u), _GLF_IDENTITY(uint(uvec4(0u, 0u, 0u, 0u)), uint(uint(uint(uvec4(0u, 0u, 0u, 0u)))))))), 0u)), min(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), uint(uint(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((workgroup_base), 0u | ((workgroup_base)))))))))), ~ (~ (uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base))))))))), uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))))))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, max(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u), (uvec3((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + ((subgroup_local_id + 1) % subgroup_size), uint(uint(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)).w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u)) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(uint(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((++ virtual_gid)) : workgroup_base))), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))), ~ (~ (uint(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base))))), (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), clamp(~ (workgroup_base), ~ (workgroup_base), ~ (workgroup_base)))))) ^ 0u))), (0u ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, max(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w, GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY(0u, (0u) - 0u), 0u), (uvec3((_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(uint(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)).w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), 0u, 0u)) << uvec3(0u, 0u, 0u)))))) >> 0u)));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x = next_virtual_gid;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), mix(vec2(_GLF_FUZZED(7.0), _GLF_FUZZED(-87.77)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ 0), 1))], (false ? _GLF_FUZZED(813.120) : (injectionSwitch)[1]))), bvec2(true, true))).y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         continue;
         if(_GLF_DEAD(false))
          break;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec4(64, _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (_GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY(1, ~ (~ (1))))), 0, 1)), min(int(ivec4(64, 1, 0, 1)), int(ivec4(64, 1, 0, 1))))), 0);
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
  }
 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y = read_1;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], _GLF_IDENTITY(uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1), clamp(_GLF_IDENTITY(uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1), clamp(uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1), uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1), uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1))), uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id) * uvec4(1u, 1u, 1u, 1u)).y + 1), uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1))), ~ (~ (_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(38194))), (true ? _GLF_IDENTITY(4, 0 ^ (4)) : _GLF_FUZZED(_GLF_IDENTITY(-46092, max(-46092, -46092)))))))))), 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec2(true, false)))))), false)))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        {
        }
       else
        {
         return;
        }
      }
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (buf[virtual_gid]), 0u | (~ (buf[virtual_gid]))))), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))), true, false)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false)), bool(bool(bool(bvec3((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false)))))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (false)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), (injectionSwitch)), vec2(0.0, 0.0) + (max(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), (injectionSwitch))))) + vec2(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true), true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))), false, false), true)))))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(uintBitsToFloat(subgroup_id)) : injectionSwitch.x)), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec4(sqrt(0.0), 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec4(sqrt(0.0), 0.0, 1.0, 1.0))), 0.0))) > injectionSwitch.y)), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.2)), bool(false))) > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))) || false))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.8) : injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) || false), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))), false, false), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false))))), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(51.68)), bool(false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))), false, false), true))))))))))))) || false), false, true))) ? _GLF_FUZZED(_GLF_IDENTITY((vec2(-1.5, 72.21) * 1.5), mix(vec2(((vec2(-1.5, 72.21) * _GLF_IDENTITY(1.5, mix(float(_GLF_IDENTITY(1.5, (1.5) - 0.0)), float(_GLF_FUZZED(-936.963)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))[0], ((vec2(-1.5, 72.21) * 1.5))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-406.755), clamp(_GLF_FUZZED(-406.755), _GLF_FUZZED(-406.755), _GLF_FUZZED(-406.755))), _GLF_FUZZED(5848.3087)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, true)), (bool(bvec3((false), true, true))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0), _injected_loop_counter)) > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z = read_2;
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = ((_GLF_IDENTITY(57868 & _GLF_IDENTITY(-1372, clamp(_GLF_IDENTITY(-1372, (true ? -1372 : _GLF_FUZZED(25457))), _GLF_IDENTITY(-1372, clamp(-1372, -1372, -1372)), -1372)), max(57868 & -1372, 57868 & -1372))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & 1, (true ? 1 & 1 : _GLF_FUZZED(_injected_loop_counter))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 & -7059, min(0 & -7059, 0 & -7059))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
      {
       GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.y = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, ~ (~ (0u))))), 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)).z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (0))], GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2], (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2]) >> 0u), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[3]))) + (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), clamp(uvec4(5u), uvec4(5u), uvec4(5u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[0], GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2], (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2]) >> 0u), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[3]))) + _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(5u, ~ (~ (5u)))), _GLF_IDENTITY(uvec4(5u), clamp(uvec4(5u), uvec4(_GLF_IDENTITY(5u, (5u) >> 0u)), uvec4(5u))))), ((uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(5u, ~ (~ (5u)))), _GLF_IDENTITY(uvec4(5u), clamp(uvec4(5u), uvec4(_GLF_IDENTITY(5u, (5u) >> 0u)), uvec4(5u)))))) << uvec4(0u, 0u, 0u, 0u))), (false ? _GLF_FUZZED((workgroup_base * GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[0], GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2], (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2]) >> 0u), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[3]))) + (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), clamp(uvec4(5u), uvec4(5u), uvec4(5u)))))))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[0], GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2], (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2]) >> 0u), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[3])), min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[0], GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2], (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2]) >> 0u), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[3])), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[0], GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2], (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[2]) >> 0u), GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id[3]))))) + (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), clamp(uvec4(5u), uvec4(5u), uvec4(5u)))))))))).z, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)).z), ~ (~ ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id)).z))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true), true, true, false)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false, false))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false, false)))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1 == GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.y, _GLF_IDENTITY(bool(bool(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1 == GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.y)), bool(bvec2(bool(bool(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1 == GLF_merged3_0_1_13_1_1_6_2_1_12num_workgroupread_2workgroup_id.y)), false))))) + 1, 4, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(43712) : 64)), 4);
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(62.98), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.0)), bvec2(true, false))).y))))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bool((false)))))))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(81.82), _GLF_FUZZED(-6.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         break;
        }
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
