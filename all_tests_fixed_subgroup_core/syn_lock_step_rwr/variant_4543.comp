#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 uint _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
 _GLF_struct_10 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
} ;

struct _GLF_struct_5 {
 bool _f0;
 bvec3 _f1;
 mat2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 ivec3 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 uvec4 _f1;
 vec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 mat2x4 _f1;
 mat3x4 _f2;
 bvec2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 ivec4 _f2;
 bool _f3;
} ;

struct _GLF_struct_0 {
 int _f0;
 uvec2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 int _f1;
 vec2 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 uint subgroup_size;
 vec4 _f1;
 _GLF_struct_4 _f2;
 float _f3;
 uint _f4;
 _GLF_struct_8 _f5;
 uvec3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(_GLF_struct_0(1, uvec2(1u), vec2(1.0)), 1, vec2(1.0)), gl_SubgroupSize, _GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), vec4(1.0))), _GLF_struct_4(_GLF_struct_2(bvec2(true), mat2x4(1.0), mat3x4(1.0), bvec2(true), mat2(1.0)), _GLF_struct_3(ivec2(1), uvec4(1u), vec2(1.0), vec4(1.0)), ivec4(1), true), 1.0, 1u, _GLF_struct_8(_GLF_struct_5(true, bvec3(true), mat2(1.0), bvec4(true)), _GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1)))), _GLF_struct_6(mat2(1.0)), _GLF_struct_7(vec4(1.0), mat2x4(1.0))), uvec3(1u));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_11(bvec3(true), _GLF_struct_10(1u, mat4x2(1.0))), gl_WorkGroupID.x);
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_12.workgroup_id, min(workgroup_size * _GLF_struct_replacement_12.workgroup_id, workgroup_size * _GLF_struct_replacement_12.workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_9.subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, _GLF_IDENTITY(4, 1 * (_GLF_IDENTITY(4, max(4, 4)))));
}
