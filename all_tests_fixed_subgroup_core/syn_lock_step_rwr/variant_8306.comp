#version 460
struct _GLF_struct_9 {
 uvec3 _f0;
 bool _f1;
 vec2 _f2;
 mat2x3 _f3;
 mat4x2 _f4;
 mat2x3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
} ;

struct _GLF_struct_7 {
 bool _f0;
 vec3 _f1;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
} ;

struct _GLF_struct_5 {
 float _f0;
 vec4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_10 {
 mat2x3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 bvec3 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_3 {
 bool _f0;
 vec4 _f1;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 mat2x3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 vec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 mat4x2 _f6;
 uint workgroup_id;
} ;

struct _GLF_struct_11 {
 _GLF_struct_4 _f0;
 int _f1;
 vec2 _f2;
 uvec2 _f3;
 _GLF_struct_10 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_4(_GLF_struct_0(vec2(1.0)), mat3(1.0), vec2(1.0), _GLF_struct_1(mat4x3(1.0), mat2x3(1.0), ivec3(1)), _GLF_struct_2(uvec2(1u)), _GLF_struct_3(true, vec4(1.0)), mat4x2(1.0), gl_WorkGroupID.x), 1, vec2(1.0), uvec2(1u), _GLF_struct_10(mat2x3(1.0), _GLF_struct_5(1.0, vec4(1.0), bvec3(true)), _GLF_struct_6(mat4x2(1.0)), bvec3(true), _GLF_struct_7(true, vec3(1.0)), _GLF_struct_8(ivec3(1)), _GLF_struct_9(uvec3(1u), true, vec2(1.0), mat2x3(1.0), mat4x2(1.0), mat2x3(1.0), uvec4(1u))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_11._f0.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
}
