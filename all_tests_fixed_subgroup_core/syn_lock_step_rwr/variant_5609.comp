#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 uvec4 GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.xy = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 | (int(1)))) << 0), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false), true && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0))))), injectionSwitch, injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-9.5), _GLF_FUZZED(197.308)), vec2((clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0))))), injectionSwitch, injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0))))), injectionSwitch, injectionSwitch))[1]), bvec2(true, true)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mix(vec2(_GLF_FUZZED(-9.5), _GLF_FUZZED(197.308)), vec2((clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0))))), injectionSwitch, injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (true ? length(normalize(1.0)) : _GLF_FUZZED(sign(-524.257))))), 1.0, 0.0))))), injectionSwitch, injectionSwitch))[1]), bvec2(true, true)))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0, 0.0, 1.0, abs(1.0), round(length(normalize(1.0))), 1.0, 0.0))), injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(mat2(1.0), mat2(mat3x2(mat2(1.0)))) * (injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(_GLF_IDENTITY(length(normalize(1.0)), (false ? _GLF_FUZZED(inversesqrt(6.4)) : length(normalize(1.0))))), 1.0, 0.0))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(length(normalize(1.0))), 1.0, 0.0))), log(1.0), 0.0, 1.0, 0.0, 1.0, log(exp(0.0))))), injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(length(normalize(1.0))), 1.0, 0.0))), injectionSwitch, injectionSwitch)).y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch))[0], injectionSwitch[1])), injectionSwitch), mix(vec2(_GLF_FUZZED(-6497.1257), (max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch))[0], injectionSwitch[1])), injectionSwitch))[1]), vec2((max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch))[0], injectionSwitch[1])), injectionSwitch))[0], _GLF_FUZZED(85.34)), bvec2(true, false)))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), round(length(_GLF_IDENTITY(normalize(1.0), min(_GLF_IDENTITY(normalize(1.0), (normalize(1.0)) - 0.0), normalize(1.0))))), 1.0, 0.0))), injectionSwitch, injectionSwitch)).y)), false))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), (true ? float(mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-192.364))))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6869.8257) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))), (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), (true ? float(mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-192.364))))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6869.8257) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))), (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))), false, true))))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(1.0))), 0.0, 0.0, 1.0))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))))) || false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)), bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)), _GLF_IDENTITY(false, true && (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))) && true))) && true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))) && true)))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(1.0))), 0.0, 0.0, 1.0))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))))) || false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)), bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)), _GLF_IDENTITY(false, true && (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))) && true))) && true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))) && true)))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(1.0))), 0.0, 0.0, 1.0))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))))) || false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)), bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)), _GLF_IDENTITY(false, true && (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))) && true))) && true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))) && true)))))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))))) < injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true)))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
        }
      }
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), bool(bool((true))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))), ! (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))))))))))))))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(41522) : _GLF_IDENTITY(0, clamp(0, 0, 0))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))) + (injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.6)), bool(false)))) * 1.0) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))), ((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))))) && true)), false)))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
uint subgroup_size = 16;
 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz.x = subgroup_size;
 GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.xy.x = GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(exp(vec2(-576.854, 2.6))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) || false))) && true, ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) || false))) && true) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(42.22)), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) / cos(0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) << 0)], _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-388.523), _GLF_FUZZED(-96.12)), bvec2(false, false)))))[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.2), _GLF_FUZZED(-201.743)), bvec2(false, false)))) * exp(vec2(0.0, 0.0))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.2), _GLF_FUZZED(-201.743)), bvec2(false, false)))) * exp(vec2(0.0, 0.0))).y : _GLF_FUZZED(-1.8))), injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw.x = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(0.0, 0.0) + (injectionSwitch)))).y))), true)))) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(15.22)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-644.821, -350.275)) : (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-7.3, 434.046, 82.54, -2.4))))))))).y), false)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(0.0, 0.0) + (injectionSwitch)))).y))), true)))) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(15.22)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-644.821, -350.275)) : (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-7.3, 434.046, 82.54, -2.4))))))))).y), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(0.0, 0.0) + (injectionSwitch)))).y))), true)))) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(15.22)), bool(false))))), _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-644.821, -350.275)) : (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-7.3, 434.046, 82.54, -2.4))))))))).y), false)))))), false, false, false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, true)))) && true)))))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), (true ? _GLF_IDENTITY(max(4, 4), (max(_GLF_IDENTITY(4, (_GLF_IDENTITY(false, bool(bvec2(false, false))) ? _GLF_FUZZED(71406) : 4)), 4)) | (max(4, 4))) : _GLF_FUZZED(-90929))))), (true ? int(_GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, 0 | (4)), 4), (true ? _GLF_IDENTITY(max(4, 4), (max(4, 4)) | (max(4, 4))) : _GLF_FUZZED(-90929))))) : _GLF_FUZZED(81563))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), min(_GLF_IDENTITY(int(int(4)), clamp(int(int(4)), int(int(4)), int(int(4)))), int(int(4))))))), (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), ~ (~ (int(int(4))))))))) | (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), int(int(4)))))))), 0), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), min(_GLF_IDENTITY(int(int(4)), clamp(int(int(4)), int(int(4)), int(int(4)))), int(int(4))))))), (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), ~ (~ (int(int(4))))))))) | (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), int(int(4)))))))), 0), (ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), min(_GLF_IDENTITY(int(int(4)), clamp(int(int(4)), int(int(4)), int(int(4)))), int(int(4))))))), (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), ~ (~ (int(int(4))))))))) | (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), int(int(4)))))))), 0)) / ivec2(1, 1))) | (ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), min(_GLF_IDENTITY(int(int(4)), clamp(int(int(4)), int(int(4)), int(int(4)))), int(int(4))))))), (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), _GLF_IDENTITY(int(int(4)), ~ (~ (int(int(4))))))))) | (int(_GLF_IDENTITY(int(int(4)), min(int(int(4)), int(int(4)))))))), 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.y = _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(num_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? num_workgroup : _GLF_FUZZED(num_workgroup)))) * 1u);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), min(min(gl_WorkGroupSize, gl_WorkGroupSize), min(gl_WorkGroupSize, gl_WorkGroupSize)))), _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])) / uvec3(1u, 1u, 1u))).x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x) << 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))), bool(bvec2(_GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))), false))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.z = workgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz.z = GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.z;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-767.276), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-252.556)), bvec2(true, false))).y))))
      barrier();
     barrier();
    }
   GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw.y = GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz.z;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))), false)), true && (bool(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))), false)))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw, max(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, clamp(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], clamp(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0])), GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[2], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[3])), _GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec4(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[2], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[3])), GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)).zw, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)), uvec2(0u, 0u) + (_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw, max(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, clamp(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], clamp(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0])), GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[2], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[3])), _GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec4(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[2], GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[3])), GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)).zw, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)))).y * workgroup_id;
 GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.y = workgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))) || false))))
    barrier();
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-92396) : 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))))) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.y + GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.w * GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.xy.x + _GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), _GLF_IDENTITY(max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)), (_GLF_IDENTITY(max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)), (max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw))) / uvec2(1u, 1u))) | (max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)))), (~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), _GLF_IDENTITY(max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)), ~ (~ (max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)))))))) << uvec2(0u, 0u))) | (~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), max(~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ~ _GLF_IDENTITY((GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw), ((GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw)) >> (uvec2(0u, 0u) | uvec2(0u, 0u))))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz.y = virtual_gid;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.xy.y = GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz.y;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)))))
  barrier();
 uint next_virtual_gid = GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.y + GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.w * GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.xy.x + (_GLF_IDENTITY((GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw.x + 1), ((_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw.x + 1, min(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw.x + 1, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.zw.x + 1)))) - 0u) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, max(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(5u), uvec4(5u))) >> _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), uvec4(0u, 0u, 0u, 0u) | (uvec4(5u))))) * (_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, max(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))).xy, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, max(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)), ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(5u), uvec4(5u))) >> _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), uvec4(0u, 0u, 0u, 0u) | (uvec4(5u))))) * (_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, max(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))).xy))).x);
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), true, true, false)))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) && true))))), true && (false))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(6.6), _GLF_IDENTITY(float(vec3(_GLF_FUZZED(6.6), sin(0.0), 0.0)), mix(float(float(vec3(_GLF_FUZZED(6.6), sin(0.0), 0.0))), float(_GLF_FUZZED(95.69)), bool(false))))), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) || false))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))) / sqrt(1.0)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) || false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bvec3(true, false, false))))))))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3))), int(3))), (true ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3))), int(3))) : _GLF_FUZZED(_injected_loop_counter))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.04), _GLF_FUZZED(77.50)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]), (false ? _GLF_FUZZED(-70.62) : clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (false ? _GLF_FUZZED(-438.822) : _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, injectionSwitch.y))))), float(_GLF_FUZZED(_GLF_IDENTITY(-354.720, min(-354.720, -354.720)))), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))))))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 1.0, 0.0)))).x > injectionSwitch.y)), false), _GLF_IDENTITY(true, (true) || false))))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 1.0, 0.0)))).x > injectionSwitch.y)), false), _GLF_IDENTITY(true, (true) || false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2((false), true))), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), true, false))))))))))))
          barrier();
        }
       else
        {
         return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))))).xy.y], 4, 64, 0);
 GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.x = read_1;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z = GLF_merged3_0_1_6_1_1_14_2_1_14read_1workgroup_baseworkgroup_size.x;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-49.65)), bool(false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + 1), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    barrier();
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_2_49_2_2_56GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.xy.y], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(int(64)), (_GLF_IDENTITY(int(int(64)), 0 | (int(int(64))))) - (0 & 72235))), 0);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w = _GLF_IDENTITY(_GLF_IDENTITY(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read_2)), (_GLF_IDENTITY(_GLF_IDENTITY(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read_2)), uint(uvec3(_GLF_IDENTITY(read_2, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (read_2)), 1u, 1u)))) ^ 0u);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), true && (bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z, (true ? GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z : _GLF_FUZZED(min(read_2, read_2)))) + 1 == _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w))) + 1, (uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + _GLF_IDENTITY(1, 0 + (1)) == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + 1) | (uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + 1)), 4, 64, 4);
      }
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
}
