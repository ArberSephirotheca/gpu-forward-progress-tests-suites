#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u + (gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) << 0u)))))) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)), (max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))) >> 0u)))), (true ? _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | (0u | 0u)), (_GLF_IDENTITY((subgroup_id) | (subgroup_id), (true ? (subgroup_id) | (subgroup_id) : _GLF_FUZZED(subgroup_id)))) | 0u)) >> 0u))) | (subgroup_id)), subgroup_id)) * subgroup_size, _GLF_IDENTITY(min(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) - 0u), workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), (min(workgroup_base + _GLF_IDENTITY(subgroup_id, (0u ^ (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) << 0u) ^ (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))))), max(uvec3(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), 1u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, max(0u, 0u))))), uvec3(_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))), 1u, 0u))))), uint(2u)))) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) >> 0u))) * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) >> 0u)) + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) / (0u ^ 1u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))));
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY((4), max((4), (4))) - 0), 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id + 1, 0u), min(uvec2(subgroup_local_id + 1, 0u), uvec2(subgroup_local_id + 1, 0u)))) | uvec2(0u, 0u)))) < subgroup_size)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(4), int(4)))))
      {
       case 0:
       case 9:
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       case 49:
       case 20:
       int i = 0;
       case 91:
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y), false))))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false))))), true && (bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_IDENTITY(false || (((false))), (false || (((false)))) && true)), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(false, ! (! (false)))))), (! (! ((false)))) && true)))), _GLF_IDENTITY((! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), false || (((false)))), ! (_GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true))))), ((! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), false || (((false)))), ! (_GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true)))))) && true) && true))))), false || ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_IDENTITY(false || (((false))), (false || (((false)))) && true)), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(false, ! (! (false)))))), (! (! ((false)))) && true)))), (! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), false || (((false)))), ! (_GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true))))) && true))))))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))) || false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(true && (bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(true && (bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false || _GLF_IDENTITY((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(! ((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y))))))), (! ((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y)))))))) && true), true, true, true))))), true && (_GLF_IDENTITY(false || _GLF_IDENTITY((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)), float(_GLF_IDENTITY(mat2(mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)), 0.0, exp(0.0), round(length(normalize(1.0)))), transpose(transpose(mat2(mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)), 0.0, exp(0.0), round(length(normalize(1.0))))))))))))) * 1.0) < injectionSwitch.y)))))), ! (! ((true && (bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y))))))))), bool(bvec4(false || _GLF_IDENTITY((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y)))))), ! (! ((true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.7)), bool(false)))))) * 1.0) < injectionSwitch.y))))))))), true, false, false))))))) || _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false, false)))), bool(bvec2(false, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), false || (! (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))))))))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, _GLF_IDENTITY(64, int(ivec4(64, 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) / 1))), min(4, 4)));
       break;
       if(_GLF_DEAD(false))
        barrier();
       default:
       1;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     case 15:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     case 73:
     case 62:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     case 42:
     case 56:
     case 44:
     case 36:
     atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, _GLF_IDENTITY(_GLF_IDENTITY(0u, (61600u & 0u) | (0u)) ^ (read_2), (_GLF_IDENTITY(0u, (61600u & 0u) | (0u)) ^ (read_2)) + 0u))) | 0u), (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, _GLF_IDENTITY(0u, (61600u & 0u) | (0u)) ^ (read_2))) | 0u)) >> _GLF_IDENTITY(0u, ~ (~ (0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ (read_2))) | _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, max(0u, 0u))))), (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ (read_2))) | 0u)) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldReverse(next_virtual_gid))))), _GLF_IDENTITY(0u, max(0u, 0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ _GLF_IDENTITY((read_2), ~ (~ ((read_2)))))) | 0u), (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, _GLF_IDENTITY(0u ^ (read_2), 0u | (0u ^ (read_2))))) | 0u)) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, max(0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) << 0u), (_GLF_IDENTITY(read_2, _GLF_IDENTITY(0u ^ (read_2), (0u ^ (read_2)) | _GLF_IDENTITY((0u ^ (read_2)), uint(_GLF_IDENTITY(uint((0u ^ (read_2))), clamp(_GLF_IDENTITY(uint((0u ^ (read_2))), (uint((0u ^ (read_2)))) >> 0u), uint((0u ^ (read_2))), _GLF_IDENTITY(uint((0u ^ (read_2))), uint(uint(uint((0u ^ (read_2))))))))))))) | 0u), (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ (read_2))) | 0u)) << _GLF_IDENTITY(0u, _GLF_IDENTITY(max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, max(0u, 0u))), (_GLF_IDENTITY(max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))), 0u))), clamp(max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, max(0u, 0u))), max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, max(0u, 0u))), max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) >> 0u), _GLF_IDENTITY(0u, max(0u, 0u)))))) | (max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, max(0u, 0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ (read_2))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u)) >> _GLF_IDENTITY(uint(8u), uint(8u))) + (0u))), (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ (read_2))) | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, _GLF_IDENTITY(1u, ~ (~ (1u))))), (uint(uvec2(0u, _GLF_IDENTITY(1u, ~ (~ (1u)))))) ^ 0u)))) ^ 0u)))) + 1, 4, 64, 4);
     break;
     case 74:
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       while(true)
        {
         {
          mat4 _GLF_SWITCH_1_0v;
          while((125221u , true))
           {
            do
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
            while(_GLF_WRAPPED_LOOP(false));
            bvec2 _GLF_SWITCH_1_1v[79], _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
           }
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            do
             {
              while((_GLF_IDENTITY(uvec3(37349u, 195631u, 70723u), ((_GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, min(1u, 1u)), 1u), (uvec3(1u, _GLF_IDENTITY(1u, min(1u, 1u)), 1u)) << uvec3(0u, 0u, 0u)) ^ uvec3(1u, 1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, uint(uvec2(4u, 1u)))) | (4u))), max(uvec3(4u), uvec3(4u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), max(uvec3(4u), uvec3(4u))))))) | (uvec3(37349u, 195631u, 70723u))) != uvec3(188277u, 51925u, 170008u)))
               {
                do
                 {
                  mat2x4(-152.638, -0.4, 8.0, _GLF_IDENTITY(-4.9, (-4.9) + sqrt(0.0)), asinh(0.0), acos(0.2), mod(sin(24.39), -1.7), -9959.3234);
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                    barrier();
                   }
                 }
                else
                 {
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                   {
                    read_1;
                    if(_GLF_DEAD(false))
                     barrier();
                   }
                 }
               }
              if(_GLF_DEAD(false))
               barrier();
             }
            while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), (true && (injectionSwitch.x > injectionSwitch.y)) && true)))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), (false) && true), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, determinant(mat2(1.0, 1.0, 0.0, 1.0)), log(1.0)))))))), ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), false))))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), false))))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true), false))))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true), true && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)))))), bool(bvec3((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), true, true, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), true, true, false)), false, true))))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, _GLF_IDENTITY(max(186.098, 186.098), (true ? max(186.098, 186.098) : _GLF_FUZZED(length(vec4(3.1, 77.00, -9.0, 402.907)))))), 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-63.19))), 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)))))), bool(bvec3((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false, ! (! ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-2.3))), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)))))), false, true)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), false, true, false)), (bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), false, true, false))) && true)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-6.9))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)))))), bool(bvec3((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(186.098, max(186.098, 186.098)), (false ? _GLF_FUZZED(-576.031) : _GLF_IDENTITY(_GLF_IDENTITY(186.098, max(186.098, 186.098)), max(_GLF_IDENTITY(186.098, max(186.098, 186.098)), _GLF_IDENTITY(186.098, max(186.098, 186.098)))))), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(_GLF_IDENTITY(186.098, (false ? _GLF_FUZZED(log(7.6)) : 186.098)), 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), _GLF_IDENTITY(mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), (mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), (false ? _GLF_FUZZED(mat3(6.7, -0.6, 2587.0524, -6.5, -33.53, 5.5, 851.701, 445.599, -1448.1045)) : mat3(_GLF_IDENTITY(mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), (mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))))) / 1.0))) : injectionSwitch.x))) * 1.0) > injectionSwitch.y)))) || false)))))) || false))))), false, true)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false)))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false))))))) || false)))), bool(bvec3((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false))), bool(bvec3(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false))), true && (true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(186.098, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(186.098, max(186.098, 186.098)), 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0))) : injectionSwitch.x)) > injectionSwitch.y)))) || false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true))))))) || false)))))))))));
           }
          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
           }
          else
           {
            if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
             barrier();
           }
          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
           {
            while((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.9) : 0.0))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))))))))), 0.0)))) * vec3(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-64.68, mix(float(_GLF_FUZZED(31.58)), float(-64.68), bool(true))), -8.6, 5166.6993), vec3(vec4(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), (true ? _GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), min(vec3(-64.68, -8.6, 5166.6993), vec3(-64.68, -8.6, 5166.6993))) : _GLF_FUZZED(vec3(981.335, 8.5, 1.0)))), 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * vec3(1.0, 1.0, 1.0), ((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), _GLF_IDENTITY(0.0, (0.0) - 0.0))))) * vec3(1.0, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(1.0), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-8361.9457)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(66.85), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), vec3(1.0, 1.0, 1.0))))))) + vec3(0.0, 0.0, 0.0), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))))))))), 0.0)))) * vec3(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-64.68, mix(float(_GLF_FUZZED(31.58)), float(-64.68), bool(true))), -8.6, 5166.6993), vec3(vec4(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), (true ? _GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), min(vec3(-64.68, -8.6, 5166.6993), vec3(-64.68, -8.6, 5166.6993))) : _GLF_FUZZED(vec3(981.335, 8.5, 1.0)))), 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * vec3(1.0, 1.0, 1.0), ((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), _GLF_IDENTITY(0.0, (0.0) - 0.0))))) * vec3(1.0, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(1.0), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-8361.9457)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(66.85), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), vec3(1.0, 1.0, 1.0))))))) + vec3(0.0, 0.0, 0.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))))))))), 0.0)))) * vec3(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-64.68, mix(float(_GLF_FUZZED(31.58)), float(-64.68), bool(true))), -8.6, 5166.6993), vec3(vec4(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), (true ? _GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), min(vec3(-64.68, -8.6, 5166.6993), vec3(-64.68, -8.6, 5166.6993))) : _GLF_FUZZED(vec3(981.335, 8.5, 1.0)))), 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * vec3(1.0, 1.0, 1.0), ((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), _GLF_IDENTITY(0.0, (0.0) - 0.0))))) * vec3(1.0, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(1.0), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-8361.9457)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(66.85), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), vec3(1.0, 1.0, 1.0))))))) + vec3(0.0, 0.0, 0.0), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(true, true)))))))))), 0.0)))) * vec3(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-64.68, mix(float(_GLF_FUZZED(31.58)), float(-64.68), bool(true))), -8.6, 5166.6993), vec3(vec4(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), (true ? _GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), min(vec3(-64.68, -8.6, 5166.6993), vec3(-64.68, -8.6, 5166.6993))) : _GLF_FUZZED(vec3(981.335, 8.5, 1.0)))), 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * vec3(1.0, 1.0, 1.0), ((_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), _GLF_IDENTITY(0.0, (0.0) - 0.0))))) * vec3(1.0, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, 5166.6993), 0.0))), (_GLF_IDENTITY(vec3(-64.68, -8.6, 5166.6993), vec3(vec4(vec3(-64.68, -8.6, _GLF_IDENTITY(5166.6993, mix(float(_GLF_FUZZED(1.1)), float(5166.6993), bool(true)))), 0.0)))) * _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(1.0), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-8361.9457)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(66.85), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), vec3(1.0, 1.0, 1.0))))))) + vec3(0.0, 0.0, 0.0)) - vec3(0.0, 0.0, 0.0)))))) / vec3(1.0, 1.0, 1.0)) != clamp(_GLF_IDENTITY(vec3(-2812.5096, -7936.4307, _GLF_IDENTITY(736.669, (736.669) + tan(0.0))), (vec3(-2812.5096, -7936.4307, _GLF_IDENTITY(736.669, (736.669) + tan(0.0)))) / vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(8.9, float(mat3x4(8.9, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, 0.0, cos(0.0)))), 82.95)))
             {
              (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(16707, -94875), ~ (~ (ivec2(16707, -94875)))))))) - ivec2(-88893, -81826), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(16707, -94875), ivec2(1, 1) * (ivec2(16707, -94875))))), ivec2(16707, -94875))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875))), min(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) ^ (ivec2(0, 0) >> _GLF_IDENTITY(_GLF_IDENTITY(ivec2(2), ~ (~ (ivec2(2)))), _GLF_IDENTITY(ivec2(2), (false ? _GLF_FUZZED(ivec2(49659, 16227)) : ivec2(2)))))), ivec2(16707, _GLF_IDENTITY(-94875, (-94875) / 1)))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) | (-94875))), ivec2(16707, -94875), ivec2(16707, -94875))))), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), min(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) >> ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | ivec2(0, 0)), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), max(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), ~ (~ (ivec2(16707, -94875)))))), clamp(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) | (-94875))), _GLF_IDENTITY(ivec2(16707, -94875), (_GLF_IDENTITY(ivec2(16707, -94875), ~ (~ (ivec2(16707, -94875))))) - ivec2(0, 0)), ivec2(16707, -94875)))))), ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(_GLF_IDENTITY(16707, _GLF_IDENTITY(int(int(16707)), 0 + (int(int(16707))))), -94875), ivec2(16707, -94875), ivec2(16707, -94875))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), min(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(_GLF_IDENTITY(16707, max(16707, 16707)), -94875), ivec2(16707, -94875))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) | (-94875))), ivec2(16707, -94875), ivec2(16707, -94875)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(0, 0), ivec2(ivec3(ivec2(0, 0), 0))) | (_GLF_IDENTITY(ivec2(16707, -94875), _GLF_IDENTITY(_GLF_IDENTITY((ivec2(16707, -94875)), (_GLF_IDENTITY((ivec2(16707, -94875)), clamp(_GLF_IDENTITY((ivec2(16707, -94875)), max((ivec2(16707, -94875)), (ivec2(16707, -94875)))), (ivec2(16707, -94875)), (ivec2(16707, -94875))))) | ((ivec2(16707, -94875)))) << ivec2(0, 0), (_GLF_IDENTITY((ivec2(16707, -94875)), (_GLF_IDENTITY((ivec2(16707, -94875)), clamp(_GLF_IDENTITY((ivec2(16707, -94875)), max((ivec2(16707, -94875)), (ivec2(16707, -94875)))), (ivec2(16707, -94875)), (ivec2(16707, -94875))))) | ((ivec2(16707, -94875)))) << ivec2(0, 0)) << ivec2(0, 0))))))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, 0 | (_GLF_IDENTITY(-94875, (-94875) << 0)))), ivec2(16707, -94875))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) * ivec2(1, 1)), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(_GLF_IDENTITY(ivec2(16707, -94875), ivec2(0, 0) ^ (ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), max(ivec2(16707, -94875), ivec2(16707, -94875))))), ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), ivec2(_GLF_IDENTITY(ivec4(ivec2(16707, -94875), 0, _GLF_IDENTITY(1, min(1, 1))), ~ _GLF_IDENTITY((~ (ivec4(_GLF_IDENTITY(ivec2(16707, -94875), ((ivec2(-68921, -50605) | 67043) & ivec2(0, 0)) | (_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (ivec2(16707, -94875))))), 0, 1))), (false ? _GLF_FUZZED(ivec4(36606, -28127, -32499, 20637)) : _GLF_IDENTITY((~ (ivec4(_GLF_IDENTITY(ivec2(16707, -94875), ((ivec2(-68921, -50605) | 67043) & ivec2(0, 0)) | (_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (ivec2(16707, -94875))))), 0, 1))), ((~ (ivec4(_GLF_IDENTITY(ivec2(16707, -94875), ((ivec2(-68921, -50605) | 67043) & ivec2(0, 0)) | (_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (ivec2(16707, -94875))))), 0, 1)))) / ivec4(1, 1, 1, 1))))))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), (true ? _GLF_IDENTITY(ivec2(16707, -94875), ~ (~ (ivec2(16707, -94875)))) : _GLF_FUZZED(ivec2(95040, -39508)))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(16707, min(16707, 16707)), -94875), clamp(ivec2(_GLF_IDENTITY(16707, min(16707, 16707)), -94875), ivec2(_GLF_IDENTITY(16707, min(16707, 16707)), -94875), ivec2(_GLF_IDENTITY(16707, _GLF_IDENTITY(min(16707, 16707), (min(16707, 16707)) * 1)), -94875)))))))), ivec2(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(16707, 0 ^ (16707)), -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) ^ ivec2(0, 0))) / ivec2(1, 1)), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), _GLF_IDENTITY(clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875)), ivec2(0, 0) ^ (clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) << 0)), (ivec2(16707, -94875)) * ivec2(1, 1)), ivec2(16707, -94875)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), _GLF_IDENTITY(clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875)), (clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))) >> ivec2(0, 0))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (false ? _GLF_FUZZED(ivec2(96534, -89709)) : _GLF_IDENTITY(ivec2(16707, -94875), ivec2(0, 0) | (ivec2(16707, -94875))))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(_GLF_IDENTITY(16707, (_GLF_IDENTITY(16707, 0 ^ (16707))) << 0), -94875), ivec2(16707, -94875)))), max(max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (false ? _GLF_FUZZED(ivec2(96534, -89709)) : ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), min(_GLF_IDENTITY(ivec2(16707, -94875), ivec2(1, 1) * (ivec2(16707, -94875))), ivec2(16707, -94875)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (false ? _GLF_FUZZED(ivec2(96534, -89709)) : ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, _GLF_IDENTITY(-94875, 0 + (-94875))), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(_GLF_IDENTITY(16707, ~ (~ (_GLF_IDENTITY(16707, (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-53741))))) : 16707))))), -94875), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(_GLF_IDENTITY(-94875, 1 * (-94875)), (_GLF_IDENTITY(-94875, 1 * (-94875))) | (_GLF_IDENTITY(_GLF_IDENTITY(-94875, 1 * (-94875)), (_GLF_IDENTITY(-94875, 1 * (-94875))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (-94875) / 1)))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) ^ 0)), _GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) + ivec2(0, 0)), ivec2(16707, -94875)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (_GLF_IDENTITY(ivec2(16707, -94875), ivec2(ivec2(ivec2(16707, -94875)))))), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (ivec2(16707, -94875))), ivec2(16707, -94875))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (-94875) << 0)), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (_GLF_IDENTITY(-94875, clamp(-94875, -94875, _GLF_IDENTITY(-94875, max(-94875, -94875))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (_GLF_IDENTITY(_GLF_IDENTITY(-94875, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(-94875, (-94875) >> 0)), (~ (_GLF_IDENTITY(-94875, (-94875) >> 0))) + 0))), (true ? -94875 : _GLF_FUZZED(_injected_loop_counter)))) - 0)))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(_GLF_IDENTITY(16707, max(16707, 16707)), -94875), ivec2(_GLF_IDENTITY(16707, (16707) ^ 0), -94875), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, _GLF_IDENTITY(-94875, 0 ^ (_GLF_IDENTITY(-94875, min(-94875, -94875))))), ~ (~ (ivec2(16707, -94875)))), (_GLF_IDENTITY(ivec2(16707, -94875), ~ (~ (ivec2(16707, -94875))))) >> ivec2(0, 0))))))))), _GLF_IDENTITY(0, 0 | (0)), int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec4(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(16707, 0 ^ (16707)), -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) ^ ivec2(0, 0))) / ivec2(1, 1)), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), _GLF_IDENTITY(clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875)), ivec2(0, 0) ^ (clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) << 0)), (ivec2(16707, -94875)) * ivec2(1, 1)), ivec2(16707, -94875)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), _GLF_IDENTITY(clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875)), (clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))) >> ivec2(0, 0))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (false ? _GLF_FUZZED(ivec2(96534, -89709)) : _GLF_IDENTITY(ivec2(16707, -94875), ivec2(0, 0) | (ivec2(16707, -94875))))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(_GLF_IDENTITY(16707, (_GLF_IDENTITY(16707, 0 ^ (16707))) << 0), -94875), ivec2(16707, -94875)))), max(max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (false ? _GLF_FUZZED(ivec2(96534, -89709)) : ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), min(_GLF_IDENTITY(ivec2(16707, -94875), ivec2(1, 1) * (ivec2(16707, -94875))), ivec2(16707, -94875)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (false ? _GLF_FUZZED(ivec2(96534, -89709)) : ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), min(ivec2(16707, -94875), ivec2(16707, -94875))), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, _GLF_IDENTITY(-94875, 0 + (-94875))), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(_GLF_IDENTITY(16707, ~ (~ (_GLF_IDENTITY(16707, (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-53741))))) : 16707))))), -94875), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(_GLF_IDENTITY(-94875, 1 * (-94875)), (_GLF_IDENTITY(-94875, 1 * (-94875))) | (_GLF_IDENTITY(_GLF_IDENTITY(-94875, 1 * (-94875)), (_GLF_IDENTITY(-94875, 1 * (-94875))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (-94875) / 1)))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, _GLF_IDENTITY(-94875, (-94875) ^ 0)), _GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) + ivec2(0, 0)), ivec2(16707, -94875)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (_GLF_IDENTITY(ivec2(16707, -94875), ivec2(ivec2(ivec2(16707, -94875)))))), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, -94875))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), _GLF_IDENTITY(ivec2(16707, -94875), (ivec2(16707, -94875)) | (ivec2(16707, -94875))), ivec2(16707, -94875))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (-94875) << 0)), ivec2(16707, -94875))), clamp(_GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (_GLF_IDENTITY(-94875, clamp(-94875, -94875, _GLF_IDENTITY(-94875, max(-94875, -94875))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(16707, -94875), ivec2(16707, -94875), ivec2(16707, _GLF_IDENTITY(-94875, (_GLF_IDENTITY(_GLF_IDENTITY(-94875, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(-94875, (-94875) >> 0)), (~ (_GLF_IDENTITY(-94875, (-94875) >> 0))) + 0))), (true ? -94875 : _GLF_FUZZED(_injected_loop_counter)))) - 0)))), _GLF_IDENTITY(ivec2(16707, -94875), clamp(ivec2(_GLF_IDENTITY(16707, max(16707, 16707)), -94875), ivec2(_GLF_IDENTITY(16707, (16707) ^ 0), -94875), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(16707, _GLF_IDENTITY(-94875, 0 ^ (_GLF_IDENTITY(-94875, min(-94875, -94875))))), ~ (~ (ivec2(16707, -94875)))), (_GLF_IDENTITY(ivec2(16707, -94875), ~ (~ (ivec2(16707, -94875))))) >> ivec2(0, 0))))))))), _GLF_IDENTITY(0, 0 | (0)), int(_GLF_ONE(1.0, injectionSwitch.y)))) / ivec4(1, 1, 1, 1))))) - ivec2(_GLF_IDENTITY(-88893, (_GLF_IDENTITY(-88893, (-88893) >> 0)) | 0), -81826)))));
              if(_GLF_DEAD(false))
               barrier();
              (_GLF_IDENTITY(_GLF_IDENTITY(vec3(-65.23, -4.8, 3.9), (false ? _GLF_FUZZED(smoothstep(vec3(-6201.0910, -327.901, -304.299), vec3(-1.1, -1.0, 7.0), vec3(-2267.1836, 709.949, -1170.6985))) : vec3(-65.23, -4.8, 3.9))), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-65.23, clamp(_GLF_IDENTITY(_GLF_IDENTITY(-65.23, max(-65.23, -65.23)), (_GLF_IDENTITY(_GLF_IDENTITY(-65.23, max(-65.23, -65.23)), max(_GLF_IDENTITY(-65.23, max(-65.23, -65.23)), _GLF_IDENTITY(-65.23, max(-65.23, -65.23))))) - abs(length(vec3(0.0, 0.0, 0.0)))), -65.23, -65.23)), -4.8, 3.9), (true ? vec3(_GLF_IDENTITY(-65.23, clamp(_GLF_IDENTITY(-65.23, max(-65.23, -65.23)), -65.23, -65.23)), -4.8, 3.9) : _GLF_IDENTITY(_GLF_FUZZED(vec3(7.9, 0.2, 349.235)), (false ? _GLF_FUZZED(vec3(-52.95, -3958.7590, 3.9)) : _GLF_FUZZED(vec3(7.9, 0.2, _GLF_IDENTITY(349.235, (true ? 349.235 : _GLF_FUZZED(pow(-8046.2150, -9.1)))))))))), _GLF_IDENTITY(vec3(-65.23, -4.8, _GLF_IDENTITY(3.9, (true ? 3.9 : _GLF_FUZZED(-86.84)))), (vec3(-65.23, _GLF_IDENTITY(-4.8, clamp(-4.8, _GLF_IDENTITY(-4.8, min(-4.8, _GLF_IDENTITY(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), float(-4.8), bool(true))), clamp(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), float(-4.8), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), float(-4.8), bool(true))), (_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), _GLF_IDENTITY(float(_GLF_IDENTITY(-4.8, min(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-80.35)), float(-4.8), bool(true))), -4.8))), (float(_GLF_IDENTITY(-4.8, min(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-80.35)), float(-4.8), bool(true))), -4.8)))) * 1.0), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), float(-4.8), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), true && (! (bool(true)))))))), min(_GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), float(-4.8), bool(true))), _GLF_IDENTITY(-4.8, mix(float(_GLF_FUZZED(-7534.2512)), _GLF_IDENTITY(float(-4.8), max(float(-4.8), float(-4.8))), bool(true))))))))), _GLF_IDENTITY(-4.8, float(mat2x3(-4.8, 1.0, 1.0, 1.0, 1.0, 0.0))))), 3.9)) / vec3(1.0, 1.0, 1.0)))) + _GLF_IDENTITY(vec2(6.2, -0.7), _GLF_IDENTITY((true ? vec2(_GLF_IDENTITY(6.2, clamp(6.2, _GLF_IDENTITY(6.2, _GLF_IDENTITY(float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))))), clamp(float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), _GLF_IDENTITY(max(vec2(0.0, 1.0), vec2(0.0, 1.0)), vec2(0.0, 0.0) + (max(vec2(0.0, 1.0), vec2(0.0, 1.0))))), vec2(0.0, 1.0)), (dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, 1.0))) / 1.0)), 1.0, 1.0, 1.0, log(1.0))), float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, log(1.0))), float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-7.0)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), float(_GLF_FUZZED(5236.8067)), bool(false))), 1.0, 1.0, 1.0, _GLF_IDENTITY(log(1.0), (log(1.0)) * 1.0)))))), 6.2)), -0.7) : _GLF_FUZZED((5.2 + vec2(46.77, -5338.3894)))), vec2(0.0, 0.0) + ((true ? vec2(_GLF_IDENTITY(6.2, clamp(6.2, _GLF_IDENTITY(6.2, _GLF_IDENTITY(float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))))), clamp(float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.2) : 1.0))), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, 1.0)), (dot(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, 1.0))) / 1.0)), 1.0, 1.0, 1.0, log(1.0))), float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, log(1.0))), float(mat2x4(6.2, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-7.0)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), float(_GLF_FUZZED(5236.8067)), bool(false))), 1.0, 1.0, 1.0, log(1.0)))))), 6.2)), -0.7) : _GLF_FUZZED((5.2 + vec2(46.77, -5338.3894))))))).xyx);
              if(_GLF_DEAD(false))
               barrier();
              vec4 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
              for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(false))
                 barrier();
                (true ? inverse(mat2(_GLF_IDENTITY(_GLF_IDENTITY(-3857.8416, mix(float(_GLF_IDENTITY(-3857.8416, mix(float(_GLF_FUZZED(8.8)), float(-3857.8416), bool(true)))), _GLF_IDENTITY(float(_GLF_FUZZED(-523.920)), (_GLF_IDENTITY(float(_GLF_FUZZED(-523.920)), min(float(_GLF_FUZZED(-523.920)), float(_GLF_FUZZED(-523.920))))) / 1.0), bool(false))), clamp(-3857.8416, -3857.8416, -3857.8416)), 8.5, -625.997, 5.3)) : mat2(_GLF_IDENTITY(-7.8, (-7.8) - 0.0), -3.4, _GLF_IDENTITY(_GLF_IDENTITY(9042.7951, max(9042.7951, 9042.7951)), min(9042.7951, 9042.7951)), -54.57));
                if(_GLF_DEAD(false))
                 barrier();
               }
              if(_GLF_DEAD(false))
               barrier();
              if(_GLF_DEAD(false))
               barrier();
              matrixCompMult(_GLF_SWITCH_1_0v, _GLF_SWITCH_1_0v);
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    do
                     {
                      mat3x4(79.12, 91.53, 74.11, _GLF_IDENTITY(-3433.7396, mix(float(_GLF_FUZZED(-0.2)), float(_GLF_IDENTITY(-3433.7396, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-3433.7396, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, (0.0) - 0.0)), (true ? _GLF_IDENTITY(sin(0.0), clamp(_GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(1.9)), bool(false))), sin(0.0), sin(0.0))) : _GLF_FUZZED(1.0))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(-3433.7396, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))))), (float(_GLF_IDENTITY(mat3x4(-3433.7396, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(sin(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), (0.0) - 0.0)), (true ? sin(0.0) : _GLF_FUZZED(1.0))), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(-3433.7396, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), sin(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))))))) * 1.0))), bool(true))), -9.9, 62.77, 3863.8244, -25.15, -1939.5538, 22.05, -56.07, 938.989);
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                   }
                  else
                   {
                   }
                 }
                else
                 {
                 }
               }
              else
               {
               }
              ivec4 _GLF_SWITCH_1_6v[89], _GLF_SWITCH_1_7v;
              _GLF_SWITCH_1_7v;
             }
           }
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED((ivec2(66233, -36443).r % _injected_loop_counter)))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
             {
              for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) & 1)); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))))))) && true); _injected_loop_counter --)
               {
               }
              if(_GLF_DEAD(false))
               barrier();
             }
           }
          (mat2x4(-2.2, _GLF_IDENTITY(58.03, mix(float(_GLF_FUZZED(2069.7900)), float(58.03), bool(true))), 8339.2028, 67.24, -612.947, 4.2, 61.41, -29.88) + mat2x4(_GLF_IDENTITY(844.441, max(_GLF_IDENTITY(844.441, (844.441) / 1.0), _GLF_IDENTITY(844.441, 0.0 + (844.441)))), -43.30, _GLF_IDENTITY(50.41, mix(float(_GLF_FUZZED(581.715)), float(50.41), bool(true))), 74.01, 144.333, -0.4, 645.605, -67.86));
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              do
               {
                barrier();
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
           }
          else
           {
            for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 1, false), bvec2(bvec3(bvec2(_injected_loop_counter != 1, false), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 1, false), bvec2(bvec3(bvec2(_injected_loop_counter != 1, false), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), false, true, false))); _injected_loop_counter ++)
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                _GLF_IDENTITY(uvec2(145077u, 103625u), _GLF_IDENTITY((uvec2(145077u, 103625u)), min(_GLF_IDENTITY((uvec2(145077u, 103625u)), (_GLF_IDENTITY((uvec2(145077u, 103625u)), (false ? _GLF_FUZZED(uvec2(151396u, 91738u)) : (uvec2(145077u, 103625u))))) | ((uvec2(145077u, 103625u)))), (uvec2(145077u, 103625u)))) / uvec2(1u, 1u));
               }
              else
               {
               }
             }
           }
         }
         for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))))), (1 ^ 1) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) / 1, ~ (~ ((_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) / 1)))))
          {
           if(true)
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(((_GLF_IDENTITY(-4926.4987, min(-4926.4987, -4926.4987)) < 7003.3683) ? float(74160) : -32.00)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(3.1, (false ? _GLF_FUZZED(length(normalize(vec3(3.2, 2.9, -6632.7407)))) : _GLF_IDENTITY(_GLF_IDENTITY(3.1, (false ? _GLF_FUZZED(-8.1) : 3.1)), min(_GLF_IDENTITY(3.1, (false ? _GLF_FUZZED(-8.1) : 3.1)), _GLF_IDENTITY(3.1, (false ? _GLF_FUZZED(-8.1) : 3.1)))))))), bvec2(true, false))).y))))
            barrier();
          }
         ivec2 _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v[86];
        }
      }
     case 30:
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))), false || (! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))))))))
        {
         for(mat3x2 _GLF_SWITCH_1_10v[88]; (_GLF_IDENTITY(-2225 < _GLF_IDENTITY(64151, int(ivec2(64151, 0))), (-2225 < _GLF_IDENTITY(64151, int(ivec2(64151, 0)))) && true)); uvec4(27628u, 179323u, 184419u, 177412u))
          {
           if(_GLF_DEAD(false))
            barrier();
           uvec3 _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           ;
           mat2 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           vec4(-9.1, 3.8, 35.57, -9172.3868);
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))));
         if(_GLF_DEAD(false))
          barrier();
         floor(vec4(_GLF_IDENTITY(-1.7, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))) > injectionSwitch.y)) ? _GLF_FUZZED(464.020) : -1.7)), -57.15, 1344.8438, _GLF_IDENTITY(-5.9, _GLF_IDENTITY((-5.9), (_GLF_IDENTITY((-5.9), 1.0 * (_GLF_IDENTITY((-5.9), mix(float((-5.9)), float(_GLF_FUZZED(8744.2126)), bool(false)))))) / 1.0) / 1.0)));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     default:
     1;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bool(true))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.3)), bool(false))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.3)), bool(false))) > injectionSwitch.y, true, true, false))))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.3)), bool(false))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.3)), bool(false))) > injectionSwitch.y))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, false, true))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), true && (bool(bvec4(true, true, true, true)))))))))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))))))), (injectionSwitch.x > injectionSwitch.y)), true, true, false)), ! (! (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), _GLF_IDENTITY(false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))), false || (false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))), (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, false, true))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), true && (bool(bvec4(true, true, true, true)))))))))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))))))), (injectionSwitch.x > injectionSwitch.y)), true, true, false)), ! (! (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), _GLF_IDENTITY(false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))), false || (false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))), (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, false, true))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), true && (bool(bvec4(true, true, true, true)))))))))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))))))), (injectionSwitch.x > injectionSwitch.y)), true, true, false)), ! (! (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), _GLF_IDENTITY(false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))), false || (false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))))))))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), _GLF_IDENTITY(false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true))), false || (false || (bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true)))))))))))), (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
  }
}
