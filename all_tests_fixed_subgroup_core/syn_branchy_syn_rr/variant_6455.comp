#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_38 {
 ivec3 _f0;
 vec4 _f1;
 uint read_1;
} ;

struct _GLF_struct_35 {
 mat4x3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_34 {
 vec3 _f0;
 bvec3 _f1;
 mat3 _f2;
 bool _f3;
} ;

struct _GLF_struct_33 {
 bvec2 _f0;
 bool _f1;
} ;

struct _GLF_struct_32 {
 mat4x3 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 mat3 _f3;
 vec2 _f4;
 uvec3 _f5;
 bool _f6;
} ;

struct _GLF_struct_31 {
 bool _f0;
 vec4 _f1;
 float _f2;
} ;

struct _GLF_struct_36 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
 mat2x4 _f2;
 _GLF_struct_33 _f3;
 _GLF_struct_34 _f4;
 _GLF_struct_35 _f5;
} ;

struct _GLF_struct_29 {
 vec3 _f0;
 bvec3 _f1;
 uvec3 _f2;
 mat3x4 _f3;
 mat3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_28 {
 uvec2 _f0;
 float _f1;
 mat3 _f2;
 mat3x2 _f3;
 vec3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_30 {
 mat2x3 _f0;
 vec2 _f1;
 _GLF_struct_28 _f2;
 bvec3 _f3;
 _GLF_struct_29 _f4;
} ;

struct _GLF_struct_26 {
 uvec2 _f0;
 ivec2 _f1;
 mat3x2 _f2;
 mat3x2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_25 {
 mat2x3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_24 {
 mat4x3 _f0;
 uvec2 _f1;
 uvec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_27 {
 _GLF_struct_24 _f0;
 float _f1;
 _GLF_struct_25 _f2;
 ivec3 _f3;
 _GLF_struct_26 _f4;
} ;

struct _GLF_struct_23 {
 ivec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_21 {
 bvec4 _f0;
 mat4x2 _f1;
 ivec2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 mat4x3 _f1;
 _GLF_struct_21 _f2;
} ;

struct _GLF_struct_37 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_36 _f4;
 uint virtual_gid;
 uint _f5;
} ;

struct _GLF_struct_19 {
 mat3x2 _f0;
 mat2 _f1;
 uvec2 _f2;
 int _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_17 {
 mat4x3 _f0;
 ivec2 _f1;
 ivec4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 int _f1;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
 mat2 _f1;
 int _f2;
 bool _f3;
 mat2x3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_18 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 bvec3 _f2;
 _GLF_struct_17 _f3;
 ivec3 _f4;
 uint _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_13 {
 mat3x2 _f0;
 int i;
 vec3 _f1;
 bvec4 _f2;
 ivec4 _f3;
 uint _f4;
 mat4x3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_14 _f0;
 _GLF_struct_18 _f1;
 ivec4 _f2;
 _GLF_struct_19 _f3;
 mat4 _f4;
 mat3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 uvec3 _f1;
 int _f2;
 ivec2 _f3;
 mat4x3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 mat4 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_8 {
 uvec2 _f0;
 mat4x3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_9 {
 int _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_9 _f0;
 uint read_2;
 mat4x2 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 uint _f3;
 mat3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_4 {
 bool _f0;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 mat3 _f1;
 mat3x4 _f2;
 vec4 _f3;
 mat4 _f4;
 vec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 uvec3 _f1;
 ivec4 _f2;
 bool _f3;
 float _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 bvec3 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_0 {
 uint _f0;
 float _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 vec2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_7 {
 int _f0;
 bvec4 _f1;
 float _f2;
 bool _f3;
 uint subgroup_id;
 _GLF_struct_1 _f4;
 _GLF_struct_6 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec3 GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   return;
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1, bvec4(_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), true, gl_SubgroupID, _GLF_struct_1(_GLF_struct_0(1u, 1.0), vec2(1.0), mat2x4(1.0)), _GLF_struct_6(_GLF_struct_2(mat2x3(1.0), uvec3(1u), ivec4(1), true, 1.0), _GLF_struct_3(ivec4(1), _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(mat3x4(mat3(1.0))), transpose(_GLF_IDENTITY(transpose(mat3(mat3x4(mat3(1.0)))), (transpose(mat3(mat3x4(mat3(1.0))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), mat3x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(205.293) : _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(intBitsToFloat(84368)))), 1.0 * (false ? _GLF_FUZZED(205.293) : 1.0))))), vec4(1.0), mat4(1.0), vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4x3(1.0)), _GLF_struct_4(true), bvec3(true), _GLF_struct_5(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(sqrt(1.0))))).x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(9.7, 3652.9499, 699.744, -2.6)) : _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), mat2(mat3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(9.7, 3652.9499, 699.744, -2.6)) : _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))))), mat4x2(1.0), bvec4(true), 1u, mat3(1.0), vec3(1.0))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), int(3))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), false || (bool(bvec3(_GLF_DEAD(false), false, true))))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.8) : injectionSwitch.y)), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), true, _GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), true, _GLF_IDENTITY(true, false || (true))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), true, _GLF_IDENTITY(true, false || (true))), false)), true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
   for(int _injected_loop_counter = (1 ^ (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.z = workgroup_size;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))))).x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, min(1, 1)))) >> 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) >> 0), int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.y = workgroup_id;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
    {
     switch(_GLF_SWITCH(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0 ^ 0, clamp(_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, _GLF_IDENTITY(0 ^ 0, (false ? _GLF_FUZZED(-92790) : 0 ^ 0)), _GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))), 0 ^ 0, _GLF_IDENTITY(0 ^ 0, (0 ^ 0) << 0)))))))
      {
       case 0:
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       case 64:
       case 8:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       case 98:
       if(_GLF_DEAD(false))
        barrier();
       case 68:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       case 45:
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 14:
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), true, false, true))))))))))
        return;
       case 49:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0))))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       break;
       default:
       1;
      }
    }
  }
 uint workgroup_base = GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.z * _GLF_IDENTITY(GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size, (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size) | uvec3(0u, 0u, 0u)).y;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  {
  }
 else
  {
   GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x = workgroup_base;
  }
 _GLF_struct_37 _GLF_struct_replacement_37 = _GLF_struct_37(_GLF_struct_22(bvec4(true), mat4x3(1.0), _GLF_struct_21(bvec4(true), mat4x2(1.0), ivec2(1), bvec3(true))), _GLF_struct_23(ivec2(1), 1u), _GLF_struct_27(_GLF_struct_24(mat4x3(1.0), uvec2(1u), uvec2(1u), vec4(1.0)), 1.0, _GLF_struct_25(mat2x3(1.0), vec4(1.0)), ivec3(1), _GLF_struct_26(uvec2(1u), ivec2(1), mat3x2(1.0), mat3x2(1.0), mat3x4(1.0))), _GLF_struct_30(mat2x3(1.0), vec2(1.0), _GLF_struct_28(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(5u), uvec2(5u)))), 1.0, _GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), mat3x2(1.0), vec3(1.0), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), bvec3(true), _GLF_struct_29(vec3(1.0), bvec3(true), uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 0u)))) | (1u))) * 1u)), mat3x4(1.0), mat3(1.0), uvec3(1u))), _GLF_struct_36(_GLF_struct_31(true, vec4(1.0), 1.0), _GLF_struct_32(mat4x3(1.0), mat3x4(1.0), mat4x3(1.0), mat3(1.0), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), uvec3(1u), true), mat2x4(1.0), _GLF_struct_33(bvec2(true), true), _GLF_struct_34(vec3(1.0), bvec3(true), mat3(1.0), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(997.257)), bool(false))))) && (true))), _GLF_struct_35(mat4x3(1.0), mat4x3(1.0))), _GLF_IDENTITY(GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x, 1u * (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x)) + _GLF_struct_replacement_7.subgroup_id * subgroup_size + subgroup_local_id, 1u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, abs(0.0), 1.0)), max(vec2(mat3(injectionSwitch, 1.0, round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, abs(0.0), 1.0)), vec2(mat3(injectionSwitch, 1.0, round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, abs(0.0), 1.0))))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x + _GLF_struct_replacement_7.subgroup_id * subgroup_size, ~ (~ (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size.x + _GLF_struct_replacement_7.subgroup_id * subgroup_size))) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) + 0u)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u)) - 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u)), 0u ^ (_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u)), uint(uint(max(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) ^ 0u) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) / 1u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id)))) / 1u))), subgroup_local_id + 1, subgroup_local_id + 1))) ^ 0u))))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))))))))))), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
      {
       case 0:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 55:
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       case 75:
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       break;
       case 28:
       for(vec3 _GLF_SWITCH_2_0v[66]; any(bvec2(true, false)); bvec4(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || false), true))
        {
         if(_GLF_DEAD(false))
          break;
         bvec3 _GLF_SWITCH_2_1v[23], _GLF_SWITCH_2_2v;
         uvec4 _GLF_SWITCH_2_3v;
         bvec2(false, false);
         mat2x3(2486.9901);
         ivec4 _GLF_SWITCH_2_4v, _GLF_SWITCH_2_5v, _GLF_SWITCH_2_6v;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           while(true)
            {
             if(_GLF_DEAD(false))
              return;
             ;
             if((mat3x4(1826.2966, 101.686, 1.3, 33.84, -2.5, 2.8, -3.3, 2.4, 8.5, 8.0, -9.2, -4661.2290) == mat3x4(170.240, 936.095, 6476.7855, 0.8, -4.5, -650.144, -9849.3876, 407.628, -4394.9383, 47.43, 968.284, 4431.5906)))
              {
               ivec3(59162, 80829, -34176);
               mat4x2(2170.9686, 1.6, 533.759, -2.6, 309.404, 3704.2156, 1.6, -6.6);
               bvec4 _GLF_SWITCH_2_7v[19], _GLF_SWITCH_2_8v[92], _GLF_SWITCH_2_9v;
               ;
               do
                {
                 _GLF_SWITCH_2_4v;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
               bool _GLF_SWITCH_2_10v;
               int(false);
              }
             else
              {
               vec3(_GLF_IDENTITY(-6.6, (-6.6) - 0.0), _GLF_IDENTITY(33.20, clamp(33.20, 33.20, 33.20)), 0.4);
               mat2x3 _GLF_SWITCH_2_11v;
               (true ? _GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), true)))))) : _GLF_SWITCH_2_2v);
               usubBorrow(workgroup_id, packSnorm4x8(vec4(-289.227, 38.67, 765.087, -412.998)), next_virtual_gid);
               atomicExchange(_GLF_SWITCH_2_3v[2], num_workgroup);
              }
             mat2x3 _GLF_SWITCH_2_12v;
             for(mat4 _GLF_SWITCH_2_13v, _GLF_SWITCH_2_14v[27], _GLF_SWITCH_2_15v; false; mat2x4(length(step(vec4(237.654, 9026.3589, -572.199, 499.264), vec4(-3.2, -1756.0956, 136.342, 875.471))), length(injectionSwitch), (-7667.4744 + 9046.1008), 3896.0565, 5.9, 6.2, vec4(3.4, -7518.7769, 4902.3305, -4115.8604)[2], -84.33))
              {
               mat3(3879.7944, 4929.9159, -933.374, 7550.7596, 8694.5837, 96.86, -0.7, 8.0, 26.98);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               vec3 _GLF_SWITCH_2_16v, _GLF_SWITCH_2_17v, _GLF_SWITCH_2_18v[65];
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 outerProduct(injectionSwitch, injectionSwitch);
                }
               isnan(vec3(-9.0, 5.1, -429.753));
               if(_GLF_DEAD(false))
                break;
               vec3 _GLF_SWITCH_2_19v, _GLF_SWITCH_2_20v, _GLF_SWITCH_2_21v[55];
               bvec2(false, false);
               uvec4 _GLF_SWITCH_2_22v, _GLF_SWITCH_2_23v;
              }
             ;
             {
              vec4(-2130.9578, -26.92, -81.07, -6.0);
              float _GLF_SWITCH_2_24v;
              if(_GLF_DEAD(false))
               return;
              mat4x3 _GLF_SWITCH_2_25v;
              if(_GLF_DEAD(false))
               break;
              (true ? _GLF_IDENTITY(uvec4(86200u, 114087u, 189199u, 192457u), max(_GLF_IDENTITY(uvec4(86200u, 114087u, 189199u, 192457u), (true ? uvec4(86200u, 114087u, 189199u, 192457u) : _GLF_FUZZED(uvec4(133970u, 72873u, 14563u, 139560u)))), uvec4(86200u, 114087u, 189199u, 192457u))) : _GLF_SWITCH_2_3v);
              ;
             }
             mat3x4(vec4(-7.2, 45.92, -886.535, 5632.8199), roundEven(vec4(-23.87, -5.8, -91.18, _GLF_IDENTITY(95.35, max(_GLF_IDENTITY(95.35, clamp(95.35, 95.35, 95.35)), 95.35)))), vec4(5576.3200, -9.3, 2.9, -94.54));
            }
          }
         for(         inverse(mat2(mat4x2(317.209, 1.2, -23.77, -38.84, -4.0, -8247.9693, -1.1, -0.2)));
 (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u))) < workgroup_base); _GLF_SWITCH_2_5v)
          {
           mat3x4 _GLF_SWITCH_2_26v, _GLF_SWITCH_2_27v;
           ;
           mod(_GLF_IDENTITY(unpackUnorm4x8(next_virtual_gid), clamp(unpackUnorm4x8(next_virtual_gid), unpackUnorm4x8(next_virtual_gid), unpackUnorm4x8(next_virtual_gid))), _GLF_IDENTITY(vec4(4.4, -804.631, -65.55, -606.753), vec4(mat2(vec4(4.4, -804.631, _GLF_IDENTITY(-65.55, min(-65.55, -65.55)), -606.753)))));
           ;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             vec3(-3.2, 9.6, 3.5);
             ((mat2x4(-5.9, 5163.8851, 262.595, -2.4, 1.0, 3605.9684, _GLF_IDENTITY(19.47, (true ? _GLF_IDENTITY(19.47, max(19.47, 19.47)) : _GLF_FUZZED(tanh(439.661)))), 130.613) * (mat2(-693.399, -5.5, -1.3, 38.25) * mat2(-7.1, -199.679, 6.4, -246.096))) * mat4x2(_GLF_IDENTITY(1500.0364, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1500.0364, min(1500.0364, 1500.0364))), mix(float(_GLF_FUZZED(967.840)), float(float(_GLF_IDENTITY(1500.0364, min(1500.0364, 1500.0364)))), bool(true))), float(_GLF_FUZZED((+ 2.5))), bool(false))), 0.6, 5.2, 2794.1376, 664.457, -9.8, -3.2, -4.1));
             if(_GLF_DEAD(false))
              continue;
             vec2(2300.1869, -765.585);
             vec4(-0.6, 1616.4851, 25.82, -6.4);
             if(_GLF_DEAD(false))
              break;
             ;
             -64228;
             mat4x3 _GLF_SWITCH_2_28v;
            }
           while(true);
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
             continue;
           }
           mat4 _GLF_SWITCH_2_29v[8];
          }
         ivec2(-87825, 9782);
        }
       case 27:
       ivec3(-71279, 10355, -26259);
       default:
       if(_GLF_DEAD(false))
        return;
       1;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(0), int(0)))))
      {
       case 30:
       mat2x3(28.54, _GLF_IDENTITY(9092.5438, min(9092.5438, _GLF_IDENTITY(9092.5438, clamp(9092.5438, 9092.5438, _GLF_IDENTITY(9092.5438, (false ? _GLF_FUZZED(-6.3) : _GLF_IDENTITY(9092.5438, clamp(9092.5438, 9092.5438, 9092.5438)))))))), 2878.8555, -9.1, 854.239, -2576.3849);
       case 91:
       ivec3(-55340, -91912, 34355);
       case 0:
       case 29:
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       case 22:
       if(_GLF_DEAD(false))
        return;
       case 53:
       case 79:
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       case 61:
       case 21:
       case 62:
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       break;
       default:
       1;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), ((uint(1))) >> 0u) / 1u), uint(1))), 4, 64, 4);
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(ivec3(1), vec4(1.0), atomicLoad(buf[_GLF_struct_replacement_37.virtual_gid], 4, 64, 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-37049 ^ -95680) & 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) - 0)) >> _GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), 0 + (int(7)))) >> 0), int(7)), (true ? (1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_9(1, _GLF_struct_8(uvec2(1u), mat4x3(1.0), bvec2(true))), atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_37.virtual_gid, (_GLF_struct_replacement_37.virtual_gid) | 0u)], 4, 64, 0), mat4x2(1.0), _GLF_struct_11(vec3(1.0), mat4(1.0), _GLF_struct_10(mat3x2(1.0), uvec3(1u), 1, ivec2(1), mat4x3(1.0), vec3(1.0))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u) < _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + (0u & 166381u)), 0u | (subgroup_size)), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 90:
         case 64:
         case 29:
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         case 49:
         case 44:
         case 24:
         case 62:
         case 47:
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         case 34:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 | 0) & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           switch(_GLF_SWITCH((60891 & 0)))
            {
             case 30:
             for(             mat3x4(9769.6786, -3207.5457, 4905.0350, _GLF_IDENTITY(-465.410, min(_GLF_IDENTITY(-465.410, max(-465.410, -465.410)), -465.410)), 7859.9208, -371.702, 1.3, -55.79, 3.0, -7.7, -1633.6365, -3.2);
 (ivec2(-97849, 48449) != ivec2(21190, -25136)); findMSB(mix(-55383, -36463, false)))
              {
               while(((mat2(81.75, 9.1, 6.8, -0.3) == mat2(-0.5, -289.644, -912.638, -51.85)) != true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 atanh(vec2(369.511, -7493.0191));
                 if(all(bvec4(true, true, false, false)))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   (mat4x3(-1424.3735, -50.51, 5.2, 0.5, 1.0, 0.4, 738.245, 628.932, _GLF_IDENTITY(-9.8, min(-9.8, _GLF_IDENTITY(-9.8, clamp(-9.8, -9.8, _GLF_IDENTITY(-9.8, min(-9.8, -9.8)))))), 826.772, 1185.0152, 1.9) * (444.585 - mat2x4(3.0, 5577.2139, -6.3, -64.27, _GLF_IDENTITY(-8.0, max(-8.0, -8.0)), 4077.9055, -6619.0144, 6373.8961)));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (! (bool(bvec4(false, false, false, true))))))))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       barrier();
                      }
                     (_GLF_IDENTITY(ivec3(57997, 41445, -71215), (ivec3(57997, 41445, -71215)) / ivec3(1, 1, 1)) | ivec3(15211, -77783, -20078));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(15.22), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8773.9969)), bvec2(true, false))), injectionSwitch, injectionSwitch)).y))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   (vec2(6.7, 6.5) + vec2(-5.0, 0.0));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   ;
                   if(_GLF_DEAD(false))
                    continue;
                   mat3x4 _GLF_SWITCH_1_0v[8], _GLF_SWITCH_1_1v[22];
                   do
                    {
                     (mat2x4(70.00, 8.2, -3.4, -2.4, 8.7, -8.9, -306.726, -539.096) + mat2x4(-641.100, -7.3, -248.813, -50.47, 6067.0861, -829.207, -448.008, -7579.6830));
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     mat4x2(0.0, -773.119, -1.7, -6.0, 83.12, -421.467, -0.7, 8.5);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / exp(0.0))))))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) - 0.0))))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(                   bvec2(true, false);
 true; mat3x4(5.3, -1.8, -4775.3348, 222.107, 9.5, -906.253, -3.2, 543.243, -72.14, -2.2, -9.6, 8.2))
                    {
                     {
                      if(_GLF_DEAD(false))
                       return;
                      uvec2(_GLF_IDENTITY(98405u, (98405u) - _GLF_IDENTITY(0u, max(0u, 0u))), 166799u)[1];
                      ;
                      if(_GLF_DEAD(false))
                       break;
                      bvec2 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v[66], _GLF_SWITCH_1_4v;
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                           {
                            return;
                           }
                          else
                           {
                           }
                         }
                        return;
                       }
                      if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false)))))))
                       continue;
                      if(_GLF_DEAD(false))
                       continue;
                      sign(80113);
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(false))
                           break;
                          return;
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        barrier();
                       }
                      ivec4(43649, 21293, _GLF_IDENTITY(-86298, clamp(-86298, -86298, -86298)), -7194);
                      if(_GLF_DEAD(false))
                       {
                        do
                         {
                          for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                              if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))))
                               {
                                barrier();
                               }
                              else
                               {
                                if(_GLF_DEAD(false))
                                 return;
                               }
                             }
                           }
                          if(_GLF_DEAD(false))
                           return;
                         }
                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        continue;
                        if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), false))))))
                         {
                          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                           barrier();
                          return;
                         }
                       }
                      mat2(1.8, 527.959, -1862.4928, -480.798);
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                           barrier();
                          continue;
                         }
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(1.0)))) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(1.0)))) > injectionSwitch.y)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                           break;
                          if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                           continue;
                         }
                        else
                         {
                          for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                           {
                            return;
                           }
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                           break;
                         }
                       }
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                       }
                      else
                       {
                        vec3(-7137.4259, -299.304, 15.82);
                       }
                      if(_GLF_DEAD(false))
                       {
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | (0 | 0)) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                         {
                          barrier();
                         }
                       }
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3932.9600), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(97.50)), bool(false))), _GLF_FUZZED(-9100.6694)), bvec2(true, false))).y))))
                       {
                       }
                      else
                       {
                        vec3(-73.45, _GLF_IDENTITY(4.4, float(vec2(4.4, abs(0.0)))), -8.7);
                        if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
                         continue;
                       }
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) - 0.0)))))
                         barrier();
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       return;
                      bvec3 _GLF_SWITCH_1_5v, _GLF_SWITCH_1_6v[60], _GLF_SWITCH_1_7v;
                     }
                     if(_GLF_DEAD(false))
                      break;
                     while((55.69 != _GLF_IDENTITY(6.4, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)) ? 6.4 : _GLF_FUZZED(-3805.3562)))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       ivec4 _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           not(bvec4(true, false, true, false));
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         break;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         barrier();
                        }
                       uvec3(94002u, 182660u, 63251u);
                       if(_GLF_DEAD(false))
                        continue;
                       bvec4(false, true, true, true);
                       (ivec3(45025, _GLF_IDENTITY(-46369, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-92085) : -46369, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-92085) : -46369) - 0))), -85071) == (-20174 & ivec3(-79659, 93207, 57061)));
                       mat3x2 _GLF_SWITCH_1_10v;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), false)))))))
                          continue;
                         continue;
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     14.27;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       switch(_GLF_SWITCH(0))
                        {
                         case 13:
                         uint _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
                         case 0:
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(_GLF_IDENTITY(true, (true) || false), false, true)))))
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                          }
                         barrier();
                         break;
                         default:
                         1;
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     ;
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), true && (false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false), _GLF_IDENTITY(true, (true) && true), false, false)))))
                    break;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               else
                {
                 switch(_GLF_SWITCH(_GLF_IDENTITY(((-91792 & 0) << _GLF_IDENTITY(int(1), int(1))), (((-91792 & 0) << _GLF_IDENTITY(int(1), int(1)))) >> 0)))
                  {
                   case 82:
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   ((137.812 - mat3x4(-2.8, -193.505, -0.8, 0.3, 64.11, _GLF_IDENTITY(3.3, 0.0 + (3.3)), -110.797, -67.16, 3868.3403, -14.03, 9.8, -9.5)) - 85.77);
                   case 0:
                   case 38:
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   break;
                   default:
                   1;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (0 << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) < 1); _injected_loop_counter ++)
                {
                 subgroup_local_id;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)) && true))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(false))
                return;
               clamp(ivec3(56841, 69544, -95428), _GLF_IDENTITY(_GLF_IDENTITY(findLSB(workgroup_size), clamp(findLSB(workgroup_size), _GLF_IDENTITY(findLSB(workgroup_size), (true ? findLSB(workgroup_size) : _GLF_FUZZED(ivec3(49932, -35452, -9500)[1]))), findLSB(workgroup_size))), (false ? _GLF_FUZZED(4546) : _GLF_IDENTITY(_GLF_IDENTITY(findLSB(workgroup_size), clamp(findLSB(workgroup_size), _GLF_IDENTITY(findLSB(workgroup_size), (true ? findLSB(workgroup_size) : _GLF_FUZZED(ivec3(49932, -35452, -9500)[1]))), findLSB(workgroup_size))), max(_GLF_IDENTITY(findLSB(workgroup_size), clamp(findLSB(workgroup_size), _GLF_IDENTITY(findLSB(workgroup_size), (true ? findLSB(workgroup_size) : _GLF_FUZZED(ivec3(49932, -35452, -9500)[1]))), findLSB(workgroup_size))), _GLF_IDENTITY(findLSB(workgroup_size), clamp(findLSB(workgroup_size), _GLF_IDENTITY(findLSB(workgroup_size), (true ? findLSB(workgroup_size) : _GLF_FUZZED(ivec3(49932, -35452, -9500)[1]))), findLSB(workgroup_size))))))), -96068);
               if(_GLF_DEAD(false))
                barrier();
               vec2 _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).x > injectionSwitch.y))))
                    continue;
                   barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 vec4(369.815, -4.3, -7.6, -76.83);
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) && true)))
                {
                 {
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(false))
                   return;
                  _GLF_SWITCH_1_11v;
                  GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                     return;
                    if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                     barrier();
                    if(_GLF_DEAD(false))
                     return;
                   }
                  mat4x3(77.14, 6915.4412, 16.30, 8.7, 8.2, -3.9, 47.14, 3690.2054, -1.8, 40.07, -54.10, -27.57);
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    ivec2(-18939, -20846);
                    if(_GLF_DEAD(false))
                     break;
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(false))
                   barrier();
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    barrier();
                   }
                  ;
                 }
                 if(_GLF_DEAD(false))
                  barrier();
                 mat3x2 _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v;
                 if((! (692.003 < 8928.4585)))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true))), true, false, true))))) || false)))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   bvec3 _GLF_SWITCH_1_16v[96], _GLF_SWITCH_1_17v;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y, true, false, false)))))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, (false ? _GLF_FUZZED(800.275) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0))), injectionSwitch[1])))).x)) > injectionSwitch.y))))
                    break;
                   refract(((mat2x3(_GLF_IDENTITY(-3206.3873, mix(float(_GLF_FUZZED(-7177.8453)), float(-3206.3873), bool(true))), _GLF_IDENTITY(0.6, clamp(0.6, 0.6, 0.6)), 5.0, -273.918, -4.8, 0.0) , vec3(556.916, -2486.4741, -4.7)) - _GLF_IDENTITY(6731.7012, clamp(_GLF_IDENTITY(6731.7012, (6731.7012) - 0.0), _GLF_IDENTITY(6731.7012, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.0)), float(6731.7012), bool(true)), mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(3.0)), float(6731.7012), bool(true)), (mix(float(_GLF_FUZZED(3.0)), float(6731.7012), bool(true))) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 6731.7012))), vec3(-490.880, -293.059, 0.1), 2.3);
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false)))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true)))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   bvec4 _GLF_SWITCH_1_18v;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    break;
                   (mat2(1333.7750, 6029.6245, 955.152, -2.6) * mat2(-94.01, 4.4, 3963.8444, -454.647));
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-33038) & 0)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while((_GLF_IDENTITY(false || true, false || (false || true))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   float _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v;
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))), (bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))) && true))), (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-7.5, 1650.5097)))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    return;
                   ivec4 _GLF_SWITCH_1_21v, _GLF_SWITCH_1_22v;
                   if(_GLF_DEAD(false))
                    {
                     switch(_GLF_SWITCH(0))
                      {
                       case 27:
                       (uvec3(98345u, 81611u, 53435u));
                       case 40:
                       uvec3 _GLF_SWITCH_2_0v[2], _GLF_SWITCH_2_1v[18];
                       case 0:
                       case 4:
                       if(_GLF_DEAD(false))
                        break;
                       case 75:
                       case 77:
                       if(_GLF_DEAD(false))
                        continue;
                       case 95:
                       case 52:
                       case 58:
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       case 18:
                       barrier();
                       break;
                       default:
                       1;
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                    break;
                   mat3(mat4x3(5.7, 296.975, -2.8, 4.0, 7343.2140, -9.2, 59.17, 2372.5507, _GLF_IDENTITY(-104.790, clamp(-104.790, -104.790, _GLF_IDENTITY(-104.790, _GLF_IDENTITY(float(vec4(-104.790, 1.0, 1.0, 1.0)), clamp(float(vec4(-104.790, 1.0, 1.0, 1.0)), float(vec4(-104.790, 1.0, 1.0, 1.0)), float(vec4(-104.790, 1.0, 1.0, 1.0))))))), 3.9, _GLF_IDENTITY(3196.4267, min(3196.4267, 3196.4267)), 3.4));
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     vec3(5987.4862, -4018.7465, 8.5);
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     break;
                    }
                   _GLF_SWITCH_1_12v;
                   uvec4(91345u, 171621u, 61661u, 113905u);
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(false)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                     break;
                    }
                   lessThanEqual(vec4(7.0, -1.1, -1.2, 52.12), _GLF_IDENTITY(_GLF_IDENTITY(fract(vec4(4373.4142, 379.625, -8.6, 7007.4642)), (false ? _GLF_FUZZED(vec3(-0.4, 6.9, -21.45).yxyz) : fract(vec4(4373.4142, 379.625, -8.6, 7007.4642)))), max(_GLF_IDENTITY(fract(vec4(4373.4142, 379.625, -8.6, 7007.4642)), (fract(vec4(4373.4142, 379.625, -8.6, 7007.4642))) * mat4(1.0)), fract(vec4(4373.4142, 379.625, -8.6, 7007.4642)))));
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(length(vec3(-3052.2612, 4.1, 384.781)))))))))
                    break;
                   bvec3(true, true, false);
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                    continue;
                   (false , outerProduct(vec4(5.0, 1.4, 756.768, -93.35), vec3(-29.83, 7868.9309, 96.62)));
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)) && true); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   int _GLF_SWITCH_1_23v;
                   bvec2 _GLF_SWITCH_1_24v;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.9))) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     continue;
                    }
                   do
                    {
                     mat4x2(-6829.8077, -974.322, -4.9, 4.6, 3.3, 5787.9474, -511.887, 6.8);
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false)))), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(false || (! ((_GLF_IDENTITY(false, true && (false))))), ! (_GLF_IDENTITY(! (false || (! ((_GLF_IDENTITY(false, true && (false)))))), ! (! (! (false || (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))))))))))))))))));
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     barrier();
                    }
                   (-29739 ^ ivec4(63825, 18500, -87912, 30377));
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), clamp(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) << 0))))), max((_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), clamp(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) << 0))))), (_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), clamp(0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) << 0)))))))); _injected_loop_counter ++)
                    {
                     uvec4(12658u, 1576u, 14484u, 98265u);
                    }
                   if(_GLF_DEAD(false))
                    break;
                   mat4x3(-728.673, -0.8, 2198.5548, 6.0, _GLF_IDENTITY(-4.2, max(-4.2, -4.2)), 17.07, -50.16, -4.5, 73.68, -4.2, -4328.8143, _GLF_IDENTITY(-9.4, (true ? -9.4 : _GLF_FUZZED(-2752.8116))));
                   ;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                 for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6)))))) / 1)) ^ 0, ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0))) >> _GLF_IDENTITY(int(1), int(1))) * (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6)))))) / 1)) ^ 0, clamp((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6)))))) / 1)) ^ 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6)))))) / 1)) ^ 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-34798))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 >> _GLF_IDENTITY(int(6), int(6)))))) / 1)) ^ 0))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.6), _GLF_FUZZED(-801.945)), bvec2(false, false))))))).y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 vec3 _GLF_SWITCH_1_25v[14];
                 vec4 _GLF_SWITCH_1_26v[96], _GLF_SWITCH_1_27v;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.4))) > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.4))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.4))) > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.4))) > injectionSwitch.y)), bool(bvec2(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.4))) > injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   while(false)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      return;
                     switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(2, 1 * (2)), (_GLF_IDENTITY(2, 1 * (2))) * 1))))))))
                      {
                       case 10:
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         ;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       case 65:
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                       (ivec3(19459, -27417, -4745) * ivec3(-28083, -20214, -17615));
                       case 0:
                       case 87:
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       case 58:
                       if(_GLF_DEAD(false))
                        continue;
                       case 18:
                       case 24:
                       case 2:
                       (mat4(9.2, -5.6, 9646.5523, -6.9, -272.284, 9.9, -5.4, -31.54, 5018.9109, -6.4, -500.486, -404.978, 871.880, -8.7, 28.87, 3.2) / mat4(304.541, _GLF_IDENTITY(-4.5, min(-4.5, -4.5)), 6.9, _GLF_IDENTITY(-4.8, (-4.8) + 0.0), 4321.3131, 5.3, 3006.9863, 636.837, -272.623, -8.6, 2.7, 52.34, -2.3, -567.518, 9.3, -71.17));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                        barrier();
                       break;
                       default:
                       1;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   mat4(-13.91, 6.1, _GLF_IDENTITY(910.396, (910.396) / 1.0), 836.214, -379.405, -98.18, 5753.1586, -4.6, _GLF_IDENTITY(82.70, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(82.70, clamp(82.70, 82.70, 82.70)), 0.0, abs(0.0), tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(82.70, clamp(82.70, 82.70, 82.70)), 0.0, abs(0.0), tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(mat4x3(_GLF_IDENTITY(82.70, clamp(82.70, 82.70, 82.70)), 0.0, _GLF_IDENTITY(abs(0.0), 0.0 + (abs(0.0))), tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))))), (float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(82.70, clamp(82.70, 82.70, 82.70)), 0.0, abs(0.0), tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(82.70, clamp(82.70, 82.70, 82.70)), 0.0, abs(0.0), tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(mat4x3(_GLF_IDENTITY(82.70, clamp(82.70, 82.70, 82.70)), 0.0, _GLF_IDENTITY(abs(0.0), 0.0 + (abs(0.0))), tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))))) - determinant(mat2(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 0.0)))), -4733.2773, -61.20, -1.6, -80.92, 8.9, 7551.9654, 189.044);
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      continue;
                     continue;
                    }
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(false))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && true))))))))))) || false)))
                barrier();
               mat4x2 _GLF_SWITCH_1_28v;
              }
             case 0:
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
              {
               switch(_GLF_SWITCH(0))
                {
                 case 0:
                 if(_GLF_DEAD(false))
                  return;
                 case 94:
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 case 97:
                 case 6:
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                   if(_GLF_DEAD(false))
                    break;
                  }
                 case 10:
                 return;
                 case 96:
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 case 45:
                 if(_GLF_DEAD(false))
                  break;
                 case 53:
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                 if(_GLF_DEAD(false))
                  continue;
                 default:
                 1;
                }
              }
             _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_14(_GLF_struct_13(mat3x2(1.0), 0, vec3(1.0), bvec4(true), _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) ^ (ivec4(1)))) | (ivec4(1))), 1u, mat4x3(1.0), mat3x4(1.0)), uvec3(1u)), _GLF_struct_18(_GLF_struct_15(vec4(1.0), mat2(1.0), 1, true, mat2x3(1.0), uvec4(1u)), _GLF_struct_16(mat4x3(1.0), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, (1) / 1)))), bvec3(true), _GLF_struct_17(mat4x3(1.0), ivec2(1), ivec4(1), bvec4(true)), ivec3(1), 1u, ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)))), ivec4(1), _GLF_struct_19(mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2(1.0), uvec2(1u), 1, bvec3(true)), mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(23.52, 3.9, -7.6, 27.88), min(vec4(23.52, 3.9, -7.6, 27.88), vec4(23.52, 3.9, -7.6, 27.88))).a)), float(1.0), bool(true)))), mat3(1.0), mat3x4(1.0));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], _GLF_IDENTITY(uint(_GLF_struct_replacement_38.read_1 == _GLF_struct_replacement_12.read_2) + 1, ~ (~ (uint(_GLF_struct_replacement_38.read_1 == _GLF_struct_replacement_12.read_2) + 1))), _GLF_IDENTITY(4, (4) + 0), 64, 4);
              }
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             default:
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               _GLF_IDENTITY(1, 0 ^ (1));
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         break;
         case 60:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           (mix(vec3(-295.155, -7.5, 979.556), vec3(-8466.8588, 9541.2138, -8.0), isnan(vec3(-2355.2566, -62.12, 2.0))) + 67.20);
           if(_GLF_DEAD(false))
            {
             switch(_GLF_SWITCH(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << _GLF_IDENTITY(0, 0 | (0))))), ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << _GLF_IDENTITY(0, 0 | (0)))))) ^ 0)))
              {
               case 60:
               ;
               case 31:
               mat3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v[76];
               case 0:
               case 33:
               case 53:
               case 45:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               case 44:
               case 74:
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               break;
               case 52:
               _GLF_SWITCH_2_0v;
               case 36:
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 ;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
                return;
               default:
               1;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (1 ^ 1) + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-79761) : int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4)))))); _injected_loop_counter --)
                {
                 return;
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         case 57:
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         transpose(mat4(-7066.1411, -7251.1164, -5612.3142, 52.31, -0.8, -0.0, 9.5, -3643.5856, 3.2, 9.3, 5.1, -75.92, 3312.5472, 7101.5423, -6.2, -886.865));
         default:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           1;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
        return;
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))));
     atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_38.read_1 == _GLF_struct_replacement_12.read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         switch(_GLF_SWITCH(0))
          {
           case 56:
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             mat2(-9220.3165, 46.09, -3.1, -5685.4890);
             clamp(uvec4(185877u, 9864u, 30130u, 80279u), subgroup_size, subgroup_size);
             for(uint _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v; (ivec4(22436, _GLF_IDENTITY(-4555, clamp(_GLF_IDENTITY(-4555, clamp(-4555, -4555, -4555)), -4555, -4555)), 9199, 35532) != ivec4(90519, 54309, -18429, 78185)); mat3x4(24.16, -28.92, 8509.5964, 781.193, -5951.1310, 0.5, 847.485, 168.076, -3.7, _GLF_IDENTITY(739.443, (false ? _GLF_FUZZED(6962.5067) : 739.443)), 3.3, 44.83))
              {
               mat4x2 _GLF_SWITCH_2_2v, _GLF_SWITCH_2_3v;
               ivec3(-96963, -74466, 3121);
              }
             (ivec2(27553, 92989) | ivec2(-20475, 33179));
             for(mat2 _GLF_SWITCH_2_4v, _GLF_SWITCH_2_5v; false; vec3(1183.9343, -9266.5658, 19.70))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               ((uvec3(_GLF_IDENTITY(95210u, (95210u) - 0u), 88617u, 70251u) - GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size) - uvec3(13918u, 22120u, 19176u));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 matrixCompMult(mat2x3(555.612, -79.53, 1.2, -4250.5854, 7.0, -504.566), mat2x3(-96.25, 0.1, 8.4, -2.7, -4.1, -227.298));
                }
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                {
                 bvec3(true, false, false);
                }
               if(_GLF_DEAD(false))
                break;
               subgroup_local_id;
               (injectionSwitch * ((vec2(52.98, -9872.6573) == vec2(-4405.0465, -2675.4768)) , mat4x2(-8.7, _GLF_IDENTITY(9.5, clamp(9.5, 9.5, 9.5)), 9.1, 0.8, -89.99, 9.7, 91.23, 8.4)));
               mat2 _GLF_SWITCH_2_6v[24];
               (mat3x4(-2.4, 4.6, 9.6, 74.77, -4.7, -272.393, -5.6, 6.6, 4.4, 6.9, -529.510, -13.98) - mat3x4(8.4, 6239.1984, -346.704, -2.6, 1171.1767, -0.9, -5.4, -0.5, 40.96, -8314.4301, 43.49, -88.99));
               bvec3 _GLF_SWITCH_2_7v, _GLF_SWITCH_2_8v;
              }
            }
           case 0:
           case 59:
           case 98:
           case 57:
           case 37:
           case 51:
           case 88:
           case 96:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           case 24:
           case 48:
           barrier();
           break;
           default:
           1;
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 | (0)) & 72201); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0)), (float(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0))) * 1.0))))))
      barrier();
     do
      {
       switch(_GLF_SWITCH(0))
        {
         case 34:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         mat4x2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[13], _GLF_SWITCH_0_2v;
         case 39:
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         float _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v[81];
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         case 0:
         case 88:
         case 32:
         case 21:
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec3(bool(injectionSwitch.x > injectionSwitch.y), true, false)))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         return;
         break;
         case 9:
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, true, true))), false))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(true)
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             vec3(_GLF_IDENTITY(32.99, mix(float(32.99), float(_GLF_FUZZED(6880.1047)), bool(_GLF_IDENTITY(false, (false) || false)))), 28.25, 3546.7589);
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acos(_GLF_SWITCH_0_3v)) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(all(bvec3(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               mat4x2(-83.80, 214.390, -8387.1985, -2.4, _GLF_IDENTITY(-850.411, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(-850.411, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sqrt(1.0), 1.0), (true ? mat3x2(_GLF_IDENTITY(-850.411, mix(float(_GLF_FUZZED(8.8)), float(_GLF_IDENTITY(-850.411, (true ? _GLF_IDENTITY(-850.411, mix(float(_GLF_FUZZED(56.35)), float(-850.411), bool(true))) : _GLF_FUZZED(375.331)))), bool(true))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.8, 898.213)) : injectionSwitch)).x), 1.0, 1.0, sqrt(1.0), 1.0) : _GLF_FUZZED(mat3x2(2560.9091, -18.70, 6.7, 4.1, 95.17, 7.4))))), mix(float(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(-850.411, clamp(-850.411, -850.411, -850.411)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sqrt(1.0), 1.0), (true ? mat3x2(-850.411, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sqrt(1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), cos(length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, exp(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0)), abs(0.0), 1.0))), 0.0))) + determinant(mat4(0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), 0.0))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.8)), float(0.0), bool(true)))))) : _GLF_FUZZED(mat3x2(2560.9091, -18.70, _GLF_IDENTITY(6.7, (false ? _GLF_FUZZED(min(6.2, 481.093)) : 6.7)), 4.1, 95.17, 7.4)))))), float(_GLF_FUZZED(-0.6)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))), _GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(7.1))), 9946.3390, -739.568);
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             while(true)
              {
              }
             false;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_IDENTITY(false, (false) || false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 (_GLF_IDENTITY(mat4(-30.63, -9.7, 0.1, 2409.9997, -2941.5375, -4.7, -0.7, -3.3, 6324.8994, 5.3, -394.908, _GLF_IDENTITY(-9374.3407, clamp(-9374.3407, -9374.3407, _GLF_IDENTITY(-9374.3407, (-9374.3407) - 0.0))), -8.4, -629.153, -38.87, 5.1) * mat4(-2.1, -2713.8722, 3973.0251, 5.5, 374.024, 3.5, 2.3, 645.014, -117.895, _GLF_IDENTITY(2176.0639, (true ? 2176.0639 : _GLF_FUZZED(_GLF_SWITCH_0_3v))), -7321.5679, -632.133, -245.203, 7.6, 9.8, 6.0), transpose(transpose(mat4(-30.63, -9.7, 0.1, 2409.9997, -2941.5375, -4.7, -0.7, _GLF_IDENTITY(-3.3, clamp(_GLF_IDENTITY(-3.3, (_GLF_IDENTITY(-3.3, mix(float(_GLF_FUZZED(0.6)), float(-3.3), bool(true)))) - 0.0), -3.3, -3.3)), 6324.8994, 5.3, -394.908, -9374.3407, -8.4, -629.153, -38.87, 5.1) * _GLF_IDENTITY(mat4(-2.1, -2713.8722, 3973.0251, 5.5, 374.024, 3.5, 2.3, 645.014, -117.895, 2176.0639, -7321.5679, -632.133, -245.203, 7.6, 9.8, 6.0), _GLF_IDENTITY((false ? _GLF_FUZZED(mat4(4370.0387, -19.30, 509.677, -55.65, 7714.3001, 2.4, 7956.8777, -4.6, -6.9, _GLF_IDENTITY(-7.2, (-7.2) - 0.0), 372.880, -4.1, -10.10, -3.2, 41.24, -929.513)) : mat4(-2.1, -2713.8722, 3973.0251, 5.5, 374.024, 3.5, 2.3, 645.014, -117.895, 2176.0639, -7321.5679, -632.133, -245.203, 7.6, 9.8, 6.0)), (true ? (false ? _GLF_FUZZED(mat4(4370.0387, -19.30, 509.677, -55.65, 7714.3001, 2.4, 7956.8777, -4.6, -6.9, _GLF_IDENTITY(-7.2, (-7.2) - 0.0), 372.880, -4.1, -10.10, -3.2, 41.24, -929.513)) : mat4(-2.1, -2713.8722, 3973.0251, 5.5, 374.024, 3.5, 2.3, 645.014, -117.895, 2176.0639, -7321.5679, -632.133, -245.203, 7.6, 9.8, 6.0)) : _GLF_FUZZED(mat4(-7.1, -38.18, 33.32, -931.660, 25.16, -6.6, -369.385, -6.0, 3.1, -335.928, -6.3, -8.6, -7958.5333, -2749.4961, -7.9, -4.4)))))))));
                }
               (_GLF_IDENTITY(false ? ivec3(_GLF_IDENTITY(-3340, (-3340) / 1), 96708, -53588) : findLSB(ivec3(-17006, 36079, -42258)), max(false ? ivec3(_GLF_IDENTITY(-3340, (-3340) / 1), 96708, -53588) : findLSB(ivec3(-17006, 36079, -42258)), false ? ivec3(_GLF_IDENTITY(-3340, (-3340) / 1), 96708, -53588) : findLSB(ivec3(-17006, 36079, -42258)))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               bvec3 _GLF_SWITCH_0_5v[50];
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               mat2 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                  }
                 continue;
                }
               if(_GLF_DEAD(false))
                return;
               ;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 ;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                  barrier();
                 bvec4(true, _GLF_IDENTITY(false, ! (! (false))), true, false);
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! (false)))), true && (! (_GLF_IDENTITY(! (false), true && (! (false)))))))))) && true))))
                continue;
               bvec3(false, true, true);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 _GLF_IDENTITY(vec3(-2.0, -77.36, _GLF_IDENTITY(700.013, (true ? _GLF_IDENTITY(700.013, (700.013) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(_GLF_SWITCH_0_3v)))), min(vec3(-2.0, -77.36, _GLF_IDENTITY(700.013, (true ? _GLF_IDENTITY(700.013, (700.013) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(_GLF_SWITCH_0_3v)))), _GLF_IDENTITY(vec3(-2.0, -77.36, _GLF_IDENTITY(700.013, (true ? _GLF_IDENTITY(700.013, (700.013) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(_GLF_SWITCH_0_3v)))), clamp(vec3(-2.0, -77.36, _GLF_IDENTITY(700.013, (true ? _GLF_IDENTITY(700.013, (700.013) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(_GLF_SWITCH_0_3v)))), vec3(-2.0, -77.36, _GLF_IDENTITY(700.013, (true ? _GLF_IDENTITY(700.013, (700.013) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(_GLF_SWITCH_0_3v)))), vec3(-2.0, -77.36, _GLF_IDENTITY(700.013, (true ? _GLF_IDENTITY(700.013, (700.013) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(_GLF_SWITCH_0_3v))))))));
                }
               vec3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v[52];
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               bvec3(false, true, false);
               (GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size ^ workgroup_size);
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))) > injectionSwitch.y))) && true)))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y))))))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               mat3x2(6137.8837, _GLF_IDENTITY(-5748.8733, (false ? _GLF_FUZZED(_GLF_SWITCH_0_3v) : -5748.8733)), -474.239, -842.541, 107.261, 5807.9093);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
             997.670;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             for(             uvec3(uvec2(62969u, 161634u), num_workgroup);
 true; (workgroup_base | uvec4(5651u, 142454u, 138349u, 79832u)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true)), (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 (_GLF_SWITCH_0_3v < _GLF_IDENTITY(4.7, float(mat2x3(4.7, sin(0.0), 0.0, 1.0, 1.0, 1.0))));
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(39667))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               mat2 _GLF_SWITCH_0_10v[90], _GLF_SWITCH_0_11v[5];
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(16.89, 33.83)))).y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5097.4422, 1803.7604)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-39.14), _GLF_FUZZED(1082.8645)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5097.4422, 1803.7604)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-39.14), _GLF_FUZZED(1082.8645)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5097.4422, 1803.7604)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-39.14), _GLF_FUZZED(1082.8645)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5097.4422, 1803.7604)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-39.14), _GLF_FUZZED(1082.8645)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5097.4422, 1803.7604)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-39.14), _GLF_FUZZED(1082.8645)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y)))))))) && true))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(-39551))), 0)))))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) || false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(6.2), (injectionSwitch)[1]), bvec2(false, true))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y, injectionSwitch.y))))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0)), ((_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0))) | (-61965 & int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
            {
             while((false && false))
              {
               ;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                break;
               for(uvec2 _GLF_SWITCH_0_12v; false; mat3x4(-1262.8726, -477.504, -378.431, 366.499, 1.1, 497.670, -9348.1594, 982.629, -255.743, _GLF_IDENTITY(7268.5113, (true ? _GLF_IDENTITY(7268.5113, float(mat3x4(7268.5113, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(4491.1580))), 91.07, 8282.9243))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
                  barrier();
                 (_GLF_IDENTITY(ivec4(-52923, -70547, 69811, -40992) >> 79516, (ivec4(-52923, -70547, 69811, -40992) >> 79516) | (_GLF_IDENTITY(ivec4(-52923, -70547, 69811, -40992), (ivec4(-52923, -70547, 69811, -40992)) ^ ((ivec4(46235, -86082, 30386, 63521) & ivec4(-26369, 42499, 93119, 91702)) & ivec4(0, 0, 0, 0))) >> _GLF_IDENTITY(79516, 0 ^ (79516)))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
                    continue;
                   barrier();
                  }
                 ivec3 _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v;
                 bvec2 _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v;
                 ivec2(66820, 9254);
                 mat4 _GLF_SWITCH_0_17v[8];
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 (_GLF_IDENTITY(96179 >> 48665, (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? 96179 >> 48665 : _GLF_IDENTITY(_GLF_FUZZED(45655), clamp(_GLF_FUZZED(45655), _GLF_FUZZED(45655), _GLF_IDENTITY(_GLF_FUZZED(45655), ~ (~ (_GLF_FUZZED(45655)))))))));
                 ;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   uvec2(50520u, 127741u).xx;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 while(true)
                  {
                   vec2(-5668.9662, -32.80);
                   faceforward(_GLF_IDENTITY(vec2(6.6, -1.9), (_GLF_IDENTITY(vec2(6.6, -1.9), (_GLF_IDENTITY(vec2(6.6, -1.9), (vec2(6.6, -1.9)) * mat2(1.0))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch);
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))))))
                    break;
                   mat3(_GLF_IDENTITY(-23.77, float(mat3x2(-23.77, 0.0, 0.0, cos(0.0), 1.0, 0.0))), 900.360, -950.838, 7402.9805, _GLF_IDENTITY(282.083, clamp(_GLF_IDENTITY(282.083, max(282.083, 282.083)), _GLF_IDENTITY(282.083, (_GLF_IDENTITY(282.083, min(282.083, 282.083))) / 1.0), 282.083)), -26.32, 510.799, 6.0, -7.4);
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       barrier();
                      }
                     barrier();
                    }
                   mat2x3(vec3(-3.9, 0.6, -40.37), vec4(-11.16, -30.69, 8.3, 705.226).ttt);
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     (3986 ^ ivec2(-8907, -29872));
                    }
                   vec4(78.31, 628.348, 6.1, _GLF_IDENTITY(2.1, (2.1) * 1.0));
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               do
                {
                 vec3(4.9, 5.9, 124.151);
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           ivec4(83611, ivec3(_GLF_IDENTITY(-38373, (-38373) << 0), -92175, 96583));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, cos(0.0), 0.0, 0.0, exp(0.0), abs(1.0), 0.0))) > injectionSwitch.y))))
            {
             switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
              {
               case 47:
               mat3x4(79.69, -4794.5752, -444.302, -670.767, 702.710, -3.0, 960.442, -967.955, -8114.5551, 96.31, 82.36, 4.0);
               case 0:
               case 80:
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               case 70:
               continue;
               break;
               default:
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 1;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         case 81:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         ivec2 _GLF_SWITCH_0_18v;
         default:
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           1;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
}
