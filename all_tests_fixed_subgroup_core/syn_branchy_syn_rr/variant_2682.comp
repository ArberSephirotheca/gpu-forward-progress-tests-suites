#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 bvec4 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 mat4x3 _f3;
 mat4x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 vec3 _f1;
 uvec2 _f2;
 mat3 _f3;
 bvec4 _f4;
 mat4x3 _f5;
 uint _f6;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 int _f1;
 _GLF_struct_14 _f2;
 float _f3;
 _GLF_struct_15 _f4;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 ivec2 _f1;
 bvec3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
 uvec2 _f1;
 vec4 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 _GLF_struct_13 _f1;
 uint subgroup_local_id;
 _GLF_struct_16 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 uint subgroup_id;
 uvec4 _f1;
 ivec3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 ivec2 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat2x4 _f1;
 mat3x4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 mat4 _f3;
 mat4x2 _f4;
 mat3 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 float _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 _GLF_struct_4 _f2;
 uint _f3;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1 * (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (73117 & 0) | (_GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((5.3 + -819.862))), bool(false))), injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(-9.1)), vec2(((injectionSwitch))[0], _GLF_IDENTITY(((injectionSwitch))[1], max(((injectionSwitch))[1], ((injectionSwitch))[1]))), bvec2(true, true))) - sqrt(abs(vec2(0.0, 0.0)))).y))));
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_7(_GLF_struct_6(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), gl_SubgroupID, uvec4(1u), ivec3(1), bvec3(true)), ivec3(1)), _GLF_IDENTITY(ivec2(1), (ivec2(1)) << _GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) * ivec2(1, 1))), _GLF_struct_9(mat2x3(1.0), _GLF_struct_8(uvec4(1u), mat2x4(1.0))));
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(mat3x4(1.0), _GLF_struct_13(mat4(1.0), uvec2(1u), vec4(1.0), _GLF_struct_11(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), ivec2(1), bvec3(true), vec2(1.0)), _GLF_struct_12(mat2(1.0))), gl_SubgroupInvocationID, _GLF_struct_16(_GLF_IDENTITY(ivec3(1), ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(1), (false ? _GLF_FUZZED(ivec3(31568, 49694, -69219)) : _GLF_IDENTITY(ivec3(1), clamp(ivec3(1), ivec3(1), _GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) ^ (ivec3(1))))))))), 1, _GLF_struct_14(mat2(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), uvec2(_GLF_IDENTITY(1u, max(1u, 1u))), mat3(1.0), bvec4(true), mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0), mat3x2(mat4(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 1u), 1.0, _GLF_struct_15(bvec4(true), uvec3(1u), mat2x4(1.0), mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(3.8), min(_GLF_IDENTITY(_GLF_FUZZED(3.8), max(_GLF_FUZZED(3.8), _GLF_FUZZED(3.8))), _GLF_FUZZED(3.8)))))), mat4x3(1.0), _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))) | ivec2(0, 0)))), ivec3(1));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) && true), false, true, false)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))), min(ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4)))), ivec4(1, 0, 1, (0 << _GLF_IDENTITY(int(4), int(4))))))))])), injectionSwitch)).x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_2(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false))), mix(float(_GLF_FUZZED(871.268)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false)))), bool(true))), max(false ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false))), mix(float(_GLF_FUZZED(871.268)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false)))), bool(true))), _GLF_IDENTITY(false ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false))), mix(float(_GLF_FUZZED(871.268)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false)))), bool(true))), (true ? false ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false))), mix(float(_GLF_FUZZED(871.268)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-607.168)), bool(false)))), bool(true))) : _GLF_FUZZED(-75.49)))))))), _GLF_struct_0(uvec4(1u), mat3x4(1.0), ivec3(1), mat4(1.0), mat4x2(1.0), mat3(1.0), vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), _GLF_struct_1(mat3(1.0)), 1.0), mat4x2(1.0), _GLF_struct_4(_GLF_struct_3(_GLF_IDENTITY(mat3(1.0), mat3(1.0) * (_GLF_IDENTITY(mat3(1.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(1.0))))), mat2x4(1.0), mat3x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(17.69)), bool(false)))), mat2x4(1.0))), _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) : _GLF_FUZZED(-9.0))))) ? 1u : _GLF_FUZZED((num_workgroup --)))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u))))) - 0u));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_5.workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((1.8)), _GLF_FUZZED(-89.53)), bvec2(false, false))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false))))))))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, uint(uvec3(_GLF_struct_replacement_10._f0._f0.subgroup_id, 0u, 1u))) * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id, min(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 1u))) * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id, workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, uint(uvec3(_GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ (0u)), 1u))) * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id)), max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))), 0u ^ (~ (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)))))))) << 0u) + _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u) + _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_struct_replacement_10._f0._f0.subgroup_id)) * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), 1u * ((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))))))) + _GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), ~ (~ (~ (workgroup_base)))))) + _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id, min(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id))))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) | (_GLF_struct_replacement_10._f0._f0.subgroup_id))) - 0u) * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)) * 1u), 0u, 0u, 1u)), clamp(uint(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)) * 1u), 0u, 0u, 1u)), uint(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)) * 1u), 0u, 0u, 1u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)) * 1u), 0u, 0u, 1u)), 1u * (uint(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)) * 1u), 0u, 0u, 1u)))))))))), _GLF_IDENTITY(uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), 1u * (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))), clamp(uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) ^ 0u) * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))), _GLF_IDENTITY(uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))), (uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))))))) | (uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))), uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), 0u ^ (clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), clamp((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), _GLF_IDENTITY((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), 0u + ((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))))))))), ((_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size) + 0u), clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), uint(uint(_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), max(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), clamp(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))), uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), max(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), clamp(~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_10._f0._f0.subgroup_id))) / 1u)))) * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size) >> 0u), ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), uint(uint(clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) ^ 0u) * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))), ((_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, min(_GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_struct_replacement_10._f0._f0.subgroup_id)), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)), 0u | (uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, min(_GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_struct_replacement_10._f0._f0.subgroup_id)), 1u, 0u, 0u))))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) - 0u)) | (_GLF_struct_replacement_10._f0._f0.subgroup_id)) * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), uint(uint(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))))), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), ~ (~ (clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_10._f0._f0.subgroup_id)) * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) - 0u) * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size) - (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))))))), max(uint(_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), ~ (~ (clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, uint(uvec3(_GLF_struct_replacement_10._f0._f0.subgroup_id, 1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))) * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))), uint(_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_struct_replacement_10._f0._f0.subgroup_id, _GLF_struct_replacement_10._f0._f0.subgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) * 1u), _GLF_struct_replacement_10._f0._f0.subgroup_id)) * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), ~ (~ (clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))) | (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))))))))), uint(_GLF_IDENTITY(clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)))), ~ (~ (clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, 1u * (_GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id, (_GLF_struct_replacement_10._f0._f0.subgroup_id) | (_GLF_struct_replacement_10._f0._f0.subgroup_id)))) * subgroup_size, clamp(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size), uint(uint((_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size))))), uint(uvec2((~ (_GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size)), 1u)))))))))))))) + _GLF_struct_replacement_17.subgroup_local_id, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(false ? _GLF_FUZZED((num_workgroup % subgroup_size)) : (workgroup_base), 0u ^ (_GLF_IDENTITY(false ? _GLF_FUZZED((num_workgroup % subgroup_size)) : (workgroup_base), min(_GLF_IDENTITY(false ? _GLF_FUZZED((num_workgroup % subgroup_size)) : (workgroup_base), 0u | (false ? _GLF_FUZZED((num_workgroup % subgroup_size)) : (workgroup_base))), false ? _GLF_FUZZED((num_workgroup % subgroup_size)) : (workgroup_base))))))), ~ _GLF_IDENTITY((~ (~ (workgroup_base))), ((~ (~ (workgroup_base)))) * 1u)))) + _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size + _GLF_struct_replacement_17.subgroup_local_id))) - 0u)));
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_10._f0._f0.subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_struct_replacement_17.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(atomicMin(num_workgroup, (workgroup_size))))), ((_GLF_struct_replacement_17.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(atomicMin(num_workgroup, (workgroup_size)))))) ^ 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) ^ _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (0) | (0)))), 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) << 0, (_GLF_IDENTITY((_injected_loop_counter --) << 0, ~ (~ ((_injected_loop_counter --) << 0)))) + 0)))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(int(int(4))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(int(int(4)))))) | (0 >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), (0) << 0)); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x))) * 1.0)))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
          {
           barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), 0 ^ (_GLF_IDENTITY((0), ((0)) - 0)))), 0 | (~ (_GLF_IDENTITY((0), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(0, 0 + (0))), ((0)) - 0)))))))) | (0)));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))) && true)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-3114.0624, -8010.8460)) : (injectionSwitch))) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-66.40), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(4543.3873)), bvec2(true, false)))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)), (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch), min(true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch), true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))))), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 0.0)) : _GLF_IDENTITY(_GLF_FUZZED(-189.431), (_GLF_FUZZED(-189.431)) - _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))), dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))))))), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)))) - vec2(0.0, 0.0)))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch), min(true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch), true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))))), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 0.0)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-189.431), (_GLF_FUZZED(-189.431)) - _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))), dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(-189.431), (_GLF_FUZZED(-189.431)) - _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))), dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), mix(float(float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(-189.431), (_GLF_FUZZED(-189.431)) - _GLF_IDENTITY(dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))), dot(vec4(tan(0.0), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, abs(0.0))))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(9.5)), bool(false)))))), 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)))) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, clamp(0 | 0, _GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0)), 0 | 0))), (_GLF_IDENTITY((0 | 0), ((0 | 0)) >> 0)) | ((0 | 0)))) - 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1))));
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), _GLF_IDENTITY(int(7), _GLF_IDENTITY(clamp(int(7), int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, min(7, 7)), 7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (int(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 | (7)), clamp(7, _GLF_IDENTITY(_GLF_IDENTITY(7, int(_GLF_IDENTITY(int(7), (int(7)) + int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(7, int(_GLF_IDENTITY(int(7), (int(7)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))) >> 0), _GLF_IDENTITY(7, int(ivec3(_GLF_IDENTITY(7, int(ivec4(7, 0, 0, 1))), 0, 0))))))) ^ 0)), 0 ^ (clamp(int(7), int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, min(7, 7)), 7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (int(_GLF_IDENTITY(7, clamp(7, 7, _GLF_IDENTITY(7, _GLF_IDENTITY(int(ivec3(7, 0, 0)), min(int(ivec3(7, 0, 0)), int(ivec3(7, 0, 0))))))))) ^ 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 0) | 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) && true))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.4), _GLF_FUZZED((- 454.104))), bvec2(false, false)))) * mat2(1.0)) - vec2(0.0, 0.0))))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_struct_replacement_17.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0 + (1), clamp(0 + (1), _GLF_IDENTITY(0 + (1), (false ? _GLF_FUZZED(21736) : 0 + (1))), 0 + (1))), 0 | (0 + (1)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(0 + (1), (0 + (1)) / 1), 0 | (0 + (1)))))))) + 0) < subgroup_size, ! (! (_GLF_struct_replacement_17.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0 + (1), (false ? _GLF_FUZZED(_GLF_IDENTITY(52962, (52962) | (52962))) : 0 + (1))), 0 | (0 + _GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_IDENTITY((1), (false ? _GLF_FUZZED(8677) : (1))), (_GLF_IDENTITY((1), (false ? _GLF_FUZZED(8677) : (1)))) ^ 0)) - _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (0) << 0)))))) + 0) < subgroup_size))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-154.744) : injectionSwitch.x))) - 0.0) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false, true, false))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(1, 0 ^ (1))), int(ivec2(min(_GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY(1, 0 ^ (1))), 1)))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), 1 * (_GLF_IDENTITY(4, (4) >> 0)))) << 0));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))) || (bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0), ivec4(1, 1, 1, 1) * (ivec4(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)))), ~ (~ (int(_GLF_IDENTITY(ivec4(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0), ivec4(1, 1, 1, 1) * (ivec4(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)))))))) != 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(264.111), (false ? _GLF_FUZZED(3.3) : _GLF_FUZZED(264.111)))), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) + 0)], _GLF_FUZZED(264.111)))), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(int(4), int(4))))], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(float(41181u)), _GLF_FUZZED(-3641.4397)), vec2((mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))[0], (mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))[1]), bvec2(true, true)))).x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), clamp(_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))) / vec2(1.0, 1.0)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(4))))], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-998.294, (-998.294) - 0.0)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1])) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))), float(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111)), (_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))) - 0.0)), clamp(_GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))), _GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, _GLF_IDENTITY((264.111), float(mat2((264.111), 0.0, 1.0, 0.0))) / 1.0), 264.111))), _GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))))), 1.0, 1.0, 1.0, 0.0, 1.0)))), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))))], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))))))) || false)))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(264.111), (false ? _GLF_FUZZED(3.3) : _GLF_FUZZED(264.111)))), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) + 0)], _GLF_FUZZED(264.111)))), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(int(4), int(4))))], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(float(41181u)), _GLF_FUZZED(-3641.4397)), vec2((mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))[0], (mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))[1]), bvec2(true, true)))).x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), clamp(_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))) / vec2(1.0, 1.0)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(4))))], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-998.294, (-998.294) - 0.0)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1])) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))), float(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111)), (_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))) - 0.0)), clamp(_GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))), _GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, _GLF_IDENTITY((264.111), float(mat2((264.111), 0.0, 1.0, 0.0))) / 1.0), 264.111))), _GLF_FUZZED(_GLF_IDENTITY(264.111, max(_GLF_IDENTITY(264.111, (264.111) / 1.0), 264.111))))), 1.0, 1.0, 1.0, 0.0, 1.0)))), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(264.111)), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-998.294), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))))], _GLF_FUZZED(264.111)), bvec2(true, false))).x > injectionSwitch.y))))))))) || false))))))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(45.96, -1192.8567))))) * mat2(1.0)), min(((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(45.96, -1192.8567))))) * mat2(1.0)), ((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(45.96, -1192.8567))))) * mat2(1.0)))) * mat2(1.0))))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))))), tan(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4825.1785) : 0.0)))), 0.0, 1.0, 0.0), (mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))))), tan(0.0), 0.0, _GLF_IDENTITY(0.0, sqrt(1.0) * (0.0)), 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))).y))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || false))))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (int(2)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (read_1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_2) : read_1)), _GLF_IDENTITY(read_1, 0u + (read_1)))), uint(uvec2(read_1, 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_2) : read_1)), _GLF_IDENTITY(read_1, 0u + (read_1)))), uint(uvec2(read_1, 0u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_2) : read_1)), _GLF_IDENTITY(read_1, 0u + (read_1)))), uint(uvec2(read_1, 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_2) : read_1)), _GLF_IDENTITY(read_1, 0u + (read_1)))), uint(uvec2(read_1, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_2) : read_1)), _GLF_IDENTITY(read_1, 0u + (read_1)))), uint(uvec2(read_1, 0u)))))) * 1u)) << 0u) == read_2) + 1, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec2(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), false))))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) || false)))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
