#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 1), ~ (~ ((1 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))))))));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-81.47)), bvec2(true, false))).x)) ^ (3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))), false, false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec3((! (false)), false, false)), (bool(bvec3((! (false)), false, false))) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool(! (_GLF_DEAD(false)))), ! (! (! (bool(! (_GLF_DEAD(false))))))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))), injectionSwitch, injectionSwitch)).y))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))), true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-746.129)), float(injectionSwitch.y), bool(true)))) / exp(0.0)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(max(~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base), 0u | ((workgroup_base)))), ~ (~ ((_GLF_IDENTITY((workgroup_base), 0u | ((workgroup_base))))))) >> 0u)), clamp(_GLF_IDENTITY(max(~ (workgroup_base), ~ (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(max(~ (workgroup_base), ~ (workgroup_base)), min(max(~ (workgroup_base), ~ (workgroup_base)), max(~ (workgroup_base), ~ (workgroup_base))))), ((_GLF_IDENTITY(max(~ (workgroup_base), ~ (workgroup_base)), min(max(~ (workgroup_base), ~ (workgroup_base)), max(~ (workgroup_base), ~ (workgroup_base)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))) << 0u), max(~ (workgroup_base), ~ (workgroup_base)), _GLF_IDENTITY(max(~ (workgroup_base), ~ (workgroup_base)), (true ? max(~ (workgroup_base), ~ (workgroup_base)) : _GLF_FUZZED(workgroup_base))))))), (~ (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(0u ^ ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))), (_GLF_IDENTITY(0u ^ ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))), (0u ^ ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))) << 0u)) | (0u ^ ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))))))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ (workgroup_base), 0u ^ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) / 1u))), ~ (workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))), clamp(_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | (~ (workgroup_base))), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ _GLF_IDENTITY((workgroup_base), 0u | ((workgroup_base))), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) << 0u, 0u | ((~ (workgroup_base)) << 0u)))))))) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u))), (0u ^ 0u) | _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec3((workgroup_base), 1u, 1u))), (workgroup_base))), ~ (workgroup_base))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) + 0u))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base)))), ~ (~ (clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))))))))) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u)))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec3((workgroup_base), 1u, 1u))), (workgroup_base))), ~ (workgroup_base))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) + 0u))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base)))), ~ (~ (clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))))))))) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u)))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec3((workgroup_base), 1u, 1u))), (workgroup_base))), ~ (workgroup_base))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) + 0u))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base)))), ~ (~ (clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))))))))) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u))))) | (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(~ _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec3((workgroup_base), 1u, 1u))), (workgroup_base))), ~ (workgroup_base))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) + 0u))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base)))), ~ (~ (clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), max(~ (workgroup_base), ~ (workgroup_base))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)))), _GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), ~ (workgroup_base))))))))) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u)))))))))))), max(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(0u | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) | (workgroup_base))), (0u | (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))), _GLF_IDENTITY((_GLF_IDENTITY(true ? 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 0u + ((workgroup_base))) | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_base))))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))) | (workgroup_base))) - 0u, max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) | 0u)))) - 0u, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) + (0u | 0u))))) - 0u)))) : _GLF_FUZZED(subgroup_local_id), (true ? 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 0u + ((workgroup_base))) | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_base))))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))) | (workgroup_base))) - 0u, max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) | 0u)))) - 0u, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) + (0u | 0u))))) - 0u)))) : _GLF_FUZZED(subgroup_local_id)) / (1u & 1u))), ((true ? 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_base))))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))) | (workgroup_base)), min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_base))))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_base))))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))) | (workgroup_base))))) - 0u, max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) | (workgroup_base))) - 0u, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) + (0u | 0u))))) - 0u)))) : _GLF_FUZZED(subgroup_local_id))) >> 0u))))) + _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)))) * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 1u, 1u), (uvec4(subgroup_size, 0u, 1u, 1u)) - uvec4(0u, 0u, 0u, 0u)))) + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), injectionSwitch)))).y))))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), (min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])) | (_GLF_IDENTITY(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), (min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), min(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), clamp(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), _GLF_IDENTITY(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), (min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)])) + 0u), min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]))), uint(uvec4(_GLF_IDENTITY(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), clamp(min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]), _GLF_IDENTITY(min(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), uint(uvec2(_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), (buf[virtual_gid]))), 0u))) ^ 0u), buf[virtual_gid]), (min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid])) + 0u), min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), buf[virtual_gid]))), 0u, 1u, 1u)))))), (_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid]))) << _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) + 0u), 0u))), 4, 64, 0);
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_local_id) : buf[virtual_gid]))) | (buf[virtual_gid]), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))) ? _GLF_FUZZED(next_virtual_gid) : (_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_local_id) : buf[virtual_gid]))) | (buf[virtual_gid])))), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bool(! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (! ((true))))))))))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       for(int _injected_loop_counter = (87231 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), (int(7)) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), (int(7)) | (int(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(7, 0, 0), min(ivec3(7, 0, 0), ivec3(7, 0, 0))))))))))), (false ? _GLF_FUZZED(atomicMin(_injected_loop_counter, findMSB(subgroup_local_id))) : _GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(7), 1 * (int(7)))))) | (int(7)))), int(ivec3((_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((int(7)) | (int(7)), _GLF_IDENTITY(max(_GLF_IDENTITY((int(7)) | (int(7)), ~ (~ ((int(7)) | (int(7))))), (int(7)) | (int(7))), ~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY((int(7)) | (int(7)), ~ _GLF_IDENTITY((~ ((int(7)) | (int(7)))), ((~ ((int(7)) | (int(7))))) >> 0)), (int(7)) | (int(7))), (max(_GLF_IDENTITY((int(7)) | (int(7)), ~ (~ ((int(7)) | (int(7))))), (int(7)) | (int(7)))) << 0))))))))), 0, 1)))))))), ((0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | _GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, _GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (int(7)) ^ 0)), clamp(int(_GLF_IDENTITY(int(7), (int(7)) ^ 0)), int(_GLF_IDENTITY(int(7), (int(7)) ^ 0)), int(_GLF_IDENTITY(int(7), (int(7)) ^ 0))))))) | _GLF_IDENTITY((int(7)), min((int(7)), _GLF_IDENTITY((int(7)), ((int(7))) | ((int(7)))))))), (false ? _GLF_FUZZED(atomicMin(_injected_loop_counter, findMSB(subgroup_local_id))) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(7), 1 * (int(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, (7) | (7))))))))))) | (int(7))), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), 1 * (int(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, (7) | (7))))))))))) | (int(7)))) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))))), int(ivec3((_GLF_IDENTITY(int(7), (int(7)) | (int(7)))), 0, 1))))))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, true && _GLF_IDENTITY((subgroup_local_id + 1 < subgroup_size), bool(bvec3((subgroup_local_id + 1 < subgroup_size), false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 int i = 0;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (true))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 do
                  {
                   do
                    {
                     do
                      {
                       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) | (read_1)) == read_2) + 1, 4, 64, 4);
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)), false || (_GLF_IDENTITY(false, true && (false))))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-70.69, 638.402)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(12.40)), vec2(_GLF_FUZZED(7510.9590), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(uintBitsToFloat(uvec2(145939u, 169079u))))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + abs(0.0))) - 0.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-1158.9312), max(_GLF_FUZZED(-1158.9312), _GLF_FUZZED(-1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, -5347.9244)))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.5), _GLF_FUZZED(vec2(7.9, 4.2).r)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), bool(bvec4(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9582.6093), _GLF_FUZZED(float((~ 121938u)))), bvec2(false, _GLF_IDENTITY(false, ! (! (false)))))).x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-1158.9312)), float(float(_GLF_IDENTITY(float(_GLF_FUZZED(-1158.9312)), (true ? float(_GLF_FUZZED(-1158.9312)) : _GLF_FUZZED(0.3)))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), float(mat4x2(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))))), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y) - 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 25.81)), _GLF_FUZZED(-80.95)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (true ? mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) : _GLF_FUZZED(0.2)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), max(_GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), (clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)) + 0.0), _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), min(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY((abs(0.0)), ((abs(0.0))) - 0.0) / 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, mix(float(_GLF_IDENTITY(-1158.9312, (-1158.9312) + 0.0)), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) / 1.0, ((abs(0.0)) / 1.0) / _GLF_ONE(1.0, injectionSwitch.y))))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, (-1158.9312) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(float(vec3(-1158.9312, 1.0, 0.0)), mix(float(float(vec3(-1158.9312, 1.0, 0.0))), float(_GLF_FUZZED(-5639.5987)), bool(false)))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-66.80, 718.044, -6.7).t), _GLF_FUZZED(-67.18)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-4428.0448))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), max(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))))))), float(_GLF_FUZZED(77.69)), bool(false)))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), true))))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), float(mat4x2(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))))), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y) - 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 25.81)), _GLF_FUZZED(-80.95)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (true ? mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) : _GLF_FUZZED(0.2)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), max(_GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), (clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)) + 0.0), _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), min(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY((abs(0.0)), ((abs(0.0))) - 0.0) / 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, mix(float(_GLF_IDENTITY(-1158.9312, (-1158.9312) + 0.0)), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) / 1.0, ((abs(0.0)) / 1.0) / _GLF_ONE(1.0, injectionSwitch.y))))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, (-1158.9312) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(float(vec3(-1158.9312, 1.0, 0.0)), mix(float(float(vec3(-1158.9312, 1.0, 0.0))), float(_GLF_FUZZED(-5639.5987)), bool(false)))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-66.80, 718.044, -6.7).t), _GLF_FUZZED(-67.18)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-4428.0448))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), max(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))))))), float(_GLF_FUZZED(77.69)), bool(false)))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), true))))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), float(mat4x2(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))))), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y) - 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 25.81)), _GLF_FUZZED(-80.95)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (true ? mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) : _GLF_FUZZED(0.2)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), max(_GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), (clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)) + 0.0), _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), min(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY((abs(0.0)), ((abs(0.0))) - 0.0) / 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, mix(float(_GLF_IDENTITY(-1158.9312, (-1158.9312) + 0.0)), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) / 1.0, ((abs(0.0)) / 1.0) / _GLF_ONE(1.0, injectionSwitch.y))))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, (-1158.9312) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(float(vec3(-1158.9312, 1.0, 0.0)), mix(float(float(vec3(-1158.9312, 1.0, 0.0))), float(_GLF_FUZZED(-5639.5987)), bool(false)))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-66.80, 718.044, -6.7).t), _GLF_FUZZED(-67.18)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-4428.0448))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), max(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))))))), float(_GLF_FUZZED(77.69)), bool(false)))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), true))))))))))), ! (! (bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), float(mat4x2(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))))), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y) - 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.6)), bool(false))))))))))))) > injectionSwitch.y)), true)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 25.81)), _GLF_FUZZED(-80.95)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (true ? mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) : _GLF_FUZZED(0.2)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), max(_GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), (clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)) + 0.0), _GLF_IDENTITY(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), min(clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY((abs(0.0)), ((abs(0.0))) - 0.0) / 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, mix(float(_GLF_IDENTITY(-1158.9312, (-1158.9312) + 0.0)), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) / 1.0, ((abs(0.0)) / 1.0) / _GLF_ONE(1.0, injectionSwitch.y))))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-1158.9312, (-1158.9312) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, _GLF_IDENTITY(float(vec3(-1158.9312, 1.0, 0.0)), mix(float(float(vec3(-1158.9312, 1.0, 0.0))), float(_GLF_FUZZED(-5639.5987)), bool(false)))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-66.80, 718.044, -6.7).t), _GLF_FUZZED(-67.18)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x) + abs(0.0))), float(_GLF_FUZZED(-1158.9312)), bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-4428.0448))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), max(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / cos(0.0)), (injectionSwitch.x) + _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(4.7)), bool(false))), abs(0.0))))))))), float(_GLF_FUZZED(77.69)), bool(false)))), float(_GLF_FUZZED(_GLF_IDENTITY(-1158.9312, clamp(-1158.9312, _GLF_IDENTITY(-1158.9312, max(_GLF_IDENTITY(-1158.9312, float(vec3(-1158.9312, 1.0, 0.0))), -1158.9312)), -1158.9312)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))) && true)), true)))))))))))))), false, false, true))))))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), int(1))), min(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), int(1))), _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), int(1))), clamp(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), int(1))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), int(1))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), int(1))))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))) ^ 0), (true ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0) : _GLF_FUZZED(i))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)))))
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(_injected_loop_counter)))), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0))), 0.0, 1.0, 0.0))))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true)))) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(vec4(33.19, -8.9, 863.790, -94.94))) : _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (vec2(1.0, 1.0) * (injectionSwitch)))))).y)))))
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), false, false, true)), true)))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))))
                              barrier();
                             barrier();
                            }
                           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                  }
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false)))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false))))))))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), (true) && true)), _GLF_IDENTITY(true, true && (true)) && (! (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) && true)), true && (! (_GLF_IDENTITY(true, (true) && true)))))), false))))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || _GLF_IDENTITY((bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY((bool(bvec4(false, false, false, false))), bool(bool((bool(bvec4(false, false, false, false))))))))))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || (! (! (_GLF_DEAD(false)))))))
                                {
                                 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false, false)))) && _GLF_IDENTITY(true, (true) && true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false)))))))))))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.3)), bool(false)), (mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.3)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) * 1.0)) < injectionSwitch.y) || false)), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, true)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, true)), false || (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (! ((injectionSwitch.x < injectionSwitch.y)))), (! (! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)))), true, true)))))))), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))))) - 0.0) < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (false ? _GLF_FUZZED(1935.3461) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))), false)), _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), true, false)))), (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.45), _GLF_FUZZED(553.312)), bvec2(false, false))).y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec3(6.1, 6.8, -3.9).t)), bool(false))) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.7) : injectionSwitch.x)))) < injectionSwitch.y)), true, false, false)))))), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false))))) && true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))) && true))))))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true))))), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false || (_GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false), bvec2(bvec3(bvec2(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false), false))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) || false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))), true && ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0))).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false)))), (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false))))) && true))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(_GLF_IDENTITY(bool(true), true && (bool(true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), injectionSwitch)))), sqrt(0.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-229.735))), 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(tanh(7.6)) : 1.0)), 0.0))).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false))), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), false, true, false))))) && true)))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || false))))) && true)))), bool(bvec2(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || false))))) && true)))), true)))))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true)), clamp(mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true)), float(vec2(_GLF_IDENTITY(mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true)), (mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true))) / 1.0), 1.0))), mix(float(_GLF_FUZZED(499.196)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(36.55) : injectionSwitch.y))), bool(true))))))), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false), bvec2(bvec3(bvec2(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false), false)))))), false || ((_GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false), bvec2(bvec3(bvec2(bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false)), false, true, false)), false), false))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(((! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true))))))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) || false))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), false)), false, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))), true && ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! _GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false))))), false, _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-4347.7014), _GLF_FUZZED(35.79)), bvec2(false, false))).y))), ! (! _GLF_IDENTITY((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(_GLF_IDENTITY(0.0, min(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0))).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false)))), (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false))))) && true))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(_GLF_IDENTITY(bool(true), true && (bool(true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), injectionSwitch)))), sqrt(0.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-229.735))), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(_GLF_IDENTITY(round(length(normalize(1.0))), min(_GLF_IDENTITY(round(length(normalize(1.0))), min(round(length(normalize(1.0))), round(length(normalize(1.0))))), round(length(normalize(1.0))))), round(length(normalize(1.0))))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(tanh(7.6)) : 1.0)), 0.0))).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)) || false)))), bool(bvec2((bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)) || false)))), false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false))), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (injectionSwitch.y) - 0.0)))), _GLF_IDENTITY(! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) || false))), _GLF_IDENTITY(false, (false) || false), true, false))))) && true)))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (0 & -92374) ^ (7))), int(7))), ~ _GLF_IDENTITY((~ ((1 << _GLF_IDENTITY(int(7), int(7))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ ((1 << _GLF_IDENTITY(int(7), int(7))))), ((~ ((1 << _GLF_IDENTITY(int(7), int(7)))))) - 0), 0, 1, 1), (ivec4(_GLF_IDENTITY((~ ((1 << _GLF_IDENTITY(int(7), int(7))))), ((~ ((1 << _GLF_IDENTITY(int(7), int(7)))))) - 0), 0, 1, 1)) / ivec4(1, 1, 1, 1))))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) / 1)); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) || false)), true && (! (_GLF_IDENTITY((false), ((false)) || false)))))))), (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 do
                                                  {
                                                   if(_GLF_DEAD(false))
                                                    barrier();
                                                   barrier();
                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                         barrier();
                                        }
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), true, true))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), false, false))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(-7498.1320)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > injectionSwitch.y))), false || (! ((! (injectionSwitch.x > injectionSwitch.y)))))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > injectionSwitch.y))), false || (! ((! (injectionSwitch.x > injectionSwitch.y))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(34.14) : (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(293.022), _GLF_FUZZED(float(false))), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ((true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! ((true))) && true)) && true))) && true)))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ _GLF_IDENTITY(1, int(ivec4(1, 0, 0, 0))))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (1.0) - 0.0)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (1.0) - 0.0)) > injectionSwitch.y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (bool(_GLF_IDENTITY(false, (false) || false))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (bool(_GLF_IDENTITY(false, (false) || false))))))))))), false, true)))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED((-8.9 * 21.12))))))), ! (! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (1.0) - 0.0)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 1.0))), (1.0) - 0.0)) > injectionSwitch.y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (bool(_GLF_IDENTITY(false, (false) || false))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (bool(_GLF_IDENTITY(false, (false) || false))))))))))), false, true)))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED((-8.9 * 21.12))))))), ! (! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))) || false)))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))))), false || (! (_GLF_IDENTITY(false, true && (false))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), false || (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))))), false, false)))))))), false || (! (_GLF_IDENTITY(false, true && (false)))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (_GLF_IDENTITY(! (! ((false))), true && (! (! ((false)))))) || false)), true, false, false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), false || (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))))), false, false)))))))), bool(bvec2((_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (_GLF_IDENTITY(! (! ((false))), true && (! (! ((false)))))) || false)), true, false, false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))), false || (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, false, false))))), false, false)))))))), true))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (false)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (false)))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (false))))), ! (! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (false)))))))))))))))))))), (false) && true)))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y))))))))))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 1.0)), 1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-677.988) : injectionSwitch.x))) - 0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 1.0))))) > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, _GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64, _GLF_IDENTITY(0, min(0, 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), clamp((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64))))) << 0), (0 >> _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_FUZZED(89703), clamp(_GLF_FUZZED(89703), _GLF_FUZZED(89703), _GLF_FUZZED(89703))) : 64, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64) << 0))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64, _GLF_IDENTITY(0, min(0, 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), clamp((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64))))) << 0), (0 >> _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_IDENTITY(_GLF_FUZZED(89703), clamp(_GLF_FUZZED(89703), _GLF_FUZZED(89703), _GLF_FUZZED(89703))) : _GLF_IDENTITY(64, (64) ^ 0), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64) << 0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(89703) : 64, _GLF_IDENTITY(0, min(0, 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))))) && true) ? _GLF_FUZZED(89703) : _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) / 1))), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (false) || false)) && true) ? _GLF_FUZZED(89703) : _GLF_IDENTITY(64, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (64))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0)))) + 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) || false)) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), max((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(89703, clamp(89703, 89703, 89703))) : 64)))) - (0 ^ 0))))))) - 0) << 0)))) + _GLF_IDENTITY(0, clamp(0, 0, 0))))), 0, 0, 1), _GLF_IDENTITY(max(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((false ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY((false ? _GLF_FUZZED(89703) : 64), ((false ? _GLF_FUZZED(89703) : 64)) * 1)) - 0)), int(ivec4(_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(89703, (89703) ^ 0)) : 64, (_GLF_IDENTITY(0, (0) - 0) >> _GLF_IDENTITY(int(5), int(5))) | (false ? _GLF_FUZZED(89703) : 64)))), 1, 1, 0))), 0, 0, 1), ivec4(_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(89703) : 64, (false ? _GLF_FUZZED(89703) : 64) << 0))), 0, 0, 1)), (max(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((false ? _GLF_FUZZED(89703) : 64), (_GLF_IDENTITY((false ? _GLF_FUZZED(89703) : 64), ((false ? _GLF_FUZZED(89703) : 64)) * 1)) - 0)), int(ivec4(_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(89703, (89703) ^ 0)) : 64, (_GLF_IDENTITY(0, (0) - 0) >> _GLF_IDENTITY(int(5), int(5))) | (false ? _GLF_FUZZED(89703) : 64)))), 1, 1, 0))), 0, 0, 1), ivec4(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(89703) : 64, (false ? _GLF_FUZZED(_GLF_IDENTITY(89703, (89703) - (0 << _GLF_IDENTITY(int(1), int(1))))) : 64) << 0))), 0, 0, 1))) | ivec4(0, 0, 0, 0))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4))))) - (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (8) >> 0)) | (8)), ~ (~ (_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (8) >> 0)) | (8))))), (8) - 0))))));
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), false, false, true))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false))), false, true)))) || false)))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), true, false, true)))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(-949.069)), _GLF_IDENTITY(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), (float(round(length(normalize(vec3(1.0, 1.0, 1.0)))))) - length(0.0)), bool(true))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 1.0))).x, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))).x : _GLF_FUZZED(_GLF_IDENTITY(117.457, clamp(_GLF_IDENTITY(117.457, (117.457) - 0.0), 117.457, _GLF_IDENTITY(117.457, mix(float(_GLF_FUZZED(-72.72)), float(117.457), bool(true)))))))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0), _GLF_IDENTITY(mat3x2(mat4x3(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0))), (true ? mat3x2(mat4x3(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x2(-15.46, _GLF_IDENTITY(9114.6770, _GLF_IDENTITY(max(9114.6770, _GLF_IDENTITY(9114.6770, max(9114.6770, 9114.6770))), min(max(9114.6770, _GLF_IDENTITY(9114.6770, max(9114.6770, 9114.6770))), max(9114.6770, _GLF_IDENTITY(9114.6770, max(9114.6770, 9114.6770)))))), 86.67, _GLF_IDENTITY(-83.23, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (-83.23)), -9279.0611, -1978.1899)))))))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(-949.069)), _GLF_IDENTITY(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), (float(round(length(normalize(vec3(1.0, 1.0, 1.0)))))) - length(0.0)), bool(true))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 1.0))).x, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))).x : _GLF_FUZZED(_GLF_IDENTITY(117.457, clamp(_GLF_IDENTITY(117.457, (117.457) - 0.0), 117.457, _GLF_IDENTITY(117.457, mix(float(_GLF_FUZZED(-72.72)), float(117.457), bool(true)))))))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0), _GLF_IDENTITY(mat3x2(mat4x3(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0))), (true ? mat3x2(mat4x3(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x2(-15.46, _GLF_IDENTITY(9114.6770, _GLF_IDENTITY(max(9114.6770, _GLF_IDENTITY(9114.6770, max(9114.6770, 9114.6770))), min(max(9114.6770, _GLF_IDENTITY(9114.6770, max(9114.6770, 9114.6770))), max(9114.6770, _GLF_IDENTITY(9114.6770, max(9114.6770, 9114.6770)))))), 86.67, _GLF_IDENTITY(-83.23, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (-83.23)), -9279.0611, -1978.1899))))))))))) || false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-32709) : _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))), min(0, 0))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (-82894 & (0 >> _GLF_IDENTITY(int(6), int(6))))) > 0), ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))) && true))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))) || false, ((_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), _GLF_IDENTITY(false, (false) && true) || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))) || false) && true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)))), true)), (bool(bvec2(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true))) && true)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
}
