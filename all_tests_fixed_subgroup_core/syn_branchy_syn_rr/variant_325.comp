#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z = subgroup_size;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base.y = workgroup_base;
  }
 uint virtual_gid = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base.y + subgroup_id * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z + subgroup_local_id;
 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.w = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base.y + subgroup_id * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z + ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.w], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x = read_1;
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.w], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y = read_2;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(subgroup_local_id + 1 < GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z)
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + 1, 4, 64, 4);
        }
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + 1, 4, 64, 4);
      }
    }
  }
 else
  {
  }
}
