#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4942.4293)), float(injectionSwitch.y), bool(true)))))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (14734 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) | (0)) ^ 1)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, false))), false))))))))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 ^ (0)))), ! (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) | (0 ^ (0))))))), (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (_GLF_IDENTITY(0, 0 ^ (0))), 0 | (0 | (_GLF_IDENTITY(0, 0 ^ (0))))))), ! (! (! (_injected_loop_counter != _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 ^ (0))))))))) || false)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1714.4955, -26.38)) : injectionSwitch)).y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), (bool(bvec2(false, true))) && true))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), ~ (~ (_GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), (min(gl_NumWorkGroups, gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u)))))))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))) && true), true, true, false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-4.0), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x4((injectionSwitch), 0.0, sqrt(1.0), tan(0.0), cos(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(vec2(mat2x4((injectionSwitch), 0.0, sqrt(1.0), tan(0.0), cos(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-701.967)), bool(false))))))))), _GLF_IDENTITY(vec2(mat2x4((injectionSwitch), 0.0, sqrt(1.0), tan(0.0), cos(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), mix(vec2(_GLF_FUZZED(12.02), (vec2(mat2x4((injectionSwitch), 0.0, sqrt(1.0), tan(0.0), cos(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1]), vec2((vec2(mat2x4((injectionSwitch), 0.0, sqrt(1.0), tan(0.0), cos(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[0], _GLF_FUZZED(-9.0)), bvec2(true, false))))))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y), true, true, false))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))) * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << _GLF_IDENTITY(0u, (0u) | 0u)) * subgroup_size, 0u + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, min(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))), workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), 0u ^ (~ (workgroup_base)))))) - 0u) + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * _GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << _GLF_IDENTITY(0u, (0u) | 0u)) * subgroup_size, 0u + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, min(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)))))), workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), 0u ^ (~ (workgroup_base)))))), min((_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), 0u ^ (~ (workgroup_base)))))), (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), 0u ^ (~ (workgroup_base)))))))) - 0u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), subgroup_id)), (subgroup_id) << 0u) * _GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size), 0u ^ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (! (true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(64, min(64, 64)), 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         continue;
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true))), true))))), bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0)))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), injectionSwitch.y, injectionSwitch.y))), true), true)), true, true))))), bool(bool(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))), (false ? _GLF_FUZZED(6.0) : (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true)), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0)))) / 1.0), injectionSwitch.y, injectionSwitch.y))), true), true)), true, true))), true, false))))))))))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) + 0)))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0))) != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(25097))))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(findMSB(workgroup_base), (findMSB(workgroup_base)) | (findMSB(workgroup_base)))), (_GLF_FUZZED(findMSB(workgroup_base))) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(findMSB(workgroup_base), (findMSB(workgroup_base)) | (findMSB(workgroup_base)))), (_GLF_FUZZED(findMSB(workgroup_base))) - 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(findMSB(workgroup_base), (findMSB(workgroup_base)) | (findMSB(workgroup_base)))), (_GLF_FUZZED(findMSB(workgroup_base))) - 0)), 0 ^ (~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(findMSB(workgroup_base), (findMSB(workgroup_base)) | (findMSB(workgroup_base)))), (_GLF_FUZZED(findMSB(workgroup_base))) - 0))))) | (~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(findMSB(workgroup_base), (findMSB(workgroup_base)) | (findMSB(workgroup_base)))), (_GLF_FUZZED(findMSB(workgroup_base))) - 0)))))))) < 1))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     for(int _injected_loop_counter = (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))), ((0 >> _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 return;
                                }
                              }
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
                          return;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / cos(0.0)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), 1 * ((1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), vec2(mat2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), 0.0, 0.0)))), injectionSwitch)).x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) - 0)), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(_GLF_IDENTITY(5, (5) | (5))))))) ^ (_GLF_IDENTITY(0 & -44303, int(ivec3(_GLF_IDENTITY(0 & -44303, (0 & -44303) / 1), 0, 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1), _GLF_IDENTITY(false, false || (false)), true))); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)), ! (! (_GLF_IDENTITY(false, true && (false)))))) && true) && true))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)) < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           return;
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         break;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((- injectionSwitch)) : injectionSwitch)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1900.4799)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))))), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), false, true, false))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))), _GLF_IDENTITY(true, (true) && true), true)))), _GLF_IDENTITY(false || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true)), (mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) * 1.0)) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))))), true, _GLF_IDENTITY(true, (true) || false)))))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), ! (! (_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))), true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), true, true)))))))))), (_GLF_IDENTITY(false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(_GLF_IDENTITY(! ((false)), true && (! ((false)))), false, false, false))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), ! (! (! ((true) && true))))))), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! _GLF_IDENTITY((false || (false)), true && ((false || (false)))))))), false, true, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), true, _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (_GLF_IDENTITY(! ((true) || false), bool(bvec4(! ((true) || false), false, true, false))))))))))), ! (! (false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec3((false), false, false))), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), true, true)), bool(bvec4(bool(bvec3((true), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true), false)))) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- 879.366))), bool(false))), 1.0)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))) && true), ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ! (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-728.028, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6909.3809) : -728.028)))), float(injectionSwitch.x), bool(true)))) / 1.0) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))))))))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))))), false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))))), false, true, false)), false, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), false, true, false))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, true, false))))) || false)) || false)))), _GLF_IDENTITY(true, (true) && true), true)))), _GLF_IDENTITY(_GLF_IDENTITY(false || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true)), (mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) * 1.0)) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))))), true, _GLF_IDENTITY(true, (true) || false)))))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), ! (! (_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))), true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), true, true)))))))))), (_GLF_IDENTITY(false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(_GLF_IDENTITY(! ((false)), true && (! ((false)))), false, false, false))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), ! (! (! ((true) && true))))))), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! _GLF_IDENTITY((false || (false)), true && ((false || (false)))))))), false, true, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), true, _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (_GLF_IDENTITY(! ((true) || false), bool(bvec4(! ((true) || false), false, true, false))))))))))), ! (! (false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec3((false), false, false))), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), true, true)), bool(bvec4(bool(bvec3((true), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true), false)))) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((- 879.366))), bool(false))), 1.0)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))) && true), ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ! (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-728.028, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6909.3809) : -728.028)))), float(injectionSwitch.x), bool(true)))) / 1.0) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))))))))) && true), (_GLF_IDENTITY(false || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true)), (mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) * 1.0)) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), _GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))))), true, _GLF_IDENTITY(true, (true) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), ! (! (_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))), true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), true, true)))))))), (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), ! (! (_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false)))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))), true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y) && true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true)))))), true, _GLF_IDENTITY(true, (true) || false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), true && (! (bool(true)))))))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, true, false, true))))), true)))))), true, _GLF_IDENTITY(true, (true) || false)))))))))), true, true))))))))) && true))), (_GLF_IDENTITY(false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec4(_GLF_IDENTITY(! ((false)), true && (! ((false)))), false, false, false))), true && (_GLF_IDENTITY(! ((false)), bool(bvec4(_GLF_IDENTITY(! ((false)), true && (! ((false)))), false, false, false))))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), ! (! (! ((true) && true))))))), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))) + vec2(0.0, 0.0))).y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (false), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, (true) && true), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))), false, false))), false, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! _GLF_IDENTITY((false || (false)), ! (! ((false || (false))))))), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! _GLF_IDENTITY((false || (false)), true && ((false || (false)))))))), false, true, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), false))), true, _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (_GLF_IDENTITY(! ((true) || false), bool(bvec4(! ((true) || false), false, true, false))))))))))), ! (! (false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(false || _GLF_IDENTITY((false), ((false)) && true), false, _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec3((false), false, false))), bool(bvec4(false || (false), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(true, false || (true))), true, true)), bool(bvec4(bool(bvec3((true), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true), false)))) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED((- 879.366))), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED((- 879.366))), bool(false)), mix(float(1.0), float(_GLF_FUZZED((- 879.366))), bool(false))))), 1.0)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))) && true), ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ! (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-728.028)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-728.028, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6909.3809) : _GLF_IDENTITY(-728.028, max(-728.028, -728.028)))))), (_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-728.028, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6909.3809) : _GLF_IDENTITY(-728.028, max(-728.028, -728.028)))))), (float(_GLF_FUZZED(_GLF_IDENTITY(-728.028, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6909.3809) : _GLF_IDENTITY(-728.028, max(-728.028, -728.028))))))) + 0.0)) - 0.0), float(injectionSwitch.x), bool(true)))) / 1.0) < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (true))) || false)))))))))) && true)) || false))) && true)))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))), false || (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 continue;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     int i = _GLF_IDENTITY(0, ~ (~ (0)));
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))).y))))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        break;
       atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
                return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(read_1)), ~ (~ (uint(uint(read_1)))))) == read_2) + 1, 4, 64, 4);
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
}
