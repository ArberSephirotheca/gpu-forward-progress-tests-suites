#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_35 {
 ivec4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_34 {
 bvec3 _f0;
 mat2x4 _f1;
 ivec4 _f2;
 bool _f3;
 uint _f4;
} ;

struct _GLF_struct_33 {
 vec2 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_36 {
 _GLF_struct_33 _f0;
 mat3 _f1;
 mat3 _f2;
 _GLF_struct_34 _f3;
 _GLF_struct_35 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_31 {
 mat3x4 _f0;
 uint _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_30 {
 vec4 _f0;
 vec4 _f1;
 mat3 _f2;
 mat3x2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_29 {
 uint _f0;
 vec4 _f1;
 mat2x3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_32 {
 _GLF_struct_29 _f0;
 uint subgroup_local_id;
 mat2x4 _f1;
 bvec4 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
} ;

struct _GLF_struct_27 {
 uvec3 _f0;
 vec2 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 ivec2 _f4;
 int _f5;
} ;

struct _GLF_struct_28 {
 _GLF_struct_27 _f0;
} ;

struct _GLF_struct_37 {
 _GLF_struct_28 _f0;
 _GLF_struct_32 _f1;
 bvec2 _f2;
 mat2x4 _f3;
 _GLF_struct_36 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
 mat2x4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_23 {
 float _f0;
 ivec3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_22 {
 int _f0;
 bvec2 _f1;
 ivec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_25 {
 uvec2 _f0;
 _GLF_struct_22 _f1;
 uvec4 _f2;
 _GLF_struct_23 _f3;
 uvec2 _f4;
 _GLF_struct_24 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_20 {
 uvec4 _f0;
 bvec2 _f1;
 bvec4 _f2;
 mat3x4 _f3;
 float _f4;
 mat3 _f5;
 float _f6;
} ;

struct _GLF_struct_21 {
 _GLF_struct_20 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 mat3 _f3;
 mat2x3 _f4;
 mat2x3 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_26 {
 _GLF_struct_19 _f0;
 _GLF_struct_21 _f1;
 uint subgroup_size;
 bool _f2;
 _GLF_struct_25 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 bool _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 ivec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 mat4 _f3;
 uvec3 _f4;
 vec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 mat4 _f1;
 _GLF_struct_12 _f2;
 mat3x2 _f3;
 _GLF_struct_13 _f4;
 float _f5;
 float _f6;
 uint subgroup_id;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 mat2 _f1;
 bool _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_6 {
 bool _f0;
 ivec4 _f1;
 vec4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 bvec2 _f1;
 float _f2;
 ivec4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 uvec4 _f1;
 bvec4 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_17 {
 vec2 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_16 _f4;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 ivec3 _f1;
 mat3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 mat2x4 _f1;
 uint _f2;
 bvec4 _f3;
 mat3x2 _f4;
 int _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat4x2 _f1;
 float _f2;
 vec3 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 _GLF_struct_2 _f1;
 bvec3 _f2;
 int i;
 _GLF_struct_3 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false)))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(vec2(1.0), _GLF_struct_8(_GLF_struct_5(bvec2(true), bvec2(true), 1.0, ivec4(1), mat2x3(1.0)), uvec4(1u), bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_struct_6(true, ivec4(1), _GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), vec4(1.0)), _GLF_struct_7(mat4x3(1.0), mat3x2(1.0), mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), max((_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0)))))))) - 0.0)), bvec3(true))), _GLF_struct_10(_GLF_struct_9(uvec3(1u), mat2(1.0), true, uvec4(1u))), _GLF_struct_14(_GLF_struct_11(vec2(1.0), uvec3(1u), mat3x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(26.80)), bool(false)))), _GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(transpose(transpose(mat4(1.0))), transpose(transpose(_GLF_IDENTITY(transpose(transpose(mat4(1.0))), transpose(_GLF_IDENTITY(transpose(transpose(transpose(mat4(1.0)))), mat4(1.0) * (transpose(transpose(transpose(_GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(441.108, 3.0, 793.819, -2.9, -53.57, -8.3, 6791.4803, 2.2, 4799.5747, 74.68, 680.778, 951.213, 2457.3051, -2075.9523, 376.831, -7.3)))))))))))))), (transpose(transpose(mat4(1.0)))) / _GLF_IDENTITY(mat4(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), (_GLF_IDENTITY(transpose(transpose(mat4(1.0))), (transpose(transpose(mat4(1.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))))), transpose(transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))))))))), transpose(transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))))))), transpose(transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.6)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(1.0))), transpose(transpose(mat4(1.0)))))))))))))))), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | (uvec3(1u)))) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY((true ? vec4(1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec4(524.339, _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), max(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)))))), -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), max(_GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (true ? _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))) + vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(-7019.5963, 2443.4654, 40.44, -4.2)))), vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))))), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), (vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(524.339, -6.4, -8.5, -5.1))))))), abs(vec4(1.0, 1.0, 1.0, 1.0)) * (_GLF_IDENTITY((true ? vec4(1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec4(524.339, _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), max(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(-6.4, clamp(-6.4, _GLF_IDENTITY(-6.4, max(_GLF_IDENTITY(-6.4, 0.0 + (-6.4)), -6.4)), _GLF_IDENTITY(-6.4, min(-6.4, -6.4)))))), _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)))))), -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(-5.1, (-5.1) - _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), max(_GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (true ? _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))) + vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(-7019.5963, 2443.4654, 40.44, -4.2)))), vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))))), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), (vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), clamp(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))), 1.0, 1.0, 1.0), mat4(1.0) * (vec4(_GLF_IDENTITY(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), clamp(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))), 1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(-9.4)), float(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), clamp(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))), 1.0, 1.0, 1.0), mat4(1.0) * (vec4(_GLF_IDENTITY(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), clamp(_GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)), _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))), 1.0, 1.0, 1.0))))), bool(true)))))) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(524.339, -6.4, -8.5, -5.1))))))), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false) ? vec4(1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec4(524.339, _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(_GLF_IDENTITY(-6.4, clamp(-6.4, _GLF_IDENTITY(-6.4, max(-6.4, -6.4)), -6.4)), max(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)))))), -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), max(_GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (true ? _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))) + vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(-7019.5963, 2443.4654, 40.44, -4.2)))), vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))))), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), (vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(524.339, -6.4, -8.5, -5.1))))))), vec4(0.0, 0.0, 0.0, 0.0) + ((true ? vec4(1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec4(524.339, _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(_GLF_IDENTITY(-6.4, clamp(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), -6.4, -6.4)), max(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)))))), -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), max(_GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (true ? _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))) + vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(-7019.5963, 2443.4654, 40.44, -4.2)))), vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))))), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), (vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(524.339, -6.4, -8.5, -5.1))))))))), 0.0, sin(0.0))), (vec4(mat2x3(_GLF_IDENTITY((true ? vec4(1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec4(524.339, _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), max(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)))))), _GLF_IDENTITY(-8.5, mix(float(_GLF_FUZZED((890.956))), float(-8.5), bool(true))), -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), max(_GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (true ? _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))) + vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(-7019.5963, 2443.4654, 40.44, -4.2)))), vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))))), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), clamp(vec4(524.339, _GLF_IDENTITY(-6.4, (false ? _GLF_FUZZED(-205.089) : -6.4)), -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), (vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(524.339, -6.4, -8.5, -5.1))))))), vec4(0.0, 0.0, 0.0, 0.0) + ((true ? vec4(1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec4(524.339, _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), max(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), _GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)))))), -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(vec4(vec4(524.339, _GLF_IDENTITY(-6.4, min(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, _GLF_IDENTITY(-6.4, max(-6.4, -6.4)))), -6.4)), -8.5, -5.1))), max(_GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (true ? _GLF_IDENTITY(vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1))), (vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))) + vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(-7019.5963, 2443.4654, 40.44, -4.2)))), vec4(vec4(vec4(524.339, -6.4, -8.5, -5.1)))))), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), clamp(vec4(524.339, -6.4, -8.5, -5.1), _GLF_IDENTITY(vec4(524.339, -6.4, -8.5, -5.1), (vec4(524.339, -6.4, -8.5, _GLF_IDENTITY(-5.1, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (-5.1)))) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(524.339, -6.4, -8.5, -5.1))))))))), 0.0, sin(0.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), uvec4(1u)), mat4(1.0), _GLF_struct_12(mat2(1.0), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), ivec3(ivec3(ivec3(1))))) | (ivec3(1))), mat4x3(1.0)), mat3x2(1.0), _GLF_struct_13(vec4(1.0), mat2x4(1.0), bvec3(true), _GLF_IDENTITY(true, ! (! (true))), mat4x2(1.0)), 1.0, 1.0, gl_SubgroupID), _GLF_struct_16(_GLF_struct_15(bvec2(true), uvec3(1u))));
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_19(vec2(1.0), _GLF_struct_18(_GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true)), bvec3(bvec4(bvec3(bvec3(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), mat4x2(1.0), bvec2(true), mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) + 0.0), 0.0)), max(_GLF_IDENTITY(float(vec4(1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), _GLF_IDENTITY((float(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (false ? _GLF_FUZZED(dot(vec4(27.82, -98.99, -878.838, 4.3), vec4(95.43, -3441.6952, 2.3, -9216.8785))) : (float(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))))), (true ? float(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.2))), 0.0, sqrt(1.0), 0.0)) : _GLF_FUZZED(-6.8))), float(vec4(1.0, 0.0, sqrt(1.0), 0.0)))))), mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)), mat2x3(1.0), vec2(1.0))), _GLF_struct_21(_GLF_struct_20(uvec4(1u), bvec2(true), bvec4(true), mat3x4(1.0), 1.0, mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, length(sin(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat3(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)))))), 0.0, 0.0), (true ? mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, length(sin(vec2(0.0, 0.0))), 0.0, 0.0) : _GLF_FUZZED(mat4x2(20.53, -40.57, -58.95, -67.65, -2607.0460, 803.753, -4821.7226, -9.7))))))), 1.0), mat4x2(1.0)), gl_SubgroupSize, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), _GLF_struct_25(uvec2(1u), _GLF_struct_22(1, bvec2(true), ivec4(1), mat4x2(1.0)), uvec4(1u), _GLF_struct_23(1.0, ivec3(1), mat3x4(1.0)), uvec2(1u), _GLF_struct_24(vec2(1.0), mat2x4(1.0), mat3(1.0)), mat2x4(1.0)), bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, false, false))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, false, false)))))))))))), false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), ! (_GLF_IDENTITY(! (true), false || _GLF_IDENTITY((! (true)), ! (! ((! _GLF_IDENTITY((true), bool(bvec4((true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6878.7173))), 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true)))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false, true))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-20842) : int(4))))), min((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(-20842) : int(4)), ((false ? _GLF_FUZZED(-20842) : int(4))) | ((false ? _GLF_FUZZED(-20842) : int(4))))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-20842) : int(4))))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : sqrt(vec2(1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : sqrt(vec2(1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : sqrt(vec2(1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y) && true), false, false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), true && (bool(bvec4(false, true, false, true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 1, (true ? 0 | 1 : _GLF_IDENTITY(_GLF_FUZZED(ivec3(-78843, -58088, 8495).b), min(_GLF_IDENTITY(_GLF_FUZZED(ivec3(-78843, -58088, 8495).b), (false ? _GLF_FUZZED(-13391) : _GLF_FUZZED(ivec3(-78843, -58088, 8495).b))), _GLF_FUZZED(ivec3(-78843, -58088, 8495).b)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 1.0, cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0)), 1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), clamp(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.0)), float(1.0), bool(true))))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 1.0 * (dot(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0))), vec2(0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) - 0.0) * (dot(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(72.16) : 0.0)))))), 0.0), vec2(1.0, 1.0)))), clamp(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0)), _GLF_IDENTITY(1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), max(1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), _GLF_IDENTITY(1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0 * (1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 1.0 * (dot(vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5010.5077)), bool(false))), 0.0)), 0.0), vec2(1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 1.0 * (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))))) - sqrt(0.0)))))) > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_37 _GLF_struct_replacement_37 = _GLF_struct_37(_GLF_struct_28(_GLF_struct_27(uvec3(1u), vec2(1.0), mat3x2(1.0), mat2x4(1.0), ivec2(1), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / 1), 1, 1)), _GLF_IDENTITY(1, min(1, 1))))) + 0))), _GLF_struct_32(_GLF_struct_29(1u, vec4(1.0), mat2x3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), uvec4(_GLF_IDENTITY(1u, (1u) * 1u))), gl_SubgroupInvocationID, mat2x4(1.0), bvec4(true), _GLF_struct_30(vec4(1.0), vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-679.705)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, (1.0) + 0.0)))))), bool(true)))), mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-923.235)), bool(false)))), mat3x2(1.0), mat4(1.0)), _GLF_struct_31(mat3x4(1.0), 1u, mat3x4(1.0))), bvec2(true), mat2x4(1.0), _GLF_struct_36(_GLF_struct_33(_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(1.0), max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0)))))), max(vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(1.0), max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0)))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(1.0), max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0))))))))), ivec3(1), mat2x3(1.0), bvec4(true)), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))) ? _GLF_FUZZED(543.363) : 1.0))), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(543.363) : 1.0))), (_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(543.363), clamp(_GLF_FUZZED(543.363), _GLF_FUZZED(543.363), _GLF_FUZZED(543.363))) : 1.0))), mat3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(543.363), clamp(_GLF_FUZZED(543.363), _GLF_FUZZED(543.363), _GLF_FUZZED(543.363))) : 1.0)))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), mat3(1.0), _GLF_struct_34(bvec3(true), mat2x4(1.0), ivec4(1), true, 1u), _GLF_struct_35(ivec4(1), mat2x3(1.0)), mat3x2(1.0)), mat4(1.0));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 & 1) ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & 93477) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) / 1.0)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, true))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && _GLF_IDENTITY(true, ! (! (true)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp(injectionSwitch)) : injectionSwitch))) * mat2(1.0)))))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), int(6))), (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), (bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))) && true))), (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))), (bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))) || false)) && true)))) || false)))))), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)) && true), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false))))) && true)) && _GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true)) || false) || false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 1, 0, 0)), clamp(int(ivec4(_injected_loop_counter, 1, 0, 0)), int(ivec4(_injected_loop_counter, 1, 0, 0)), int(ivec4(_injected_loop_counter, 1, 0, _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-51378) : 0)))))))) != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 ^ (0))), (~ (_GLF_IDENTITY(0, 0 ^ (0)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY((~ (_GLF_IDENTITY(0, 0 ^ (0)))), ((~ (_GLF_IDENTITY(0, 0 ^ (0))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(0, 0 ^ (0)))), (false ? _GLF_FUZZED(-91513) : _GLF_IDENTITY((~ (_GLF_IDENTITY(0, 0 ^ (0)))), ((~ (_GLF_IDENTITY(0, 0 ^ (0))))) >> 0))))) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (false), (! (false)) || false)), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(! (false), (! (false)) || false)), bool(bvec3(false || (_GLF_IDENTITY(! (false), (! (false)) || false)), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) && true))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_17._f3.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_26.subgroup_size, (_GLF_struct_replacement_26.subgroup_size) - _GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)))) + _GLF_struct_replacement_37._f1.subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_17._f3.subgroup_id * _GLF_struct_replacement_26.subgroup_size, _GLF_IDENTITY((true ? workgroup_base + _GLF_struct_replacement_17._f3.subgroup_id * _GLF_struct_replacement_26.subgroup_size : _GLF_FUZZED(virtual_gid)), uint(uvec3((true ? workgroup_base + _GLF_struct_replacement_17._f3.subgroup_id * _GLF_struct_replacement_26.subgroup_size : _GLF_FUZZED(virtual_gid)), 1u, 1u)))) + (_GLF_IDENTITY((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size, clamp(_GLF_IDENTITY((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size, ((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size) << 0u), _GLF_IDENTITY((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size, ((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size) | 0u), _GLF_IDENTITY((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size, min((_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size, (_GLF_struct_replacement_37._f1.subgroup_local_id + 1) % _GLF_struct_replacement_26.subgroup_size)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(int(6)))) << (1 ^ (1 & 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) || false) && ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-4680.5296 / 2353.1390)), _GLF_FUZZED(-0.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), min(_GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), mix(float(_GLF_FUZZED(5.6)), float(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), bool(true))), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))).x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)), bool(bvec4(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)), false, false, false)))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-79927))), 4, 4)), max(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-79927))), 4, 4)), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-79927))), 4, 4)))), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 0)); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), true && (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(98.94, -2634.5303)) : injectionSwitch)))).y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x)) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.3) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), _GLF_IDENTITY(0, (0) | 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.y : _GLF_FUZZED(-812.858)))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), 0 | (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), int(ivec3(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), min((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1), (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1))), 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-16222)))) + ((0 ^ 0) << _GLF_IDENTITY(int(4), int(4)))) << _GLF_IDENTITY(int(2), int(2))), (true ? (1 << _GLF_IDENTITY(int(2), int(2))) : _GLF_FUZZED((6365 / 43986)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) << 0), 2))), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), mix(float(injectionSwitch.x), float(_GLF_FUZZED((528.175 + -9270.7381))), bool(false))) > injectionSwitch.y))))))
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (-44778 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(length(vec4(0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(934.530)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id, (_GLF_struct_replacement_37._f1.subgroup_local_id) / (1u ^ 0u)) + 1) | (_GLF_struct_replacement_37._f1.subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id, (_GLF_struct_replacement_37._f1.subgroup_local_id) / (1u ^ 0u)) + 1) | (_GLF_struct_replacement_37._f1.subgroup_local_id + 1))), 1u * (~ (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id, (_GLF_struct_replacement_37._f1.subgroup_local_id) / (1u ^ 0u)) + 1) | (_GLF_struct_replacement_37._f1.subgroup_local_id + 1)))))) | (~ (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_37._f1.subgroup_local_id, (_GLF_struct_replacement_37._f1.subgroup_local_id) / (1u ^ 0u)) + 1) | (_GLF_struct_replacement_37._f1.subgroup_local_id + 1))))))) < _GLF_struct_replacement_26.subgroup_size)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, log(1.0)), _GLF_IDENTITY(mat3(1.0) * (mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, log(1.0))), transpose(transpose(mat3(1.0) * (mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, log(1.0))))))))), injectionSwitch.x)) < injectionSwitch.y))))
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), true)))))));
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat3x4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-402.031)), float(1.0), bool(true))), 1.0, 1.0))) / 1.0)), float(_GLF_FUZZED(297.165)), bool(false)))), _GLF_struct_2(_GLF_struct_0(bvec4(true), mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) ^ 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), max(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, (1u) ^ 0u))))), bvec4(true), mat3x2(1.0), 1, bvec3(true)), mat4x2(1.0), 1.0, vec3(1.0), _GLF_struct_1(_GLF_IDENTITY(ivec4(1), (ivec4(1)) * ivec4(1, 1, 1, 1)), mat3x4(1.0), uvec4(1u), vec2(1.0))), bvec3(true), 0, _GLF_struct_3(_GLF_IDENTITY(ivec3(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0)), ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0))))) / ivec3(1, 1, 1)), _GLF_IDENTITY(ivec3(1), (ivec3(1)) >> ivec3(0, 0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY(ivec3(1), clamp(ivec3(1), ivec3(1), ivec3(1))))), ivec3(1), mat3(1.0), uvec2(1u)));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0 + (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false)))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = ((false ? 68757 : -94131) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, clamp(_GLF_IDENTITY((1) << 0, int(int((1) << 0))), (1) << 0, _GLF_IDENTITY((1) << 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(true, (true) && true) && (read_1 == read_2)))))) + 1, (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(true, (true) && true) && (read_1 == read_2))))), ! (! (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(true, (true) && true) && (read_1 == read_2))))))))) + 1) / 1u), 4, 64, 4);
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))], uint(_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2))) + 1, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | (4))) ^ 0));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), ~ (~ (max(0, 0))))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 ^ 0) & 1)); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))))
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
