#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (1u ^ (1u ^ 1u)) * (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) | (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), (true ? (gl_NumWorkGroups.x) : _GLF_FUZZED(subgroup_id))), (gl_NumWorkGroups.x)))), uint(uvec4((~ _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), (true ? (gl_NumWorkGroups.x) : _GLF_FUZZED(subgroup_id))), (gl_NumWorkGroups.x)))), 0u, 0u, 0u)))))))) >> 0u)))) ^ 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), max(_GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), min((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), uint(uvec3((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), 1u, 1u))))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)) - 0u), 0u, 0u)))))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), max(_GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), min((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), uint(uvec3((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), 1u, 1u))))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)) - 0u), 0u, 0u)))))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), 0u | (uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), max(_GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), min((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), uint(uvec3((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), 1u, 1u))))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)) - 0u), 0u, 0u)))))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))))), uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), max(_GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), min((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), uint(uvec3((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), 1u, 1u))))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)) - 0u), 0u, 0u)))))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))), uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), max(_GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), min((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), uint(uvec3((_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ _GLF_IDENTITY((gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), min(_GLF_IDENTITY((gl_NumWorkGroups.x), max((gl_NumWorkGroups.x), (gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))), 1u, 1u))))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)) - 0u), 0u, 0u)))))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) << 0u)), ((~ _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) << 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(148605u) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(148605u) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))))))))) | (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(148605u) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))), gl_NumWorkGroups, gl_NumWorkGroups)).x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ _GLF_IDENTITY(0u, (0u) | (0u))), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups.x), uint(_GLF_IDENTITY(uvec2(~ (gl_NumWorkGroups.x), 0u), (uvec2(~ (gl_NumWorkGroups.x), 0u)) * uvec2(1u, 1u))))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u)) / 1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), _GLF_IDENTITY(~ (gl_NumWorkGroups.x), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (gl_NumWorkGroups.x)))))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-347.608)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-7.2)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))), bool(true)))), 1u))))))))))), uint(uvec2(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) << 0u)), ((~ _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) << 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(148605u) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(148605u) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))))))))) | (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(148605u) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))), gl_NumWorkGroups, gl_NumWorkGroups)).x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ _GLF_IDENTITY(0u, (0u) | (0u))), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups.x), uint(_GLF_IDENTITY(uvec2(~ (gl_NumWorkGroups.x), 0u), (uvec2(~ (gl_NumWorkGroups.x), 0u)) * uvec2(1u, 1u))))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u)) / 1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), _GLF_IDENTITY(~ (gl_NumWorkGroups.x), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (gl_NumWorkGroups.x)))))), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(uvec3(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (_GLF_IDENTITY((~ (gl_NumWorkGroups.x)), min((~ (gl_NumWorkGroups.x)), _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), ((~ (gl_NumWorkGroups.x))) >> 0u)))) ^ 0u), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-347.608)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-7.2)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))), bool(true)))), 1u))))))))))), 1u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) && true) && (_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), false, false))))) && true), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), false, false))))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)), _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true))), bool(bool(bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true))))))) && true)), (! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(false, (false) && true))), bool(bool(bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))))), _GLF_IDENTITY((false) && true, false || ((false) && true))))))))) && true))) && true)), false, false))))) && true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))), true, true, _GLF_IDENTITY(true, ! (! (true)))))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) ^ 0u);
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> 0u), 0u))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | 0u)))) >> 0u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))))) + 0u)))) | (workgroup_base + subgroup_id * subgroup_size))) >> (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY((uint(3u)) | (uint(3u)), max((uint(3u)) | (uint(3u)), _GLF_IDENTITY((uint(3u)) | (uint(3u)), uint(uint((uint(3u)) | (uint(3u))))))))))) + _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true), false, true)), false, false)))))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, (1) * 1), subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (false)), true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, sin(0.0), 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(67.02)), float(float(mat2x3(injectionSwitch.x, 0.0, sin(0.0), 1.0, 0.0, 1.0))), bool(true))))) * 1.0) > injectionSwitch.y), true && _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))), ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)))))) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))) && true, (_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))) && true, false || ((bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))) && true))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ 0u) == read_2, (_GLF_IDENTITY(read_1, (read_1) ^ 0u) == read_2) || false))))) + 1, 4, _GLF_IDENTITY(64, (64) * 1), 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mod(-9.0, -773.083)) : injectionSwitch.x)) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool((injectionSwitch.x > injectionSwitch.y))))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))), _GLF_IDENTITY((bool(bool(false))) && true, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false)))))))) && true, bool(_GLF_IDENTITY(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))), _GLF_IDENTITY((bool(bool(false))) && true, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false)))))))) && true, bool(_GLF_IDENTITY(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool((injectionSwitch.x > injectionSwitch.y))))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))), _GLF_IDENTITY((bool(bool(false))) && true, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false)))))))) && true, bool(_GLF_IDENTITY(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))), _GLF_IDENTITY((bool(bool(false))) && true, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false)))))))) && true, bool(_GLF_IDENTITY(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (bool(bool(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), false || (! (bool(bool(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))), ! (! ((! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))) || false)), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))) && true)) && true))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, _GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, _GLF_IDENTITY(false, (false) || false), false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))), _GLF_IDENTITY((bool(bool(false))) && true, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false)))))))) && true, bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)) && true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))))))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))), _GLF_IDENTITY((bool(bool(false))) && true, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false)))))))) && true, bool(_GLF_IDENTITY(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))), (injectionSwitch.x > injectionSwitch.y)))) && true))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((_GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ! (! (_GLF_IDENTITY((bool(bool(false))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((bool(bool(false))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), true && (bool(bvec4(_GLF_IDENTITY((bool(bool(false))) && true, bool(bvec4((_GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bvec2(bool(bool(false)), false), bvec2(bvec4(bvec2(bool(bool(false)), false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true, true, false, false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bool(false)), true, false, true)))), true && (! (! (bool(bvec4(bool(bool(false)), true, false, true)))))))))), _GLF_IDENTITY(_GLF_IDENTITY((bool(bool(false))), false || ((bool(bool(false))))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), true && (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))))))) && true) && true))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false))))))), bool(bvec3(! (! (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(bool(bvec2((bool(bool(false))), false)), true && (bool(bvec2((bool(bool(false))), false))))))), true, true)))) && true, bool(_GLF_IDENTITY(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((bool(bool(false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))) || false)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((bool(bool(false))), false, true)))))) && true)), (injectionSwitch.x > injectionSwitch.y)))) || false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), ! (! (bool(bool(bool(false)))))))))), (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), ! (! (bool(bool(bool(false))))))), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), ! (! (bool(bool(bool(false)))))))))))))) || false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) && true)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) && _GLF_IDENTITY(true, ! (! (true))))) && true)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(((mat4x2(0.1, 5.5, -4.8, -6146.1920, -3949.3858, 229.829, 1.1, 231.255) == mat4x2(305.571, 746.511, 8.3, 77.27, 7.4, -25.70, 9.9, 3.7)) ? -4472.1395 : 3.2))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)))) && true))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))) && true)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true)), (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))))) || false) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) && true)), (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)) && true)))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)), false, false)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) || (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))), ((bool(bool(false)))) || false) && true)), (injectionSwitch.x > injectionSwitch.y)))) && true))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false)), bool(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false))))))) && true)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (bool(bool(_GLF_IDENTITY(false, (false) || false)))) && true))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), true))))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 == _GLF_IDENTITY(_GLF_IDENTITY(read_2, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(read_2, 0u, (0u | 0u)), (false ? _GLF_FUZZED(uvec3(89088u, 100096u, 166176u)) : uvec3(read_2, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 1u, 1u, 1u), ~ (~ (uvec4(0u, 1u, 1u, 1u)))))), (0u | 0u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(read_2, 0u, (0u | 0u)), (false ? _GLF_FUZZED(uvec3(89088u, 100096u, 166176u)) : uvec3(read_2, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 1u, 1u, 1u), ~ (~ (uvec4(0u, 1u, 1u, 1u)))))), (0u | 0u)))), (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), ~ (~ (uint(7u))))))), (true ? uvec4(_GLF_IDENTITY(uvec3(read_2, 0u, (0u | 0u)), (false ? _GLF_FUZZED(uvec3(89088u, 100096u, 166176u)) : uvec3(read_2, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 1u, 1u, 1u), ~ (~ (uvec4(0u, 1u, 1u, 1u)))))), (0u | 0u)))), (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), ~ (~ (uint(7u))))))) : _GLF_FUZZED(uvec4(26549u, 83722u, 49089u, 89608u))))))), (false ? _GLF_FUZZED(workgroup_size) : uint(_GLF_IDENTITY(uvec3(read_2, 0u, (0u | 0u)), (false ? _GLF_FUZZED(uvec3(89088u, 100096u, 166176u)) : uvec3(read_2, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup))), (0u | 0u)))))))), uint(uvec2(read_2, 0u)))) + _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
