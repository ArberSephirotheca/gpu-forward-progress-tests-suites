#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(1, 1))))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), 0 | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((0 >> _GLF_IDENTITY(int(1), int(1)))), max(int((0 >> _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(int((0 >> _GLF_IDENTITY(int(1), int(1)))), (int((0 >> _GLF_IDENTITY(int(1), int(1))))) - 0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_IDENTITY(int((0 >> _GLF_IDENTITY(int(1), int(1)))), max(int((0 >> _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(int((0 >> _GLF_IDENTITY(int(1), int(1)))), (int((0 >> _GLF_IDENTITY(int(1), int(1))))) - 0)))) : _GLF_FUZZED(-87619))))))) / (1 | 1)), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(85332) : _GLF_IDENTITY(int(1), ~ (~ (int(1)))))))), 0 | ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1)), ~ (~ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | _GLF_IDENTITY((int(1)), ((int(1))) | ((int(1))))), int(1))))))))) / (1 | 1))) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(9639.1719)), min(float(_GLF_FUZZED(9639.1719)), float(_GLF_FUZZED(9639.1719)))), bool(false)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(9639.1719)), min(float(_GLF_FUZZED(9639.1719)), float(_GLF_FUZZED(9639.1719)))), bool(false))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(65860u, 128259u, 27675u)))).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(8975.7914))), _GLF_IDENTITY(injectionSwitch[1], 0.0 + (_GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1]))), (false ? _GLF_FUZZED(4.2) : 0.0 + (_GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (_GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))[1])), injectionSwitch[1])))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (_GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))))).x)) : _GLF_FUZZED(-215.295))) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch, mix(vec2(_GLF_FUZZED(8.1), _GLF_FUZZED(7.3)), vec2((false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch)[0], (false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch)[1]), bvec2(true, true))), false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-7048.1935, 7.1)) : injectionSwitch))))) * mat2(1.0)))).x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))) && true)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-7048.1935, clamp(-7048.1935, -7048.1935, -7048.1935)), 7.1)) : injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2732.1094), _GLF_FUZZED(2289.2725)), bvec2(false, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(0.0, log(1.0), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, log(1.0), 1.0), vec3(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0))) > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(ivec2(1, 0)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
        return;
      }
     else
      {
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))))) | (gl_WorkGroupID))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) ^ (max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))))) | (gl_WorkGroupID)))))).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, bool(bool(false))) || ((injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! _GLF_IDENTITY((bool(bool(false))), ! (! ((bool(bool(false)))))))), false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)), true, true, false)))))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! _GLF_IDENTITY((bool(bool(false))), ! (! ((bool(bool(false)))))))), false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)), true, true, false))))))) || false), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), true)))))))) || false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ((! (false))) || false) || _GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! _GLF_IDENTITY((bool(bool(false))), (_GLF_IDENTITY((bool(bool(false))), _GLF_IDENTITY(((bool(bool(false)))) || false, ! (! (((bool(bool(false)))) || false))))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), false || (! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))))), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))))))))) && true)) || false), bool(bvec4(! ((_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0 + (determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), tan(0.0), 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0))).x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(false)))), ! (! ((! (bool(bool(false)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (false)))), false)))))))))))))), true, false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), clamp((injectionSwitch) * vec2(1.0, 1.0), (injectionSwitch) * vec2(1.0, 1.0), (injectionSwitch) * vec2(1.0, 1.0)))).y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))) || false), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))))))))))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(vec2(0.0, 0.0))) < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y)))), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, injectionSwitch.y)))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-96.03, 62.23)))), injectionSwitch)).x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(3.9, 7672.1452, -662.750, 67.47, 9.9, 64.78, -299.600, 61.00, 492.447, -8.2, -1.6, -9.8)) : mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-96.03, 62.23)))), injectionSwitch)).x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(3.9, 7672.1452, -662.750, 67.47, 9.9, 64.78, -299.600, 61.00, 492.447, -8.2, -1.6, -9.8)) : mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-96.03, 62.23)))), injectionSwitch)).x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(3.9, 7672.1452, -662.750, 67.47, 9.9, 64.78, -299.600, 61.00, 492.447, -8.2, -1.6, -9.8)) : mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-96.03, 62.23)))), injectionSwitch)).x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(3.9, 7672.1452, -662.750, 67.47, 9.9, 64.78, -299.600, 61.00, 492.447, -8.2, -1.6, -9.8)) : mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))))))))))) || false)))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min((injectionSwitch.y) / 1.0, (injectionSwitch.y) / 1.0))), injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7902.9506) : 0.0))))), max(injectionSwitch.y, injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.3) : 0.0))))), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0))), max(injectionSwitch.y, injectionSwitch.y))), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.3) : 0.0))))), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0))), max(injectionSwitch.y, injectionSwitch.y))), true)))))), false || (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), (! (_GLF_IDENTITY(! (bool(bool(false))), ! (! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(bool(bool(false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))))) && true)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0))), max(injectionSwitch.y, injectionSwitch.y)))))))), false, true))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))), false || ((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min((injectionSwitch.y) / 1.0, (injectionSwitch.y) / 1.0))), injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7902.9506) : 0.0))))), max(injectionSwitch.y, injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.3) : 0.0))))), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0))), max(injectionSwitch.y, injectionSwitch.y))), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.3) : 0.0))))), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0))), max(injectionSwitch.y, injectionSwitch.y))), true)))))), false || (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), (! (_GLF_IDENTITY(! (bool(bool(false))), ! (! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(bool(bool(false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))))) && true)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0))), max(injectionSwitch.y, injectionSwitch.y)))))))), false, true))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0), (vec4(injectionSwitch.y, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) / 1.0), 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0))))))))) || false), true)), ! (! (bool(bvec2(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! _GLF_IDENTITY((bool(bool(false))), true && (_GLF_IDENTITY((bool(bool(false))), ! (! ((bool(bool(false)))))))))), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)))))))) || false)))), true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))), bool(bool(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))), ! (! ((bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), ! (_GLF_IDENTITY(! (! (bool(bool(false)))), bool(bvec4(! (! (bool(bool(false)))), true, false, true)))))))))), false, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))), ! _GLF_IDENTITY((! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (true))))), (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(false))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bool((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(false))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(false)))))) && true), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), true && (! ((injectionSwitch.x < injectionSwitch.y))))))))))))), false || (bool((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(bool(_GLF_IDENTITY(false, (false) || false)), false, false)))))))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true)), true, true))))))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true)), true, true)))))))))) || false)), false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(false))))), _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (bool((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(bool(_GLF_IDENTITY(false, (false) || false)), false, false)))), true && (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(bool(_GLF_IDENTITY(false, (false) || false)), false, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))))))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)))), bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), ! (! (_GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))))), false, _GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bool(_GLF_IDENTITY((! (true)), true && ((! (true)))))))), (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true))), ! (! (bool(bool(false))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(! (! (bool(bool(false)))), bool(bvec2(! (! (bool(bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 0.0))))))))), false || (bool((bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true)) || false), false, false)))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)))))))) || false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) / 1u), 4, 64, 4);
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], 0u | (buf[virtual_gid])), _GLF_IDENTITY(4, 0 + (4)), 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)], (buf[virtual_gid]) << 0u)) >> 0u), _GLF_IDENTITY(4, 0 ^ (4)), 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))) || false)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, _GLF_IDENTITY(64, (64) << 0), 4);
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)), (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(55.02, -3.8)) : injectionSwitch)).x > injectionSwitch.y))));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, true && (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))) || false)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(172.523))) > injectionSwitch.y)))), bool(bool(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(172.523))) > injectionSwitch.y))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 & (1 & 1)), (_injected_loop_counter < (1 & (1 & 1))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))))
    barrier();
  }
}
