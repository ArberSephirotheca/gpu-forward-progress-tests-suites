#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 mat3x2 _f0;
 uint next_virtual_gid;
 int _f1;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
 ivec2 _f1;
 mat2x4 _f2;
 mat2x3 _f3;
 vec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_22 {
 uint _f0;
 bvec4 _f1;
 ivec3 _f2;
 ivec2 _f3;
 mat4 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_21 {
 mat3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_24 {
 _GLF_struct_21 _f0;
 mat4x2 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_26 {
 bvec3 _f0;
 _GLF_struct_24 _f1;
 _GLF_struct_25 _f2;
 mat4x3 _f3;
 mat4x3 _f4;
 int _f5;
 mat2 _f6;
} ;

struct _GLF_struct_18 {
 vec2 _f0;
 bool _f1;
 vec2 _f2;
 mat2x4 _f3;
 bvec3 _f4;
 uvec4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_17 {
 ivec4 _f0;
 mat4x2 _f1;
 float _f2;
} ;

struct _GLF_struct_19 {
 uint virtual_gid;
 vec3 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 bool _f1;
 mat3x4 _f2;
 ivec2 _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
 uvec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_16 _f0;
 uvec4 _f1;
 ivec2 _f2;
 _GLF_struct_19 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_10 {
 bool _f0;
 ivec4 _f1;
 vec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_9 {
 uint _f0;
 mat4x2 _f1;
 int _f2;
 mat2 _f3;
 vec3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_11 {
 bool _f0;
 bvec3 _f1;
 _GLF_struct_8 _f2;
 mat3 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_6 {
 uint _f0;
 mat4 _f1;
 mat2x4 _f2;
 mat4x3 _f3;
 ivec2 _f4;
 ivec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 uint _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 uint _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 bool _f1;
 mat3x2 _f2;
 int _f3;
 float _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 uvec3 _f1;
 bvec3 _f2;
 mat3 _f3;
 mat2x4 _f4;
 bool _f5;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 int _f3;
 bvec2 _f4;
 bvec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 mat3 _f5;
 uint workgroup_size;
 mat2x4 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_4 _f0;
 _GLF_struct_7 _f1;
 mat3x2 _f2;
 _GLF_struct_11 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(false, false)), true)), ! (! (bool(bvec2(bool(bvec2(false, false)), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false)))), false, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), false, true))))))))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)), clamp(vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)), vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)), _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)), (true ? vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0)) : _GLF_FUZZED(injectionSwitch)))))))).y))))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_4(_GLF_struct_0(mat2(1.0), mat4x3(1.0), ivec4(1), 1, bvec2(true), bvec2(true), vec2(1.0)), vec4(1.0), _GLF_struct_1(uvec2(1u)), _GLF_struct_2(ivec4(1), uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))), bvec3(true), mat3(1.0), mat2x4(1.0), true), _GLF_struct_3(mat4x3(1.0), true, mat3x2(1.0), 1, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(73.71)))) - tan(0.0)), ivec4(1)), mat3(1.0), gl_WorkGroupSize.x, mat2x4(1.0)), _GLF_struct_7(ivec2(1), 1u, _GLF_struct_5(mat2x3(1.0), mat2x4(1.0), mat2x3(1.0), mat4(1.0)), _GLF_struct_6(1u, _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0)), mat2x4(1.0), mat4x3(1.0), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951))), min(_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951))), (_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951)))) ^ 0))) : _GLF_IDENTITY(1, (1) | (1))))), (ivec2(_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951))), min(_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951))), (_GLF_IDENTITY(_GLF_FUZZED(10951), 0 + (_GLF_FUZZED(10951)))) ^ 0))) : _GLF_IDENTITY(1, (1) | (1)))))) >> (ivec2(1, 1) ^ ivec2(1, 1))), ivec4(1), true), 1u, mat4x2(1.0)), mat3x2(1.0), _GLF_struct_11(true, bvec3(true), _GLF_struct_8(vec4(1.0), 1u), mat3(1.0), _GLF_struct_9(1u, mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1, mat2(1.0), vec3(1.0), mat3x2(1.0)), _GLF_struct_10(_GLF_IDENTITY(true, (true) && true), ivec4(1), vec3(1.0), mat3x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(89.84) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(atan(-2.9, 7802.5857)))), 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(113.490) : 1.0, sqrt(1.0) * (false ? _GLF_FUZZED(113.490) : 1.0))))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), false)), ! (! (bool(bvec2((true), false)))))) || false), false), true), false))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, int(ivec2(1, 1))) : _GLF_FUZZED(42559)))])).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, true)))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))) && true)), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), false)), ! (! (bool(bvec2((true), false)))))) || false), false), true), false))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, int(ivec2(1, 1))) : _GLF_FUZZED(42559)))])).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, true)))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (_GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), false)), ! (! (bool(bvec2((true), false)))))) || false), false), true), false))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, int(ivec2(1, 1))) : _GLF_FUZZED(42559)))])).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, true)))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), false)), ! (! (bool(bvec2((true), false)))))) || false), false), true), false))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, int(ivec2(1, 1))) : _GLF_FUZZED(42559)))])).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, true)))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false, false))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0) : _GLF_FUZZED(-79.98)))))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))) && true))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), 0.0 + (injectionSwitch.y))))), _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), true, true, false))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true, true)))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))), true, true))))) && true))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.8))), injectionSwitch.y)))), true, false, false)))))) || false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec2(gl_WorkGroupID.x, 0u))), 0u), ~ (~ (uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec2(gl_WorkGroupID.x, 0u))), 0u))))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_12._f0.workgroup_size, max(_GLF_struct_replacement_12._f0.workgroup_size, _GLF_struct_replacement_12._f0.workgroup_size)) * _GLF_IDENTITY(workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)), 0u, 0u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)) - length(vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)), 1.0))))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))))).x) - 0.0) > injectionSwitch.y)))))));
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0)), (_GLF_IDENTITY(int(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0)), max(int(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0)), int(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0))))) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | 0), min((0 | 0), _GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), true && (! (false))), true, true, false))))), ! (! (! (false)))))))))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, true)), (bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))), false, true))) || false))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
    }
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_16(mat2x3(1.0), _GLF_struct_13(bvec3(true), true, mat3x4(1.0), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(ivec2(1), min(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, 0)))))), (true ? (~ (_GLF_IDENTITY(ivec2(1), min(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, 0)))))) : _GLF_FUZZED(ivec2(75227, -63366)))), (true ? ~ (~ (_GLF_IDENTITY(ivec2(1), min(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, 0)))))) : _GLF_FUZZED(ivec2(72516, -841))))), mat4x2(1.0), _GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(1), (ivec3(1)) | (ivec3(1)))))), _GLF_struct_14(mat4x2(1.0)), _GLF_struct_15(uvec2(1u)), uvec2(1u), 1u), uvec4(1u), ivec2(1), _GLF_struct_19(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u & 198612u) ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), min(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))), max(_GLF_IDENTITY(workgroup_base, (0u & 198612u) ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((0u & 198612u), ~ (~ (_GLF_IDENTITY((0u & 198612u), ~ (~ (_GLF_IDENTITY((0u & 198612u), clamp((0u & 198612u), (0u & 198612u), (0u & 198612u))))))))) ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), (_GLF_IDENTITY(workgroup_base, (0u & 198612u) ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(workgroup_base, workgroup_base), (max(workgroup_base, workgroup_base)) << 0u))))) + _GLF_IDENTITY(0u, (0u) * 1u)))) + subgroup_id * subgroup_size + subgroup_local_id, vec3(1.0), _GLF_struct_17(ivec4(1), mat4x2(1.0), 1.0), _GLF_struct_18(vec2(1.0), true, vec2(1.0), mat2x4(1.0), bvec3(true), uvec4(1u), mat3(1.0))), uvec4(1u));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(bvec3(true), _GLF_struct_24(_GLF_struct_21(mat3(1.0), uvec4(1u)), mat4x2(1.0), _GLF_struct_22(1u, bvec4(true), ivec3(1), ivec2(1), mat4(1.0), mat4(1.0)), _GLF_struct_23(mat4(1.0), ivec2(1), mat2x4(1.0), mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-721.223)))), vec2(1.0), vec4(1.0)), ivec3(1)), _GLF_struct_25(mat3x2(1.0), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), max(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) >> 0u)), (true ? ~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) >> 0u)) : _GLF_FUZZED(atomicExchange(workgroup_base, num_workgroup)))))) * subgroup_size, subgroup_id * subgroup_size))))) + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size), 1), mat4x3(1.0), mat4x3(1.0), 1, mat2(1.0));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_struct_replacement_26._f2.next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_20._f3.virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))) || false)), _GLF_IDENTITY(true, true && (true)) && _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), bool(bvec4(! ((! (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))) || false)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(bool(bvec3(true && (true), false, true)), (bool(bvec3(true && (true), false, true))) || false))) && (! (false)))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))) || false)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(bool(bvec3(true && (true), false, true)), (bool(bvec3(true && (true), false, true))) || false))) && (! (false)))) && true))))) || false) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (_GLF_IDENTITY(! ((false)), (! ((false))) && true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), _GLF_IDENTITY(true && (! (false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((true && (! (false))), false || ((true && (! (false))))), ! (! (! (true && (! (false))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), _GLF_IDENTITY(true && (! (false)), ! (_GLF_IDENTITY(! (true && (! (false))), ! (! (! (true && (! (false)))))))))))) && true)) || false)), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), true && (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && true)) || false))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), false)), (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), false)), true && (bool(bvec2((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), false))))) && true)), true && (! (false)))) && true)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))))))) || false)), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (! (false)))) && true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), false)), (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), false)), true && (bool(bvec2((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)), false))))) && true)), true && (! (false)))) && true)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))))))) || false)), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (! (false)))) && true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) || false)), true && _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(false, false || (false)) || (true))))), ((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true)))))) || false))))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))) && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) || false)), true && (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true))))))) && true)), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), (true && (! (false))) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) || false)), true && (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false || (true), bool(bvec4(false || (true), false, true, true))), ! (! (false || (true)))))))))) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))) || false)), true && (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))))))) && true))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))) || false)), true && (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))))))) && true))), ! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))) || false)), true && (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))))))) && true))))))) && true))), false)))))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), true && (! (_GLF_IDENTITY(false, (false) && true))))) && true)) || false))) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), false || (! (false))))))))) || false)), true && (! (false)))) && true, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), true && (! (false)))) && true)), ! (! (bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (_GLF_IDENTITY(false, ! (! (false)))) || false)), true && (! (false)))) && true)))))))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), ! (! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))), true && (! (false)))) && true)) || false))) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), false || (! (false)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), false || (! (false)))), bool(bool(bool(_GLF_IDENTITY(! (false), false || (! (false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(bool(bool(_GLF_IDENTITY(! (false), false || (! (false))))), true)))), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))) && true)) || _GLF_IDENTITY(false, ! (! (false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), true && (! (false)))) && true)) || false))) || false), true, false)))))) || false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.4)), vec2(_GLF_FUZZED(4160.8372), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7826.9099) : injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), true, false))))))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_20._f3.virtual_gid], _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-25300))), 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), (dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))) * 1.0)), 1.0))) > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(-7.3) : 1.0)), injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), ~ (~ (~ (_injected_loop_counter ++)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), false || (subgroup_local_id + 1 < subgroup_size)))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         int i = 0;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), true)), ! (! (bool(bvec2(! (false), true))))))))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               atomicStore(buf[_GLF_struct_replacement_26._f2.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           atomicStore(buf[_GLF_struct_replacement_26._f2.next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) | (uint(read_1 == read_2) + 1)), 4, 64, 4);
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
           break;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    return;
  }
}
