#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_43 {
 ivec4 _f0;
 mat4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_42 {
 vec3 _f0;
 ivec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_44 {
 _GLF_struct_42 _f0;
 _GLF_struct_43 _f1;
} ;

struct _GLF_struct_40 {
 mat3x2 _f0;
 uvec4 _f1;
 vec4 _f2;
 int _f3;
} ;

struct _GLF_struct_39 {
 mat3 _f0;
 uvec4 _f1;
 float _f2;
 mat4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_41 {
 vec2 _f0;
 uvec2 _f1;
 _GLF_struct_39 _f2;
 mat3x2 _f3;
 bool _f4;
 _GLF_struct_40 _f5;
} ;

struct _GLF_struct_45 {
 uint next_virtual_gid;
 _GLF_struct_41 _f0;
 _GLF_struct_44 _f1;
} ;

struct _GLF_struct_36 {
 vec3 _f0;
 mat2x4 _f1;
 bool _f2;
 mat4 _f3;
 ivec4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_37 {
 _GLF_struct_36 _f0;
} ;

struct _GLF_struct_34 {
 bvec3 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 ivec2 _f3;
 mat3x4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_33 {
 bvec4 _f0;
 uvec4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_32 {
 mat3x4 _f0;
 vec2 _f1;
 mat2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_35 {
 uvec4 _f0;
 _GLF_struct_32 _f1;
 _GLF_struct_33 _f2;
 _GLF_struct_34 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_30 {
 uint _f0;
 bool _f1;
 uvec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_29 {
 ivec4 _f0;
 uvec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_28 {
 bool _f0;
 mat3 _f1;
 mat2x3 _f2;
 mat2 _f3;
 mat2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_27 {
 uvec3 _f0;
 uvec3 _f1;
 vec2 _f2;
 int _f3;
 bvec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_31 {
 uvec3 _f0;
 bool _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_28 _f3;
 _GLF_struct_29 _f4;
 vec4 _f5;
 _GLF_struct_30 _f6;
} ;

struct _GLF_struct_25 {
 uvec4 _f0;
} ;

struct _GLF_struct_24 {
 ivec4 _f0;
 ivec4 _f1;
 bvec4 _f2;
 int _f3;
 bvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_26 {
 uint workgroup_size;
 _GLF_struct_24 _f0;
 _GLF_struct_25 _f1;
 float _f2;
 int _f3;
} ;

struct _GLF_struct_38 {
 _GLF_struct_26 _f0;
 _GLF_struct_31 _f1;
 _GLF_struct_35 _f2;
 _GLF_struct_37 _f3;
} ;

struct _GLF_struct_21 {
 vec2 _f0;
} ;

struct _GLF_struct_22 {
 int _f0;
 mat2x4 _f1;
 bvec2 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 vec2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 vec3 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 mat3x2 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_19 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_16 {
 vec3 _f0;
} ;

struct _GLF_struct_15 {
 ivec4 _f0;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_12 {
 mat3x2 _f0;
 mat2 _f1;
 vec3 _f2;
 int _f3;
} ;

struct _GLF_struct_11 {
 mat2 _f0;
 bvec3 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
 uvec3 _f4;
 bool _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 bvec3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_14 {
 uint _f0;
 _GLF_struct_10 _f1;
 mat2x4 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_13 _f5;
} ;

struct _GLF_struct_23 {
 _GLF_struct_14 _f0;
 mat2x3 _f1;
 uint num_workgroup;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_20 _f4;
 float _f5;
 _GLF_struct_22 _f6;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 uvec4 _f1;
 vec2 _f2;
 vec4 _f3;
 uint subgroup_local_id;
 mat3x4 _f4;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 mat4x3 _f1;
 bool _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 uint _f1;
 mat3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 mat4 _f1;
 uvec2 _f2;
 bvec4 _f3;
 mat2x3 _f4;
 bvec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 ivec4 _f1;
 float _f2;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 vec4 _f1;
 uint _f2;
 uint _f3;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 bvec4 _f1;
 bvec3 _f2;
 uvec2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 _GLF_struct_2 _f1;
 uint subgroup_id;
 _GLF_struct_5 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat4x2(1.0), _GLF_struct_2(uvec3(1u), _GLF_struct_0(ivec2(1), bvec4(true), bvec3(true), uvec2(1u), uvec2(1u)), _GLF_struct_1(vec4(1.0), vec4(1.0), 1u, 1u)), gl_SubgroupID, _GLF_struct_5(mat2x3(1.0), _GLF_struct_3(vec4(1.0), ivec4(1), 1.0), _GLF_struct_4(ivec2(1), mat4(1.0), uvec2(1u), bvec4(true), mat2x3(1.0), bvec3(true), vec3(1.0)), mat3x2(1.0)));
uint subgroup_size = 16;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_8(ivec2(1), mat4x3(1.0), true, _GLF_struct_7(mat3(1.0), uvec4(1u), vec2(1.0), vec4(1.0), gl_SubgroupInvocationID, mat3x4(1.0))), 1u, mat3(1.0), vec2(1.0));
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_struct_14(1u, _GLF_struct_10(bvec4(true), bvec3(true), ivec3(1)), mat2x4(1.0), _GLF_struct_11(mat2(1.0), bvec3(true), mat2x3(1.0), mat2x3(1.0), uvec3(1u), true, mat3x4(1.0)), _GLF_struct_12(mat3x2(1.0), mat2(1.0), vec3(1.0), 1), _GLF_struct_13(uvec4(1u), mat2x4(1.0))), mat2x3(1.0), gl_NumWorkGroups.x, _GLF_struct_15(ivec4(1)), _GLF_struct_16(vec3(1.0)), _GLF_struct_20(_GLF_struct_17(mat2(1.0), vec3(1.0), mat3x2(1.0), mat2x4(1.0), uvec3(1u)), mat3x2(1.0), _GLF_struct_18(bvec3(true), ivec3(1)), _GLF_struct_19(bvec3(true), vec2(1.0), mat2x3(1.0)), ivec3(1)), 1.0, _GLF_struct_22(1, mat2x4(1.0), bvec2(true), _GLF_struct_21(vec2(1.0))));
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(_GLF_struct_26(gl_WorkGroupSize.x, _GLF_struct_24(ivec4(1), ivec4(1), bvec4(true), 1, bvec3(true), bvec3(true)), _GLF_struct_25(uvec4(1u)), 1.0, 1), _GLF_struct_31(uvec3(1u), true, _GLF_struct_27(uvec3(1u), uvec3(1u), vec2(1.0), 1, bvec4(true), mat2x3(1.0)), _GLF_struct_28(true, mat3(1.0), mat2x3(1.0), mat2(1.0), mat2(1.0), uvec2(1u)), _GLF_struct_29(ivec4(1), uvec4(1u), mat3(1.0)), vec4(1.0), _GLF_struct_30(1u, true, uvec4(1u), uvec3(1u))), _GLF_struct_35(uvec4(1u), _GLF_struct_32(mat3x4(1.0), vec2(1.0), mat2(1.0), mat4x2(1.0)), _GLF_struct_33(bvec4(true), uvec4(1u), mat3x2(1.0)), _GLF_struct_34(bvec3(true), mat4x3(1.0), bvec4(true), ivec2(1), mat3x4(1.0), mat2x4(1.0)), bvec3(true)), _GLF_struct_37(_GLF_struct_36(vec3(1.0), mat2x4(1.0), true, mat4(1.0), ivec4(1), mat4x3(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_38._f0.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_6.subgroup_id * subgroup_size + _GLF_struct_replacement_9._f0._f3.subgroup_local_id;
 _GLF_struct_45 _GLF_struct_replacement_45 = _GLF_struct_45(workgroup_base + _GLF_struct_replacement_6.subgroup_id * subgroup_size + ((_GLF_struct_replacement_9._f0._f3.subgroup_local_id + 1) % subgroup_size), _GLF_struct_41(vec2(1.0), uvec2(1u), _GLF_struct_39(mat3(1.0), uvec4(1u), 1.0, mat4(1.0), mat2(1.0)), mat3x2(1.0), true, _GLF_struct_40(mat3x2(1.0), uvec4(1u), vec4(1.0), 1)), _GLF_struct_44(_GLF_struct_42(vec3(1.0), ivec3(1), ivec2(1)), _GLF_struct_43(ivec4(1), mat4(1.0), mat3x4(1.0))));
 atomicStore(buf[_GLF_struct_replacement_45.next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_struct_replacement_9._f0._f3.subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[_GLF_struct_replacement_45.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[_GLF_struct_replacement_45.next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
    }
  }
}
