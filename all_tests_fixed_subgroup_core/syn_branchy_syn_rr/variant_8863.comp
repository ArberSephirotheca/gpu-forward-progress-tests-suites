#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-205.187)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-205.187)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-205.187)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-205.187)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-205.187)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) | 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))), workgroup_base + subgroup_id * subgroup_size), (min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (1u | (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) * (subgroup_id)) * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ 0u))) / 1u)) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(4369u))))), subgroup_local_id, subgroup_local_id)), ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) ^ 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) ^ 0)))))), 0)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (1))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0))), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0))))))))) << 0))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(4369u))))), subgroup_local_id, subgroup_local_id)), ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) ^ 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) ^ 0)))))), 0)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (1))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0))), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0))))))))) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(4369u))))), subgroup_local_id, subgroup_local_id)), ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) ^ 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) ^ 0)))))), 0)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (1))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0))), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0))))))))) << 0))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   do
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       do
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, 0u | (read_1)) == read_2) + 1, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == _GLF_IDENTITY(read_2, (read_2) + 0u)) + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / 1.0), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))).y)), bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / 1.0), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))).y)), false))) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), _GLF_IDENTITY((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! ((_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)))))) || false))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), _GLF_IDENTITY((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! ((_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)))))) || false))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), _GLF_IDENTITY((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! ((_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)))))) || false)))))))) && true))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), _GLF_IDENTITY(! (! ((read_1 == read_2))), ! (! (! (! ((read_1 == read_2)))))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), false || (! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)))), true, false, false)))))))))), (true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY((read_1 == read_2), ((read_1 == read_2)) && true) && true)), true, false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(bool(bvec2(read_1 == read_2, false)), (bool(bvec2(read_1 == read_2, false))) || false)), ! (! (read_1 == read_2)))) || false)), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), true))))))))))))) + 1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)) == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)) * uint(_GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), min(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(workgroup_base))))) >> 0u)) == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)) * uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sin(0.0)))))))) + 1))) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) / 1u)), min(_GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1424.2675)), bool(false))), 0.0, 0.0)), 0.0))), min(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / 1.0), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))), (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / 1.0), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0)), (true ? _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))))), 0.0)) : _GLF_FUZZED(4.3)))))))) : _GLF_FUZZED((injectionSwitch * -136.418)))).y)) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (read_2) >> 0u), _GLF_IDENTITY(! (! (read_1 == read_2)), true && (! (! (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, (read_1) >> 0u), read_1)))) == read_2))))))))), true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == _GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), false)), true)))), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false)))))))))), (true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_1) : read_1))) | (read_1)) == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true))))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || false)), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), true))))))))))))) + 1, ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), _GLF_IDENTITY((_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (read_1) << 0u), read_1, read_1)))) >> 0u))))), ((_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (read_1) << 0u), read_1, read_1)))) >> 0u)))))) | ((_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (read_1) << 0u), read_1, read_1)))) >> 0u))))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec4(_GLF_IDENTITY(uint(7u), uint(7u)), 1u, 0u, 0u))))))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(1.0)))).x)))) >> 0u)) == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1))))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)) * uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 1.0, length(0.0), 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(sqrt(1.0), 0.0)), dot(vec2(1.0, 0.0), vec2(sqrt(1.0), 0.0)))))))) + 1))) : _GLF_FUZZED(num_workgroup)), ~ (~ _GLF_IDENTITY(((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(967.748)), float(0.0), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))).y)) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (read_1) / 1u), read_1, read_1)) == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false)))))))))), (true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), bool(bvec2((read_1 == read_2), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), bool(bvec2((read_1 == read_2), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))) && true), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true && ((injectionSwitch.x < injectionSwitch.y))))), true)), (bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true && ((injectionSwitch.x < injectionSwitch.y))))), true))) || false)))))))))))) + 1, ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)), uint(uvec4(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)), 0u, 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(0u), uint(0u)))))) == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)) * uint(_GLF_ONE(1.0, injectionSwitch.y))) + 1))) : _GLF_FUZZED(num_workgroup))), max(((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(967.748)), float(0.0), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))).y)) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (read_1) / 1u), read_1, read_1)) == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false)))))))))), (true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), bool(bvec2((read_1 == read_2), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), bool(bvec2((read_1 == read_2), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))) && true), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true && ((injectionSwitch.x < injectionSwitch.y))))), true)), (bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true && ((injectionSwitch.x < injectionSwitch.y))))), true))) || false)))))))))))) + 1, ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)), uint(uvec4(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)), 0u, 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(0u), uint(0u)))))) == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)) * uint(_GLF_ONE(1.0, injectionSwitch.y))) + 1))) : _GLF_FUZZED(num_workgroup))), ((_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(967.748)), float(0.0), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 666.462)), 45.34)) : vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))).y)) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (read_1) / 1u), read_1, read_1)) == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), ! (! ((read_1 == read_2))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false)))))))))), (true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), bool(bvec2((read_1 == read_2), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY((read_1 == read_2), bool(bvec2((read_1 == read_2), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))) && true), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true && ((injectionSwitch.x < injectionSwitch.y))))), true)), (bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true && ((injectionSwitch.x < injectionSwitch.y))))), true))) || false)))))))))))) + 1, ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)), uint(uvec4(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uint(read_1), (_GLF_IDENTITY(uint(read_1), ~ (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)), 0u, 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(0u), uint(0u)))))) == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)) * uint(_GLF_ONE(1.0, injectionSwitch.y))) + 1))) : _GLF_FUZZED(num_workgroup))))))), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))), vec4(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat2x3(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))), vec4(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))))))))), injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0), (false ? _GLF_FUZZED(vec3(-5.4, _GLF_IDENTITY(666.462, min(_GLF_IDENTITY(666.462, (666.462) / 1.0), 666.462)), _GLF_IDENTITY(45.34, max(45.34, 45.34)))) : vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-332.305)), bool(false))), 0.0))))))).y)) ? _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0) < injectionSwitch.y))), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), _GLF_IDENTITY((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), ((_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! _GLF_IDENTITY(_GLF_IDENTITY((read_1 == read_2), false || ((read_1 == read_2))), ! (! ((read_1 == read_2))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false)))))))), true && (_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), ! (! (! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true))))), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false)))))))))))), (true && (bool(_GLF_IDENTITY(read_1 == read_2, ! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == _GLF_IDENTITY(read_2, (read_2) >> 0u), (read_1 == read_2) && true)), bool(bvec4(! (_GLF_IDENTITY(read_1 == read_2, (read_1 == read_2) && true)), true, false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec2(read_2, 0u))), read_2)))), (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2))), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (read_1 == read_2), (! (read_1 == read_2)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (! (! (_GLF_IDENTITY(read_1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((151697u >> (18702u ^ virtual_gid))) : _GLF_IDENTITY(read_1, clamp(read_1, read_1, read_1)))) == read_2))) || false))) || false)), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! (! (read_1 == read_2)), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(read_1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2))), ! (! (! (_GLF_IDENTITY(read_1 == read_2, false || (read_1 == read_2)))))))))), ! (! (! (! (read_1 == read_2)))))) || false)), (_GLF_IDENTITY(read_1 == read_2, ! (! (read_1 == read_2)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), true))))))))))))) + 1, ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (_GLF_IDENTITY(min(_GLF_IDENTITY(read_1, uint(uint(read_1))), read_1), (min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1), 0u ^ (uint(read_1))), (_GLF_IDENTITY(uint(read_1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u)), (~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u)), max(~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u)), ~ (_GLF_IDENTITY(uint(read_1), (uint(read_1)) >> 0u))))))))) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (0u >> _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) | (~ (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), read_1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)) == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2), min(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2), uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uint(read_1))), (true ? _GLF_IDENTITY(read_1, uint(uint(read_1))) : _GLF_FUZZED(read_1))), read_1)) == read_2)))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) + 1))) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) - 0), int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) - 0)))), 64, _GLF_IDENTITY(4, (4) >> 0));
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3x2(mat2(1.0) * (injectionSwitch), 0.0, 0.0, 1.0, 1.0))), mat2(1.0) * (injectionSwitch)))).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))), true)))))) && true)) || false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
}
