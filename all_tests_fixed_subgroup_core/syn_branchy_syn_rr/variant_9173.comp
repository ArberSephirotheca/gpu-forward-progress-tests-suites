#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u)))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u)))))))).x, (true ? _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u)))))))).x : _GLF_FUZZED(subgroup_local_id)))) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(false))), 0.0, exp(0.0), abs(1.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(false))), 0.0, exp(0.0), abs(1.0))))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))) || false))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, true && (true)), false), false)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, true && (true)), false), false))))))), _GLF_IDENTITY(bool(bvec2(true, _GLF_IDENTITY(true, false || (true)))), false || (bool(bvec2(true, _GLF_IDENTITY(true, false || (true))))))), false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_IDENTITY(false, true && (false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) && true))))))))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (false ? _GLF_FUZZED(subgroup_id) : workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((0u | 0u), 0u + ((0u | 0u))) | (workgroup_id)))), (_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, workgroup_id), uint(uvec2(_GLF_IDENTITY(min(workgroup_id, workgroup_id), (min(workgroup_id, workgroup_id)) * 1u), 0u)))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, workgroup_id), (min(workgroup_id, workgroup_id)) | (_GLF_IDENTITY(min(workgroup_id, workgroup_id), (min(workgroup_id, workgroup_id)) << 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u, 0u + ((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u, 0u + ((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u))), _GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u, 0u + ((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u, 0u + ((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) * 1u)))) * 1u)))))))))), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))))) * 1u)), ((workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, workgroup_id), uint(uvec2(_GLF_IDENTITY(min(workgroup_id, workgroup_id), (min(workgroup_id, workgroup_id)) * 1u), 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), clamp(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), 0u, 1u, (197449u & 0u))), (uint(uvec4(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), 0u, 1u, (197449u & 0u)))) | 0u))) * 1u))))), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))))) * 1u))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))) * 1u)) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-1.2) : _GLF_IDENTITY(injectionSwitch[0], sin(0.0) + (injectionSwitch[0])))), injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x)), uint(uvec4(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-38.43), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-109.681)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (mix(vec2(_GLF_FUZZED(-38.43), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-109.681)), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) / vec2(1.0, 1.0))))), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x)), ~ (~ (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0), max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])), injectionSwitch, injectionSwitch)).x))))), 0u, 1u, 1u))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false) || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 0u))) + _GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (uint(0u))), uint(0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))), (~ (~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))) | 0u))))))))), 1u * ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), max(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))))), (_GLF_IDENTITY(0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), max(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))))), (true ? _GLF_IDENTITY(0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), max(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))))), max(0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), max(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), max(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))))))))) : _GLF_FUZZED((+ workgroup_size))))) / 1u)))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), false, true)))) && true), true, true), bvec3(bvec3(bvec3(true, true, true)))))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), true), bvec3(bvec3(bvec3(true, true, true)))))))))))))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) && true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1), min(max(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1), (false ? _GLF_FUZZED(workgroup_base) : max(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec4(int(2), 1, 0, (1 ^ 1)), ivec4(0, 0, 0, 0) ^ (ivec4(int(2), 1, 0, (1 ^ 1)))))), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(34784), (0 << _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_FUZZED(34784))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))) / 1.0)))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    return;
   barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))));
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u)) ^ 0u), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(19064) : 0)), 0 | (0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))))), true && (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, exp(0.0)))).x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), float(_GLF_FUZZED(6.0)), bool(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      break;
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), max(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))) + 1 < subgroup_size)
  {
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ ((0)))) | _GLF_IDENTITY((0), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(i) : 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (0) + 0))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), 0 + (clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), max(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), ~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))))) / 1)) | (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (0) * 1)))))))) - 0)) + (0 ^ 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) * 1))), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(i) : 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (0) + 0))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), _GLF_IDENTITY(((0)) ^ 0, ~ (~ (((0)) ^ 0))))), 0 + (clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)), ((0)) ^ _GLF_IDENTITY(0, (0) | (0)))))), max(~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), ~ (_GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))))) / 1)) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (0) * 1)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (0) * 1)))), int(ivec2(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, (0) * 1)))), 0))))))))) - 0)) + (0 ^ 0))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), (1 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) | (~ (~ (1)))))) | (_GLF_IDENTITY(clamp((_GLF_IDENTITY(0, (0) << 0)), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), (clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, 0)), 0))))) ^ 0))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), clamp((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, ~ (~ (0))))), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) >> 0))), (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)))))), (false ? _GLF_FUZZED(i) : (_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, min(0, 0)))), clamp((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)))))))), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), _GLF_IDENTITY(_GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), int(ivec2(clamp((0), (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) * 1)))), _GLF_IDENTITY((0), ((0)) ^ 0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))), (clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))) / 1)))))) - 0)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), clamp((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-2618, min(_GLF_IDENTITY(-2618, ~ (~ (_GLF_IDENTITY(-2618, (-2618) - 0)))), -2618))) : _GLF_IDENTITY(0, (0) ^ 0)), max(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-2618, min(_GLF_IDENTITY(-2618, ~ (~ (_GLF_IDENTITY(-2618, (-2618) - 0)))), -2618))) : _GLF_IDENTITY(0, (0) ^ 0)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-2618, min(_GLF_IDENTITY(-2618, ~ (~ (_GLF_IDENTITY(-2618, (-2618) - 0)))), -2618))) : _GLF_IDENTITY(0, (0) ^ 0))) | 0), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-2618, min(_GLF_IDENTITY(-2618, ~ (~ (_GLF_IDENTITY(-2618, (-2618) - 0)))), -2618))) : _GLF_IDENTITY(0, (0) ^ 0)), 0 ^ ((false ? _GLF_FUZZED(_GLF_IDENTITY(-2618, min(_GLF_IDENTITY(-2618, ~ (~ (_GLF_IDENTITY(-2618, (-2618) - 0)))), -2618))) : _GLF_IDENTITY(0, (0) ^ 0)))))), clamp((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)))))) + 0)), (false ? _GLF_FUZZED(i) : (_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), clamp((false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)), (false ? _GLF_FUZZED(-2618) : _GLF_IDENTITY(0, (0) ^ 0)))))))), _GLF_IDENTITY(((0)) ^ 0, ~ (_GLF_IDENTITY(~ (((0)) ^ 0), int(ivec3(~ (((0)) ^ 0), 0, 1))))))))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), _GLF_IDENTITY(((0)), 0 | (_GLF_IDENTITY(((0)), (((0))) << 0))) ^ 0))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((0), _GLF_IDENTITY(_GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), int(ivec2(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))), (clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))) / 1)), (_GLF_IDENTITY((0), _GLF_IDENTITY(_GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), int(ivec2(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))), (clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))) / 1))) << 0))))) - 0))) << 0) + (0 ^ 0))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))), 0 ^ ((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0), (true ? (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), max(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) ^ 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) - 0), ((0)) ^ 0) : _GLF_FUZZED(i))))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0) : _GLF_FUZZED(i))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))), 0 ^ ((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0), (true ? (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), max(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) ^ 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) - 0), ((0)) ^ 0) : _GLF_FUZZED(i))))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0) : _GLF_FUZZED(i))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))), 0 ^ ((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0), (true ? (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), max(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) ^ 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) - 0), ((0)) ^ 0) : _GLF_FUZZED(i))))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0) : _GLF_FUZZED(i)))))), (~ (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))), 0 ^ ((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0), (true ? (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), max(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) ^ 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) - 0), ((0)) ^ 0) : _GLF_FUZZED(i))))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0) : _GLF_FUZZED(i))))))) - 0))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))), 0 ^ ((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0), (true ? (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), max(clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) ^ 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) - 0), ((0)) ^ 0) : _GLF_FUZZED(i))))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), clamp((0), (0), (0))))), _GLF_IDENTITY((0), ((0)) ^ 0))))))) - 0)) + (0 ^ 0) : _GLF_FUZZED(i))))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), ((0)) ^ 0)))), 1 * ((_GLF_IDENTITY((0), clamp((_GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), _GLF_IDENTITY(((0)) ^ 0, 0 + (_GLF_IDENTITY(((0)) ^ 0, (((0)) ^ 0) | (((0)) ^ 0)))))))))), 0 ^ ((_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), ((0)) | 0), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | (_GLF_IDENTITY((0), 0 ^ ((0))))), ((0)) ^ 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0), _GLF_IDENTITY(((0)) ^ 0, (true ? ((0)) ^ 0 : _GLF_FUZZED(i))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) + 0)) << 0, ((_GLF_IDENTITY(0, (0) + 0)) << 0) ^ 0))), clamp((0), (_GLF_IDENTITY(0, (0) - 0)), _GLF_IDENTITY((0), ((0)) ^ 0))))) | (~ (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), ((0)) / 1), (0), _GLF_IDENTITY((0), _GLF_IDENTITY(clamp((0), _GLF_IDENTITY((0), ((0)) << (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), (0)), int(ivec3(clamp((0), _GLF_IDENTITY((0), ((0)) << (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), (0)), 0, 1)))))), _GLF_IDENTITY(_GLF_IDENTITY((0), int(int((0)))), ((0)) ^ 0))))))) - 0)) + (0 ^ 0)))) | 0)))) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) >> 0))), 4, 64, 4);
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))))))), 0 | (int(ivec2(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true)))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, bool(bool(false))))), true, true, true)))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), true, true, true))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
      barrier();
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))], uint(read_1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
