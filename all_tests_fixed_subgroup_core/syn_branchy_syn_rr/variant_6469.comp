#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 vec2 _f0;
 bvec2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 ivec2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 float _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 mat2x4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_2 _f0;
 uint workgroup_id;
 mat2x4 _f1;
 bvec4 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 uint subgroup_local_id;
 vec4 _f1;
 ivec2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (injectionSwitch) * vec2(1.0, 1.0)).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), false)))))))))));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, exp(0.0))), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) ? _GLF_FUZZED(mat4x3(6.7, -1.0, -2.3, -7301.3188, 9.9, 4.7, -671.626, 0.4, -393.288, -9128.3277, -661.288, 2.2)) : mat4x3(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, exp(0.0))), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))).x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x = subgroup_id;
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-5.6 + 670.484))), bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size))))), min(subgroup_size, subgroup_size));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = ((1 ^ 1) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), 0 ^ (int(4)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), ! (! (bool(bvec3(true, true, false)))))))), (injectionSwitch.x < injectionSwitch.y)))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(ivec3(1), gl_SubgroupInvocationID, vec4(1.0), ivec2(1));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))) && true))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-8.7), _GLF_FUZZED(-81.48)), bvec2(false, false))).y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, false || (false)) || ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 0.0))) > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), bool(bool(false || ((injectionSwitch.x > injectionSwitch.y))))))))), (bool(false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false), bool(bvec3(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false)) || false), false, true))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) || ((injectionSwitch.x > injectionSwitch.y)))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) || ((injectionSwitch.x > injectionSwitch.y))))))) || false)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))) || false), bool(bvec3(_GLF_IDENTITY(bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false), false, true)))))))) || false), false || (bool(_GLF_IDENTITY(bool(false || (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))), (bool(false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false))))) && true))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * sqrt(cos(vec2(0.0, 0.0)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(4.9))), injectionSwitch[1])).y, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * sqrt(cos(vec2(0.0, 0.0)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(4.9))), injectionSwitch[1])).y, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))) || false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y = _GLF_struct_replacement_0.subgroup_local_id;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3861.3290), _GLF_FUZZED(-4505.9990)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))).y)), false, false, true)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(4934) : 1)) * (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))))
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY((int(8)) | (int(8)), (_GLF_IDENTITY((int(8)) | (int(8)), ((int(8)) | (int(8))) - 0)) / ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.z = workgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_2(_GLF_struct_1(mat2x3(1.0)), mat2x4(1.0), mat3x4(1.0)), gl_WorkGroupID.x, mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(99.76)), _GLF_IDENTITY(float(1.0), (false ? _GLF_FUZZED(-9.6) : float(1.0))), bool(true)))), bvec4(true), _GLF_struct_3(ivec4(1)), _GLF_struct_7(bvec4(true), 1.0, _GLF_struct_4(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)), mat4x2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, 1.0 * (1.0)) : _GLF_FUZZED(-3.0))))), _GLF_struct_5(mat2x4(1.0), ivec2(1), vec3(1.0)), _GLF_struct_6(vec2(1.0), bvec2(true), mat2x4(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(_GLF_IDENTITY(0.9, (false ? _GLF_FUZZED(roundEven(vec4(-94.60, -4414.5990, -635.412, -6.1)).s) : 0.9)))))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.z * _GLF_struct_replacement_8.workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size, ~ (~ (GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size))).x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | 0u) + ((_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size, (GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size, (GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size) >> uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)).y + 1)))) % GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 & (-72513 * 89713)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))) ? _GLF_FUZZED(87194) : _injected_loop_counter)))) != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, _GLF_IDENTITY(0, max(0, 0)))), 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-92421)))), int(int(_GLF_IDENTITY(int(0), (int(0)) - 0)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0))))), _GLF_IDENTITY(int(0), (int(0)) << 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) - 0)), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ _GLF_IDENTITY((int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (false ? _GLF_FUZZED(67683) : (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ _GLF_IDENTITY((int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (false ? _GLF_FUZZED(67683) : (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), 0, 1, 1), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ _GLF_IDENTITY((int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (false ? _GLF_FUZZED(67683) : (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ _GLF_IDENTITY((int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (false ? _GLF_FUZZED(67683) : (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), 0, 1, 1)) - ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ _GLF_IDENTITY((int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (false ? _GLF_FUZZED(67683) : (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), 0, 1, 1)))))), min(~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), max(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), clamp(_GLF_IDENTITY(int(0), (int(0)) - 0), _GLF_IDENTITY(int(0), (int(0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), max(_GLF_IDENTITY(int(0), (int(0)) - 0), _GLF_IDENTITY(int(0), (int(0)) - 0))))))), clamp(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))) ^ 0), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) - 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) - 0)), 0 ^ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))), 0 | (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) - 0)), 0 ^ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))))))))) ^ 0))) | (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), int(ivec3(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), 1, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))) >> 0))))))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) - 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), 0 ^ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))) | (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), max(~ (int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) - 0, (false ? _GLF_FUZZED(-82761) : _GLF_IDENTITY((int(0)) - 0, ((int(0)) - 0) | (_GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), 0 + ((int(0))))) - 0) - 0))))))), ~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), 0 ^ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))) | (~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0))))))), max(~ (int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) - 0, (false ? _GLF_FUZZED(-82761) : _GLF_IDENTITY((int(0)) - 0, ((int(0)) - 0) | (_GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), 0 + ((int(0))))) - 0) - 0))))))), ~ (int(_GLF_IDENTITY(int(0), (int(0)) - 0)))))) | 0))))) - ((7505 >> -3123) & 0))))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) - 0))))))) && true), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) / 1))))))), int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-70296) : _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), (true ? _GLF_IDENTITY(0 ^ (0), max(0 ^ (0), _GLF_IDENTITY(0 ^ (0), 1 * (0 ^ (0))))) : _GLF_FUZZED(bitCount(subgroup_id))))))), 0))), (int(0)) - 0)))))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(0), (int(0)) - 0))), 1 * (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(0), (int(0)) - 0))), (int(int(_GLF_IDENTITY(int(0), (int(0)) - 0)))) + 0))))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << 0), (int(0)) - 0))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), (int(0)) - _GLF_IDENTITY(0, clamp(0, 0, 0))))))))))) && true), true, true, false))) || false))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), false))))))))))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), false)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], 1.0 * (_GLF_IDENTITY(injectionSwitch[1], float(_GLF_IDENTITY(vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))), vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))), mix(vec2(_GLF_FUZZED(-0.1), (vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))))[1]), vec2((vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))))[0], _GLF_FUZZED(8747.1677)), bvec2(true, false))), 0.0, abs(1.0)), transpose(transpose(mat2(_GLF_IDENTITY(vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))), mix(vec2(_GLF_FUZZED(-0.1), (vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))))[1]), vec2((vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)))))))[0], _GLF_FUZZED(8747.1677)), bvec2(true, false))), 0.0, abs(1.0)))))))))))) / 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)))))), _GLF_IDENTITY(((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), float(_GLF_FUZZED(54.54)), bool(false))))))))) && true))))), (_GLF_IDENTITY(false, (false) && true)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))), (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))), true && (! (bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ((! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))))), (false) || false)))) && true)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
  barrier();
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], 4, 64, _GLF_IDENTITY(0, 0 + (0)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true && (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false || (false)), false), bvec2(bvec4(bvec2(! (false || (false)), false), false, true)))), false || (bool(_GLF_IDENTITY(bvec2(! (false || (false)), false), bvec2(bvec4(bvec2(! (false || (false)), false), _GLF_IDENTITY(false, ! (! (false))), true))))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (false || (false))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), sin(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 1.0, sqrt(1.0)), vec3(0.0, abs(0.0), 0.0)), dot(vec3(sqrt(1.0), 1.0, sqrt(1.0)), vec3(0.0, abs(0.0), 0.0))), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(1.0))), 1.0, 1.0, cos(0.0), 1.0, 0.0))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true), (_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true)) || false), false, false, true)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true), (_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true)) || false), false, false, true)))), true && (bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true), (_GLF_IDENTITY(false || (_GLF_IDENTITY((false), false || ((false)))), (false || (_GLF_IDENTITY((false), false || ((false))))) && true)) || false), false, false, true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))), (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false)))))) || false)) || false) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) | 0, clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) | 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) | 0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) | 0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) | 0, int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) | 0))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size.y + 1 < GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)
        {
         int i = 0;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))));
              }
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(read_1 == read_2), max(uint(read_1 == read_2), uint(read_1 == _GLF_IDENTITY(read_2, (read_2) >> 0u)))), 1u), _GLF_IDENTITY(uvec2(uvec4(uvec2(_GLF_IDENTITY(uint(read_1 == read_2), max(uint(read_1 == _GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), uint(read_1 == read_2))), 1u), 0u, 1u)), (uvec2(uvec4(uvec2(_GLF_IDENTITY(uint(read_1 == read_2), max(uint(read_1 == read_2), uint(read_1 == read_2))), 1u), 0u, 1u))) / uvec2(1u, 1u))))) + 1, _GLF_IDENTITY(4, (4) | 0), 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y, (true ? injectionSwitch.y : _GLF_FUZZED(843.136)))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, min(read_1, read_1)) == read_2) + 1, 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
