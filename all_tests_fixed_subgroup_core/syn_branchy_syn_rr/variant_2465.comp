#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_2;
 uvec4 GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id;
 uvec4 GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_6_1_1_12read_2workgroup_id;
 GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.zw = GLF_merged2_0_1_6_1_1_12read_2workgroup_id;
 uvec4 GLF_merged2_0_3_80_3_1_14GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_baseworkgroup_base;
 uvec4 GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id;
 uvec4 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size;
 uvec4 GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size;
 uvec4 GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_1;
 uvec3 GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_base;
 GLF_merged2_0_3_80_3_1_14GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_baseworkgroup_base.xyz = GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_base;
 GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz = GLF_merged2_0_3_80_3_1_14GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_baseworkgroup_base.xyz;
 uvec4 GLF_merged2_0_2_48_2_2_56GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 uvec4 GLF_merged2_0_2_51_2_2_56GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 uvec2 GLF_merged2_0_1_6_1_1_11read_1virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.xy = GLF_merged2_0_1_6_1_1_11read_1virtual_gid;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.xy = GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.xy;
    }
  }
 else
  {
  }
 uvec4 GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base;
 uvec4 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid;
 uvec4 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.zw = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy = GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.zw;
  }
 else
  {
  }
 uvec4 GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size;
 uvec4 GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base;
 uvec4 GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_baseread_1;
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basenext_virtual_gid;
 uvec4 GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec4 GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size;
 uvec4 GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_2_51_2_2_56GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 1)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw = GLF_merged2_0_2_51_2_2_56GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy;
        }
      }
     else
      {
      }
    }
  }
 do
  {
   GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw = GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
 uvec4 GLF_merged2_0_3_62_3_1_17GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basesubgroup_local_id;
 uvec4 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizenum_workgroup;
 uvec4 GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid;
 uvec3 GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
 for(int _injected_loop_counter = (1 ^ (1 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_size;
  }
 uvec4 GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid;
 uvec3 GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size;
 GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_2.xyz = GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_1.xyz = GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_2.xyz;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz = GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_1.xyz;
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_2_48_2_2_56GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
  }
 else
  {
  }
 GLF_merged2_0_2_51_2_2_56GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw = GLF_merged2_0_2_48_2_2_56GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base.xy = GLF_merged2_0_2_51_2_2_56GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy = GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base.xy;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uvec4 GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup;
 uvec4 GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1;
 uvec4 GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.xy = GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 GLF_merged2_0_2_48_2_2_56GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy = GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.xy;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy = GLF_merged2_0_2_48_2_2_56GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size.xy = GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.xy = GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size.xy;
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))))))
                    {
                     do
                      {
                       do
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(63945) : int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6))) | 0)); _injected_loop_counter --)
                          {
                           do
                            {
                             GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_size;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (31341 & 0))); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.xyz = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizenum_workgroup.xyz;
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 uvec3 GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid.xyz = GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_size;
      }
    }
  }
 else
  {
  }
 GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz = GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid.xyz;
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_base;
 GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_baseread_1.xyz = GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basenext_virtual_gid.xyz = GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_baseread_1.xyz;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec2(int(8), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             GLF_merged2_0_3_62_3_1_17GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basesubgroup_local_id.xyz = GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basenext_virtual_gid.xyz;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) / 1), _GLF_IDENTITY(int(1), (int(1)) >> 0), int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz = GLF_merged2_0_3_62_3_1_17GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basesubgroup_local_id.xyz;
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uvec2 GLF_merged2_0_1_6_1_1_14read_1workgroup_size;
 GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id.xy = GLF_merged2_0_1_6_1_1_14read_1workgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size.xy = GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id.xy;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.zw = GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size.xy;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec3(0, 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.xy = GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.zw;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base.z = subgroup_id;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.x = GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base.z;
      }
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.w = subgroup_size;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.w = GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.w;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.z = GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.w;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size.w = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.z;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) / 1)), (~ (_GLF_IDENTITY(0, (0) / 1))) | (~ (_GLF_IDENTITY(0, (0) / 1))))))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           do
                            {
                             GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.z = GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size.w;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id.w = subgroup_local_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x = GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id.w;
    }
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.z = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.y = GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.z;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size.z = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.y;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               GLF_merged2_0_3_62_3_1_17GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basesubgroup_local_id.w = GLF_merged3_0_2_44_2_1_17_3_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_local_idsubgroup_size.z;
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         do
                                          {
                                           do
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = ((1 ^ 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       do
                                                        {
                                                         GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy.x = GLF_merged2_0_3_62_3_1_17GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basesubgroup_local_id.w;
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizenum_workgroup.w = num_workgroup;
    }
  }
 for(int _injected_loop_counter = ((0 & 6314) & -58641); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.w = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizenum_workgroup.w;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.xyz.x = GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.w;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
  {
  }
 else
  {
   GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.y = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w;
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size.w = GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.y;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.z = GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz.z = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.z;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.xyz.z = GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz.z;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = ((1 & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.xy.y = GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.xyz.z;
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.zw.y = workgroup_id;
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z = GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.zw.y;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.w = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.y = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.w;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.y = GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.y;
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz.y = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.y;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((0 ^ 1) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.xy.y = GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz.y;
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_base = GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.xy.y * GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.xy.y;
 GLF_merged2_0_3_80_3_1_14GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_baseworkgroup_base.w = workgroup_base;
 GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.z = GLF_merged2_0_3_80_3_1_14GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_baseworkgroup_base.w;
 GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base.w = GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.z;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.w = GLF_merged3_0_2_56_2_1_11_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_idworkgroup_base.w;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.x = GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.w;
      }
    }
  }
 else
  {
  }
 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.x = GLF_merged2_0_2_48_2_2_51GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy.y = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.xyz.x;
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.z = GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy.y;
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))));
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.z + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.x * GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.z + GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy.x;
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.y = virtual_gid;
 do
  {
   GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.xy.y = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.y;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.x = GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.xy.y;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.w = GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizeGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.x;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz.x = GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.w;
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.xy.x = GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizesubgroup_size.xyz.x;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -36385)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                          {
                                           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-58765 >> 98714) & 0)); _injected_loop_counter --)
                                            {
                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))))))); _injected_loop_counter ++)
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                                  {
                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                              {
                                                               do
                                                                {
                                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                                  {
                                                                   do
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                      {
                                                                       do
                                                                        {
                                                                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                                                                          {
                                                                           GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.y = GLF_merged2_0_2_48_2_2_44GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_6_1_1_14read_1workgroup_size.xy.x;
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                      }
                                                                     else
                                                                      {
                                                                      }
                                                                    }
                                                                   while(_GLF_WRAPPED_LOOP(false));
                                                                  }
                                                                }
                                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint next_virtual_gid = GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.z + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_12subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_id.x * GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.z + ((GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy.x + 1) % GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.z);
 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 do
  {
   do
    {
     GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basenext_virtual_gid.w = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_14_1_1_12_2_1_14workgroup_baseworkgroup_idworkgroup_sizenext_virtual_gid.w;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid.w = GLF_merged2_0_3_62_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basenext_virtual_gid.w;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               do
                                {
                                 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), 0, (1 ^ 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       atomicStore(buf[GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid.w], uint(1), 4, 64, 4);
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_1 = atomicLoad(buf[GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.y], 4, 64, 0);
 GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_1.w = read_1;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.xy.x = GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_1.w;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_baseread_1.w = GLF_merged2_0_3_80_3_1_13GLF_merged2_0_2_41_2_1_14GLF_merged2_0_1_6_1_1_11read_1virtual_gidworkgroup_basesubgroup_size.xyz.xy.x;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.w = GLF_merged2_0_3_62_3_1_6GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_baseread_1.w;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-70574) & 0)); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               do
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                  {
                                                                   GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.xyz.y = GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.w;
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                               else
                                                                {
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             else
                                              {
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = (0 & -25448); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.xy.x = GLF_merged2_0_3_64_3_1_6GLF_merged3_0_1_13_1_1_6_2_1_14num_workgroupread_1workgroup_sizeread_1.xyz.y;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.y], 4, 64, 0);
 GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_2.w = read_2;
 GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.zw.x = GLF_merged2_0_3_69_3_1_6GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_sizeread_2.w;
 GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id.z = GLF_merged2_0_2_41_2_2_42GLF_merged2_0_1_6_1_1_11read_1virtual_gidGLF_merged2_0_1_6_1_1_12read_2workgroup_id.zw.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size.z = GLF_merged3_0_2_44_2_1_6_3_1_17GLF_merged2_0_1_6_1_1_14read_1workgroup_sizeread_2subgroup_local_id.z;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(92298) : int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.x = GLF_merged3_0_2_48_2_1_6_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idread_2workgroup_size.z;
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (1 ^ (1 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(GLF_merged3_0_2_56_2_1_17_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_local_idworkgroup_base.xy.x + 1 < GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.z)
                {
                 int i = 0;
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = (0 & 98132); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                          {
                                           for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                            {
                                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                              {
                                               do
                                                {
                                                 return;
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     else
                                      {
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           atomicStore(buf[GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid.w], uint(GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.xy.x == GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.x) + 1, 4, 64, 4);
                                                          }
                                                        }
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     else
                                      {
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         atomicStore(buf[GLF_merged2_0_3_82_3_1_16GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenext_virtual_gid.w], uint(GLF_merged2_0_3_82_3_1_13GLF_merged2_0_2_44_2_1_13GLF_merged2_0_1_6_1_1_14read_1workgroup_sizesubgroup_sizenum_workgroup.xyz.xy.x == GLF_merged2_0_3_62_3_1_11GLF_merged3_0_1_6_1_1_11_2_1_14read_2virtual_gidworkgroup_basevirtual_gid.xyz.x) + 1, 4, 64, 4);
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
}
