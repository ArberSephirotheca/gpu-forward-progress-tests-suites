#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true && (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_6_1_1_14read_2workgroup_base;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, true))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(539.022) : injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y = subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)).x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.0), _GLF_IDENTITY(_GLF_FUZZED(58.14), 1.0 * (_GLF_FUZZED(58.14)))), bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false))))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))))) && true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
            barrier();
           return;
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-7446.7438), _GLF_FUZZED(46.93)), bvec2(false, false))).y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (false)), false), true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (false)), false), true, true))))), bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (false)), false), true, true))))), true, true)))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(855.540)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-8.6)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) || false), false))))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 0.0, abs(abs(0.0)), 1.0), mat3(1.0) * (mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 0.0, abs(abs(0.0)), 1.0)))), (vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 0.0, abs(abs(0.0)), 1.0), mat3(1.0) * (mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 0.0, abs(abs(0.0)), 1.0))))) + vec2(0.0, 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5740.3981), _GLF_FUZZED(6.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), false, false, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), false || (bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ((_GLF_IDENTITY(false, bool(bool(false))))) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true)))))) || false)), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))))))) || false))))) || false)))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false))))) || false)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false)))))) && true), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false)))))) && true), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) || false)))), (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false))))) || false)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(false))))), ((! (_GLF_IDENTITY(false, bool(bool(false)))))) && true)))) && true)))) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false)))))) && true), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true))))))), true && (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true))))))))))))))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && true)))) || false)))))) && true), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false), true, true))) || false)))), (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, tan(0.0) + (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(97.78)), bool(false))) > injectionSwitch.y) || false)))))
      barrier();
     return;
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), true && (true && (false))), bool(bvec4(_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && _GLF_IDENTITY((false), false || ((false))), (true && (false)) || false)) && true), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), false))))), (bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), false)))))) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, sin(0.0), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, sin(0.0), 1.0))) * (0.0)), 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0))) - 0.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), max(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1], (injectionSwitch[1]) - 0.0), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1], (injectionSwitch[1]) - 0.0), 0.0), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1], (injectionSwitch[1]) - 0.0), 0.0)) / vec2(1.0, 1.0)))))).x, min(injectionSwitch.x, injectionSwitch.x))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) + (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 1u), min(uvec4(gl_WorkGroupSize, 1u), uvec4(gl_WorkGroupSize, 1u))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)))), true, true)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(acosh(4790.6743)))), 1.0, cos(0.0), 1.0, 0.0, 1.0, 1.0, 1.0)))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, max(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, ~ (~ (GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) - (0u | 0u)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id))), GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id)), clamp(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, max(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, ~ (~ (GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) - (0u | 0u)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id))), GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id)), _GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, max(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, ~ (~ (GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) - (0u | 0u)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id))), GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id)), _GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, max(_GLF_IDENTITY(GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id, ~ (~ (GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) - (0u | 0u)) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id))), GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))) * GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y + subgroup_local_id))));
 uint next_virtual_gid = GLF_merged2_0_1_6_1_1_14read_2workgroup_base.y + subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, clamp(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), (_GLF_IDENTITY(uvec2(0u, 0u) & uvec2(134965u, 24764u), clamp(uvec2(0u, 0u) & uvec2(134965u, 24764u), uvec2(0u, 0u) & uvec2(134965u, 24764u), uvec2(0u, 0u) & uvec2(134965u, 24764u)))) | (~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size))))), GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size))) >> uvec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_IDENTITY(_GLF_FUZZED(-2.7), clamp(_GLF_FUZZED(-2.7), _GLF_FUZZED(-2.7), _GLF_FUZZED(-2.7))) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), 0.0 + (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))), bool(true)))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))).y + ((subgroup_local_id + 1) % GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x = next_virtual_gid, (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x = next_virtual_gid) - 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false)))), ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))) || false)))) || false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])).y)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], _GLF_IDENTITY(4, min(4, 4)), 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-202.536) : injectionSwitch.x)), mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.3)), bool(false))) > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged2_0_1_6_1_1_14read_2workgroup_base.x = read_2;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, abs(0.0), sin(0.0), 0.0, 0.0, 1.0, abs(0.0), sqrt(1.0))), (float(mat4x2(1.0, abs(0.0), sin(0.0), 0.0, 0.0, 1.0, abs(0.0), sqrt(1.0)))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0)))), vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0)))), max(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0)))), vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0)))))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))).y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acos(-408.351)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec2(3519.5123, -2.8).y)), bool(false))))))) > injectionSwitch.y) && true)) || false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, min(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), max(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), ~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size))))))).y, ! (_GLF_IDENTITY(! (subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, min(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size) >> uvec2(0u, 0u))), max(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), ~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size))))))).y), false || (! (subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, min(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), _GLF_IDENTITY(max(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), ~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size)), (max(~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size), ~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size))) >> uvec2(0u, 0u))))))).y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(11.35))), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, false))), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, true))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), (! (false)) && true))), _GLF_IDENTITY((! (! (! _GLF_IDENTITY((false), ! (! ((false))))))) || false, ! (_GLF_IDENTITY(! ((! (! (! (false)))) || false), true && (! ((! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))) || false)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x, _GLF_IDENTITY((GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x), (false ? _GLF_FUZZED((next_virtual_gid --)) : (GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x))) + 0u)], uint(read_1 == GLF_merged2_0_1_6_1_1_14read_2workgroup_base.x) + 1, _GLF_IDENTITY(4, (4) >> (0 << _GLF_IDENTITY(int(2), int(2)))), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), false)))))))
    barrier();
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x], uint(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, ((_GLF_IDENTITY(_GLF_IDENTITY((0u | 1u) << _GLF_IDENTITY(uint(1u), uint(1u)), max(_GLF_IDENTITY((0u | 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))), uint(1u)), 0u ^ ((0u | 1u) << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY((0u | 1u), 0u + ((0u | 1u))), (true ? _GLF_IDENTITY((0u | _GLF_IDENTITY(1u, (1u) << 0u)), ((0u | 1u)) >> 0u) : _GLF_FUZZED(84160u))) << _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY((0u | 1u) << _GLF_IDENTITY(uint(1u), uint(1u)), max(_GLF_IDENTITY((0u | 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))), uint(1u)), 0u ^ ((0u | 1u) << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY((0u | 1u), 0u + ((0u | 1u))), (true ? _GLF_IDENTITY((0u | _GLF_IDENTITY(1u, (1u) << 0u)), ((0u | 1u)) >> 0u) : _GLF_FUZZED(84160u))) << _GLF_IDENTITY(uint(1u), uint(1u))))) >> 0u)) >> _GLF_IDENTITY(uint(1u), uint(1u)))))) == GLF_merged2_0_1_6_1_1_14read_2workgroup_base.x) + 1, _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, int(int(4)))))), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(false, false, false)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
