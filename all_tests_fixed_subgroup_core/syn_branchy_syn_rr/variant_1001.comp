#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, 1.0 * ((injectionSwitch.y) + 0.0)))))))))), _GLF_IDENTITY(false, (false) && true) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, 1.0 * ((injectionSwitch.y) + 0.0)))))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, 1.0 * ((injectionSwitch.y) + 0.0)))))))))), _GLF_IDENTITY(false, (false) && true) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, 1.0 * ((injectionSwitch.y) + 0.0)))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, 1.0 * ((injectionSwitch.y) + 0.0)))))))))), _GLF_IDENTITY(false, (false) && true) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, 1.0 * ((injectionSwitch.y) + 0.0)))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     do
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(935.434)))), _GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, 0.0 + (1.0))), clamp(vec3(0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), 1.0), _GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) - vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), 1.0), min(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), _GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), _GLF_IDENTITY((vec3(0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - sqrt(0.0)) * 1.0)) * 1.0)), 1.0)) - vec3(0.0, 0.0, 0.0), ((_GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), max(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))) - vec3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0)) - _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), min(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, cos(0.0)), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, cos(0.0)), vec4(0.0, 0.0, 1.0, 0.0))))))), (vec3(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) + vec3(0.0, 0.0, 0.0)))))))), (false ? _GLF_FUZZED(vec3(-8209.8709, -248.354, 1.7)) : _GLF_IDENTITY(vec3(0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), 1.0), min(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), _GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), _GLF_IDENTITY((_GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - sqrt(0.0)) * 1.0)) * 1.0)), 1.0), (vec3(0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - sqrt(0.0)) * 1.0)) * 1.0)), 1.0)) * mat3(1.0))) - vec3(0.0, 0.0, 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), max(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))) - vec3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), max(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))) - vec3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0)))) - _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), min(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, cos(0.0)), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0)), dot(vec4(1.0, 1.0, 0.0, cos(0.0)), vec4(0.0, 0.0, 1.0, 0.0))))))), (vec3(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) + vec3(0.0, 0.0, 0.0))))))))))))), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, 1.0, 0.0)), (float(mat2(1.0, 1.0, 1.0, 0.0))) - 0.0))), vec3(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[0], float(float((vec4(1.0, 1.0, 1.0, 1.0))[0]))), (vec4(1.0, 1.0, 1.0, 1.0))[1], _GLF_FUZZED(-3.9), _GLF_FUZZED(-3.2)), vec4(_GLF_FUZZED(9.6), _GLF_FUZZED(-6.3), (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(false, false, true, true)))))), _GLF_IDENTITY(float(vec2(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)), (float(vec2(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0))) / abs(1.0)))), _GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(58.26)), float(0.0), bool(true))))), injectionSwitch.x), 1.0))), 1.0, 1.0, 0.0, 0.0)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), true, true, true)), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), true, true, true))))), true, false))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bool(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))) && true); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))) >> 0))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))), ((! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u) * (workgroup_id), max(1u * (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(1u * (workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : 1u * (workgroup_id))), ~ (_GLF_IDENTITY(~ (1u * (workgroup_id)), (true ? ~ (1u * (workgroup_id)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 1u * (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) / 1u)))))))))), (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(uvec4(uint(4u), 0u, 0u, 0u))), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) & 1u) * (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(1u * (workgroup_id), _GLF_IDENTITY(max(1u * (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(1u * (workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : 1u * (workgroup_id))), ~ (_GLF_IDENTITY(~ (1u * (workgroup_id)), (true ? ~ (1u * _GLF_IDENTITY((workgroup_id), clamp((workgroup_id), (workgroup_id), (_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)))))) : _GLF_FUZZED(workgroup_size)))))), min(max(1u * (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(1u * (workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : 1u * (workgroup_id))), ~ (_GLF_IDENTITY(~ (1u * (workgroup_id)), (true ? ~ (1u * _GLF_IDENTITY((workgroup_id), clamp((workgroup_id), (workgroup_id), (_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)))))) : _GLF_FUZZED(workgroup_size)))))), max(1u * (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(1u * (workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : 1u * (workgroup_id))), ~ (_GLF_IDENTITY(~ (1u * (workgroup_id)), (true ? ~ (1u * _GLF_IDENTITY((workgroup_id), clamp((workgroup_id), (workgroup_id), (_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)))))) : _GLF_FUZZED(workgroup_size))))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(clamp((workgroup_base) | 0u, (workgroup_base) | 0u, (workgroup_base) | 0u), (false ? _GLF_FUZZED(subgroup_id) : clamp((workgroup_base) | 0u, (workgroup_base) | 0u, (workgroup_base) | 0u)))), 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u) % subgroup_size), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ 0u), ((subgroup_local_id + 1)) << 0u) % subgroup_size) / 1u)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | _GLF_IDENTITY(0u, ~ (~ (0u))), ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), uint(uvec4(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u)))) + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (true ? _GLF_IDENTITY((workgroup_base) | 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(108341u) : (workgroup_base) | 0u)) : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u)), (_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u))) + 0u), ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u))), clamp(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u)))) + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (true ? _GLF_IDENTITY((workgroup_base) | 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(108341u) : (workgroup_base) | 0u)) : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u)), (_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u))) + 0u), ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u)))) + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (true ? _GLF_IDENTITY((workgroup_base) | 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(108341u) : (workgroup_base) | 0u)) : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u)), (_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u))) + 0u), ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u)))) + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (true ? _GLF_IDENTITY((workgroup_base) | 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(108341u) : (workgroup_base) | 0u)) : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u)), (_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u))) + 0u), ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u))), 0u ^ (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u)))) + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (true ? _GLF_IDENTITY((workgroup_base) | 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(108341u) : (workgroup_base) | 0u)) : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u)), (_GLF_IDENTITY((workgroup_base) | 0u, (_GLF_IDENTITY((workgroup_base) | 0u, _GLF_IDENTITY(uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u)), ~ (~ (uint(uvec4((workgroup_base) | 0u, 0u, 1u, 1u))))))) | ((workgroup_base) | 0u))) + 0u), ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u))))))), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-747.115)), float(0.0), bool(true))))), 0.0, 0.0)), injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))), max(_GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))), _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))), max(_GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))), _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))))), 0u))))))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))) % subgroup_size), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u)))), max(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u))))))) ^ 0u) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (1u ^ 0u), (0u | 0u), 0u))) + 1) % subgroup_size))), uint(_GLF_IDENTITY(uvec4(uint(uint(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size))))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % subgroup_size), uint(uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint((subgroup_local_id + 1) % subgroup_size))))))) << 0u), uint((subgroup_local_id + 1) % subgroup_size), uint((subgroup_local_id + 1) % subgroup_size)))))))), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec4(uint(uint(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | 0u, 0u | (_GLF_IDENTITY((workgroup_base) | 0u, ((workgroup_base) | 0u) ^ 0u)))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(uint((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size))))), (_GLF_IDENTITY(uint((subgroup_local_id + 1) % subgroup_size), uint(uint(_GLF_IDENTITY(uint((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint((subgroup_local_id + 1) % subgroup_size))))))) << 0u), uint((subgroup_local_id + 1) % subgroup_size), uint((subgroup_local_id + 1) % subgroup_size)))))))), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) << uvec4(0u, 0u, 0u, 0u)))))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, (true ? _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), next_virtual_gid)) : _GLF_FUZZED(subgroup_size))))))], uint(1), 4, 64, 4);
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), true, true)), ! (! (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), true && (bool(bool(injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) || false))))))), true, true)))))))) || false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) ^ 0) - 0));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / (1u ^ 0u)) + 1 < subgroup_size)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
            }
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
   int i = 0;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(cos(0.0) * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))), cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), max(injectionSwitch.y, injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(cos(0.0) * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))), cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), max(injectionSwitch.y, injectionSwitch.y))))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(cos(0.0) * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))), cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), max(injectionSwitch.y, injectionSwitch.y)))))))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(cos(0.0) * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))), cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), max(injectionSwitch.y, injectionSwitch.y))))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(cos(0.0) * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), min(cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))), cos(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), max(injectionSwitch.y, injectionSwitch.y))))))))))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-16.30)), bool(false))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec2(_injected_loop_counter != 1, _GLF_IDENTITY(false, ! (! (false))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, 64), (_GLF_IDENTITY(clamp(64, 64, 64), _GLF_IDENTITY((clamp(64, 64, 64)) + 0, ((clamp(64, 64, 64)) + 0) + 0))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) | 0)))) + (_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))) << 0))), 4);
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))) && _GLF_IDENTITY(true, ! (! (true))))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.8) : 0.0)), 0.0, 1.0, sin(0.0)), vec4(mat2x3(vec4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.8) : 0.0)), 0.0, 1.0, sin(0.0)), 1.0, 1.0))))), 1.0, exp(0.0), 0.0, abs(1.0), 0.0, 0.0), mat3(1.0) * (mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, abs(1.0), 0.0, 0.0))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
            continue;
           break;
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(9446.1977, 6.1)))).y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), bool(bvec4(bool(bvec4(true, false, true, true)), true, true, false)))), (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
     do
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), true, true))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec3(2, 0, 1)))) ^ 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))), int(ivec4(int(2), _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 0), ivec3(0, 0, 0) + (ivec3(1, 1, 0))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) * 1)) | (1)), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-36.07)), bool(false))), 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(2.9)), float(sqrt(1.0)), bool(true))))) / 1.0), 1.0))) + (1.0)), 1.0), min(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-36.07)), bool(false))), 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0), mat2(1.0) * (mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), (0.0) / sqrt(1.0))) / 1.0), 1.0))) + (1.0)), 1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-36.07)), bool(false))), 0.0), vec3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.5)), bool(false))))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0))) / 1.0), 1.0))) + (1.0)), 1.0)))))).x)))))), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | (65715))) : 0))), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) << 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | _GLF_IDENTITY((65715), 0 + ((65715))))) : 0)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | (65715))) : 0))), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) << 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | _GLF_IDENTITY((65715), 0 + ((65715))))) : 0)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | (65715))) : 0))), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) << 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | _GLF_IDENTITY((65715), 0 + ((65715))))) : 0)))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | (65715))) : 0))), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) << 0)) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(65715, (65715) | _GLF_IDENTITY((65715), 0 + ((65715))))) : 0)))) - 0)))) / 1))) | (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    return;
   return;
  }
}
