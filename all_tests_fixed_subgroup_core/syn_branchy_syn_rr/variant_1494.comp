#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_27 {
 bvec3 _f0;
 ivec3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_28 {
 float _f0;
 bvec3 _f1;
 mat2x4 _f2;
 int _f3;
 _GLF_struct_27 _f4;
} ;

struct _GLF_struct_26 {
 ivec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_24 {
 bvec2 _f0;
 mat2 _f1;
 mat2x4 _f2;
 bvec2 _f3;
 mat2 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_23 {
 uvec3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_25 {
 _GLF_struct_23 _f0;
 ivec4 _f1;
 _GLF_struct_24 _f2;
 ivec4 _f3;
 float _f4;
} ;

struct _GLF_struct_29 {
 vec3 _f0;
 _GLF_struct_25 _f1;
 uint workgroup_base;
 _GLF_struct_26 _f2;
 bvec3 _f3;
 uint _f4;
 uvec4 _f5;
 _GLF_struct_28 _f6;
} ;

struct _GLF_struct_20 {
 vec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_19 {
 mat3x4 _f0;
 uint workgroup_size;
 mat2x4 _f1;
 mat3 _f2;
 mat4x3 _f3;
 ivec3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 _GLF_struct_20 _f1;
 bvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_17 {
 vec3 _f0;
 vec3 _f1;
 uvec4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_18 {
 mat2 _f0;
 _GLF_struct_17 _f1;
 float _f2;
 mat4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 bool _f1;
 ivec2 _f2;
 bvec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
 bvec3 _f1;
 vec2 _f2;
 bool _f3;
 mat3x2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 uvec4 _f4;
 mat4x2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
} ;

struct _GLF_struct_22 {
 int _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_18 _f2;
 vec4 _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_9 {
 bool _f0;
 bvec2 _f1;
 bvec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 uvec4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 vec4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 int _f1;
 mat3x4 _f2;
 bvec4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 uvec2 _f1;
 _GLF_struct_7 _f2;
 mat4 _f3;
 mat4x2 _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 bvec2 _f1;
 int _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 _GLF_struct_5 _f1;
 uint subgroup_local_id;
 uvec2 _f2;
 ivec4 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 bool _f1;
 float _f2;
 ivec4 _f3;
 vec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_0 {
 int _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 uvec2 _f2;
 uint subgroup_size;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 mat4x3 _f1;
 vec3 _f2;
 bool _f3;
 _GLF_struct_2 _f4;
 ivec4 _f5;
 ivec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid;
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x = subgroup_id;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(bvec4(true), mat4x3(1.0), vec3(1.0), true, _GLF_struct_2(_GLF_struct_0(1, bvec3(true)), _GLF_struct_1(mat2(1.0), true, 1.0, ivec4(1), vec2(1.0), bvec2(true)), uvec2(1u), gl_SubgroupSize), ivec4(1), ivec2(1));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-71377))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.z = _GLF_struct_replacement_3._f4.subgroup_size;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec4(1.0), _GLF_struct_5(_GLF_struct_4(mat3x4(1.0), bvec2(true), 1, mat2x4(1.0))), gl_SubgroupInvocationID, uvec2(1u), ivec4(1), _GLF_struct_10(_GLF_struct_6(vec2(1.0), 1, mat3x4(1.0), bvec4(true), bvec3(true)), uvec2(1u), _GLF_struct_7(bvec4(true), vec4(1.0), mat4x2(1.0)), mat4(1.0), mat4x2(1.0), _GLF_struct_8(ivec3(1), uvec4(1u), uvec4(1u)), _GLF_struct_9(true, bvec2(true), bvec3(true), mat2(1.0))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 1)); _injected_loop_counter ++)
    {
     GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y = _GLF_struct_replacement_11.subgroup_local_id;
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(1, _GLF_struct_16(_GLF_struct_12(ivec3(1)), _GLF_struct_13(uvec3(1u), mat4x3(1.0), bvec4(true), uvec3(1u), uvec4(1u), mat4x2(1.0), vec4(1.0)), _GLF_struct_14(mat4x2(1.0), bvec3(true), vec2(1.0), true, mat3x2(1.0), ivec4(1)), _GLF_struct_15(mat3x4(1.0), true, ivec2(1), bvec4(true), vec4(1.0))), _GLF_struct_18(mat2(1.0), _GLF_struct_17(vec3(1.0), vec3(1.0), uvec4(1u), bvec3(true)), 1.0, mat4(1.0), mat2x4(1.0)), vec4(1.0), _GLF_struct_21(_GLF_struct_19(mat3x4(1.0), gl_WorkGroupSize.x, mat2x4(1.0), mat3(1.0), mat4x3(1.0), ivec3(1), mat3(1.0)), _GLF_struct_20(vec3(1.0), mat3x2(1.0)), bvec2(true), vec3(1.0)));
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.w = workgroup_id;
  }
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(vec3(1.0), _GLF_struct_25(_GLF_struct_23(uvec3(1u), bvec4(true)), ivec4(1), _GLF_struct_24(bvec2(true), mat2(1.0), mat2x4(1.0), bvec2(true), mat2(1.0), mat3(1.0)), ivec4(1), 1.0), _GLF_struct_replacement_22._f4._f0.workgroup_size * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.w, _GLF_struct_26(ivec2(1), mat4x2(1.0)), bvec3(true), 1u, uvec4(1u), _GLF_struct_28(1.0, bvec3(true), mat2x4(1.0), 1, _GLF_struct_27(bvec3(true), ivec3(1), mat4x2(1.0))));
 uint virtual_gid = _GLF_struct_replacement_29.workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.z + GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y;
 do
  {
   GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z = virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_struct_replacement_29.workgroup_base + GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.z + ((GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.z);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read_1 = atomicLoad(buf[GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z], 4, 64, 0);
 do
  {
   GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.x = read_1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.y = read_2;
 if(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y + 1 < GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.z)
  {
   int i = 0;
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.x == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.y) + 1, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.x == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_12read_1read_2subgroup_sizeworkgroup_id.y) + 1, 4, 64, 4);
  }
}
