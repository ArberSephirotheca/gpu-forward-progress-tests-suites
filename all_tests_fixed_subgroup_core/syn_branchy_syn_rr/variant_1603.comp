#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), false || (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, false))))), false || (bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x, 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), (false ? _GLF_FUZZED(8600.4113) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), min((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), float(mat2x4((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(71863) : _injected_loop_counter --)))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id;
 uvec4 GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id;
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy = GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(64007)))), int(int(min(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(64007))))))))); _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z = subgroup_id;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), ! (! (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))) || false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec3(false, true, true)))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (true)), false || (_GLF_IDENTITY(true, (true) || false))), true, true)))) || false)))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, ~ (~ (1))), min(1 & _GLF_IDENTITY(1, ~ (~ (1))), 1 & _GLF_IDENTITY(1, ~ (~ (1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, true)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))))))) && true), bool(bvec4(false, true, true, true)))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.w = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.x = num_workgroup;
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / 1u), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x) / 1u))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), 1u, 0u, 0u))))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy.y = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec4(bool(bvec3(false, false, false)), true, true, false))))))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (false)))))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false)), false, true, true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, length(0.0) + (1.0))))) || (_GLF_IDENTITY(false, false || (false))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.8)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))), ~ (~ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))), ~ (~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.y = GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.y, max(workgroup_size * _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id)).xy.y, _GLF_IDENTITY(workgroup_size * GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.y, (_GLF_IDENTITY(workgroup_size * GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.y, 0u ^ (workgroup_size * GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.y))) - 0u)));
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.6)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0), transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)))))), _GLF_ONE(1.0, injectionSwitch.y))))).x))), bool(true))) > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
  }
 else
  {
  }
 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy.x = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy.x + GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z * subgroup_size + _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.w, (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.w) | (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.w));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ~ (~ ((0 >> _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) - log(1.0)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x = _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1], (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1]) * 1u))).x;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy, (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.xy) - uvec2(0u, 0u)).x + GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.z * subgroup_size + (_GLF_IDENTITY((GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.w + 1) % subgroup_size, ((GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.w + 1) % subgroup_size) + 0u));
 GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.z = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter != 0), (_GLF_IDENTITY(! (_injected_loop_counter != 0), (_GLF_IDENTITY(! (_injected_loop_counter != 0), true && (! (_injected_loop_counter != 0)))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_injected_loop_counter != 0), true, false)), (_GLF_IDENTITY(bool(bvec3(! (_injected_loop_counter != 0), true, false)), (bool(bvec3(! (_injected_loop_counter != 0), true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (! (_GLF_IDENTITY(! (_injected_loop_counter != 0), _GLF_IDENTITY(bool(bvec3(! (_injected_loop_counter != 0), true, false)), (_GLF_IDENTITY(bool(bvec3(! (_injected_loop_counter != 0), true, false)), (bool(bvec3(! (_injected_loop_counter != 0), true, _GLF_IDENTITY(false, ! (! (false)))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bool(bvec3(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), false, false)))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.5)), float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x), bool(true))) > injectionSwitch.y)), true)))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-1.6, 6.3).t)), vec2(_GLF_FUZZED(3.4), _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0) : _GLF_FUZZED(-7.5)))), bvec2(false, true))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(_GLF_IDENTITY(-1.6, mix(float(_GLF_FUZZED(-3167.7338)), float(-1.6), bool(true))), 6.3).t)), vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), bvec2(false, true))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(_GLF_IDENTITY(-1.6, mix(float(_GLF_FUZZED(-3167.7338)), float(-1.6), bool(true))), 6.3).t)), vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), bvec2(false, true))).y))))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-1.6, 6.3).t)), vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), bvec2(false, true))).y))) || false))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec4(bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false, true, false)))))))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(buf[GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.z], uint(1), 4, 64, 4);
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))
      barrier();
     barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.4) : injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x, _GLF_IDENTITY((GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x) << 0u, clamp((GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x) << 0u, (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x) << 0u, (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x) << 0u)))], uint(uvec4(buf[_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id) | (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id)).xy.x) << 0u, min((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id) | (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id)).xy.x) << 0u, (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id) | (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id)).xy.x) << 0u)))], 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), _GLF_IDENTITY(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (true ? uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u) : _GLF_FUZZED(uvec3(184044u, 14699u, 111703u))))))), max(uint(_GLF_IDENTITY(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), _GLF_IDENTITY(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (true ? uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u) : _GLF_FUZZED(uvec3(184044u, 14699u, 111703u))))))), uint(_GLF_IDENTITY(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), min(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), _GLF_IDENTITY(uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (true ? uvec3(uint(1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u) : _GLF_FUZZED(uvec3(184044u, 14699u, 111703u)))))))))), uint(1u))), _GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) << 0u)))) | 0u)))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint((((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u)))), (uint(uint((((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (uint(1u)) * 1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u))))) | (uint(uint((((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u)))))), (_GLF_IDENTITY(uint(uint((((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u)))), (uint(uint((((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (uint(1u)) * 1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u))))) | (uint(uint((((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u ^ 0u))))))) | 0u))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | (4)), 4, 4)), 64, 0);
 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z = _GLF_IDENTITY(read_1, 0u + (read_1));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).y : _GLF_FUZZED(determinant(mat2(5176.3893, 7.9, 7472.2104, -1.1)))))) - 0.0)), (bool(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(102.573)))), float(_GLF_FUZZED(3.5)), bool(false))), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(determinant(mat2(5176.3893, 7.9, 7472.2104, -1.1)))))) - 0.0))) || false), false || _GLF_IDENTITY((bool(injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3((bool(injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3((bool(injectionSwitch.x > injectionSwitch.y)), true, true), true))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(determinant(mat2(5176.3893, 7.9, 7472.2104, -1.1)))))) - 0.0)), (bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.1, -2708.6243)) : injectionSwitch)), injectionSwitch)))).y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(determinant(mat2(5176.3893, 7.9, 7472.2104, -1.1)))))) - 0.0))) || false), false || _GLF_IDENTITY((bool(injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3((bool(injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3((bool(injectionSwitch.x > injectionSwitch.y)), true, true), true)))))))) || false)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5592.3957)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-67.15)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(true)))))) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x, min(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(subgroup_id) : ~ (0u))), _GLF_IDENTITY(~ (0u), (~ (0u)) << 0u))))) | (GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x)), _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x, (true ? GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.xy.x : _GLF_FUZZED(workgroup_size)))))], 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(93124, max(93124, 93124)))))) | (0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 & 71304); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.w = _GLF_IDENTITY(read_2, clamp(read_2, read_2, _GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) | (read_2)), max(_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, 0u ^ (read_2))) | _GLF_IDENTITY((read_2), ~ (~ (_GLF_IDENTITY((read_2), (true ? (read_2) : _GLF_FUZZED(next_virtual_gid))))))), _GLF_IDENTITY(read_2, (read_2) | (read_2))))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))) + (1 << _GLF_IDENTITY(int(5), int(5))))), (int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, 7))), int(7))) + (1 << _GLF_IDENTITY(int(5), int(5)))))) >> 0)), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) + 0)))) + (1 << _GLF_IDENTITY(int(5), int(5))))), (int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) * (7))))) * 1)) + (1 << _GLF_IDENTITY(int(5), int(5)))))) >> 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(ivec3(_GLF_IDENTITY(int(5), 0 | (int(5))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1))))))) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y = GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.w;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-52.41), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.1)), bvec2(true, false))).x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, max(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id)).w + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     int i = 0;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u))) + (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))), (true ? _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)) + _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))), max((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))), (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))), max((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))), (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id)))))))) | ((_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id))))) : _GLF_FUZZED(uvec4(_GLF_IDENTITY(115490u, _GLF_IDENTITY(clamp(115490u, 115490u, 115490u), ~ (~ (clamp(115490u, 115490u, 115490u))))), 153990u, _GLF_IDENTITY(81892u, min(81892u, 81892u)), 88298u))))).z], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, (false ? _GLF_FUZZED(next_virtual_gid) : GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, max(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y)))), (false ? _GLF_FUZZED(next_virtual_gid) : GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y))))), (true ? uint(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, (false ? _GLF_FUZZED(next_virtual_gid) : GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, max(GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y)))), (false ? _GLF_FUZZED(next_virtual_gid) : GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y))))) : _GLF_FUZZED((workgroup_id - read_1)))) + 1, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, clamp((64) / 1, (64) / 1, (64) / 1)))) / _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (1) | (1)), int(int(_GLF_IDENTITY(1, (1) | (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(int(_GLF_IDENTITY(1, (1) | (1)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(int(_GLF_IDENTITY(1, (1) | (1)))))))), 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = (0 & (-86261)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
          {
           atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.z, clamp(GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.z, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.z, GLF_merged3_0_2_48_2_1_16_3_1_17GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_local_id.z))], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y, (GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y) || false)), max(uint(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y), _GLF_IDENTITY(uint(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y), max(uint(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y), uint(GLF_merged3_0_2_51_2_1_6_3_1_6GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_idread_1read_2.z == GLF_merged3_0_1_13_1_1_6_2_1_11num_workgroupread_2subgroup_id.y))))) + 1, 4, 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) && true)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(33.16), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.2)), bvec2(true, false))))).y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))))) || false))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 & 302); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -52192)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1, _GLF_IDENTITY(0, max(0, 0)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(8), max(int(8), int(8))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(0, int(ivec2(0, 1)))) >> _GLF_IDENTITY(int(5), int(5))), 1, 0), clamp(ivec4(_GLF_IDENTITY(int(8), max(int(8), int(8))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(0, int(ivec2(0, 1)))) >> _GLF_IDENTITY(int(5), int(5))), 1, 0), ivec4(_GLF_IDENTITY(int(8), max(int(8), int(8))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(0, int(ivec2(0, 1)))) >> _GLF_IDENTITY(int(5), int(5))), 1, 0), ivec4(_GLF_IDENTITY(int(8), max(int(8), int(8))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(0, int(ivec2(0, 1)))) >> _GLF_IDENTITY(int(5), int(5))), 1, 0))))))), ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(_GLF_IDENTITY(int(8), max(int(8), int(8))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ~ (~ (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), 1, 0)))))) | ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(_GLF_IDENTITY(int(8), max(int(8), int(8))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1, 0)))))))))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(_GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), ! (_GLF_IDENTITY(! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), false || (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), float(_GLF_IDENTITY(mat4x2((1.0), 0.0, 1.0, 1.0, exp(0.0), exp(sin(0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0)))), 0.0), (true ? mat4x2((1.0), 0.0, 1.0, 1.0, exp(0.0), exp(sin(0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0)))), 0.0) : _GLF_FUZZED(mat4x2(6.1, -830.354, 5.8, 7.5, -71.15, -5.5, 899.650, -0.5)))))) - 0.0), 1.0)).x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) ^ 1)); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1719.2219)), bool(false))), injectionSwitch.y))) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))
                                  barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y, true)))))))), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))))).x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, tan(0.0), 1.0, 1.0)), clamp(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, tan(0.0), 1.0, 1.0)), _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, tan(0.0), 1.0, 1.0)), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, tan(0.0), 1.0, 1.0))) + vec2(0.0, 0.0)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, tan(0.0), 1.0, 1.0))))).x < injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true)))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) && true), (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true, true))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(injectionSwitch.x < injectionSwitch.y))))), false || (bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(injectionSwitch.x < injectionSwitch.y))))))))))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), (! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true))))) && true))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), 1.0), transpose(transpose(mat2(injectionSwitch, 0.0, 1.0)))))).x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, length(length(vec4(0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, length(length(vec4(0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, length(length(vec4(0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, abs(0.0), 1.0), (true ? mat3x2(injectionSwitch, 0.0, 1.0, abs(0.0), 1.0) : _GLF_FUZZED(mat3x2(-298.791, 705.456, -94.61, -7.9, 0.0, 197.513)))))))), injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && true))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | _GLF_IDENTITY(1, 0 ^ (1)))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
                                barrier();
                              }
                             else
                              {
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))));
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)))) * mat2(1.0)).y))));
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(7717.8011))) > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               else
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true))))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))))) || false)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), bool(bvec3(((false)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))) && true)), (! (! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, false), bvec3(bvec3(bvec3((false), false, false))))))))) || false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true))))), (! (! (! (false)))) || false)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), ((false)) && true)), ! (_GLF_IDENTITY(! (! (! (false))), (_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true)) || false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true))))), (! (! (! (false)))) || false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true))))), true && (! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true))))))), (! (! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))), _GLF_IDENTITY((bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true, true && (_GLF_IDENTITY((bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true, bool(bvec2((bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), bool(bvec2(bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))) && true), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(false, (false) || false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(false, (false) || false))))), true))))))), (bool(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)))) && true))))) && true))))), (! (! (! (false)))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))))))) && true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.4)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true), true)))) || false)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) && true)))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  barrier();
}
