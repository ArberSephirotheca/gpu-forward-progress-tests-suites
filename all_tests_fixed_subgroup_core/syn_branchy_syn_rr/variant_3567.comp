#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), false, false), true)))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), false, false), true)))))), false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false, true, true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, uint(uvec3(workgroup_size, 0u, 0u))) * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.0)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true)))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-62.90))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-62.90))) > injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-62.90))) > injectionSwitch.y)), false, true, false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6.4)), bool(false))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6.4)), bool(false)))), bool(bvec3(_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6.4)), bool(false)))), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6.4)), bool(false))))))), true, true))))))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size, (true ? _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size)))), min((workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u)) | (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) + 0u))))), _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size)) / 1u, (_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) << 0u)) / 1u, (((workgroup_base + subgroup_id * subgroup_size)) / 1u) >> 0u)) << 0u))))) : _GLF_FUZZED(subgroup_local_id))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << 0u)) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(atomicOr(virtual_gid, num_workgroup)) : uint(_GLF_ZERO(0.0, injectionSwitch.x)))) + (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size)))))), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % subgroup_size)) / 1u)))), (0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) | (subgroup_local_id))) << 0u) + 1) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ _GLF_IDENTITY(((subgroup_local_id + 1)), max(((subgroup_local_id + 1)), ((subgroup_local_id + 1)))))) % subgroup_size)) / 1u))))) << 0u), (0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), ~ (~ ((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))))) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), ~ (~ ((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))))) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)) / 1u))))) / 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id)) * subgroup_size, max(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id)) * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id)) * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id + 1) % subgroup_size))) / 1u, (true ? (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id + 1) % subgroup_size))) / _GLF_IDENTITY(1u, min(1u, 1u)) : _GLF_FUZZED(packUnorm2x16(mix(injectionSwitch, vec2(44.09, -7889.2468), injectionSwitch)))))), (subgroup_local_id + 1) % subgroup_size))), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))) + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size)) - 0u)))) | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))))), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.1)), bool(false))))) + (subgroup_id)) * subgroup_size, max(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x)) + (subgroup_id)) * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0 + (_GLF_ZERO(0.0, injectionSwitch.x)), mix(float(0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_FUZZED((- (-8.9 / -742.351)))), bool(false))))) + (subgroup_id)) * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id + 1) % subgroup_size))) / 1u), (subgroup_local_id + 1) % subgroup_size))), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) : _GLF_FUZZED(subgroup_size))) % subgroup_size)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) - 0u)))) | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))))) / 1u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id)) * subgroup_size) | 0u) + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, (0u) | (0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : _GLF_FUZZED(workgroup_base)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))) | (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / (0u ^ 1u)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))) << 0u) + 1)) ^ 0u))) % subgroup_size)))))), 0u | ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id)) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) << 0u), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size)))))))), _GLF_IDENTITY(0u, (0u) | (0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (1u) + 0u)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))))), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / (0u ^ 1u)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))) << 0u) + 1)) ^ 0u))) % subgroup_size, 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / (0u ^ 1u)), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))) << 0u) + 1)) ^ 0u))) % subgroup_size)))))))))) : _GLF_FUZZED(116672u))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), (uvec2(workgroup_base, 1u)) | (uvec2(workgroup_base, 1u))))))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u)))))), 1u * (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)))))))) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(bvec3((bool(false)), false, false)), bool(bvec4(bool(bvec3((bool(false)), false, false)), true, true, false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(bvec3((bool(false)), false, false)), bool(bvec4(bool(bvec3((bool(false)), false, false)), true, true, false))))))))), bool(bvec2(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(bvec3((bool(false)), false, false)), bool(bvec4(bool(bvec3((bool(false)), false, false)), true, true, false))))))))), true))))))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), false || ((! (_GLF_IDENTITY(false, ! (! (false))))))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))
        continue;
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), sqrt(0.0), 0.0, 1.0, length(0.0)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, false || (false))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, false || (false)))))) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, 0 + (64)), 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))), 64, 0);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(-73528), min(_GLF_FUZZED(-73528), _GLF_FUZZED(-73528))) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (1) | 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | 0)), 1 * ((_GLF_IDENTITY(1, (1) | 0))))) / 1)), 0 ^ (1))), max((false ? _GLF_IDENTITY(_GLF_FUZZED(-73528), min(_GLF_FUZZED(-73528), _GLF_FUZZED(-73528))) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (1) | 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, (_GLF_IDENTITY((1) | 0, ((1) | 0) - 0)) - 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))) / 1)), 0 ^ (1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-73528), min(_GLF_FUZZED(-73528), _GLF_FUZZED(-73528))) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (1) | 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))), (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0)))))) | 0), 1)), min(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))), (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0)))))) | 0), 1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))), (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), (1 * ((_GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(1 * ((_GLF_IDENTITY(1, (1) | 0))), max(1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0))))))), 1 * ((_GLF_IDENTITY(1, (1) | 0))), 1 * ((_GLF_IDENTITY(1, (1) | 0)))))) | 0), 1))))))) / 1)), 0 ^ (1)))))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), _GLF_IDENTITY(0u, (0u) - 0u), 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)) | (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u))), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)) | (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u))), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)), (clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)) | (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(next_virtual_gid) : next_virtual_gid)))))))), 0u, 1u))), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - 0u)) / 1u), next_virtual_gid)), next_virtual_gid)), 0u, 1u))) + uvec3(0u, 0u, 0u))) | (clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)) | (uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u))), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u), uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), 0u, 1u)))))))], uint(_GLF_IDENTITY(read_1, max(read_1, read_1)) == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, abs(1.0), 1.0, 1.0, 1.0))).y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), vec2(mat3((injectionSwitch), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, tan(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), clamp(_GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), (determinant(mat2(1.0, 0.0, 0.0, 1.0))) - 0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0))))))), 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0)), exp(0.0), 0.0, 0.0)))))))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) / 1u, uint(uvec3(_GLF_IDENTITY((next_virtual_gid) / 1u, max((next_virtual_gid) / 1u, _GLF_IDENTITY((next_virtual_gid) / 1u, uint(uvec2((next_virtual_gid) / 1u, 0u))))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(0u | (next_virtual_gid), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) / 1u))) | (next_virtual_gid), ~ (~ (0u | (next_virtual_gid))))) / 1u), (_GLF_IDENTITY(0u | (next_virtual_gid), (_GLF_IDENTITY(0u | (next_virtual_gid), _GLF_IDENTITY((0u | (next_virtual_gid)), _GLF_IDENTITY(((0u | (next_virtual_gid))) | (_GLF_IDENTITY((0u | (next_virtual_gid)), min((0u | (next_virtual_gid)), (0u | (next_virtual_gid))))), (((0u | (next_virtual_gid))) | (_GLF_IDENTITY((0u | (next_virtual_gid)), min((0u | (next_virtual_gid)), (0u | (next_virtual_gid)))))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << 0u)) + 0u))], uint(read_1 == read_2) + _GLF_IDENTITY(1, ~ (~ (1))), 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
}
