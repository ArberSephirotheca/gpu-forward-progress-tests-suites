#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 bvec2 _f0;
 mat3 _f1;
 vec4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 vec4 _f1;
 uvec3 _f2;
 _GLF_struct_16 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_13 {
 ivec3 _f0;
 vec4 _f1;
 mat2 _f2;
 mat3x2 _f3;
 vec3 _f4;
 bool _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
 bool _f1;
 uint _f2;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 mat3x4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 ivec3 _f1;
 bvec4 _f2;
 int _f3;
 mat3 _f4;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_6 {
 bool _f0;
} ;

struct _GLF_struct_18 {
 uint workgroup_id;
 _GLF_struct_6 _f0;
 mat2 _f1;
 _GLF_struct_12 _f2;
 mat3 _f3;
 _GLF_struct_14 _f4;
 mat3 _f5;
 _GLF_struct_17 _f6;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 bvec4 _f1;
 int _f2;
} ;

struct _GLF_struct_2 {
 int _f0;
 bool _f1;
 bvec3 _f2;
 uint num_workgroup;
 ivec3 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat2x4 _f1;
 mat3 _f2;
 uvec2 _f3;
 uvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 _GLF_struct_0 _f3;
 ivec3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(13.30), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-839.654)), bvec2(true, false))), injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), (true ? _GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 1.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(mat2(-6081.6690, 4.3, -9955.4801, -25.30))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), exp(0.0), _GLF_ONE(1.0, injectionSwitch.y)), mat2(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), exp(0.0), _GLF_ONE(1.0, injectionSwitch.y))))))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(ivec2(1), ivec2(1), mat4x2(1.0), _GLF_struct_0(mat3x4(1.0), mat2x4(1.0), mat3(1.0), uvec2(1u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), max(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))), clamp(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))) : uvec4(1u, 1u, 1u, 0u))), max(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), max(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))), clamp(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))) : uvec4(1u, 1u, 1u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), max(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))), clamp(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))) : uvec4(1u, 1u, 1u, 0u))), ~ (~ (_GLF_IDENTITY(uvec4(1u, 1u, 1u, 0u), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), max(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))), clamp(_GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)), _GLF_FUZZED(uvec4(187485u, 148665u, 159047u, 92790u)))) : uvec4(1u, 1u, 1u, 0u))))))))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u)), uvec3(1u, 1u, 1u) * (uvec3(1u)))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u)))), 1.0), ivec3(1), mat3x2(1.0)), _GLF_struct_4(_GLF_struct_2(1, true, bvec3(true), gl_NumWorkGroups.x, ivec3(1)), _GLF_struct_3(uvec3(1u), bvec4(true), 1)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u)).x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))))) + (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)))))).x, (gl_WorkGroupSize.x) - 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), (false ? _GLF_FUZZED(140413u) : _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) | ((gl_WorkGroupSize.x))))), _GLF_IDENTITY((gl_WorkGroupSize.x), ~ (~ ((gl_WorkGroupSize.x))))))) ^ 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) - 0u), (true ? _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) - 0u) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))))) + (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)))))).x, (gl_WorkGroupSize.x) - 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))))) + (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)))))).x, (gl_WorkGroupSize.x) - 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))))) + (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)))))).x, (gl_WorkGroupSize.x) - 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(gl_WorkGroupID.x, _GLF_struct_6(true), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), (mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0)))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_struct_12(_GLF_struct_7(bvec4(true), ivec3(1)), _GLF_struct_8(vec2(1.0), ivec3(_GLF_IDENTITY(1, (1) << 0)), bvec4(true), 1, mat3(1.0)), _GLF_struct_9(bvec4(true), mat3x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.3)), float(1.0), bool(true)))), ivec2(1)), _GLF_struct_10(mat4x2(1.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / round(length(normalize(1.0)))))), _GLF_struct_11(mat4x3(1.0), mat2x3(1.0))), mat3(1.0), _GLF_struct_14(_GLF_struct_13(ivec3(1), vec4(1.0), mat2(1.0), mat3x2(1.0), vec3(1.0), true, bvec4(true)), true, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) | (_GLF_IDENTITY(1u, (1u) ^ 0u)))))), mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY((1.0) / 1.0, float(mat4x2(_GLF_IDENTITY((1.0) / 1.0, mix(float(_GLF_IDENTITY((1.0) / 1.0, 1.0 * ((1.0) / 1.0))), float(_GLF_FUZZED(float(true))), bool(false))), log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY((1.0) / 1.0, float(mat4x3(_GLF_IDENTITY((1.0) / 1.0, clamp((1.0) / 1.0, (1.0) / _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0))))), (1.0) / 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), ((_GLF_IDENTITY(_GLF_IDENTITY((1.0), mix(float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), float(_GLF_FUZZED(970.516)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) / 1.0, float(mat4x3(_GLF_IDENTITY((1.0) / 1.0, clamp((1.0) / 1.0, (1.0) / 1.0, (1.0) / 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))))) / 1.0) - 0.0), (1.0) / 1.0, (1.0) / 1.0)))), _GLF_struct_17(_GLF_struct_15(bvec4(true), mat4x2(1.0)), vec4(1.0), uvec3(1u), _GLF_struct_16(bvec2(true), mat3(1.0), vec4(1.0), vec3(1.0)), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(true, ! (! (true)))), bool(bvec4(false || (_GLF_IDENTITY(true, ! (! (true)))), false, false, true)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_18.workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, ! (! (true))) && ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), false, true, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))), bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false)))))))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-60784) : ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))))))))) % subgroup_size), min(max((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1))) % subgroup_size), _GLF_IDENTITY(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), max(max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ ((subgroup_local_id + 1) % subgroup_size))), (subgroup_local_id + 1) % subgroup_size)), (subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), 1u * (max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(4651.5607)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(0.0, max(0.0, 0.0))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ((false)) && true))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), clamp((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), 0 | ((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0))))) ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)))))))), (true ? ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ _GLF_IDENTITY((64), ((64)) >> 0), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), clamp((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)), 0 | ((_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0))))) ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), ((_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))) ^ 0)))))))) : _GLF_FUZZED(int(true))))), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))) || false)))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))) || false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY((max(injectionSwitch, injectionSwitch))[1], (_GLF_IDENTITY((max(injectionSwitch, injectionSwitch))[1], (false ? _GLF_IDENTITY(_GLF_FUZZED(1.9), clamp(_GLF_FUZZED(1.9), _GLF_IDENTITY(_GLF_FUZZED(1.9), mix(float(_GLF_FUZZED(-6.1)), float(_GLF_FUZZED(1.9)), bool(true))), _GLF_FUZZED(1.9))) : (max(injectionSwitch, injectionSwitch))[1]))) / abs(1.0))), vec2(_GLF_FUZZED(-43.18), _GLF_FUZZED(56.15)), bvec2(false, false)))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, tan(0.0), exp(sqrt(0.0)), 0.0, 1.0)), (vec2(mat3x4(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, tan(0.0), exp(sqrt(0.0)), 0.0, 1.0))) + vec2(0.0, 0.0))).x, injectionSwitch.x)))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) : injectionSwitch)[1]), vec2(_GLF_FUZZED(8910.8123), _GLF_FUZZED(-5435.1013)), bvec2(false, false))))).x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, 0.0, 0.0))), injectionSwitch.x)))) > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (true ? min(injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(sinh(17.40))))))) > injectionSwitch.y)), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (true ? min(injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(sinh(17.40))))))) > injectionSwitch.y)), ! (! ((! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (true ? min(injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(sinh(17.40))))))) > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true))))), clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true))))), clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true)), max(mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true)), mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true)))), mix(float(_GLF_FUZZED(-77.38)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true))))))), clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, length(0.0) + (injectionSwitch.x)), clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y))))))))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0))) + 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0))) + 0.0), float(mat4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0))) + 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), float(mat2x4((injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), float(mat3x2((injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0))) + 0.0))))))) > injectionSwitch.y)))))) || false))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false, false, false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.7)), bool(false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0))))), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false || (bool(_GLF_DEAD(false))), bool(bvec4(false || (bool(_GLF_DEAD(false))), true, true, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   int i = 0;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 == read_2, (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : read_1))) >> (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u | (uint(4u)))))) == read_2)))), bool(bool((_GLF_IDENTITY(! (read_1 == read_2), true && (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2))))))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == _GLF_IDENTITY(read_2, (read_2) | (read_2)))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (read_1 == read_2))), true && (! (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))))))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), _GLF_IDENTITY(bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true))), (! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)))) || false)))), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == _GLF_IDENTITY(read_2, clamp(read_2, _GLF_IDENTITY(read_2, (read_2) * 1u), read_2))), true && (! (read_1 == read_2))), false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), ! (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2))))))), true && (! (read_1 == read_2))), false))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), ! (! (_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), bool(bool(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))))))))))))))))))), false, false))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : read_1))) >> (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u | (uint(4u)))))) == read_2)))), bool(bool((_GLF_IDENTITY(! (read_1 == read_2), true && (_GLF_IDENTITY(! (read_1 == read_2), ! (_GLF_IDENTITY(! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2)))), false || (_GLF_IDENTITY(! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2)))), false || (! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2))))))))))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == _GLF_IDENTITY(read_2, (read_2) | (read_2)))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (read_1 == read_2))), true && (! (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))))))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), _GLF_IDENTITY(bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true))), (! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)))) || false)))), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == _GLF_IDENTITY(read_2, clamp(read_2, _GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((read_2), ~ (~ ((read_2)))))) * 1u), read_2))), true && (! (read_1 == read_2))), false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))), true && (! (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2))))))))), true && (! (read_1 == read_2))), false))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))), true)))) && true))))), ! (! (_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), bool(bool(_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), ! (_GLF_IDENTITY(! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false)))))))), bool(bvec3(_GLF_IDENTITY(! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false)))))))), false || (! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false)))))))))), true, true))))))))))))))))))))), false, false)))))))) || false))) && true)) + 1, 0u ^ (uint(_GLF_IDENTITY(read_1 == read_2, (_GLF_IDENTITY(read_1 == read_2, _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : read_1))) >> (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u | (uint(4u)))))) == read_2)))), bool(bool((_GLF_IDENTITY(! (read_1 == read_2), true && (_GLF_IDENTITY(! (read_1 == read_2), ! (! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2))))))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == _GLF_IDENTITY(read_2, (read_2) | (read_2)))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (read_1 == read_2))), true && (! (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))))))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), _GLF_IDENTITY(bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true))), (! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)))) || false)))), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == _GLF_IDENTITY(read_2, clamp(read_2, _GLF_IDENTITY(read_2, (read_2) * 1u), read_2))), true && (! (read_1 == read_2))), false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), ! (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2))))))), true && (! (read_1 == read_2))), false))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), ! (! (_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), bool(bool(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))))))))))))))))))), false, false))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : read_1))) >> (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u | (uint(4u)))))) == read_2)))), bool(bool((_GLF_IDENTITY(! (read_1 == read_2), true && (_GLF_IDENTITY(! (read_1 == read_2), ! (_GLF_IDENTITY(! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2)))), false || (_GLF_IDENTITY(! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2)))), false || (! (! (read_1 == _GLF_IDENTITY(read_2, max(read_2, read_2))))))))))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == _GLF_IDENTITY(read_2, (read_2) | (read_2)))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (read_1 == read_2))), true && (! (_GLF_IDENTITY(read_1 == read_2, true && (read_1 == read_2)))))))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), _GLF_IDENTITY(bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true))), (! (bool(bvec3((read_1 == _GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, uint(uvec4(read_2, 0u, 0u, 1u))), read_2))), true, true)))) || false)))), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == _GLF_IDENTITY(read_2, clamp(read_2, _GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((read_2), ~ (~ ((read_2)))))) * 1u), read_2))), true && (! (read_1 == read_2))), false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2)))))), true && (! (_GLF_IDENTITY(! (! (read_1 == read_2)), ! (! (! (! (read_1 == read_2))))))))), true && (! (read_1 == read_2))), false))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))), true)))) && true))))), ! (! (_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), bool(bool(_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false))))))), ! (_GLF_IDENTITY(! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false)))))))), bool(bvec3(_GLF_IDENTITY(! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false)))))))), false || (! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), bool(bvec2(_GLF_IDENTITY(! (read_1 == read_2), true && (! (read_1 == read_2))), false)))))))))), true, true))))))))))))))))))))), false, false)))))))) || false))) && true)) + 1)), 4, _GLF_IDENTITY(64, (64) >> 0), _GLF_IDENTITY(4, int(ivec2(4, 0))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), cos(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, exp(0.0))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(5.7) : float(mat4x3(injectionSwitch.x, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), cos(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(exp(0.0), mix(float(_GLF_FUZZED((false ? _GLF_IDENTITY(-8.1, (true ? -8.1 : _GLF_FUZZED(round(-2.5)))) : 5.5))), float(exp(0.0)), bool(true))), float(mat2(exp(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)))))))))) > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), bool(_GLF_IDENTITY(bool(! (false || (false))), ! (! (_GLF_IDENTITY(bool(! (false || (false))), false || (bool(! (false || (false)))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (! (false || (false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 == read_2) + 1, (uint(read_1 == read_2) + 1) | _GLF_IDENTITY((uint(read_1 == read_2) + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((uint(read_1 == read_2) + 1), ((uint(read_1 == read_2) + 1)) + 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((uint(read_1 == read_2) + 1), _GLF_IDENTITY(((uint(read_1 == read_2) + 1)) + 0u, clamp(((uint(read_1 == read_2) + 1)) + 0u, ((uint(read_1 == read_2) + 1)) + 0u, ((uint(read_1 == read_2) + 1)) + 0u)))), 0u | (~ (_GLF_IDENTITY((uint(read_1 == read_2) + 1), ((uint(read_1 == read_2) + 1)) + 0u))))) | (~ (_GLF_IDENTITY((uint(read_1 == read_2) + 1), ((uint(read_1 == read_2) + 1)) + 0u))))))), 4, 64, _GLF_IDENTITY(4, (4) >> 0));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bool(bool(bvec4(false, false, false, true)))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bool(bool(bvec4(false, false, false, true)))))), (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))), false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
