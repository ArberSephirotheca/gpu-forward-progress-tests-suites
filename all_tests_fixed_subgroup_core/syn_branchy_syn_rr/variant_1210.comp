#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u), ~ (gl_NumWorkGroups.x)))));
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (1u & 1u) * (workgroup_size))) ^ (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (8u) >> 0u)), uint(8u))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))) >> 0u) + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 0);
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(1u * (read_1), (1u * (read_1)) - 0u)) == _GLF_IDENTITY(read_2, uint(uint(read_2)))) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
  }
}
