#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.1, -5729.4287)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))))), true && ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true)))), ! (! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))) && true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), true, true)))))), (bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), true, true))))))) || false))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(abs(0.0))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(float(-73262)), clamp(true ? injectionSwitch.y : _GLF_FUZZED(float(-73262)), true ? injectionSwitch.y : _GLF_FUZZED(float(-73262)), true ? injectionSwitch.y : _GLF_FUZZED(float(-73262))))))) + 0.0))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)))))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)))))))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true), true, true)))))))), true), false))))), false, true)))), false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false))))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3((false) && true, true, true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-549.012)), bool(false))), injectionSwitch.y)), ! (! (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(327.390), _GLF_FUZZED(4886.9393)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) + vec2(0.0, 0.0))) + abs(vec2(0.0, 0.0))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (false))))))))) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true)))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true)))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-14.00)), bvec2(true, _GLF_IDENTITY(false, ! (! (false)))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))) && true))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, ((! (false)) && true) && true))) && true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, _GLF_IDENTITY(((! (false)) && true) && true, ! (! (_GLF_IDENTITY(((! (false)) && true) && true, ! (! (_GLF_IDENTITY(((! (false)) && _GLF_IDENTITY(true, ! (! (true)))), false || (_GLF_IDENTITY(((! (false)) && _GLF_IDENTITY(true, ! (! (true)))), ! (! (((! (false)) && _GLF_IDENTITY(true, ! (! (true))))))))) && true))))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, true)), ! (! (bool(bvec4(true, false, false, true))))))))))))))), true, false, false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) && true), true, false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)), (bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false))) && true)))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))), false))) || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-587.237 / 4.5))), bool(false))) > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, max(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) * 1u) + 1, 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u)) - 0u)) + 0u))))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) + 0.0))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, uint(uvec3(next_virtual_gid, 0u, 0u))), next_virtual_gid))], uint(1), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << (0 ^ 0))) / 1), (4) | 0)))), 4)), 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(vec3(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), 0.0, 0.0))), injectionSwitch[1])).y)))), true && (bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), ! (! (bool(bvec3(_GLF_DEAD(false), true, false)))))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((0), int(ivec2(_GLF_IDENTITY((0), ((0)) | ((0))), 1))), ((0)) | 0))));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0)), min(vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0))))).x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.4) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))) || false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), (true ? _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), min(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) : _GLF_FUZZED(9930.3310)))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(77.66))), injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), float(_GLF_FUZZED(-9900.9458)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-2.5)))))) || false))))) || false), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(845.840))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(45.85)), bool(false)))), clamp(0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(45.85)), _GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(45.85)), bool(false)))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(45.85)), float(_GLF_IDENTITY(mat4x2(float(_GLF_FUZZED(45.85)), tan(0.0), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0), mat4x2(mat4x2(_GLF_IDENTITY(mat4x2(float(_GLF_FUZZED(45.85)), tan(0.0), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0), transpose(transpose(mat4x2(float(_GLF_FUZZED(45.85)), tan(0.0), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0))))))))), bool(false))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), max(_GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(mat3x2(tan(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(vec2(995.159, 195.601)) : vec2(mat3x2(tan(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(tan(vec2(0.0, 0.0)), clamp(tan(vec2(0.0, 0.0)), tan(vec2(0.0, 0.0)), tan(vec2(0.0, 0.0))))))).y))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   int i = 0;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(radians(-13.95)) : injectionSwitch[0])), injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))))), min(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))))) * mat2(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))))) * mat2(1.0)), (_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))))) * mat2(1.0))) * vec2(1.0, 1.0)), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))))) * mat2(1.0)))), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], 0.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), injectionSwitch[_GLF_IDENTITY(1, ~ (~ (1)))]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(mat3(vec2(injectionSwitch[0], injectionSwitch[1]), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(injectionSwitch[1], float(mat4x2(injectionSwitch[1], 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-2.9)), bool(false))), injectionSwitch[1], injectionSwitch[1]))))))), vec2(1.0, 1.0) * (max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (false ? _GLF_FUZZED(vec2(9.3, 7.3)) : vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))))))))))), injectionSwitch)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0))), (max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-5.6, 29.67)) : (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)))))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0))), (max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-5.6, 29.67), clamp(vec2(-5.6, 29.67), vec2(-5.6, 29.67), vec2(-5.6, 29.67)))) : (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0)))) * mat2(1.0)), min(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-5.6, 29.67), clamp(vec2(-5.6, 29.67), vec2(-5.6, 29.67), vec2(-5.6, 29.67)))) : (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0)))) * mat2(1.0)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-5.6, 29.67), clamp(vec2(-5.6, 29.67), vec2(-5.6, 29.67), vec2(-5.6, 29.67)))) : (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0)))) * mat2(1.0))) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-5.6, 29.67), clamp(vec2(-5.6, 29.67), vec2(-5.6, 29.67), vec2(-5.6, 29.67)))) : (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0)))) * mat2(1.0)))))))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(read_1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((1.6 + -8969.4976))), bool(false))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            return;
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(sign(8.8)) : injectionSwitch.y))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, tan(0.0), 0.0)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), bool(bvec2(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), _GLF_IDENTITY(uvec2(uvec2(uvec2(read_1, 1u))), min(uvec2(uvec2(uvec2(read_1, 1u))), uvec2(uvec2(uvec2(read_1, 1u))))))) << uvec2(0u, 0u))) + uvec2(0u, 0u))))) / uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) ^ 0u) ^ _GLF_IDENTITY(0u, (0u) - 0u)), 1u)))) == read_2), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) + uvec2(0u, 0u))))) / uvec2(_GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) - 0u)), 1u)))) == read_2), uint(uvec2(uint(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec2(read_1, 1u))), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) + uvec2(0u, 0u))))) / uvec2(_GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) - 0u)), 1u)))) == read_2), (1u ^ 0u)))))), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(read_1, read_1)), uint(_GLF_IDENTITY(uvec2(read_1, 1u), _GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), max(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), ((uvec2(read_1, 1u)) / uvec2(1u, 1u)) * uvec2(1u, 1u)), (_GLF_IDENTITY(uvec2(read_1, 1u), max(_GLF_IDENTITY(uvec2(read_1, 1u), ~ (~ (uvec2(read_1, 1u)))), uvec2(read_1, 1u)))) / _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(0u, 0u) | (uvec2(1u, 1u))), max(uvec2(1u, 1u), uvec2(1u, 1u)))))))) == read_2), uint(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, uint(uvec2(read_1, 1u))), _GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1u), ((1u)) - 0u)), ((~ _GLF_IDENTITY((1u), ((1u)) - 0u))) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, 1u), 1u, 1u))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, 1u)))) / uvec2(1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), _GLF_IDENTITY(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), max(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u))))))))) / (_GLF_IDENTITY((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), ((_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(0u, 0u) ^ (uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))))), min(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, 1u), 1u, 1u))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, 1u)))) / uvec2(1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), _GLF_IDENTITY(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), max(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u))))))))) / (_GLF_IDENTITY((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), ((_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(0u, 0u) ^ (uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, 1u), 1u, 1u))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, 1u)))) / uvec2(1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), _GLF_IDENTITY(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), max(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u))))))))) / (_GLF_IDENTITY((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), ((_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(0u, 0u) ^ (uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, 1u), 1u, 1u))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, 1u)))) / uvec2(1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), _GLF_IDENTITY(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), max(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u))))))))) / (_GLF_IDENTITY((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), ((_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(0u, 0u) ^ (uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) ^ uvec2(0u, 0u)), _GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, 1u), 1u, 1u))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, 1u)))) / uvec2(1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), _GLF_IDENTITY(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), max(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u))))))))) / (_GLF_IDENTITY((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), ((_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(0u, 0u) ^ (uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))))))), _GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, 1u), 1u, 1u))), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), uvec2(uvec4((uvec2(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))), 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, 1u)))) / uvec2(1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), _GLF_IDENTITY(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), max(uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u)), uvec2(uvec4((uvec2(read_1, 1u)) / uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, 1u))))))))) / (_GLF_IDENTITY((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), ((_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(0u, 0u) ^ (uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))))))) == read_2), uint(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) / _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(0u, 0u) ^ uvec2(0u, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) / uvec2(1u, 1u))) - uvec2(0u, 0u), max((_GLF_IDENTITY(uvec2(read_1, 1u), _GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), (_GLF_IDENTITY((uvec2(read_1, 1u)) / uvec2(1u, 1u), ((uvec2(read_1, 1u)) / uvec2(1u, 1u)) << uvec2(0u, 0u))) | (uvec2(0u, 0u) | uvec2(0u, 0u))))) - uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) / uvec2(1u, 1u))) - uvec2(0u, 0u)))))) == read_2))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) / _GLF_IDENTITY(1, (1) ^ 0)))), ~ (~ (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) | (4)))))) / 1)))))), 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec3((! (true)), true, false)), (bool(bvec3((! (true)), true, false))) || false))) || false)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ((false) && true) || false)) || false), bool(_GLF_IDENTITY(bvec3((false) && true, true, false), bvec3(bvec4(bvec3((false) && true, true, false), _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false), false, true, false)))), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)) || false), _GLF_IDENTITY(false, bool(bool(false))), true, false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(45.41)))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0))) > injectionSwitch.y))))
  return;
}
