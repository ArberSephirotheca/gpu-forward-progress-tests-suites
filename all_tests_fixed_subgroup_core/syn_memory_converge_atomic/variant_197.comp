#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_17 {
 ivec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
 uvec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_19 {
 uint virtual_gid;
 _GLF_struct_18 _f0;
} ;

struct _GLF_struct_14 {
 bvec2 _f0;
 vec2 _f1;
 uint _f2;
 ivec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 vec2 _f1;
 uvec2 _f2;
 int _f3;
 uvec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_12 {
 ivec2 _f0;
 bvec3 _f1;
 ivec4 _f2;
 ivec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 float _f2;
 uint workgroup_size;
 uvec2 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 float _f1;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 mat2x4 _f1;
 mat4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 uvec4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 mat2 _f1;
 mat2x4 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 vec4 _f1;
 uvec2 _f2;
 mat3x4 _f3;
 uvec3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_5 {
 bool _f0;
 _GLF_struct_3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 mat2 _f4;
 _GLF_struct_4 _f5;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size;
} ;

struct _GLF_struct_2 {
 bool _f0;
 ivec2 _f1;
 _GLF_struct_1 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_0 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_10 _f3;
 mat2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_8_2_1_11num_workgroupread_valsubgroup_id;
 _GLF_struct_11 _GLF_struct_replacement_11;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_13_1_1_8_2_1_11num_workgroupread_valsubgroup_id.z = subgroup_id;
 _GLF_struct_replacement_11._f1._f2.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x = GLF_merged3_0_1_13_1_1_8_2_1_11num_workgroupread_valsubgroup_id.z;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_replacement_11._f1._f2.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_replacement_11._f1._f2.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_8_2_1_11num_workgroupread_valsubgroup_id.x = num_workgroup;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_15(_GLF_struct_12(ivec2(1), bvec3(true), ivec4(1), ivec4(1), bvec2(true)), _GLF_struct_13(vec3(1.0), vec2(1.0), uvec2(1u), 1, uvec4(1u), bvec2(true)), 1.0, gl_WorkGroupSize.x, uvec2(1u), _GLF_struct_14(bvec2(true), vec2(1.0), 1u, ivec2(1), true)), 1.0);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_16._f0.workgroup_size * workgroup_id;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(workgroup_base + _GLF_struct_replacement_11._f1._f2.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x * _GLF_struct_replacement_11._f1._f2.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z + _GLF_struct_replacement_11._f1._f2.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y, _GLF_struct_18(_GLF_struct_17(ivec3(1), mat4(1.0)), uvec4(1u), bvec2(true)));
 atomicStore(write_val, uint(_GLF_struct_replacement_19.virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 GLF_merged3_0_1_13_1_1_8_2_1_11num_workgroupread_valsubgroup_id.y = read_val;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[_GLF_struct_replacement_19.virtual_gid] = uint(subgroupAllEqual(GLF_merged3_0_1_13_1_1_8_2_1_11num_workgroupread_valsubgroup_id.y));
}
