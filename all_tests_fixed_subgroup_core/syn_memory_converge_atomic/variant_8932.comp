#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           break;
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))))) > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-407.230, 899.259)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-407.230, 899.259))) - sqrt(vec2(0.0, 0.0))))))).x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0)), false || (_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true)), (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, false)), ! (_GLF_IDENTITY(! (bool(bvec3((false), false, false))), bool(bvec2(! (bool(bvec3((false), false, false))), false))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) && true)))
    break;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y))))) || (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y))))) || (injectionSwitch.x > injectionSwitch.y))))))) || false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))) || false))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), (false ? _GLF_FUZZED(23233) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) / 1))))), max(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), (false ? _GLF_FUZZED(23233) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) / 1))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), (false ? _GLF_FUZZED(23233) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) / 1))))), (((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), (false ? _GLF_FUZZED(23233) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) / 1)))))) | (((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), (false ? _GLF_FUZZED(23233) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(3)), ((int(3))) / 1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))) : injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) || false)))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), false || (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false))))), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID))) - (uvec3(512u, 23925u, 135159u) & uvec3(0u, 0u, 0u))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_injected_loop_counter != (_GLF_IDENTITY(1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(ivec2(2, 0)))))), (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), log(1.0))), min(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.5)), bool(false))))) ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), vec2(0.0, 0.0) + (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))))), log(1.0))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), log(1.0)))))).y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true)))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_id, 1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458)), min(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458)), _GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458))))))))))))), (uint(uvec3(workgroup_id, 1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY((false ? _GLF_FUZZED(3.3) : _GLF_ONE(1.0, injectionSwitch.y)), (true ? (false ? _GLF_FUZZED(3.3) : _GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-294.882)))) : _GLF_FUZZED(2.3))), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458)))))))))))) << (0u | 0u)), (uint(uvec3(workgroup_id, _GLF_IDENTITY(1u, max(1u, 1u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) / 1u)), (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_id, 1u, uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458)))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0))), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), _GLF_IDENTITY((true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458))))), 0.0 + ((true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458)))))))))) : _GLF_FUZZED(-1.8)))))), (uint(uvec3(workgroup_id, 1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 1.0))), injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, _GLF_IDENTITY(sin(0.0) + (-7036.7458), max(sin(0.0) + (-7036.7458), sin(0.0) + (-7036.7458)))))))))))))) << (0u | 0u)), (uint(uvec3(workgroup_id, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) / 1u))) | (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_id, 1u, uint(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, 1.0, length(vec2(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, sin(0.0) + (_GLF_IDENTITY(-7036.7458, max(-7036.7458, -7036.7458))))))))))))), (uint(uvec3(workgroup_id, 1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(sin(_GLF_IDENTITY(-7036.7458, sin(0.0) + (-7036.7458)))))))))))) << (0u | 0u)), (uint(uvec3(workgroup_id, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) / 1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) || false))))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (true)))), true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) / 1), (false ? _GLF_FUZZED((_injected_loop_counter)) : _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) | ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))) / 1)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-41415 & (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_IDENTITY(_GLF_FUZZED(-99778), (_GLF_FUZZED(-99778)) << 0))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, abs(abs(1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), log(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, exp(0.0), 1.0)), mix(float(_GLF_FUZZED(-1439.9722)), float(float(mat4(injectionSwitch.x, abs(abs(1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), log(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, exp(0.0), 1.0))), bool(true)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(301.937)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, abs(abs(1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), log(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, exp(0.0), 1.0)), mix(float(_GLF_FUZZED(-1439.9722)), float(float(mat4(injectionSwitch.x, abs(abs(1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), log(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, exp(0.0), 1.0))), bool(true)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(301.937)))), true))))) && true)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) || false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(vec2(-1.2, -889.337), injectionSwitch, 9.9)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), clamp(ivec3(1, 0, 1), ivec3(1, 0, 1), ivec3(1, 0, 1)))), max(int(_GLF_IDENTITY(ivec3(1, 0, 1), clamp(ivec3(1, 0, 1), ivec3(1, 0, 1), ivec3(1, 0, 1)))), int(_GLF_IDENTITY(ivec3(1, 0, 1), clamp(ivec3(1, 0, 1), ivec3(1, 0, 1), ivec3(1, 0, 1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) | 0))
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), false || (! (! (_GLF_IDENTITY(false, true && (false))))))))))))
              return;
             return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, false)))))), true, false))))))
            barrier();
           return;
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! (_GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! ((_GLF_DEAD(false)) || false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2((false), false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2((false), false), false, true)))))))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-82895)))))), max(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-82895)))))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-82895))))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-656.813)), bool(false))), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-706.801, 3.7, 6.4, 483.433))) : 1.0)), 0.0, 1.0)), 0.0))) < injectionSwitch.y)))), false || (_GLF_IDENTITY(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-656.813)), bool(false))), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-706.801, 3.7, 6.4, 483.433))) : 1.0)), 0.0, 1.0)), 0.0))) < injectionSwitch.y)))), ! (! (! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-656.813)), bool(false))), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-706.801, 3.7, 6.4, 483.433))) : 1.0)), 0.0, 1.0)), 0.0))) < injectionSwitch.y)))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-656.813)), bool(false))), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-706.801, 3.7, 6.4, 483.433))) : 1.0)), 0.0, 1.0)), 0.0))) < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-656.813)), bool(false))), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-706.801, 3.7, 6.4, 483.433))) : 1.0)), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0))) < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ -6442.5910))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-656.813)), bool(false))), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-706.801, 3.7, 6.4, 483.433))) : 1.0)), 0.0, 1.0)), 0.0))) < injectionSwitch.y))))), false, false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true, false), true, false)), true))), true))))), bool(bvec2(bool(bvec2(true, false)), true)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true, false), true, false)), true))), true))))), bool(bvec2(bool(bvec2(true, false)), true)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true, false), true, false)), true))), true))))), bool(bvec2(bool(bvec2(true, false)), true)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true, false), true, false)), true))), true))))), bool(bvec2(bool(bvec2(true, false)), true)))))))))), bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true, false), true, false)), true))), true))))), bool(bvec2(bool(bvec2(true, false)), true)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true, false), true, false)), true))), true))))), bool(bvec2(bool(bvec2(true, false)), true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((4.9 + -9513.7747))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, false || (true)), false, false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, false || (true)), false, false)))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, false || (true)), false, false))))), false || (false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, false || (true)), false, false))))))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec3(bvec3((false), true, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)), true)))))
          barrier();
         return;
        }
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6145.2836)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), abs(0.0), sqrt(1.0)), _GLF_IDENTITY((mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0), mat2(1.0) * (_GLF_IDENTITY((mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose((mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0))))))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(mat2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0))))))), transpose(transpose(mat2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0))))))))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, 1.0)), (float(vec2(0.0, 1.0))) / 1.0))), sqrt(1.0)), mat2(mat4x2(mat2(injectionSwitch, abs(0.0), sqrt(1.0))))), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.4) : 1.0)), 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), 1.0)))))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(963.354)), vec2(_GLF_FUZZED(-74.12), (injectionSwitch)[1]), bvec2(false, true))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), _GLF_IDENTITY((_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(-52.91, -4.0, 771.748, 2.5)) : (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.9)), bool(false)))))))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec2(mat3(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), (vec2(_GLF_IDENTITY(mat3(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(_GLF_IDENTITY(transpose(mat3(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), (true ? transpose(mat3(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))) : _GLF_FUZZED(mat3(991.998, 926.699, -786.662, -4.2, -2259.8158, 6594.7598, -7.3, -5.0, 955.537)))))))) - vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), max(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), mat2(mat4x2(mat2(injectionSwitch, abs(0.0), sqrt(1.0))))), _GLF_IDENTITY(mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))), (false ? _GLF_FUZZED(mat2(-419.196, -6.6, 7.2, 83.13)) : mat2(mat3x4(mat2(injectionSwitch, abs(0.0), sqrt(1.0)))))))) / mat2(1.0, 1.0, 1.0, 1.0)))))).x))) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(8548.4230))), _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0)))).x, float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0))))))).x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(2.8) : 1.0), clamp((false ? _GLF_FUZZED(2.8) : 1.0), (false ? _GLF_FUZZED(2.8) : 1.0), (false ? _GLF_FUZZED(2.8) : 1.0)))) : _GLF_FUZZED((+ 246.676))))), (mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.8) : 1.0)) : _GLF_FUZZED((+ 246.676)))))) / mat2(1.0, 1.0, 1.0, 1.0))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), _GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY(max(_GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), sqrt(1.0)), min(max(_GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), sqrt(1.0)), max(_GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), sqrt(1.0)))))), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), _GLF_IDENTITY(sqrt(1.0), length(vec3(0.0, 0.0, 0.0)) + (_GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(-7.5)), float(sqrt(1.0)), bool(true)))))), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), _GLF_IDENTITY(sqrt(1.0), length(vec3(0.0, 0.0, 0.0)) + (_GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(-7.5)), float(sqrt(1.0)), bool(true)))))), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0))))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (true ? _GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) + mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2(-2.0, -30.54, -3.9, -1.9))))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x))) - _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), clamp(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 1.0, sin(0.0), 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), clamp(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 0.0)), min(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 1.0, 1.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9443.0672)), float(0.0), bool(true))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))) * _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, _GLF_IDENTITY(0.0, (0.0) - 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x) * 1.0))), float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 1.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(-4.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 1.0, 1.0, 1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0)))))).x, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6484.5952, -2165.0301)))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))).x, 1.0, 1.0, 1.0)))))) - 0.0)), bool(true))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(mat2(99.32, -7.7, -68.06, 4.4)) : _GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec2(-1.7, -5651.2008).s)), float(1.0), bool(true)))), float(_GLF_FUZZED(float(91658))), bool(false))), 1.0)), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch, abs(0.0), sqrt(1.0)), (mat2(injectionSwitch, abs(0.0), sqrt(1.0))) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))))))))).x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         barrier();
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-102.162))), float(vec4(injectionSwitch.y, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - length(vec4(0.0, 0.0, 0.0, 0.0))))), dot(vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, determinant(mat3(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(175752u))), float(1.0), bool(true))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(52.86)), float(0.0), bool(true)))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) * mat2(1.0)))).y))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0))), sin(0.0), 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, sin(0.0), 0.0), transpose(transpose(mat4(_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2994.6367))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0))), sin(0.0), 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, sin(0.0), 0.0)))))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, determinant(mat3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_FUZZED(float(175752u))), float(1.0), bool(true))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) + 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(52.86)), min(float(_GLF_FUZZED(52.86)), float(_GLF_FUZZED(52.86)))), float(0.0), bool(true)))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), clamp(_GLF_IDENTITY(determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), (true ? determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(-6.4))), _GLF_IDENTITY(determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), (true ? determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(distance(30.62, 9.6)))), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))) * mat2(1.0)))).y))) || false) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.5))), abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))))) + (injectionSwitch)).y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     buf[virtual_gid] = uint(subgroupAllEqual(read_val));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - tan(0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && _GLF_IDENTITY(true, (true) && true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))) && true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7.6)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, sin(0.0), 0.0)), min(float(vec4(injectionSwitch.x, 0.0, sin(0.0), 0.0)), float(vec4(injectionSwitch.x, 0.0, sin(0.0), 0.0))))))))) > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(true)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) + 0.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0)), (false ? _GLF_FUZZED(0.3) : float(vec4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))))))) & int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y))) | _GLF_IDENTITY(0, (0) << 0))) >> 0))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
}
